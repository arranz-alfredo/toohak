{"version":3,"sources":["enums/ChallengeType.ts","enums/PictureType.ts","context/ProjectContext.tsx","theme/index.ts","components/common/MainHeader.tsx","hooks/useProjects.ts","utils/utilValidationTypes.ts","enums/Language.ts","components/Home/TestForm.tsx","enums/FillMethod.ts","components/common/DialogConfirm.tsx","components/Home/DialogTestOptions.tsx","components/Home/TestList.tsx","components/common/JsonLoader.tsx","components/Home/ProjectForm.tsx","components/Home/ProjectList.tsx","views/Home/index.tsx","utils/utilChallenges.tsx","enums/ComponentMode.ts","components/Designer/ChallengeThumbnail.tsx","components/Designer/ChallengeSelector.tsx","components/common/ChallengeQuestion.tsx","enums/MatchElement.ts","components/common/SelectableOption.tsx","components/common/DialogPictureSelector.tsx","components/common/PictureGrid.tsx","components/common/Countdown.tsx","assets/sounds/correct.wav","assets/sounds/incorrect.wav","components/SelectAnswerChallenge/SelectAnswerChallenger.tsx","components/SelectAnswerChallenge/SelectAnswerConfigurator.tsx","components/SelectAnswerChallenge/SelectAnswerChallengeDesigner.tsx","components/TrueOrFalseChallenge/TrueOrFalseChallenger.tsx","components/TrueOrFalseChallenge/TrueOrFalseConfigurator.tsx","components/TrueOrFalseChallenge/TrueOrFalseChallengeDesigner.tsx","components/common/DragableItem.tsx","components/ClassifyChallenge/DropGroup.tsx","components/ClassifyChallenge/ClassifyChallenger.tsx","components/ClassifyChallenge/ClassifyConfigurator.tsx","components/ClassifyChallenge/ClassifyChallengeDesigner.tsx","components/SortChallenge/SortChallenger.tsx","components/SortChallenge/SortConfigurator.tsx","components/SortChallenge/SortChallengeDesigner.tsx","components/FillTableChallenge/TableCell.tsx","components/FillTableChallenge/FillTableChallenger.tsx","components/FillTableChallenge/FillTableConfigurator.tsx","components/FillTableChallenge/FillTableChallengeDesigner.tsx","utils/utilStrings.ts","components/FillGapsChallenge/DropGap.tsx","components/FillGapsChallenge/FillGapsSentence.tsx","components/FillGapsChallenge/DialogFillGapsCandidates.tsx","components/FillGapsChallenge/FillGapsChallenger.tsx","components/FillGapsChallenge/FillGapsConfigurator.tsx","components/FillGapsChallenge/FillGapsChallengeDesigner.tsx","components/MatchChallenge/MatchSource.tsx","components/MatchChallenge/MatchDestination.tsx","components/MatchChallenge/MatchChallenger.tsx","components/MatchChallenge/MatchConfigurator.tsx","components/MatchChallenge/MatchChallengeDesigner.tsx","components/Designer/ChallengeDesigner.tsx","components/Designer/TestDesigner.tsx","views/Designer/index.tsx","components/Evaluator/ChallengeEvaluator.tsx","components/Evaluator/ChallengeLauncher.tsx","components/Evaluator/TestResult.tsx","views/Evaluator/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChallengeType","PictureType","ProjectContext","React","createContext","ProjectContextProvider","children","useState","projects","setProjects","Provider","value","colors","main","light","dark","mainContrast","contrast","errorContrast","theme","createMuiTheme","palette","primary","contrastText","secondary","background","default","paper","error","text","typography","fontSize","MainHeader","AppBar","position","Toolbar","to","style","color","textDecoration","fontWeight","LOCALSTORAGE_KEY","useProjects","useContext","saveProjects","useEffect","length","strProjects","localStorage","getItem","JSON","parse","newProjects","setItem","stringify","Language","isValidChallenge","challenge","errorMessage","id","type","push","configValidation","config","timeLimit","questionFontSize","SelectAnswer","customConfig","pictureCount","pictureLabel","multiselect","TrueOrFalse","FillGaps","Match","Sort","Classify","FillTable","Crossword","valid","isValidConfig","question","customChallenge","pictures","some","aPicture","None","answers","reduce","acc","current","anAnswer","sentences","hiddenExpressions","pairs","source","destination","items","groups","name","accRow","currentRow","rowIdx","accColumn","currentColumn","columnIdx","firstRowFixed","firstColumnFixed","isValidTest","test","challenges","FillMethod","TestForm","props","onAccept","onCancel","description","language","Es","initialState","formState","setFormState","inputName","useRef","inputDescription","Grid","container","direction","spacing","item","xs","TextField","inputRef","label","fullWidth","onInput","InputLabel","shrink","Select","labelId","toString","onChange","evt","updatedLanguage","target","En","MenuItem","justify","Button","variant","onClick","newTest","uuidv4","DialogConfirm","open","acceptButtonText","cancelButtonText","width","onConfirm","onRefuse","Dialog","maxWidth","DialogContent","Typography","DialogActions","autoFocus","useStyles","makeStyles","dialogContainer","padding","DialogTestOptions","ignoreTimeLimit","autoNext","checkIgnoreTimeLimit","checkAutoNextChallenge","classes","handleAttributeChange","attribute","DialogTitle","Box","className","FormControlLabel","control","Switch","checked","inline","display","listItemSecondaryAction","visibility","listItem","bottomContainer","marginTop","play","TestList","project","onCreateTest","onDeleteTest","history","useHistory","selectedTest","setSelectedTest","anchorElEdit","setAnchorElEdit","openTestForm","setOpenTestForm","openRemoveTestConfirm","setOpenRemoveTestConfirm","playOptionsState","setPlayOptionsState","Menu","anchorEl","keepMounted","Boolean","onClose","component","Link","undefined","tests","List","map","aTest","ListItem","button","alignItems","ListItemText","ListItemSecondaryAction","IconButton","title","projectId","testId","openOptions","Icon","stopPropagation","currentTarget","handleEditClick","Divider","testOptions","uploadInput","JsonLoader","onDataLoaded","onError","inputImport","ref","accept","multiple","event","files","file","reader","FileReader","readAsText","onloadend","e","newProject","result","err","htmlFor","ProjectForm","heading","pxToRem","secondaryHeading","gridContainer","gridItems","flexGrow","messageControl","backgroundColor","ProjectList","expandedProject","setExpandedProject","openProjectForm","setOpenProjectForm","openRemoveProjectConfirm","setOpenRemoveProjectConfirm","selectedProject","setSelectedProject","openMessage","setOpenMessage","messageText","setMessageText","handleCreateTest","theProject","find","aProject","updating","updatedProjects","updatedTests","handleDeleteTest","filter","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","SnackbarContent","message","isValidProject","Accordion","expanded","isExpanded","handleExpandChange","AccordionSummary","element","document","createElement","setAttribute","encodeURIComponent","replace","body","appendChild","click","removeChild","handleExportProjectClick","AccordionDetails","Home","ComponentMode","getChallengeTypeDescription","TheOddOne","getChallengeTypeIcon","size","getDefaultChallengeConfig","defaultChallengeConfig","answerFontSize","pairsCount","textFontSize","fillMethod","Writing","itemsFontSize","itemCount","groupCount","rowCount","columnCount","fullHeight","height","headerContainer","overflow","contentContainer","actionContainer","descriptionContainer","whiteSpace","textOverflow","tooltipRow","statusContainer","justifyContent","ChallengeThumbnail","selected","compact","onDelete","validation","setValidation","Card","elevation","CardActionArea","CardHeader","root","content","avatar","subheader","action","Tooltip","arrow","aMessage","messageIdx","CardContent","noWrap","CardActions","Chip","icon","overflowY","ChallengeSelector","compactList","onSelect","selectedChallenge","setSelectedChallenge","handleThumbnailClick","handleThumbnailDelete","aChallenge","idx","MatchElement","inputContainer","input","ChallengeQuestion","mode","questionText","setQuestionText","inputQuestion","inputProps","textAlign","lineHeight","InputProps","readOnly","Play","disableUnderline","placeholder","multiline","rowsMax","option","optionActionArea","optionInput","optionInnerInput","cursor","optionIcon","selector","SelectableOption","showResults","onTextChange","onValidChange","optionState","setOptionState","inputTextOption","radioOption","checkOption","borderStyle","borderWidth","borderColor","Design","startAdornment","InputAdornment","endAdornment","Checkbox","newState","Radio","ev","preventDefault","justifySelf","DialogPictureForm","picture","inputUrl","data","newPicture","Url","pic","maxHeight","PictureGrid","onPicturesChange","pictureDialogState","setPictureDialogState","pictureItemSize","setPictureItemSize","openDialog","selectedPicture","newPic","pictureIdx","selectedPictureIdx","border","src","alt","Fab","handleAddPictureClick","Countdown","time","stopTimer","onTimeUp","timeRemaining","setTimeRemaining","stop","setStop","timeoutId","setTimeout","clearTimeout","CircularProgress","Math","round","top","left","bottom","right","titleContainer","pictureContainer","answerContainer","paddingTop","optionContainer","centerAll","SelectAnswerChallenger","options","onChallengeChange","onSuccess","setStopTimer","selectedAnswers","setSelectedAnswers","highlightResults","setHighlightResults","useSound","correct","playCorrect","incorrect","playIncorrect","handleAnswerChange","updatedAnswer","updatedAnswers","handlerOptionClick","answerIdx","theIndex","findIndex","anAnswerIdx","showResult","success","newTitle","newPictures","disabled","indexOf","handleCheckClick","newText","SelectAnswerConfigurator","onConfigChange","formData","setFormData","inputTimeLimit","inputQuestionFontSize","inputPictureCount","checkPictureLabel","inputAnswerFontSize","checkMultiselect","handleConfigParameterChange","parameter","newConfig","min","parseInt","max","SelectAnswerChallengeDesigner","updatedChallenge","Array","from","slice","readjustPictures","validPresent","readjustValidAnswers","TrueOrFalseChallenger","answer","TrueOrFalseConfigurator","TrueOrFalseChallengeDesigner","borderRadius","DragableItem","iconButton","useDrag","collect","monitor","opacity","isDragging","drag","itemsContainer","DropGroup","validItems","onTitleChange","onItemsChange","droppedItems","onDrop","useDrop","drop","isOver","canDrop","groupState","setGroupState","inputTitle","inputItem","addValidItem","updatedItems","anItem","itemIdx","handleRemoveValidItem","onKeyPress","code","aDroppedItem","classifyContainer","optionsContainer","groupsContainer","reorderItems","list","sort","random","ClassifyChallenger","aGroup","groupName","initialClassifyState","classifyState","setClassifyState","draggableItems","setDragabbleItems","isDropped","itemName","DndProvider","backend","HTML5Backend","newName","groupIdx","updatedName","updatedGroups","handleNameChange","newItems","handleItemsChange","auxGroup","droppedItem","newDroppedItems","handleDrop","accGroups","currentGroup","correctItems","accItems","currentItem","theGroup","ClassifyConfigurator","inputItemsFontSize","inputGroupCount","ClassifyChallengeDesigner","newGroups","readjustGroups","SortChallenger","SortConfigurator","inputItemCount","SortChallengeDesigner","readjustItems","fixed","invalid","TableCell","cell","onCellChange","inputText","hidden","marginLeft","FillTableChallenger","aRow","aColumn","initialFillTableState","fillTableState","setFillTableState","newCell","auxRowIdx","auxColumnIdx","handleCellChange","FillTableConfigurator","inputRowCount","checkFirstRowFixed","inputColumnCount","checkFirstColumnFixed","FillTableChallengeDesigner","auxColumn","newRows","newColumns","readjustTable","splitSentence","split","joinSentence","textParts","join","checkEqual","stringA","stringB","checkCapitalLetters","checkAccentMarks","strA","strB","toLowerCase","DropGap","borderBottom","word","FillGapsSentence","sentence","onSentenceChange","onSentenceRemove","onAnswersChange","currentIdx","words","forEach","anExp","initPosition","hiddenIdx","wordCount","sentenceParts","parts","setParts","handlePartChange","partIdx","updatedParts","aPart","getPartStyle","validValues","aValidValue","aWord","wordIdx","anExpression","updatedHiddenExpressions","console","log","alternatives","completeArrayFrom","handleWordClick","droppedText","DialogFillGapsCandidates","candidates","inputCandidate","aCandidate","candidateIdx","edge","handleDeleteCandidate","minHeight","sentencesContainer","paddingLeft","aSentence","sentenceIdx","aHiddenExpression","hiddenExpressionIdx","sentenceText","hiddenExpression","FillGapsChallenger","inputSentence","initialFillGapsState","fillGapsState","setFillGapsState","openCandidatesDialog","setOpenCandidatesDialog","selectedExpression","setSelectedExpression","expressionInSentence","expression","newCandidates","updatedSentences","hiddenExpresionIdx","Dragging","sentencesAnswer","aSentenceAnswer","hiddenExpIdx","updatedSentence","handleSentenceChange","aFillGapsState","handleSentenceRemove","updatedState","handleSentenceAnswer","newSentence","addSentence","every","el","accSentences","currentSentence","correctExpressions","accExpressions","currentExpression","expressionIdx","hiddenAnswer","anAlternative","FillGapsConfigurator","inputTextFontSize","inputFillMethod","FormControl","FillGapsChallengeDesigner","MatchSource","arrowNode","textValue","setTextValue","MatchDestination","texts","MatchChallenger","aPair","sourceItems","setSourceItems","destinationItems","setDestinationItems","matchState","setMatchState","handleTextChange","pairIdx","pairAttribute","Source","newChallenge","aSource","sourceIdx","index","aDestination","destinationIdx","Destination","start","end","curveness","accPairs","currentPair","idxAnswer","MatchConfigurator","inputPairsCount","MatchChallengeDesigner","newPairs","readjustPairs","ChallengeDesigner","handleChallengeChange","listContainer","paddingRight","challengesContainer","overflowX","listStyle","boxShadow","webkitBoxShadow","outline","challengeSelector","TestDesigner","setTest","setCompactList","setAnchorEl","deletedChallenge","setDeletedChallenge","openRemoveChallengeConfirm","setOpenRemoveChallengeConfirm","handleNewChallengeOptionClick","defaultChallenge","getDefaultChallenge","handleCloseNewChallengeMenu","updatedChallenges","ToggleButtonGroup","exclusive","newListMode","ToggleButton","ListItemIcon","Designer","useParams","ChallengeEvaluator","handlerSucessChallenge","handlerErrorChallenge","ChallengeLauncher","challengeType","challengeNumber","challengeTotalCount","delay","onEnd","LinearProgress","timeline","transform","timelineContentContainer","timelineContent","timelineIcon","TestResult","results","onBackHome","onRepeatTest","aResult","Evaluator","qs","qsAux","aParam","paramParts","parseQueryString","location","search","launching","currentChallengeState","setCurrentChallengeState","setResults","setShowResult","theTest","next","handleResponse","mainContainer","flexDirection","margin","App","ThemeProvider","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a0914c35.chunk.js","sourcesContent":["export enum ChallengeType {\r\n    SelectAnswer = 'SA',\r\n    TrueOrFalse = 'TF',\r\n    FillGaps = 'FG',\r\n    Match = 'MT',\r\n    Sort = 'SO',\r\n    Classify = 'CL',\r\n    FillTable = 'FT',\r\n    TheOddOne = 'OO',\r\n    Crossword = 'CW'\r\n}","export enum PictureType {\r\n    None = 'NONE',\r\n    Url = 'URL',\r\n    Base64 = 'BASE64'\r\n}","import React, { useState } from 'react';\r\n\r\n/**\r\n * Contexto para almacenar los proyectos importados\r\n */\r\nexport const ProjectContext = React.createContext<any | React.Dispatch<any>>([]);\r\n\r\ntype Props = {\r\n    children: React.ReactNode\r\n}\r\n\r\n/** Proveedor del contexto de proyectos */\r\nexport const ProjectContextProvider = ({ children }: Props) => {\r\n    // Hook para mantener el estado del contexto\r\n    const [projects, setProjects] = useState<any | React.Dispatch<any>>([]);\r\n\r\n    return (\r\n        <ProjectContext.Provider value={{ projects, setProjects }}>\r\n            {children}\r\n        </ProjectContext.Provider>\r\n    );\r\n};\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nexport const colors = {\r\n    primary: {\r\n        main: '#2196f3',\r\n        light: '#6ec6ff',\r\n        dark: '#0069c0'\r\n    },\r\n    secondary: {\r\n        main: '#e91e63',\r\n        light: '#ff6090',\r\n        dark: '#b0003a'\r\n    },\r\n    error: '#f44336',\r\n    background: {\r\n        main: '#2196f3',\r\n        light: '#ffffff',\r\n        dark: '#0069c0'\r\n    },\r\n    font: {\r\n        main: '#000000',\r\n        mainContrast: \"#ffffff\",\r\n        light: '#000000',\r\n        dark: '#888888',\r\n        contrast: '#6ec6ff',\r\n        errorContrast: \"#ffffff\"\r\n    },\r\n    action: \"#4caf50\"\r\n};\r\n\r\nexport const fontSize = {\r\n    s: 10,\r\n    m: 12,\r\n    l: 16\r\n};\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: colors.primary.main,\r\n            contrastText: colors.font.mainContrast,\r\n            light: colors.primary.light\r\n        },\r\n        secondary: {\r\n            main: colors.secondary.main,\r\n            contrastText: colors.font.main,\r\n            light: colors.secondary.light\r\n        },\r\n        background: {\r\n            default: colors.background.main,\r\n            paper: colors.background.light\r\n        },\r\n        error: {\r\n            main: colors.error,\r\n        },\r\n        text: {\r\n            primary: colors.font.main,\r\n            secondary: colors.font.dark\r\n        }\r\n    },\r\n    typography: {\r\n        fontSize: fontSize.m,\r\n    }\r\n});","import React from 'react';\r\nimport { AppBar, Toolbar } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const MainHeader: React.FC = () => (\r\n    <AppBar position='static'>\r\n        <Toolbar>\r\n            <Link to=\"/\" style={{color: '#ffffff', textDecoration: 'none', fontWeight: 'bold'}}>!toohaK</Link>\r\n        </Toolbar>\r\n    </AppBar>\r\n);\r\n","import { useContext, useEffect } from 'react';\r\nimport { ProjectContext } from '../context/ProjectContext';\r\nimport { Project } from '../types/Project';\r\n\r\nconst LOCALSTORAGE_KEY = 'projects';\r\n\r\n/**\r\n * Hook para la gestión del mapa\r\n */\r\nexport const useProjects = (): any => {\r\n    // Contexto del mapa\r\n    const { projects, setProjects: saveProjects } = useContext(ProjectContext);\r\n\r\n    useEffect(() => {\r\n        if (projects == null || projects.length === 0) {\r\n            const strProjects = localStorage.getItem(LOCALSTORAGE_KEY);\r\n            if (strProjects != null && strProjects !== '') {\r\n                saveProjects(JSON.parse(strProjects));\r\n            } else {\r\n                saveProjects([]);\r\n            }\r\n        }\r\n    });\r\n\r\n    const setProjects = (newProjects: Project[]) => {\r\n        localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(newProjects));\r\n        saveProjects(newProjects);\r\n    };\r\n\r\n    return { projects, setProjects };\r\n};\r\n","import { ChallengeType } from '../enums/ChallengeType';\r\nimport { PictureType } from '../enums/PictureType';\r\nimport { Challenge, ChallengeConfig, ChallengePicture } from '../types/Challenge';\r\nimport { ClassifyChallenge, ClassifyChallengeGroup } from '../types/ClassifyChallenge';\r\nimport { FillGapsChallenge, FillGapsChallengeSentence } from '../types/FillGapsChallenge';\r\nimport { FillTableChallenge, FillTableChallengeCell } from '../types/FillTableChallenge';\r\nimport { MatchChallenge, MatchChallengePair } from '../types/MatchChallenge';\r\nimport { Project } from '../types/Project';\r\nimport { SelectAnswerChallenge, SelectAnswerChallengeAnswer, SelectAnswerChallengeConfig } from '../types/SelectAnswerChallenge';\r\nimport { SortChallenge } from '../types/SortChallenge';\r\nimport { Test } from '../types/Test';\r\n\r\nexport interface Validation {\r\n    valid: boolean,\r\n    errorMessage: string[]\r\n}\r\n\r\nexport const isValidConfig = (type: ChallengeType, config: ChallengeConfig): Validation => {\r\n    const errorMessage: string[] = [];\r\n\r\n    if (config?.timeLimit == null || config?.timeLimit <= 0) { errorMessage.push('El tiempo límite debe ser mayor de 0') ;}\r\n    if (config?.questionFontSize == null || config?.questionFontSize <= 0) { errorMessage.push('El tamaño de fuente del titulo debe ser mayor de 0'); }\r\n\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer: {\r\n            const customConfig = config as SelectAnswerChallengeConfig;\r\n            if (customConfig?.pictureCount == null || customConfig?.pictureCount <= 0) { errorMessage.push('El número de imágenes debe ser mayor de 0'); }\r\n            if (customConfig?.pictureLabel == null) { errorMessage.push('Error en indicador de etiquetado de imágenes'); }\r\n            if (customConfig?.multiselect == null) { errorMessage.push('Error en indicador de seleccion múltiple'); }\r\n            break;\r\n        }\r\n        case ChallengeType.TrueOrFalse:\r\n            break;\r\n        case ChallengeType.FillGaps:\r\n            break;\r\n        case ChallengeType.Match:\r\n            break;\r\n        case ChallengeType.Sort:\r\n            break;\r\n        case ChallengeType.Classify:\r\n            break;\r\n        case ChallengeType.FillTable:\r\n            break;\r\n        case ChallengeType.Crossword:\r\n            break;\r\n    }\r\n    return {\r\n        valid: errorMessage.length === 0,\r\n        errorMessage\r\n    };\r\n};\r\n\r\nexport const isValidChallenge = (challenge: Challenge): Validation => {\r\n    let errorMessage: string[] = [];\r\n\r\n    if (challenge?.id == null || challenge?.type == null) { errorMessage.push('Datos internos incorrectos'); }\r\n    const configValidation = isValidConfig(challenge?.type, challenge?.config);\r\n    if (!configValidation.valid) { errorMessage = [...errorMessage, ...configValidation.errorMessage]; }\r\n    if (challenge?.question == null || challenge?.question === '') { errorMessage.push('Se debe rellenar el enunciado / pregunta'); }\r\n\r\n    switch (challenge.type) {\r\n        case ChallengeType.SelectAnswer: {\r\n            const customChallenge = challenge as SelectAnswerChallenge;\r\n            if (customChallenge.config.pictureCount > 1\r\n                && customChallenge.pictures.some((aPicture: ChallengePicture) => aPicture.type === PictureType.None)\r\n            ) {\r\n                errorMessage.push('Hay imágenes vacías');\r\n            }\r\n            if(!customChallenge.answers.reduce(\r\n                (acc: boolean, current: SelectAnswerChallengeAnswer) => acc && current.text != null && current.text !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay alguna respuesta vacía');\r\n            }\r\n            if(!customChallenge.answers.some((anAnswer: SelectAnswerChallengeAnswer) => anAnswer.valid)) {\r\n                errorMessage.push('Debe marcarse al menos una respuesta como válida');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.TrueOrFalse:\r\n            break;\r\n        case ChallengeType.FillGaps:{\r\n            const customChallenge = challenge as FillGapsChallenge;\r\n            if(!customChallenge.sentences.reduce(\r\n                (acc: boolean, current: FillGapsChallengeSentence) => acc && current != null && current.text !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay elementos sin texto');\r\n            }\r\n            if (customChallenge.sentences.length === 0) {\r\n                errorMessage.push('Debe haber al menos una frase');\r\n            }\r\n            if(!customChallenge.sentences.reduce(\r\n                (acc: boolean, current: FillGapsChallengeSentence) => (\r\n                    acc\r\n                    && current != null\r\n                    && current.hiddenExpressions.length > 0\r\n                ),\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay frases sin palabras ocultas');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.Match: {\r\n            const customChallenge = challenge as MatchChallenge;\r\n            if(!customChallenge.pairs.reduce(\r\n                (acc: boolean, current: MatchChallengePair) => (\r\n                    acc\r\n                    && current.source != null && current.source !== ''\r\n                    && current.destination != null && current.destination !== ''\r\n                ),\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay elementos sin texto');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.Sort: {\r\n            const customChallenge = challenge as SortChallenge;\r\n            if(!customChallenge.items.reduce(\r\n                (acc: boolean, current: string) => acc && current != null && current !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay elementos sin texto');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.Classify: {\r\n            const customChallenge = challenge as ClassifyChallenge;\r\n            if(!customChallenge.groups.reduce(\r\n                (acc: boolean, current: ClassifyChallengeGroup) => acc && current.name != null && current.name !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Todos los grupos deben tener un título');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.FillTable: {\r\n            const customChallenge = challenge as FillTableChallenge;\r\n            if(!customChallenge.items.reduce(\r\n                (accRow: boolean, currentRow: FillTableChallengeCell[], rowIdx: number) => (\r\n                    accRow\r\n                    && currentRow.reduce(\r\n                        (accColumn: boolean, currentColumn: FillTableChallengeCell, columnIdx: number) => (\r\n                            accColumn\r\n                            && (\r\n                                (\r\n                                    customChallenge.config.firstRowFixed\r\n                                    && rowIdx === 0\r\n                                    && customChallenge.config.firstColumnFixed\r\n                                    && columnIdx === 0\r\n                                )\r\n                                || currentColumn.text !== ''\r\n                            )\r\n                        ),\r\n                        true\r\n                    )\r\n                ),\r\n                true\r\n            )) {\r\n                errorMessage.push('Todas las celdas deben estar rellenas');\r\n            }\r\n            break;\r\n            break;\r\n        }\r\n        case ChallengeType.Crossword:\r\n            break;\r\n    }\r\n    return {\r\n        valid: errorMessage.length === 0,\r\n        errorMessage\r\n    };\r\n};\r\n\r\nexport const isValidTest = (test: Test): boolean => {\r\n    return test != null\r\n        && test.id != null\r\n        && test.name != null\r\n        && test.challenges != null\r\n        && test.challenges.reduce(\r\n            (acc: boolean, current: Challenge) => acc && isValidChallenge(current).valid,\r\n            true\r\n        );\r\n};\r\n\r\nexport const isValidProject = (project: Project): boolean => {\r\n    return project != null\r\n        && project.id != null\r\n        && project.name != null\r\n        && project.tests != null\r\n        && project.tests.reduce(\r\n            (acc: boolean, current: Test) => acc && isValidTest(current),\r\n            true\r\n        );\r\n};","export enum Language {\r\n    Es = 'ES',\r\n    En = 'EN'\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport { Button, Grid, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Language } from '../../enums/Language';\r\nimport { Test } from '../../types/Test';\r\n\r\ninterface TestState {\r\n    name: string,\r\n    description: string,\r\n    language: Language\r\n}\r\n\r\nconst initialState = (test?: Test): TestState => {\r\n    if (test != null) {\r\n        return {\r\n            name: test.name,\r\n            description: test.description || '',\r\n            language: test.language || Language.Es\r\n        };\r\n    }\r\n    return {\r\n        name: '',\r\n        description: '',\r\n        language: Language.Es\r\n    };\r\n};\r\n\r\ninterface TestFormProps {\r\n    test?: Test,\r\n    onAccept: (newTest: Test) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const TestForm: React.FC<TestFormProps> = (props: TestFormProps) => {\r\n    const { test, onAccept, onCancel } = props;\r\n\r\n    const [formState, setFormState] = useState<TestState>(initialState(test));\r\n\r\n    const inputName = useRef({} as HTMLInputElement);\r\n    const inputDescription = useRef({} as HTMLInputElement);\r\n\r\n    const handleNameChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            name: inputName.current.value\r\n        });\r\n    };\r\n\r\n    const handleDescriptionChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            description: inputDescription.current.value\r\n        });\r\n    };\r\n\r\n    const handleLanguageChange = (evt: React.ChangeEvent<{ name?: string | undefined, value: unknown}>) => {\r\n        const updatedLanguage = evt.target.value === Language.Es.toString() ? Language.Es : Language.En;\r\n        setFormState({\r\n            ...formState,\r\n            language: updatedLanguage\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        const newTest: Test = test ?\r\n            {\r\n                ...test,\r\n                name: formState.name,\r\n                description: formState.description,\r\n                language: formState.language\r\n            }\r\n            : {\r\n                id: uuidv4(),\r\n                name: formState.name,\r\n                description: formState.description,\r\n                language: formState.language,\r\n                challenges: []\r\n            };\r\n\r\n        onAccept(newTest);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            direction='column'\r\n            spacing={4}\r\n        >\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputName}\r\n                    id='newTestNameInput'\r\n                    label='Nombre'\r\n                    fullWidth\r\n                    value={formState.name}\r\n                    onInput={handleNameChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputDescription}\r\n                    id='newTestNameInput'\r\n                    label='Descripción'\r\n                    fullWidth\r\n                    value={formState.description}\r\n                    onInput={handleDescriptionChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <InputLabel shrink id=\"label-language\">\r\n                    Idioma\r\n                </InputLabel>\r\n                <Select\r\n                    labelId=\"label-language\"\r\n                    id='newTestLanguageInput'\r\n                    label='Idioma'\r\n                    fullWidth\r\n                    value={formState.language.toString()}\r\n                    onChange={handleLanguageChange}\r\n                >\r\n                    <MenuItem value={Language.Es.toString()}>Español</MenuItem>\r\n                    <MenuItem value={Language.En.toString()}>Inglés</MenuItem>\r\n                </Select>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid container justify='flex-end' spacing={1}>\r\n                    <Grid item>\r\n                        <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","export enum FillMethod {\r\n    Writing = 'W',\r\n    Dragging = 'D'\r\n}","import React from 'react';\r\nimport { Button, Dialog, DialogActions, DialogContent, Grid, Typography } from '@material-ui/core';\r\n\r\ninterface DialogConfirmProps {\r\n    open: boolean,\r\n    text: string,\r\n    acceptButtonText?: string,\r\n    cancelButtonText?: string,\r\n    width?: 'xs' | 'sm' | 'md' | 'lg' | 'xl',\r\n    onConfirm: () => void,\r\n    onRefuse: () => void\r\n}\r\n\r\nexport const DialogConfirm: React.FC<DialogConfirmProps> = (props: DialogConfirmProps) => {\r\n    const {open, text, acceptButtonText, cancelButtonText, width, onConfirm, onRefuse} = props;\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth={ width ? width : 'sm' }\r\n        >\r\n            <DialogContent>\r\n                <Grid container justify='center'>\r\n                    <Grid item>\r\n                        <Typography variant='button'>{text}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button autoFocus onClick={onConfirm} color='primary' variant='contained'>\r\n                    { acceptButtonText ? acceptButtonText : 'Aceptar' }\r\n                </Button>\r\n                <Button onClick={onRefuse} color='primary'>\r\n                    { cancelButtonText ? cancelButtonText : 'Cancelar' }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { useRef, useState } from 'react';\r\nimport { Box, Button, Dialog, DialogTitle, FormControlLabel, Grid, makeStyles, Switch } from '@material-ui/core';\r\nimport { TestOptions } from '../../types/Test';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n}));\r\n\r\ninterface DialogTestOptionsProps {\r\n    open: boolean,\r\n    onAccept: (options: TestOptions) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const DialogTestOptions: React.FC<DialogTestOptionsProps> = (props: DialogTestOptionsProps) => {\r\n    const {open, onAccept, onCancel} = props;\r\n\r\n    const [formState, setFormState] = useState<TestOptions>({ ignoreTimeLimit: false, autoNext: true });\r\n\r\n    const checkIgnoreTimeLimit = useRef({} as HTMLInputElement);\r\n    const checkAutoNextChallenge = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleAttributeChange = (attribute: string, value: boolean) => {\r\n        setFormState({\r\n            ...formState,\r\n            [attribute]: value\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        onAccept(formState);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth='sm'\r\n        >\r\n            <DialogTitle>Opciones del cuestionario</DialogTitle>\r\n            <Box className={classes.dialogContainer}>\r\n                <Grid\r\n                    container\r\n                    direction='column'\r\n                    spacing={2}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    inputRef={checkIgnoreTimeLimit}\r\n                                    name='checkMultiselect'\r\n                                    checked={formState.ignoreTimeLimit}\r\n                                    color='secondary'\r\n                                    onChange={() => { handleAttributeChange('ignoreTimeLimit', checkIgnoreTimeLimit.current.checked); }}\r\n                                />\r\n                            }\r\n                            label='Desactivar tiempo límite de las preguntas'\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    inputRef={checkAutoNextChallenge}\r\n                                    name='checkMultiselect'\r\n                                    checked={formState.autoNext}\r\n                                    color='secondary'\r\n                                    onChange={() => { handleAttributeChange('autoNext', checkAutoNextChallenge.current.checked); }}\r\n                                />\r\n                            }\r\n                            label='Avanzar automáticamente a la siguiente pregunta'\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container justify='flex-end' spacing={1}>\r\n                            <Grid item>\r\n                                <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { Fragment, useState } from 'react';\r\nimport { Box, Button, Dialog, DialogTitle, Divider, Grid, Icon, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText, makeStyles, Menu, MenuItem, Typography } from '@material-ui/core';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Test, TestOptions } from '../../types/Test';\r\nimport { colors } from '../../theme';\r\nimport { Project } from '../../types/Project';\r\nimport { isValidTest } from '../../utils/utilValidationTypes';\r\nimport { TestForm } from './TestForm';\r\nimport { DialogConfirm } from '../common/DialogConfirm';\r\nimport { DialogTestOptions } from './DialogTestOptions';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    listItemSecondaryAction: {\r\n        visibility: 'hidden'\r\n    },\r\n    listItem: {\r\n        '&:hover $listItemSecondaryAction': {\r\n            visibility: 'inherit'\r\n        }\r\n    },\r\n    bottomContainer: {\r\n        marginTop: '10px'\r\n    },\r\n    play: {\r\n        color: colors.action\r\n    },\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    }\r\n}));\r\n\r\ninterface PlayOptionsState {\r\n    projectId?: string,\r\n    testId?: string,\r\n    openOptions: boolean\r\n}\r\ninterface TestListProps {\r\n    project: Project,\r\n    onCreateTest: (projectId: string, test: Test) => void,\r\n    onDeleteTest: (projectId: string, test: Test) => void\r\n}\r\n\r\nexport const TestList: React.FC<TestListProps> = (props: TestListProps) => {\r\n    const { project, onCreateTest, onDeleteTest } = props;\r\n\r\n    const history = useHistory();\r\n\r\n    const [selectedTest, setSelectedTest] = React.useState<Test | undefined>();\r\n    const [anchorElEdit, setAnchorElEdit] = React.useState<Element | null>(null);\r\n    const [openTestForm, setOpenTestForm] = useState<boolean>(false);\r\n    const [openRemoveTestConfirm, setOpenRemoveTestConfirm] = useState<boolean>(false);\r\n    const [playOptionsState, setPlayOptionsState] = useState<PlayOptionsState>();\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleCreateTestClick = () => {\r\n        setOpenTestForm(true);\r\n    };\r\n\r\n    const handleTestFormAccept = (newTest: Test) => {\r\n        onCreateTest(project.id, newTest);\r\n        setSelectedTest(undefined);\r\n        setOpenTestForm(false);\r\n    };\r\n\r\n    const handleTestFormCancel = () => {\r\n        setSelectedTest(undefined);\r\n        setOpenTestForm(false);\r\n    };\r\n\r\n    const handleEditClick = (evt: React.MouseEvent<HTMLButtonElement>, test: Test) => {\r\n        setSelectedTest(test);\r\n        setAnchorElEdit(evt.currentTarget);\r\n    };\r\n\r\n    const handleCloseEditMenu = () => {\r\n        setAnchorElEdit(null);\r\n    };\r\n\r\n    const handleEditDataClick = () => {\r\n        setAnchorElEdit(null);\r\n        setOpenTestForm(true);\r\n    };\r\n\r\n    const handleRemoveTestClick = (test: Test) => {\r\n        setSelectedTest(test);\r\n        setOpenRemoveTestConfirm(true);\r\n    };\r\n\r\n    const handleConfirmRemoveTest = () => {\r\n        if (selectedTest != null) {\r\n            onDeleteTest(project.id, selectedTest);\r\n        }\r\n        setSelectedTest(undefined);\r\n        setOpenRemoveTestConfirm(false);\r\n    };\r\n\r\n    const handleRefuseRemoveTest = () => {\r\n        setSelectedTest(undefined);\r\n        setOpenRemoveTestConfirm(false);\r\n    };\r\n\r\n    const handlePlayClick = (projectId: string, testId: string) => {\r\n        setPlayOptionsState({\r\n            projectId,\r\n            testId,\r\n            openOptions: true\r\n        });\r\n    };\r\n\r\n    const handleAcceptPlayOptions = (testOptions: TestOptions) => {\r\n        history.push(`/play/${playOptionsState?.projectId}/${playOptionsState?.testId}?ignoreTimeLimit=${testOptions.ignoreTimeLimit}&autoNext=${testOptions.autoNext}`, playOptionsState);\r\n        setPlayOptionsState({\r\n            openOptions: false\r\n        });\r\n    };\r\n\r\n    const handleCancelPlayOptions = () => {\r\n        setPlayOptionsState({\r\n            openOptions: false\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Menu\r\n                id=\"addNewMenu\"\r\n                anchorEl={anchorElEdit}\r\n                keepMounted\r\n                open={Boolean(anchorElEdit)}\r\n                onClose={handleCloseEditMenu}\r\n            >\r\n                <MenuItem onClick={handleEditDataClick}>\r\n                    <Typography variant=\"subtitle2\">\r\n                        Editar datos generales\r\n                    </Typography>\r\n                </MenuItem>\r\n                <MenuItem component={Link} to={`/designer/${project.id}/${selectedTest?.id}`}>\r\n                    <Typography variant=\"subtitle2\">\r\n                        Editar preguntas\r\n                    </Typography>\r\n                </MenuItem>\r\n            </Menu>\r\n            <Dialog\r\n                open={openTestForm}\r\n                fullWidth\r\n                maxWidth='sm'\r\n            >\r\n                <DialogTitle>Cuestionario</DialogTitle>\r\n                <Box className={classes.dialogContainer}>\r\n                    <TestForm\r\n                        test={selectedTest}\r\n                        onAccept={handleTestFormAccept}\r\n                        onCancel={handleTestFormCancel}\r\n                    />\r\n                </Box>\r\n            </Dialog>\r\n            <DialogConfirm\r\n                open={openRemoveTestConfirm}\r\n                text='¿Seguro que deseas eliminar el proyecto?'\r\n                width='xs'\r\n                onConfirm={handleConfirmRemoveTest}\r\n                onRefuse={handleRefuseRemoveTest}\r\n            />\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    {\r\n                        project.tests.length === 0\r\n                        && <Typography>No hay cuestionarios</Typography>\r\n                    }\r\n                    {\r\n                        project.tests.length > 0\r\n                        && <List>\r\n                            {\r\n                                project.tests.map((aTest: Test) => (\r\n                                    <Fragment key={`fragment_${aTest.id}`}>\r\n                                        <ListItem\r\n                                            button\r\n                                            key={aTest.id}\r\n                                            alignItems='flex-start'\r\n                                            classes={{ container: classes.listItem }}\r\n                                        >\r\n                                            <Grid container>\r\n                                                <Grid item xs={6}>\r\n                                                    <ListItemText\r\n                                                        primary={\r\n                                                            aTest.name\r\n                                                        }\r\n                                                        secondary={\r\n                                                            <Typography\r\n                                                                component='span'\r\n                                                                variant='body2'\r\n                                                                className={classes.inline}\r\n                                                                color='textPrimary'\r\n                                                            >\r\n                                                                {aTest.description}\r\n                                                            </Typography>\r\n                                                        }\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={2}>\r\n                                                    <ListItemText\r\n                                                        secondary={`${aTest.challenges.length} pregunta${aTest.challenges.length !== 1 ? 's' : ''}`}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <ListItemSecondaryAction className={classes.listItemSecondaryAction}>\r\n                                                <Grid container>\r\n                                                    <Grid item>\r\n                                                        {\r\n                                                            isValidTest(aTest) ? (\r\n                                                                <IconButton title='Jugar!' onClick={() => { handlePlayClick(project.id, aTest.id); }}>\r\n                                                                    <Icon className={classes.play}>play_circle_filled</Icon>\r\n                                                                </IconButton>\r\n                                                            ) : (\r\n                                                                <IconButton title='Errores en el cuestionario'>\r\n                                                                    <Icon color='error'>error</Icon>\r\n                                                                </IconButton>\r\n                                                            )\r\n                                                        }\r\n                                                    </Grid>\r\n                                                    <Grid item>\r\n                                                        <IconButton title='Editar' onClick={(evt: React.MouseEvent<HTMLButtonElement>) => {\r\n                                                            evt.stopPropagation();\r\n                                                            handleEditClick(evt, aTest);\r\n                                                        }}>\r\n                                                            <Icon color='primary'>edit</Icon>\r\n                                                        </IconButton>\r\n                                                    </Grid>\r\n                                                    <Grid item>\r\n                                                        <IconButton title='Eliminar' onClick={(evt) => {\r\n                                                            evt.stopPropagation();\r\n                                                            handleRemoveTestClick(aTest);\r\n                                                        }}>\r\n                                                            <Icon>delete</Icon>\r\n                                                        </IconButton>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </ListItemSecondaryAction>\r\n                                        </ListItem>\r\n                                        <Divider variant='inset' component='li' />\r\n                                    </Fragment>\r\n                                ))\r\n                            }\r\n                        </List>\r\n                    }\r\n                    <Grid item xs={12} className={classes.bottomContainer}>\r\n                        <Grid container justify='flex-end'>\r\n                            <Button\r\n                                variant='contained'\r\n                                color='primary'\r\n                                onClick={handleCreateTestClick}\r\n                            >\r\n                                Nuevo cuestionario\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            {\r\n                playOptionsState && (\r\n                    <DialogTestOptions\r\n                        open={playOptionsState.openOptions}\r\n                        onAccept={handleAcceptPlayOptions}\r\n                        onCancel={handleCancelPlayOptions}\r\n                    />\r\n                )\r\n            }\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { Fragment, useRef } from 'react';\r\nimport { Button, makeStyles } from '@material-ui/core';\r\nimport { colors } from '../../theme';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    uploadInput: {\r\n        display: 'none'\r\n    }\r\n}));\r\n\r\ninterface HTMLInputEvent extends Event {\r\n    target: HTMLInputElement & EventTarget\r\n}\r\n\r\ninterface JsonLoaderProps {\r\n    onDataLoaded: (data: unknown) => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const JsonLoader: React.FC<JsonLoaderProps> = (props: JsonLoaderProps) => {\r\n    const { onDataLoaded, onError } = props;\r\n\r\n    const inputImport = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleInput = (event: unknown) => {\r\n        try {\r\n            const evt = event as HTMLInputEvent;\r\n            if (evt?.target?.files != null) {\r\n                const file = evt.target.files[0];\r\n                const reader = new FileReader();\r\n                reader.readAsText(file);\r\n                reader.onloadend = (e) => {\r\n                    try {\r\n                        const newProject = JSON.parse(reader.result as string);\r\n                        onDataLoaded(newProject);\r\n                    } catch (err) {\r\n                        if (onError) {\r\n                            onError();\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n        } catch (err) {\r\n            if (onError) {\r\n                onError();\r\n            }\r\n        }\r\n        inputImport.current.value = '';\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <input\r\n                ref={inputImport}\r\n                accept='text'\r\n                className={classes.uploadInput}\r\n                id='contained-button-file'\r\n                multiple\r\n                type='file'\r\n                onInput={handleInput}\r\n            />\r\n            <Button style={{ color: colors.primary.dark }}>\r\n                <label htmlFor='contained-button-file'>\r\n                    Importar proyecto\r\n                </label>\r\n            </Button>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useRef, useState } from 'react';\r\nimport { Button, Grid, TextField } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Project } from '../../types/Project';\r\n\r\ninterface FormState {\r\n    name: string,\r\n    description: string\r\n}\r\n\r\nconst initialState = (project?: Project): FormState => {\r\n    if (project != null) {\r\n        return {\r\n            name: project.name,\r\n            description: project.description || ''\r\n        };\r\n    }\r\n    return {\r\n        name: '',\r\n        description: ''\r\n    };\r\n};\r\n\r\ninterface ProjectFormProps {\r\n    project?: Project,\r\n    onAccept: (newProject: Project) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const ProjectForm: React.FC<ProjectFormProps> = (props: ProjectFormProps) => {\r\n    const { project, onAccept, onCancel } = props;\r\n\r\n    const [formState, setFormState] = useState<FormState>(initialState(project));\r\n\r\n    const inputName = useRef({} as HTMLInputElement);\r\n    const inputDescription = useRef({} as HTMLInputElement);\r\n\r\n    const handleNameChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            name: inputName.current.value\r\n        });\r\n    };\r\n\r\n    const handleDescriptionChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            description: inputDescription.current.value\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        const newProject: Project = project ?\r\n            {\r\n                ...project,\r\n                name: inputName.current.value,\r\n                description: inputDescription.current.value\r\n            }\r\n            : {\r\n                id: uuidv4(),\r\n                name: inputName.current.value,\r\n                description: inputDescription.current.value,\r\n                tests: []\r\n            };\r\n\r\n        onAccept(newProject);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            direction='column'\r\n            spacing={2}\r\n        >\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputName}\r\n                    label='Nombre'\r\n                    fullWidth\r\n                    value={formState.name}\r\n                    onInput={handleNameChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputDescription}\r\n                    label='Descripción'\r\n                    fullWidth\r\n                    value={formState.description}\r\n                    onInput={handleDescriptionChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid container justify='flex-end' spacing={1}>\r\n                    <Grid item>\r\n                        <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { ChangeEvent, Fragment, useState } from 'react';\r\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Button, Dialog, DialogTitle, Divider, Grid, Icon, IconButton, makeStyles, Snackbar, SnackbarContent, Typography } from '@material-ui/core';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Project } from '../../types/Project';\r\nimport { colors } from '../../theme';\r\nimport { TestList } from './TestList';\r\nimport { DialogConfirm } from '../common/DialogConfirm';\r\nimport { JsonLoader } from '../common/JsonLoader';\r\nimport { isValidProject } from '../../utils/utilValidationTypes';\r\nimport { ProjectForm } from './ProjectForm';\r\nimport { Test } from '../../types/Test';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15)\r\n    },\r\n    secondaryHeading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        color: colors.secondary.main\r\n    },\r\n    gridContainer: {\r\n        padding: '0px 10px'\r\n    },\r\n    gridItems: {\r\n        flexGrow: 1,\r\n    },\r\n    messageControl: {\r\n        backgroundColor: colors.error,\r\n        color: colors.font.errorContrast\r\n    },\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    }\r\n}));\r\n\r\ninterface ProjectListProps {\r\n    projects: Project[],\r\n    setProjects: (newProjects: Project[]) => void\r\n}\r\n\r\nexport const ProjectList: React.FC<ProjectListProps> = (props: ProjectListProps) => {\r\n    const { projects, setProjects } = props;\r\n\r\n    const history = useHistory();\r\n\r\n    const [expandedProject, setExpandedProject] = React.useState<string | false>(false);\r\n    const [openProjectForm, setOpenProjectForm] = useState<boolean>(false);\r\n    const [openRemoveProjectConfirm, setOpenRemoveProjectConfirm] = useState<boolean>(false);\r\n    const [selectedProject, setSelectedProject] = useState<Project>();\r\n    const [openMessage, setOpenMessage] = useState<boolean>(false);\r\n    const [messageText, setMessageText] = useState<string>('');\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleExpandChange = (project: Project, isExpanded: boolean) => {\r\n        setExpandedProject(isExpanded ? project.id : false);\r\n    };\r\n\r\n    const handleNewProjectClick = () => {\r\n        setOpenProjectForm(true);\r\n    };\r\n\r\n    const handleEditProjectClick = (project: Project) => {\r\n        setSelectedProject(project);\r\n        setOpenProjectForm(true);\r\n    };\r\n\r\n    const handleRemoveProjectClick = (project: Project) => {\r\n        setSelectedProject(project);\r\n        setOpenRemoveProjectConfirm(true);\r\n    };\r\n\r\n    const handleExportProjectClick = (project: Project) => {\r\n        const element = document.createElement('a');\r\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(project)));\r\n        element.setAttribute('download', project.name.replace(/ /g, '_'));\r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n        element.click();\r\n        document.body.removeChild(element);\r\n    };\r\n\r\n    const handleProjectFormAccept = (newProject: Project) => {\r\n        if (selectedProject != null) {\r\n            setProjects(projects.map((aProject: Project) => aProject.id === newProject.id ? newProject : aProject));\r\n        } else {\r\n            setProjects([\r\n                ...projects,\r\n                {\r\n                    ...newProject\r\n                }\r\n            ]);\r\n        }\r\n        setSelectedProject(undefined);\r\n        setOpenProjectForm(false);\r\n    };\r\n\r\n    const handleProjectFormCancel = () => {\r\n        setSelectedProject(undefined);\r\n        setOpenProjectForm(false);\r\n    };\r\n\r\n    const handleImportProject = (project: unknown) => {\r\n        const newProject = project as Project;\r\n        if (!isValidProject(newProject)) {\r\n            setMessageText('El proyecto es inválido');\r\n            setOpenMessage(true);\r\n        }\r\n        const exist = projects.find((aProject: Project) => aProject.id === newProject.id) != null;\r\n        if (!exist) {\r\n            setProjects([\r\n                ...projects,\r\n                {\r\n                    ...newProject\r\n                }\r\n            ]);\r\n        } else {\r\n            setMessageText('El proyecto ya existe');\r\n            setOpenMessage(true);\r\n        }\r\n    };\r\n\r\n    const handleImportProjectError = () => {\r\n        setMessageText('Se produjo un error en la importación');\r\n        setOpenMessage(true);\r\n    };\r\n\r\n    const handleConfirmRemoveProject = () => {\r\n        if (selectedProject != null) {\r\n            setProjects(projects.filter((aProject: Project) => aProject.id !== selectedProject.id));\r\n        }\r\n        setOpenRemoveProjectConfirm(false);\r\n    };\r\n\r\n    const handleRefuseRemoveProject = () => {\r\n        setOpenRemoveProjectConfirm(false);\r\n    };\r\n\r\n    const handleCreateTest = (projectId: string, test: Test) => {\r\n        const theProject = projects.find((aProject: Project) => aProject.id === projectId);\r\n        const updating = theProject != null && theProject.tests.some((aTest: Test) => aTest.id === test.id);\r\n\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return {...aProject};\r\n            }\r\n            if (updating) {\r\n                const updatedTests = aProject.tests.map((aTest: Test) => aTest.id === test.id ? {...test} : {...aTest});\r\n                return {\r\n                    ...aProject,\r\n                    tests: [...updatedTests]\r\n                };\r\n            }\r\n            return {\r\n                ...aProject,\r\n                tests: [...aProject.tests, test]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        if (!updating) {\r\n            history.push(`/designer/${projectId}/${test.id}`);\r\n        }\r\n    };\r\n\r\n    const handleDeleteTest = (projectId: string, test: Test) => {\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return {...aProject};\r\n            }\r\n            const updatedTests = aProject.tests.filter((aTest: Test) => aTest.id !== test.id);\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n    };\r\n\r\n    const handleMessageClose = () => {\r\n        setOpenMessage(false);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Dialog\r\n                open={openProjectForm}\r\n                fullWidth\r\n                maxWidth='sm'\r\n            >\r\n                <DialogTitle>Proyecto</DialogTitle>\r\n                <Box className={classes.dialogContainer}>\r\n                    <ProjectForm\r\n                        project={selectedProject}\r\n                        onAccept={handleProjectFormAccept}\r\n                        onCancel={handleProjectFormCancel}\r\n                    />\r\n                </Box>\r\n            </Dialog>\r\n            <DialogConfirm\r\n                open={openRemoveProjectConfirm}\r\n                text='¿Seguro que deseas eliminar el proyecto?'\r\n                width='xs'\r\n                onConfirm={handleConfirmRemoveProject}\r\n                onRefuse={handleRefuseRemoveProject}\r\n            />\r\n            <Snackbar\r\n                open={openMessage}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                autoHideDuration={3000}\r\n                onClose={handleMessageClose}\r\n            >\r\n                <SnackbarContent\r\n                    message={\r\n                        <Grid container spacing={4}>\r\n                            <Grid item xs={1}>\r\n                                <Icon>error</Icon>\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <Typography>{messageText}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    }\r\n                    className={classes.messageControl}\r\n                />\r\n            </Snackbar>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <Grid container direction='row' justify='center' alignItems='center' spacing={2} className={classes.gridContainer}>\r\n                        <Grid item className={classes.gridItems}>\r\n                            <Typography variant='h6'>\r\n                                Proyectos\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button\r\n                                style={{ color: colors.primary.dark }}\r\n                                onClick={handleNewProjectClick}\r\n                            >\r\n                                Nuevo proyecto\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <JsonLoader\r\n                                onDataLoaded={handleImportProject}\r\n                                onError={handleImportProjectError}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    {\r\n                        projects.map((aProject: Project) => (\r\n                            <Accordion\r\n                                key={aProject.id}\r\n                                expanded={expandedProject === aProject.id}\r\n                                onChange={ (event: ChangeEvent<unknown>, isExpanded: boolean) => {\r\n                                    handleExpandChange(aProject, isExpanded);\r\n                                }}\r\n                            >\r\n                                <AccordionSummary title={aProject.description}>\r\n                                    <Grid container justify='space-between' alignItems='center'>\r\n                                        <Grid item xs={3}>\r\n                                            <Typography className={classes.heading}>{aProject.name}</Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={7}>\r\n                                            <Typography className={classes.secondaryHeading}>\r\n                                                {`${aProject.tests.length} cuestionario${aProject.tests.length !== 1 ? 's' : ''}`}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <IconButton\r\n                                                title='Descargar'\r\n                                                color='primary'\r\n                                                onClick={(evt) => {\r\n                                                    evt.stopPropagation();\r\n                                                    handleExportProjectClick(aProject);\r\n                                                }}\r\n                                            >\r\n                                                <Icon>download</Icon>\r\n                                            </IconButton>\r\n                                            {\r\n                                                <IconButton\r\n                                                    title='Editar'\r\n                                                    color='primary'\r\n                                                    onClick={(evt) => {\r\n                                                        evt.stopPropagation();\r\n                                                        handleEditProjectClick(aProject);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon>edit</Icon>\r\n                                                </IconButton>\r\n                                            }\r\n                                            {\r\n                                                <IconButton\r\n                                                    title='Eliminar'\r\n                                                    onClick={(evt) => {\r\n                                                        evt.stopPropagation();\r\n                                                        handleRemoveProjectClick(aProject);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon>delete</Icon>\r\n                                                </IconButton>\r\n                                            }\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </AccordionSummary>\r\n                                <AccordionDetails>\r\n                                    <TestList\r\n                                        project={aProject}\r\n                                        onCreateTest={handleCreateTest}\r\n                                        onDeleteTest={handleDeleteTest}\r\n                                    />\r\n                                </AccordionDetails>\r\n                            </Accordion>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { useProjects } from '../../hooks/useProjects';\r\nimport { ProjectList } from '../../components/Home/ProjectList';\r\n\r\nexport const Home: React.FC = () => {\r\n    const { projects, setProjects } = useProjects();\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n        >\r\n            <Grid item xs={7}>\r\n                <ProjectList\r\n                    projects={projects}\r\n                    setProjects={setProjects}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Icon } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { ChallengeType } from \"../enums/ChallengeType\";\r\nimport { Language } from \"../enums/Language\";\r\nimport { Challenge, ChallengeConfig } from \"../types/Challenge\";\r\nimport { CSSProperties } from '@material-ui/styles';\r\nimport { PictureType } from '../enums/PictureType';\r\nimport { SelectAnswerChallenge, SelectAnswerChallengeConfig } from '../types/SelectAnswerChallenge';\r\nimport { TrueOrFalseChallenge, TrueOrFalseChallengeConfig } from '../types/TrueOrFalseChallenge';\r\nimport { ClassifyChallenge, ClassifyChallengeConfig } from '../types/ClassifyChallenge';\r\nimport { SortChallenge, SortChallengeConfig } from '../types/SortChallenge';\r\nimport { FillTableChallenge, FillTableChallengeConfig } from '../types/FillTableChallenge';\r\nimport { FillGapsChallenge, FillGapsChallengeConfig, FillGapsChallengeSentence } from '../types/FillGapsChallenge';\r\nimport { FillMethod } from '../enums/FillMethod';\r\nimport { MatchChallenge, MatchChallengeConfig } from '../types/MatchChallenge';\r\n\r\nexport const getChallengeTypeDescription = (type: ChallengeType, language: Language = Language.Es): string => {\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer:\r\n            return language === Language.Es ? \"Selecciona la respuesta correcta\" : \"Choose the correct answer\";\r\n        case ChallengeType.TrueOrFalse:\r\n            return language === Language.Es ? \"Verdadero o falso\" : \"True or false\";\r\n        case ChallengeType.Match:\r\n            return language === Language.Es ? \"Une las opciones\" : \"Match the options\";\r\n        case ChallengeType.FillGaps:\r\n            return language === Language.Es ? \"Rellena los huecos\" : \"Fill in the gaps\";\r\n        case ChallengeType.Sort:\r\n            return language === Language.Es ? \"Ordena los elementos\" : \"Order the elements\";\r\n        case ChallengeType.Classify:\r\n            return language === Language.Es ? \"Clasifica los elementos\" : \"Classify the elements\";\r\n        case ChallengeType.FillTable:\r\n            return language === Language.Es ? \"Completa la tabla\" : \"Complete the table\";\r\n        case ChallengeType.TheOddOne:\r\n            return language === Language.Es ? \"Busca el que sobra\" : \"Find the odd one\";\r\n        case ChallengeType.Crossword:\r\n            return language === Language.Es ? \"Crucigrama\" : \"Crossword\";\r\n        default:\r\n            return language === Language.Es ? \"Sin definir\" : \"Undefined\";\r\n    }\r\n};\r\n\r\nexport const getChallengeTypeIcon = (type: ChallengeType, size: 'large' | 'default' | 'small' = 'default', style: CSSProperties = {}): JSX.Element => {\r\n    return (\r\n        <Icon fontSize={size} style={style}>\r\n            {\r\n                type === ChallengeType.SelectAnswer ? 'widgets'\r\n                    : type === ChallengeType.TrueOrFalse ? 'check'\r\n                        : type === ChallengeType.FillGaps ? 'space_bar'\r\n                            : type === ChallengeType.Match ? 'shuffle'\r\n                                : type === ChallengeType.Sort ? 'swap_vert'\r\n                                    : type === ChallengeType.Classify ? 'category'\r\n                                        : type === ChallengeType.FillTable ? 'grid_on'\r\n                                            : type === ChallengeType.TheOddOne ? 'touch_app'\r\n                                                : type === ChallengeType.Crossword ? 'font_download' : ''\r\n            }\r\n        </Icon>\r\n    );\r\n};\r\n\r\nconst getDefaultChallengeConfig = (type: ChallengeType): ChallengeConfig => {\r\n    const defaultChallengeConfig: ChallengeConfig = {\r\n        timeLimit: 30,\r\n        questionFontSize: 28\r\n    };\r\n\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                answerFontSize: 22,\r\n                pictureCount: 1,\r\n                pictureLabel: false,\r\n                multiselect: false\r\n            } as SelectAnswerChallengeConfig;\r\n        case ChallengeType.TrueOrFalse:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                pictureCount: 1,\r\n                pictureLabel: false\r\n            } as TrueOrFalseChallengeConfig;\r\n        case ChallengeType.Match:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                answerFontSize: 22,\r\n                pairsCount: 4\r\n            } as MatchChallengeConfig;\r\n        case ChallengeType.FillGaps:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                textFontSize: 18,\r\n                fillMethod: FillMethod.Writing\r\n            } as FillGapsChallengeConfig;\r\n        case ChallengeType.Sort:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                itemsFontSize: 18,\r\n                itemCount: 5\r\n            } as SortChallengeConfig;\r\n        case ChallengeType.Classify:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                itemsFontSize: 18,\r\n                groupCount: 3\r\n            } as ClassifyChallengeConfig;\r\n        case ChallengeType.FillTable:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                itemsFontSize: 18,\r\n                rowCount: 3,\r\n                columnCount: 3,\r\n                firstRowFixed: false,\r\n                firstColumnFixed: false\r\n            } as FillTableChallengeConfig;\r\n        default:\r\n            return defaultChallengeConfig;\r\n    }\r\n};\r\n\r\nexport const getDefaultChallenge = (type: ChallengeType): Challenge => {\r\n    const defaultChallenge: Challenge = {\r\n        id: uuidv4(),\r\n        type,\r\n        question: '',\r\n        config: getDefaultChallengeConfig(type)\r\n    };\r\n\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer:\r\n            return {\r\n                ...defaultChallenge,\r\n                pictures: [{\r\n                    type: PictureType.None,\r\n                    data: ''\r\n                }],\r\n                answers: [\r\n                    { text: '', valid: false },\r\n                    { text: '', valid: false },\r\n                    { text: '', valid: false },\r\n                    { text: '', valid: false }\r\n                ]\r\n            } as SelectAnswerChallenge;\r\n        case ChallengeType.TrueOrFalse:\r\n            return {\r\n                ...defaultChallenge,\r\n                pictures: [{\r\n                    type: PictureType.None,\r\n                    data: ''\r\n                }],\r\n                answer: true\r\n            } as TrueOrFalseChallenge;\r\n        case ChallengeType.Match:\r\n            return {\r\n                ...defaultChallenge,\r\n                pairs: [\r\n                    { source: '', destination: '' },\r\n                    { source: '', destination: '' },\r\n                    { source: '', destination: '' },\r\n                    { source: '', destination: '' }\r\n                ]\r\n            } as MatchChallenge;\r\n        case ChallengeType.FillGaps:\r\n            return {\r\n                ...defaultChallenge,\r\n                sentences: [] as FillGapsChallengeSentence[]\r\n            } as FillGapsChallenge;\r\n        case ChallengeType.Sort:\r\n            return {\r\n                ...defaultChallenge,\r\n                items: ['', '', '', '', '']\r\n            } as SortChallenge;\r\n        case ChallengeType.Classify:\r\n            return {\r\n                ...defaultChallenge,\r\n                groups: [\r\n                    { name: '', items: ([] as string[]) },\r\n                    { name: '', items: ([] as string[]) },\r\n                    { name: '', items: ([] as string[]) }\r\n                ]\r\n            } as ClassifyChallenge;\r\n        case ChallengeType.FillTable:\r\n            return {\r\n                ...defaultChallenge,\r\n                items: [\r\n                    [{ text: '', hidden: false },{ text: '', hidden: false },{ text: '', hidden: false }],\r\n                    [{ text: '', hidden: false },{ text: '', hidden: false },{ text: '', hidden: false }],\r\n                    [{ text: '', hidden: false },{ text: '', hidden: false },{ text: '', hidden: false }]\r\n                ]\r\n            } as FillTableChallenge;\r\n        default:\r\n            return defaultChallenge;\r\n    }\r\n};\r\n","export enum ComponentMode {\r\n    Design,\r\n    Play\r\n}","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Card, CardActionArea, CardActions, CardContent, CardHeader, Chip, Grid, Icon, IconButton, makeStyles, Tooltip, Typography } from '@material-ui/core';\r\nimport { Challenge } from '../../types/Challenge';\r\nimport { getChallengeTypeDescription, getChallengeTypeIcon } from '../../utils/utilChallenges';\r\nimport { isValidChallenge, Validation } from '../../utils/utilValidationTypes';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    },\r\n    fullHeight: {\r\n        height: '100%',\r\n    },\r\n    headerContainer: {\r\n        //width: 'calc(100% - 32px)'\r\n        overflow: \"hidden\"\r\n    },\r\n    contentContainer: {\r\n        overflow: \"hidden\"\r\n    },\r\n    actionContainer: {\r\n        marginTop: '8px'\r\n    },\r\n    descriptionContainer: {\r\n        width: '100%',\r\n    },\r\n    description: {\r\n        whiteSpace: 'nowrap',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis'\r\n    },\r\n    tooltipRow: {\r\n        fontSize: '12px'\r\n    },\r\n    statusContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    }\r\n});\r\n\r\ninterface ChallengeThumbnailProps {\r\n    challenge: Challenge,\r\n    position: number,\r\n    selected?: boolean,\r\n    compact?: boolean,\r\n    onClick?: (selectedChallenge: Challenge) => void,\r\n    onDelete?: (deletedChallenge: Challenge) => void\r\n}\r\n\r\nexport const ChallengeThumbnail: React.FC<ChallengeThumbnailProps> = (props: ChallengeThumbnailProps) => {\r\n    const { challenge, position, selected, compact, onClick, onDelete } = props;\r\n\r\n    const [validation, setValidation] = useState<Validation>({ valid: true, errorMessage: [] });\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleClick = () => {\r\n        if (onClick) {\r\n            onClick(challenge);\r\n        }\r\n    };\r\n\r\n    const handleDeleteClick = () => {\r\n        if (onDelete) {\r\n            onDelete(challenge);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setValidation(isValidChallenge(challenge));\r\n    }, [challenge]);\r\n\r\n    return (\r\n        <Fragment>\r\n            {\r\n                <Card variant={selected ? 'elevation' : 'outlined'} elevation={10} className={classes.fullWidth}>\r\n                    <CardActionArea className={classes.fullWidth} onClick={handleClick}>\r\n                        <CardHeader\r\n                            classes={{\r\n                                root: classes.headerContainer,\r\n                                content: classes.contentContainer,\r\n                            }}\r\n                            avatar={\r\n                                compact ? getChallengeTypeIcon(challenge.type, 'small') : undefined\r\n                            }\r\n                            subheader={\r\n                                <Typography variant='subtitle2' color={selected ? 'secondary' : 'textPrimary'} className={classes.description}>\r\n                                    { compact ? challenge.question : `#${position} ${getChallengeTypeDescription(challenge.type)}` }\r\n                                </Typography>\r\n                            }\r\n                            action={\r\n                                compact ? (\r\n                                    <Grid container alignItems=\"center\" className={classes.actionContainer}>\r\n                                        {\r\n                                            validation.valid ? <Icon color=\"primary\" fontSize=\"small\">check</Icon>\r\n                                                : (\r\n                                                    <Tooltip arrow title={\r\n                                                        <>\r\n                                                            {\r\n                                                                validation.errorMessage.map((\r\n                                                                    aMessage: string,\r\n                                                                    messageIdx: number\r\n                                                                ) => (\r\n                                                                    <li\r\n                                                                        key={`li_${messageIdx}`}\r\n                                                                        className={classes.tooltipRow}\r\n                                                                    >\r\n                                                                        {aMessage}\r\n                                                                    </li>\r\n                                                                ))\r\n                                                            }\r\n                                                        </>\r\n                                                    }>\r\n                                                        <Icon color=\"secondary\" fontSize=\"small\">priority_high</Icon>\r\n                                                    </Tooltip>\r\n                                                )\r\n                                        }\r\n                                    </Grid>\r\n                                ) : undefined\r\n                            }\r\n                        />\r\n                        {\r\n                            !compact && (\r\n                                <CardContent>\r\n                                    <Typography noWrap>{challenge.question}</Typography>\r\n                                </CardContent>\r\n                            )\r\n                        }\r\n                    </CardActionArea>\r\n                    {\r\n                        !compact && (\r\n                            <CardActions className={classes.statusContainer}>\r\n                                {\r\n                                    validation.valid ? <Chip label=\"completo\" color=\"primary\" size=\"small\" icon={<Icon fontSize=\"small\">check</Icon>} />\r\n                                        : (\r\n                                            <Tooltip arrow title={\r\n                                                <>\r\n                                                    {\r\n                                                        validation.errorMessage.map((aMessage: string, messageIdx) => (\r\n                                                            <li\r\n                                                                key={`li_${messageIdx}`}\r\n                                                                className={classes.tooltipRow}>\r\n                                                                {aMessage}\r\n                                                            </li>\r\n                                                        ))\r\n                                                    }\r\n                                                </>\r\n                                            }>\r\n                                                <Chip label=\"error\" color=\"secondary\" size=\"small\" style={{ color: '#ffffff' }} icon={<Icon fontSize=\"small\">priority_high</Icon>} />\r\n                                            </Tooltip>\r\n                                        )\r\n                                }\r\n                                <IconButton onClick={handleDeleteClick}>\r\n                                    <Icon>delete</Icon>\r\n                                </IconButton>\r\n                            </CardActions>\r\n                        )\r\n                    }\r\n                </Card>\r\n            }\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { Challenge } from '../../types/Challenge';\r\nimport { ChallengeThumbnail } from './ChallengeThumbnail';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        overflowY: 'auto'\r\n    },\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface ChallengeSelectorProps {\r\n    challenges: Challenge[],\r\n    compactList?: boolean,\r\n    selected?: Challenge,\r\n    onSelect?: (challenge: Challenge) => void,\r\n    onDelete?: (challenge: Challenge) => void\r\n}\r\n\r\nexport const ChallengeSelector: React.FC<ChallengeSelectorProps> = (props: ChallengeSelectorProps) => {\r\n    const { challenges, compactList, selected, onSelect, onDelete } = props;\r\n\r\n    const [selectedChallenge, setSelectedChallenge] = useState<Challenge | undefined>(selected || undefined);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setSelectedChallenge(selected);\r\n    }, [selected]);\r\n\r\n    const handleThumbnailClick = (challenge: Challenge) => {\r\n        setSelectedChallenge(challenge);\r\n        if (onSelect) {\r\n            onSelect(challenge);\r\n        }\r\n    };\r\n\r\n    const handleThumbnailDelete = (challenge: Challenge) => {\r\n        if (onDelete) {\r\n            onDelete(challenge);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' alignItems='center' spacing={2} className={classes.root}>\r\n            {\r\n                challenges.map((aChallenge: Challenge, idx: number) => (\r\n                    <Grid item key={idx} className={classes.fullWidth}>\r\n                        <ChallengeThumbnail\r\n                            challenge={aChallenge}\r\n                            position={idx + 1}\r\n                            selected={selectedChallenge?.id === aChallenge.id}\r\n                            compact={compactList}\r\n                            onClick={handleThumbnailClick}\r\n                            onDelete={handleThumbnailDelete}\r\n                        />\r\n                    </Grid>\r\n                ))\r\n            }\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, makeStyles, TextField } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    inputContainer: {\r\n        width: '90%',\r\n        height: '80%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    input: {\r\n        width: '90%'\r\n    }\r\n});\r\n\r\ninterface ChallengeQuestionProps {\r\n    mode: ComponentMode,\r\n    question: string,\r\n    fontSize?: number,\r\n    onChange?: (newTitle: string) => void\r\n}\r\n\r\nexport const ChallengeQuestion: React.FC<ChallengeQuestionProps> = (props: ChallengeQuestionProps) => {\r\n    const { mode, question, fontSize, onChange } = props;\r\n\r\n    const [questionText, setQuestionText] = useState<string>(question);\r\n    const inputQuestion = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setQuestionText(question);\r\n    },[question]);\r\n\r\n    const handleInputChange = () => {\r\n        setQuestionText(inputQuestion.current.value);\r\n        if (onChange) {\r\n            onChange(inputQuestion.current.value);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Card className={classes.inputContainer}>\r\n                <TextField\r\n                    inputRef={inputQuestion}\r\n                    variant='standard'\r\n                    className={classes.input}\r\n                    inputProps = {{\r\n                        style: {\r\n                            textAlign: 'center',\r\n                            fontSize: `${fontSize != null ? fontSize : 28}px`,\r\n                            lineHeight: '32px'\r\n                        }\r\n                    }}\r\n                    InputProps={{\r\n                        readOnly: mode === ComponentMode.Play,\r\n                        disableUnderline: mode === ComponentMode.Play\r\n                    }}\r\n                    placeholder='Escribe aquí el enunciado o pregunta'\r\n                    multiline\r\n                    rowsMax={2}\r\n                    value={questionText}\r\n                    onInput={handleInputChange}\r\n                />\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n","export enum MatchElement {\r\n    Source,\r\n    Destination\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n    CardActionArea,\r\n    Checkbox,\r\n    Grid,\r\n    Icon,\r\n    InputAdornment,\r\n    makeStyles,\r\n    Radio,\r\n    TextField\r\n} from '@material-ui/core';\r\nimport Card from '@material-ui/core/Card';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { colors } from '../../theme';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    option: {\r\n        width: '100%',\r\n        height: '100%'\r\n    },\r\n    optionActionArea: {\r\n        height: '100%',\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionInput: {\r\n        width: '90%',\r\n        color: '#ffffff'\r\n    },\r\n    optionInnerInput: {\r\n        cursor: 'pointer'\r\n    },\r\n    optionIcon: {\r\n        color: '#ffffff'\r\n    },\r\n    selector: {\r\n        color: '#ffffff',\r\n        '&$checked': {\r\n            color: '#ffffff'\r\n        }\r\n    },\r\n    checked: {}\r\n}));\r\n\r\ninterface OptionState {\r\n    text: string,\r\n    valid: boolean\r\n}\r\n\r\ninterface SelectableOptionProps {\r\n    mode: ComponentMode,\r\n    text: string,\r\n    icon: string,\r\n    valid?: boolean,\r\n    selected?: boolean,\r\n    color?: string,\r\n    fontSize?: number,\r\n    multiselect?: boolean,\r\n    showResults?: boolean,\r\n    onClick?: () => void,\r\n    onTextChange?: (newText: string) => void,\r\n    onValidChange?(newValid: boolean): void\r\n}\r\n\r\nexport const SelectableOption: React.FC<SelectableOptionProps> = (props: SelectableOptionProps) => {\r\n    const {\r\n        mode,\r\n        text,\r\n        icon,\r\n        valid,\r\n        selected,\r\n        color,\r\n        fontSize,\r\n        multiselect,\r\n        showResults,\r\n        onClick,\r\n        onTextChange,\r\n        onValidChange\r\n    } = props;\r\n\r\n    const [optionState, setOptionState] = useState<OptionState>({ text: text || '', valid: valid || false });\r\n    const inputTextOption = useRef({} as HTMLInputElement);\r\n    const radioOption = useRef({} as HTMLInputElement);\r\n    const checkOption = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setOptionState({ text: text || '', valid: valid || false });\r\n    }, [text, valid]);\r\n\r\n    const handleOptionTextChange = () => {\r\n        const newState = {\r\n            ...optionState,\r\n            text: inputTextOption.current.value\r\n        };\r\n        setOptionState(newState);\r\n        if (onTextChange) {\r\n            onTextChange(inputTextOption.current.value);\r\n        }\r\n    };\r\n\r\n    const handleRadioChange = () => {\r\n        const newState = {\r\n            ...optionState,\r\n            selected: radioOption.current.checked\r\n        };\r\n        setOptionState(newState);\r\n        if (onValidChange) {\r\n            onValidChange(radioOption.current.checked);\r\n        }\r\n    };\r\n\r\n    const handleCheckboxChange = () => {\r\n        const newState = {\r\n            ...optionState,\r\n            selected: checkOption.current.checked\r\n        };\r\n        setOptionState(newState);\r\n        if (onValidChange) {\r\n            onValidChange(checkOption.current.checked);\r\n        }\r\n    };\r\n\r\n    const handlerOptionClick = () => {\r\n        if (onClick) {\r\n            onClick();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            className={classes.option}\r\n            style={{\r\n                backgroundColor: color || colors.primary.main,\r\n                borderStyle: 'solid',\r\n                borderWidth: (showResults && valid) || selected ? '3px' : '0px',\r\n                borderColor: showResults ? (\r\n                    valid ? '#00ff00' : '#ff0000'\r\n                ) : '#323232'\r\n            }}>\r\n            {\r\n                mode === ComponentMode.Design ? (\r\n                    <div className={classes.optionActionArea}>\r\n                        <TextField\r\n                            inputRef={inputTextOption}\r\n                            value={optionState.text}\r\n                            placeholder=\"Escribe aquí una respuesta\"\r\n                            className={classes.optionInput}\r\n                            InputProps={{\r\n                                style: {\r\n                                    color: '#ffffff',\r\n                                    fontSize: `${fontSize || 22}px`,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <Icon className={classes.optionIcon}>{icon}</Icon>\r\n                                    </InputAdornment>\r\n                                ),\r\n                                endAdornment: (\r\n                                    multiselect ? (\r\n                                        <Checkbox\r\n                                            inputRef={checkOption}\r\n                                            checked={optionState.valid}\r\n                                            classes={{ root: classes.selector, checked: classes.checked }}\r\n                                            onChange={handleCheckboxChange}\r\n                                        />\r\n                                    ) : (\r\n                                        <Radio\r\n                                            inputRef={radioOption}\r\n                                            checked={optionState.valid}\r\n                                            classes={{ root: classes.selector, checked: classes.checked }}\r\n                                            onChange={handleRadioChange}\r\n                                        />\r\n                                    )\r\n                                ),\r\n                            }}\r\n                            onInput={handleOptionTextChange}\r\n                            onClick={(ev) => { ev.preventDefault(); }}\r\n                        />\r\n                    </div>\r\n                ): (\r\n                    <CardActionArea\r\n                        className={classes.optionActionArea}\r\n                        onClick={handlerOptionClick}\r\n                    >\r\n                        <Grid container className={classes.optionInput} spacing={2} alignItems=\"center\">\r\n                            <Grid item>\r\n                                <Icon className={classes.optionIcon}>{icon}</Icon>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <label style={{color: '#ffffff', fontSize: `${fontSize || 22}px`, justifySelf: 'left'}}>\r\n                                    {optionState.text}\r\n                                </label>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardActionArea>\r\n                )\r\n            }\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Box, Button, Dialog, DialogTitle, Grid, makeStyles, TextField } from '@material-ui/core';\r\nimport { ChallengePicture } from '../../types/Challenge';\r\nimport { PictureType } from '../../enums/PictureType';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n}));\r\n\r\ninterface DialogPictureFormProps {\r\n    open: boolean,\r\n    picture: ChallengePicture,\r\n    onAccept: (picture: ChallengePicture) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const DialogPictureForm: React.FC<DialogPictureFormProps> = (props: DialogPictureFormProps) => {\r\n    const {open, picture, onAccept, onCancel} = props;\r\n\r\n    const [formState, setFormState] = useState<ChallengePicture>(picture);\r\n\r\n    const inputUrl = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (picture != null) {\r\n            setFormState(picture);\r\n        }\r\n    }, [picture]);\r\n\r\n    const handleUrlChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            data: inputUrl.current.value\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        const newPicture = {\r\n            type: PictureType.Url,\r\n            data: inputUrl.current.value\r\n        };\r\n\r\n        onAccept(newPicture);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth='sm'\r\n        >\r\n            <DialogTitle>Imagen</DialogTitle>\r\n            <Box className={classes.dialogContainer}>\r\n                <Grid\r\n                    container\r\n                    direction='column'\r\n                    spacing={2}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            inputRef={inputUrl}\r\n                            label='URL de la imagen'\r\n                            fullWidth\r\n                            value={formState.data}\r\n                            onInput={handleUrlChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container justify='flex-end' spacing={1}>\r\n                            <Grid item>\r\n                                <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Fab, Grid, GridSize, Icon, makeStyles } from '@material-ui/core';\r\nimport { ChallengePicture } from '../../types/Challenge';\r\nimport { PictureType } from '../../enums/PictureType';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { DialogPictureForm } from './DialogPictureSelector';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '99%',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    pic: {\r\n        maxWidth: '100%',\r\n        maxHeight: '100%'\r\n    }\r\n}));\r\n\r\ninterface PictureDialogState {\r\n    selectedPicture: ChallengePicture,\r\n    selectedPictureIdx: number,\r\n    openDialog: boolean\r\n}\r\n\r\ninterface ItemGridSize {\r\n    height: string,\r\n    width: GridSize\r\n}\r\n\r\ninterface PictureGridProps {\r\n    mode: ComponentMode,\r\n    pictures: ChallengePicture[],\r\n    onPicturesChange?: (newPictures: ChallengePicture[]) => void\r\n}\r\n\r\nexport const PictureGrid: React.FC<PictureGridProps> = (props: PictureGridProps) => {\r\n    const { mode, pictures, onPicturesChange } = props;\r\n\r\n    const [pictureDialogState, setPictureDialogState] = useState<PictureDialogState>();\r\n\r\n    const classes = useStyles();\r\n\r\n    const [pictureItemSize, setPictureItemSize] = useState<ItemGridSize>({ height: '100%', width: 8 });\r\n\r\n    useEffect(() => {\r\n        switch (pictures.length) {\r\n            case 9:\r\n            case 8:\r\n            case 7:\r\n                setPictureItemSize({ height: '33.3%', width: 4 });\r\n                break;\r\n            case 6:\r\n            case 5:\r\n                setPictureItemSize({ height: '50%', width: 4 });\r\n                break;\r\n            case 4:\r\n            case 3:\r\n                setPictureItemSize({ height: '50%', width: 6 });\r\n                break;\r\n            case 2:\r\n                setPictureItemSize({ height: '100%', width: 6 });\r\n                break;\r\n            default:\r\n                setPictureItemSize({ height: '100%', width: 12 });\r\n                break;\r\n        }\r\n    }, [pictures]);\r\n\r\n    const handleAddPictureClick = (picture: ChallengePicture, pictureIdx: number) => {\r\n        setPictureDialogState({\r\n            openDialog: true,\r\n            selectedPicture: picture,\r\n            selectedPictureIdx: pictureIdx\r\n        });\r\n    };\r\n\r\n    const handleAcceptPicture = (picture: ChallengePicture, pictureIdx: number) => {\r\n        if (onPicturesChange) {\r\n            onPicturesChange(\r\n                pictures.map((aPicture: ChallengePicture, idx: number) => idx !== pictureIdx ? {...aPicture} : {...picture})\r\n            );\r\n        }\r\n        setPictureDialogState({\r\n            openDialog: false,\r\n            selectedPicture: {\r\n                type: PictureType.None,\r\n                data: ''\r\n            },\r\n            selectedPictureIdx: -1\r\n        });\r\n    };\r\n\r\n    const handleCancelPicture = () => {\r\n        setPictureDialogState({\r\n            openDialog: false,\r\n            selectedPicture: {\r\n                type: PictureType.None,\r\n                data: ''\r\n            },\r\n            selectedPictureIdx: -1\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            {\r\n                pictureDialogState && (\r\n                    <DialogPictureForm\r\n                        open={pictureDialogState.openDialog}\r\n                        picture={pictureDialogState.selectedPicture}\r\n                        onAccept={(newPic: ChallengePicture) => handleAcceptPicture(\r\n                            newPic, pictureDialogState.selectedPictureIdx\r\n                        )}\r\n                        onCancel={handleCancelPicture}\r\n                    />\r\n                )\r\n            }\r\n            <Grid container className={classes.root}>\r\n                {\r\n                    pictures.map((aPicture: ChallengePicture, pictureIdx: number) => (\r\n                        <Grid item\r\n                            key={`pic${pictureIdx.toString()}`}\r\n                            xs={pictureItemSize.width}\r\n                            style={{ height: pictureItemSize.height, border: mode === ComponentMode.Design ? 'solid 1px' : '0px' }}\r\n                        >\r\n                            <Grid container justify=\"center\" alignItems=\"center\" className={classes.fullHeight}>\r\n                                {\r\n                                    aPicture.type !== PictureType.None && (\r\n                                        <img className={classes.pic} src={aPicture.data} alt=\"\"/>\r\n                                    )\r\n                                }\r\n                                {\r\n                                    mode === ComponentMode.Design && (\r\n                                        <Fab\r\n                                            size=\"medium\"\r\n                                            color=\"primary\"\r\n                                            style={{position: 'absolute', color: '#ffffff'}}\r\n                                            onClick={() => { handleAddPictureClick(aPicture, pictureIdx); }}\r\n                                        >\r\n                                            <Icon>add_a_photo</Icon>\r\n                                        </Fab>\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                        </Grid>\r\n                    ))\r\n                }\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Box, CircularProgress, Grid, Typography } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\ninterface CountdownProps {\r\n    mode: ComponentMode,\r\n    time: number,\r\n    stopTimer?: boolean,\r\n    onTimeUp?: () => void\r\n}\r\n\r\n\r\nexport const Countdown: React.FC<CountdownProps> = (props: CountdownProps) => {\r\n    const { mode, time, stopTimer, onTimeUp } = props;\r\n\r\n    const [timeRemaining, setTimeRemaining] = useState<number>(time);\r\n    const [stop, setStop] = useState<boolean>(stopTimer || false);\r\n\r\n\r\n    useEffect(() => {\r\n        setTimeRemaining(time);\r\n    }, [time]);\r\n\r\n    useEffect(() => {\r\n        setStop(stopTimer || false);\r\n    }, [stopTimer]);\r\n\r\n    useEffect(() => {\r\n        let timeoutId: NodeJS.Timeout;\r\n        if (mode === ComponentMode.Play && !stop) {\r\n            timeoutId = setTimeout(() => {\r\n                if (timeRemaining === 0) {\r\n                    if (onTimeUp) {\r\n                        onTimeUp();\r\n                    }\r\n                } else {\r\n                    setTimeRemaining(timeRemaining - 1);\r\n                }\r\n            }, 1000);\r\n        }\r\n        return () => {\r\n            if (timeoutId != null) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n        };\r\n    }, [timeRemaining, onTimeUp]);\r\n\r\n    return (\r\n        <Grid container justify=\"center\" alignItems=\"center\" style={{height: '100%'}}>\r\n            <Grid item>\r\n                <Box position=\"relative\" display=\"inline-flex\">\r\n                    <CircularProgress\r\n                        variant=\"determinate\"\r\n                        color={timeRemaining > 5 ? 'primary': 'secondary'}\r\n                        size=\"75px\"\r\n                        value={Math.round((timeRemaining * 100.0) / (time * 1.0))} />\r\n                    <Box\r\n                        top={0}\r\n                        left={0}\r\n                        bottom={0}\r\n                        right={0}\r\n                        position=\"absolute\"\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                    >\r\n                        <Typography variant=\"h5\" component=\"div\" color=\"textSecondary\">{timeRemaining}</Typography>\r\n                    </Box>\r\n                </Box>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/correct.6415db46.wav\";","export default __webpack_public_path__ + \"static/media/incorrect.70fff5c7.wav\";","import React, { useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../common/ChallengeQuestion';\r\nimport { SelectableOption } from '../common/SelectableOption';\r\nimport { SelectAnswerChallenge, SelectAnswerChallengeAnswer } from '../../types/SelectAnswerChallenge';\r\nimport { PictureGrid } from '../common/PictureGrid';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../common/Countdown';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { ChallengeOptions, ChallengePicture } from '../../types/Challenge';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    pictureContainer: {\r\n        height: '50%'\r\n    },\r\n    answerContainer: {\r\n        height: '30%',\r\n        paddingTop: '10px'\r\n    },\r\n    optionContainer: {\r\n        height: '50%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\ninterface SelectAnswerChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: SelectAnswerChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: SelectAnswerChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const SelectAnswerChallenger: React.FC<SelectAnswerChallengerProps> = (props: SelectAnswerChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [selectedAnswers, setSelectedAnswers] = useState<number[]>([]);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlePicturesChange = (newPictures: ChallengePicture[]) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                pictures: [...newPictures]\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleAnswerChange = (position: number, updatedAnswer: SelectAnswerChallengeAnswer) => {\r\n        const updatedAnswers = challenge.answers.map((anAnswer: SelectAnswerChallengeAnswer, idx: number) => {\r\n            if (idx !== position) {\r\n                if (!challenge.config.multiselect) {\r\n                    return {\r\n                        ...anAnswer,\r\n                        valid: false\r\n                    };\r\n                }\r\n                return { ...anAnswer };\r\n            }\r\n            return { ...updatedAnswer };\r\n        });\r\n\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                answers: updatedAnswers\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handlerOptionClick = (answerIdx: number) => {\r\n        if (mode === ComponentMode.Play) {\r\n            if (challenge.config.multiselect) {\r\n                const theIndex = selectedAnswers.findIndex((anAnswerIdx: number) => anAnswerIdx === answerIdx);\r\n                if (theIndex === -1) {\r\n                    setSelectedAnswers([...selectedAnswers, answerIdx]);\r\n                } else {\r\n                    setSelectedAnswers(selectedAnswers.filter((anAnswerIdx: number) => anAnswerIdx !== answerIdx));\r\n                }\r\n            } else {\r\n                if (challenge.answers[answerIdx].valid) {\r\n                    showResult(true);\r\n                } else {\r\n                    showResult(false);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const wrongsSelected = selectedAnswers\r\n            .map((anAnswerIdx: number) => challenge.answers[anAnswerIdx])\r\n            .filter((anAnswer: SelectAnswerChallengeAnswer) => !anAnswer.valid);\r\n        if (wrongsSelected.length === 0) {\r\n            const validsNotSelected = challenge.answers\r\n                .filter((anAnswer: SelectAnswerChallengeAnswer, answerIdx: number) =>\r\n                    anAnswer.valid && selectedAnswers.indexOf(answerIdx) === -1\r\n                );\r\n            if (validsNotSelected.length === 0) {\r\n                showResult(true);\r\n                return;\r\n            }\r\n        }\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.pictureContainer}>\r\n                <Grid container justify='center' style={{ height: '100%' }}>\r\n                    <Grid item xs={2} style={{ height: '100%' }}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} style={{ height: '100%' }}>\r\n                        <PictureGrid\r\n                            mode={mode}\r\n                            pictures={challenge.pictures}\r\n                            onPicturesChange={handlePicturesChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            challenge.config.multiselect && (\r\n                                <Fab\r\n                                    variant=\"extended\"\r\n                                    size=\"large\"\r\n                                    color=\"primary\"\r\n                                    disabled={mode === ComponentMode.Design || selectedAnswers.length === 0}\r\n                                    onClick={() => { handleCheckClick(); }}\r\n                                >\r\n                                    <Icon>check</Icon>&nbsp;{options?.language === Language.En ? 'Check' : 'Corregir'}\r\n                                </Fab>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='space-evenly' spacing={2} style={{ height: '100%' }}>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={challenge.answers[0].text}\r\n                            icon=\"wb_sunny\"\r\n                            valid={challenge.answers[0].valid}\r\n                            selected={\r\n                                mode === ComponentMode.Play\r\n                                && selectedAnswers.indexOf(0) >= 0\r\n                            }\r\n                            color='#f44336'\r\n                            fontSize={challenge.config.answerFontSize}\r\n                            multiselect={challenge.config.multiselect}\r\n                            showResults={highlightResults}\r\n                            onTextChange={(newText: string) => {\r\n                                handleAnswerChange(0, { ...challenge.answers[0], text: newText });\r\n                            }}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(0, { ...challenge.answers[0], valid });\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(0); }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={challenge.answers[1].text}\r\n                            icon=\"brightness_2\"\r\n                            valid={challenge.answers[1].valid}\r\n                            selected={\r\n                                mode === ComponentMode.Play\r\n                                && selectedAnswers.indexOf(1) >= 0\r\n                            }\r\n                            color='#03a9f4'\r\n                            fontSize={challenge.config.answerFontSize}\r\n                            multiselect={challenge.config.multiselect}\r\n                            showResults={highlightResults}\r\n                            onTextChange={(newText: string) => {\r\n                                handleAnswerChange(1, { ...challenge.answers[1], text: newText });\r\n                            }}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(1, { ...challenge.answers[1], valid });\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(1); }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={challenge.answers[2].text}\r\n                            icon=\"flash_on\"\r\n                            valid={challenge.answers[2].valid}\r\n                            selected={\r\n                                mode === ComponentMode.Play\r\n                                && selectedAnswers.indexOf(2) >= 0\r\n                            }\r\n                            color='#ffc107'\r\n                            fontSize={challenge.config.answerFontSize}\r\n                            multiselect={challenge.config.multiselect}\r\n                            showResults={highlightResults}\r\n                            onTextChange={(newText: string) => {\r\n                                handleAnswerChange(2, { ...challenge.answers[2], text: newText });\r\n                            }}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(2, { ...challenge.answers[2], valid });\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(2); }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={challenge.answers[3].text}\r\n                            icon=\"cloud\"\r\n                            valid={challenge.answers[3].valid}\r\n                            selected={\r\n                                mode === ComponentMode.Play\r\n                                && selectedAnswers.indexOf(3) >= 0\r\n                            }\r\n                            color='#4caf50'\r\n                            fontSize={challenge.config.answerFontSize}\r\n                            multiselect={challenge.config.multiselect}\r\n                            showResults={highlightResults}\r\n                            onTextChange={(newText: string) => {\r\n                                handleAnswerChange(3, { ...challenge.answers[3], text: newText });\r\n                            }}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(3, { ...challenge.answers[3], valid });\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(3); }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControlLabel, Grid, makeStyles, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { SelectAnswerChallengeConfig } from '../../types/SelectAnswerChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface SelectAnswerConfiguratorProps {\r\n    config: SelectAnswerChallengeConfig,\r\n    onConfigChange?: (config: SelectAnswerChallengeConfig) => void\r\n}\r\n\r\nexport const SelectAnswerConfigurator: React.FC<SelectAnswerConfiguratorProps> = (props: SelectAnswerConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<SelectAnswerChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputPictureCount = useRef({} as HTMLInputElement);\r\n    const checkPictureLabel = useRef({} as HTMLInputElement);\r\n    const inputAnswerFontSize = useRef({} as HTMLInputElement);\r\n    const checkMultiselect = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputPictureCount}\r\n                    type='number'\r\n                    label='Número de imágenes'\r\n                    inputProps={{ min: 1, max: 9 }}\r\n                    value={formData.pictureCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('pictureCount', parseInt(inputPictureCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkPictureLabel}\r\n                            name='checkPictureLabel'\r\n                            checked={formData.pictureLabel}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('pictureLabel', checkPictureLabel.current.checked); }}\r\n                        />}\r\n                    label='Numerar imágenes'\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputAnswerFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de las respuestas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.answerFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('answerFontSize', parseInt(inputAnswerFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkMultiselect}\r\n                            name='checkMultiselect'\r\n                            checked={formData.multiselect}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('multiselect', checkMultiselect.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Respuesta múltiple'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { SelectAnswerChallenge, SelectAnswerChallengeAnswer, SelectAnswerChallengeConfig } from '../../types/SelectAnswerChallenge';\r\nimport { SelectAnswerChallenger } from './SelectAnswerChallenger';\r\nimport { SelectAnswerConfigurator } from './SelectAnswerConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { ChallengePicture } from '../../types/Challenge';\r\nimport { PictureType } from '../../enums/PictureType';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface SelectAnswerChallengeDesignerProps {\r\n    challenge: SelectAnswerChallenge,\r\n    onChallengeChange: (challenge: SelectAnswerChallenge) => void\r\n}\r\n\r\nexport const SelectAnswerChallengeDesigner: React.FC<SelectAnswerChallengeDesignerProps> = (\r\n    props: SelectAnswerChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustPictures = (pictureCount: number): ChallengePicture[] => {\r\n        let pictures = [...challenge.pictures];\r\n        if (pictureCount > pictures.length) {\r\n            const newPictures = Array.from(Array(pictureCount - pictures.length))\r\n                .map(() => ({ type: PictureType.None, data: ''}));\r\n            pictures = [...pictures, ...newPictures];\r\n        } else if (pictureCount < pictures.length) {\r\n            pictures = pictures.slice(0, pictureCount);\r\n        }\r\n        return pictures;\r\n    };\r\n\r\n    const readjustValidAnswers = (multiselect: boolean): SelectAnswerChallengeAnswer[] => {\r\n        let validPresent = false;\r\n        const answers: SelectAnswerChallengeAnswer[] = challenge.answers.map((anAnswer: SelectAnswerChallengeAnswer) => {\r\n            if (!multiselect) {\r\n                if (anAnswer.valid && !validPresent) {\r\n                    validPresent = true;\r\n                    return { ...anAnswer };\r\n                }\r\n                return { ...anAnswer, valid: false };\r\n            }\r\n            return { ...anAnswer };\r\n        });\r\n        return answers;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: SelectAnswerChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: SelectAnswerChallengeConfig) => {\r\n        const pictures = readjustPictures(config.pictureCount);\r\n        const answers = readjustValidAnswers(config.multiselect);\r\n        const updatedChallenge: SelectAnswerChallenge = {\r\n            ...challenge,\r\n            pictures: [...pictures],\r\n            answers: [...answers],\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <SelectAnswerChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <SelectAnswerConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Card, Grid, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../common/ChallengeQuestion';\r\nimport { SelectableOption } from '../common/SelectableOption';\r\nimport { TrueOrFalseChallenge } from '../../types/TrueOrFalseChallenge';\r\nimport { PictureGrid } from '../common/PictureGrid';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../common/Countdown';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { ChallengeOptions, ChallengePicture } from '../../types/Challenge';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    pictureContainer: {\r\n        height: '60%'\r\n    },\r\n    answerContainer: {\r\n        height: '20%',\r\n        paddingTop: '10px'\r\n    },\r\n    optionContainer: {\r\n        height: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\ninterface TrueOrFalseChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: TrueOrFalseChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: TrueOrFalseChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const TrueOrFalseChallenger: React.FC<TrueOrFalseChallengerProps> = (props: TrueOrFalseChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlePicturesChange = (newPictures: ChallengePicture[]) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                pictures: [...newPictures]\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleAnswerChange = (updatedAnswer: boolean) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                answer: updatedAnswer\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handlerOptionClick = (answer: boolean) => {\r\n        if (mode === ComponentMode.Play) {\r\n            if (challenge.answer === answer) {\r\n                showResult(true);\r\n            } else {\r\n                showResult(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.pictureContainer}>\r\n                <Grid container justify='center' style={{ height: '100%' }}>\r\n                    <Grid item xs={2} style={{ height: '100%' }}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} style={{ height: '100%' }}>\r\n                        <PictureGrid\r\n                            mode={mode}\r\n                            pictures={challenge.pictures}\r\n                            onPicturesChange={handlePicturesChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll} />\r\n                </Grid>\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='space-evenly' spacing={2} style={{ height: '100%' }}>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={options?.language === Language.En ? 'True' : 'Verdadero'}\r\n                            icon=\"wb_sunny\"\r\n                            valid={challenge.answer}\r\n                            color='#4caf50'\r\n                            fontSize={42}\r\n                            showResults={highlightResults}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(true);\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(true); }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={options?.language === Language.En ? 'False' : 'Falso'}\r\n                            icon=\"brightness_2\"\r\n                            valid={!challenge.answer}\r\n                            color='#f44336'\r\n                            fontSize={42}\r\n                            showResults={highlightResults}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(false);\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(false); }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControlLabel, Grid, makeStyles, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { TrueOrFalseChallengeConfig } from '../../types/TrueOrFalseChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface TrueOrFalseConfiguratorProps {\r\n    config: TrueOrFalseChallengeConfig,\r\n    onConfigChange?: (config: TrueOrFalseChallengeConfig) => void\r\n}\r\n\r\nexport const TrueOrFalseConfigurator: React.FC<TrueOrFalseConfiguratorProps> = (props: TrueOrFalseConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<TrueOrFalseChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputPictureCount = useRef({} as HTMLInputElement);\r\n    const checkPictureLabel = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputPictureCount}\r\n                    type='number'\r\n                    label='Número de imágenes'\r\n                    inputProps={{ min: 1, max: 9 }}\r\n                    value={formData.pictureCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('pictureCount', parseInt(inputPictureCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkPictureLabel}\r\n                            name='checkPictureLabel'\r\n                            checked={formData.pictureLabel}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('pictureLabel', checkPictureLabel.current.checked); }}\r\n                        />}\r\n                    label='Numerar imágenes'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { TrueOrFalseChallenge, TrueOrFalseChallengeConfig } from '../../types/TrueOrFalseChallenge';\r\nimport { TrueOrFalseChallenger } from './TrueOrFalseChallenger';\r\nimport { TrueOrFalseConfigurator } from './TrueOrFalseConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { ChallengePicture } from '../../types/Challenge';\r\nimport { PictureType } from '../../enums/PictureType';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface TrueOrFalseChallengeDesignerProps {\r\n    challenge: TrueOrFalseChallenge,\r\n    onChallengeChange: (challenge: TrueOrFalseChallenge) => void\r\n}\r\n\r\nexport const TrueOrFalseChallengeDesigner: React.FC<TrueOrFalseChallengeDesignerProps> = (\r\n    props: TrueOrFalseChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustPictures = (pictureCount: number): ChallengePicture[] => {\r\n        let pictures = [...challenge.pictures];\r\n        if (pictureCount > pictures.length) {\r\n            const newPictures = Array.from(Array(pictureCount - pictures.length))\r\n                .map(() => ({ type: PictureType.None, data: ''}));\r\n            pictures = [...pictures, ...newPictures];\r\n        } else if (pictureCount < pictures.length) {\r\n            pictures = pictures.slice(0, pictureCount);\r\n        }\r\n        return pictures;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: TrueOrFalseChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: TrueOrFalseChallengeConfig) => {\r\n        const pictures = readjustPictures(config.pictureCount);\r\n        const updatedChallenge: TrueOrFalseChallenge = {\r\n            ...challenge,\r\n            pictures: [...pictures],\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <TrueOrFalseChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <TrueOrFalseConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import { makeStyles } from '@material-ui/core';\r\nimport React, { CSSProperties } from 'react';\r\nimport { useDrag } from 'react-dnd';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    item: {\r\n        borderRadius: '10em',\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.primary.contrastText,\r\n        padding: '0.5rem 1rem',\r\n        cursor: 'move',\r\n    }\r\n}));\r\n\r\ninterface DragableItemProps {\r\n    name: string,\r\n    style?: CSSProperties,\r\n    iconButton?: React.ReactNode\r\n}\r\n\r\nexport const DragableItem: React.FC<DragableItemProps> = (props: DragableItemProps) => {\r\n    const  { name, style, iconButton } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [{ opacity }, drag] = useDrag(\r\n        () => ({\r\n            type: 'dnd',\r\n            item: { name },\r\n            collect: (monitor) => ({\r\n                opacity: monitor.isDragging() ? 0.4 : 1,\r\n            }),\r\n        }),\r\n        [name],\r\n    );\r\n\r\n    return (\r\n        <div\r\n            ref={drag}\r\n            className={classes.item}\r\n            style={{\r\n                opacity,\r\n                ...style\r\n            }}\r\n        >\r\n            {name}\r\n            {\r\n                iconButton\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, Chip, Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { useDrop } from 'react-dnd';\r\nimport { DragableItem } from '../common/DragableItem';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        width: '100%',\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    titleContainer: {\r\n        width: '100%',\r\n        padding: '5px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.primary.contrastText\r\n    },\r\n    itemsContainer: {\r\n        padding: '5px',\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\ninterface GroupState {\r\n    title: string,\r\n    validItems: string[],\r\n    droppedItems: string[]\r\n}\r\n\r\ninterface DropGroupProps {\r\n    mode: ComponentMode,\r\n    title: string,\r\n    validItems: string[],\r\n    showResults: boolean,\r\n    fontSize?: number,\r\n    onTitleChange?: (newTitle: string) => void,\r\n    onItemsChange?: (newTitle: string[]) => void,\r\n    droppedItems?: string[],\r\n    onDrop?: (item: unknown) => void\r\n}\r\n\r\nexport const DropGroup: React.FC<DropGroupProps> = (props: DropGroupProps) => {\r\n    const {\r\n        mode,\r\n        title,\r\n        validItems,\r\n        showResults,\r\n        fontSize,\r\n        onTitleChange,\r\n        onItemsChange,\r\n        droppedItems,\r\n        onDrop\r\n    } = props;\r\n\r\n    const handleDrop = (item: unknown) => {\r\n        if(onDrop) {\r\n            onDrop(item);\r\n        }\r\n    };\r\n\r\n    const [{ isOver, canDrop }, drop] = useDrop({\r\n        accept: 'dnd',\r\n        drop: handleDrop,\r\n        collect: (monitor: { isOver: () => boolean, canDrop: () => boolean }) => ({\r\n            isOver: monitor.isOver(),\r\n            canDrop: monitor.canDrop(),\r\n        })\r\n    });\r\n\r\n    const [groupState, setGroupState] = useState<GroupState>({\r\n        title: title || '',\r\n        validItems: validItems || [],\r\n        droppedItems: droppedItems || []\r\n    });\r\n\r\n    const inputTitle = useRef({} as HTMLInputElement);\r\n    const inputItem = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (droppedItems != null) {\r\n            setGroupState({\r\n                ...groupState,\r\n                droppedItems: [...droppedItems]\r\n            });\r\n        }\r\n    }, [droppedItems]);\r\n\r\n\r\n    const handleTitleChange = () => {\r\n        const newState = {\r\n            ...groupState,\r\n            title: inputTitle.current.value\r\n        };\r\n        setGroupState(newState);\r\n        if (onTitleChange) {\r\n            onTitleChange(inputTitle.current.value);\r\n        }\r\n    };\r\n\r\n    const handleValidItemKeyPress = (evt: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (evt.code === 'Enter' && inputItem.current.value !== '') {\r\n            addValidItem();\r\n        }\r\n    };\r\n\r\n    const addValidItem = () => {\r\n        const updatedItems = [...(groupState.validItems), inputItem.current.value];\r\n        const newState: GroupState = {\r\n            ...groupState,\r\n            validItems: updatedItems\r\n        };\r\n        setGroupState(newState);\r\n        if (onItemsChange) {\r\n            onItemsChange(updatedItems);\r\n        }\r\n        inputItem.current.value = '';\r\n    };\r\n\r\n    const handleRemoveValidItem = (itemIdx: number) => {\r\n        const updatedItems = groupState.validItems.filter((anItem: string, idx: number) => itemIdx !== idx);\r\n        const newState: GroupState = {\r\n            ...groupState,\r\n            validItems: updatedItems\r\n        };\r\n        setGroupState(newState);\r\n        if (onItemsChange) {\r\n            onItemsChange(updatedItems);\r\n        }\r\n    };\r\n\r\n    const getDragableItemStyle = (item: string) => showResults ? (\r\n        validItems.indexOf(item) >= 0 ? {\r\n            fontSize: `${fontSize}px`,\r\n            backgroundColor: '#4caf50'\r\n        } : {\r\n            fontSize: `${fontSize}px`,\r\n            backgroundColor: '#f44336'\r\n        }\r\n    ) : {fontSize: `${fontSize}px`};\r\n\r\n    return (\r\n        <Card\r\n            elevation={4}\r\n            className={classes.root}\r\n            style={{\r\n                backgroundColor: (isOver && canDrop) ? '#efefef' : '#ffffff'\r\n            }}\r\n        >\r\n            <Grid container direction=\"column\" className={`${classes.fullHeight} ${classes.fullWidth}`}>\r\n                <Grid item className={classes.titleContainer}>\r\n                    {\r\n                        mode === ComponentMode.Play ? (\r\n                            <Typography style={{ fontSize }}>\r\n                                { title}\r\n                            </Typography>\r\n                        ) : (\r\n                            <TextField\r\n                                inputRef={inputTitle}\r\n                                value={groupState.title}\r\n                                style={{\r\n                                    width: '100%'\r\n                                }}\r\n                                inputProps={\r\n                                    {\r\n                                        style: {\r\n                                            fontSize,\r\n                                            textAlign: 'center',\r\n                                            color: '#ffffff'\r\n\r\n                                        }\r\n                                    }\r\n                                }\r\n                                onInput={handleTitleChange}\r\n                            />\r\n                        )\r\n                    }\r\n                </Grid>\r\n                <Grid item xs>\r\n                    <Grid container direction=\"column\" alignItems=\"center\" className={classes.itemsContainer} spacing={2}>\r\n                        {\r\n                            mode === ComponentMode.Design\r\n                            && groupState.validItems.map((anItem: string, itemIdx: number) => (\r\n                                <Grid item key={`item_${itemIdx}`}>\r\n                                    <Chip\r\n                                        label={anItem}\r\n                                        color=\"secondary\"\r\n                                        size=\"medium\"\r\n                                        style={{ fontSize, color: '#ffffff' }}\r\n                                        onDelete={() => handleRemoveValidItem(itemIdx)}\r\n                                    />\r\n                                </Grid>\r\n                            ))\r\n                        }\r\n                        {\r\n                            mode === ComponentMode.Design && (\r\n                                <Grid item key=\"newItem\">\r\n                                    <TextField\r\n                                        inputRef={inputItem}\r\n                                        variant=\"outlined\"\r\n                                        InputProps={\r\n                                            {\r\n                                                style: {\r\n                                                    fontSize,\r\n                                                    color: '#000000'\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        label=\"Nuevo elemento\"\r\n                                        onKeyPress={handleValidItemKeyPress}\r\n                                    />\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                        {\r\n                            mode === ComponentMode.Play && (\r\n                                <Grid item key=\"dropItem\" xs className={`${classes.fullWidth} ${classes.fullHeight}`}>\r\n                                    <div\r\n                                        ref={drop}\r\n                                        className={`${classes.fullWidth} ${classes.fullHeight}`}\r\n                                    >\r\n                                        <Grid container direction=\"column\" alignItems=\"center\" spacing={1} className={classes.fullHeight}>\r\n                                            {\r\n                                                groupState.droppedItems.map((aDroppedItem: string) => (\r\n                                                    <Grid\r\n                                                        item\r\n                                                        key={`gridItem_${aDroppedItem}`}\r\n                                                    >\r\n                                                        <DragableItem\r\n                                                            key={aDroppedItem}\r\n                                                            name={aDroppedItem}\r\n                                                            style={getDragableItemStyle(aDroppedItem)}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                ))\r\n                                            }\r\n                                        </Grid>\r\n                                    </div>\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../common/ChallengeQuestion';\r\nimport { ClassifyChallenge, ClassifyChallengeGroup } from '../../types/ClassifyChallenge';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../common/Countdown';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { DropGroup } from './DropGroup';\r\nimport { DragableItem } from '../common/DragableItem';\r\nimport { ChallengeOptions } from '../../types/Challenge';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    classifyContainer: {\r\n        height: '80%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionsContainer: {\r\n        height: '20%',\r\n        border: 'solid 1px gray',\r\n        backgroundColor: '#ffffff'\r\n    },\r\n    groupsContainer: {\r\n        height: '80%'\r\n    },\r\n}));\r\n\r\ninterface dropState {\r\n    groupName: string,\r\n    items: string[]\r\n}\r\n\r\nconst initialClassifyState = (challenge: ClassifyChallenge): dropState[] => {\r\n    return challenge.groups.map((aGroup: ClassifyChallengeGroup) => (\r\n        {\r\n            groupName: aGroup.name,\r\n            items: []\r\n        }\r\n    ));\r\n};\r\n\r\nconst reorderItems = (groups: ClassifyChallengeGroup[], mode: ComponentMode): string[] => {\r\n    let list: string[] = groups.reduce((acc: string[], current: ClassifyChallengeGroup) => [...acc, ...current.items], []);\r\n    if (mode === ComponentMode.Play) {\r\n        list = list.sort(() => Math.random() - 0.5);\r\n    }\r\n    return list;\r\n};\r\n\r\ninterface ClassifyChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: ClassifyChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: ClassifyChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const ClassifyChallenger: React.FC<ClassifyChallengerProps> = (props: ClassifyChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [classifyState, setClassifyState] =useState<dropState[]>(initialClassifyState(challenge));\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [draggableItems, setDragabbleItems] = useState<string[]>(reorderItems(challenge.groups, mode));\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setDragabbleItems(reorderItems(challenge.groups, mode));\r\n    }, [challenge.groups]);\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleNameChange = (groupIdx: number, updatedName: string) => {\r\n        const updatedGroups = challenge.groups.map((aGroup: ClassifyChallengeGroup, idx: number) => {\r\n            return {\r\n                ...aGroup,\r\n                name: idx !== groupIdx ? aGroup.name : updatedName\r\n            };\r\n        });\r\n\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                groups: updatedGroups\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleItemsChange = (groupIdx: number, updatedItems: string[]) => {\r\n        const updatedGroups = challenge.groups.map((aGroup: ClassifyChallengeGroup, idx: number) => {\r\n            if (idx !== groupIdx) {\r\n                return { ...aGroup };\r\n            }\r\n            return {\r\n                ...aGroup,\r\n                items: [...updatedItems]\r\n            };\r\n        });\r\n\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                groups: updatedGroups\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const correct = challenge.groups.reduce(\r\n            (accGroups: boolean, currentGroup: ClassifyChallengeGroup) => {\r\n                const correctItems = currentGroup.items.reduce(\r\n                    (accItems: boolean, currentItem: string) => {\r\n                        const theGroup = classifyState.find((aGroup: dropState) => aGroup.groupName === currentGroup.name);\r\n                        if (theGroup != null) {\r\n                            return accItems && theGroup.items.indexOf(currentItem) >= 0;\r\n                        }\r\n                        return false;\r\n                    },\r\n                    true\r\n                );\r\n                return accGroups && correctItems;\r\n            },\r\n            true\r\n        );\r\n        showResult(correct);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const isDropped = (itemName: string) => classifyState.reduce(\r\n        (acc: boolean, current: dropState) => acc || current.items.indexOf(itemName) >= 0,\r\n        false\r\n    );\r\n\r\n    const completed = () => {\r\n        const optionCount = challenge.groups.reduce(\r\n            (acc: number, current: ClassifyChallengeGroup) => acc + current.items.length,\r\n            0\r\n        );\r\n        const dropCount = classifyState.reduce(\r\n            (acc: number, current: dropState) => acc + current.items.length,\r\n            0\r\n        );\r\n        return optionCount === dropCount;\r\n    };\r\n\r\n    const handleDrop = (groupName: string, droppedItem: any) => {\r\n        const newDroppedItems: dropState[] = classifyState.map((aGroup: { groupName: string, items: string[]}) => {\r\n            if (aGroup.groupName !== groupName) {\r\n                return {\r\n                    ...aGroup,\r\n                    items: aGroup.items.filter((anItem: string) => anItem !== droppedItem.name)\r\n                };\r\n            }\r\n\r\n            const idxItem = aGroup.items.findIndex((anItem: string) => anItem === droppedItem.name);\r\n            if (idxItem >= 0) {\r\n                return {...aGroup};\r\n            }\r\n            return {\r\n                ...aGroup,\r\n                items: [\r\n                    ...aGroup.items,\r\n                    droppedItem.name\r\n                ]\r\n            };\r\n        });\r\n        setClassifyState(newDroppedItems);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.classifyContainer}>\r\n                <Grid container justify='center' className={classes.fullHeight}>\r\n                    <Grid item xs={2} className={classes.fullHeight}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} className={classes.fullHeight}>\r\n                        <DndProvider backend={HTML5Backend}>\r\n                            <Grid container spacing={2} className={classes.fullHeight}>\r\n                                <Grid item xs={12} className={classes.optionsContainer}>\r\n                                    <Grid container spacing={2} justify=\"space-around\" alignItems=\"center\">\r\n                                        {\r\n                                            draggableItems.map((anItem: string, idx: number) => !isDropped(anItem) && (\r\n                                                !isDropped(anItem) && (\r\n                                                    <Grid item key={`gridItem_${idx}`}>\r\n                                                        <DragableItem\r\n                                                            name={anItem}\r\n                                                            key={`dragable_${idx}`}\r\n                                                            style={{fontSize: challenge.config.itemsFontSize}}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                )\r\n                                            ))\r\n                                        }\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} className={classes.groupsContainer}>\r\n                                    <Grid container justify=\"space-evenly\" spacing={2} style={{ height: '100%' }}>\r\n                                        {\r\n                                            challenge.groups.map((aGroup: ClassifyChallengeGroup, idx: number) => (\r\n                                                <Grid\r\n                                                    item\r\n                                                    xs={4}\r\n                                                    key={`group_${idx}`}\r\n                                                >\r\n                                                    <DropGroup\r\n                                                        mode={mode}\r\n                                                        title={aGroup.name}\r\n                                                        validItems={aGroup.items}\r\n                                                        showResults={highlightResults}\r\n                                                        fontSize={challenge.config.itemsFontSize}\r\n                                                        onTitleChange={(newName: string) => handleNameChange(idx, newName)}\r\n                                                        onItemsChange={(newItems: string[]) => handleItemsChange(idx, newItems)}\r\n                                                        droppedItems={\r\n                                                            classifyState\r\n                                                                .find((auxGroup: dropState) => auxGroup.groupName === aGroup.name)\r\n                                                                ?.items\r\n                                                        }\r\n                                                        onDrop={(droppedItem: unknown) => handleDrop(aGroup.name, droppedItem)}\r\n                                                    />\r\n                                                </Grid>\r\n                                            ))\r\n                                        }\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </DndProvider>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || !completed()}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;{options?.language === Language.En ? 'Check' : 'Corregir'}\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ClassifyChallengeConfig } from '../../types/ClassifyChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface ClassifyConfiguratorProps {\r\n    config: ClassifyChallengeConfig,\r\n    onConfigChange?: (config: ClassifyChallengeConfig) => void\r\n}\r\n\r\nexport const ClassifyConfigurator: React.FC<ClassifyConfiguratorProps> = (props: ClassifyConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<ClassifyChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputItemsFontSize = useRef({} as HTMLInputElement);\r\n    const inputGroupCount = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemsFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemsFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('itemsFontSize', parseInt(inputItemsFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputGroupCount}\r\n                    type='number'\r\n                    label='Número de grupos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.groupCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('groupCount', parseInt(inputGroupCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { ClassifyChallenge, ClassifyChallengeConfig, ClassifyChallengeGroup } from '../../types/ClassifyChallenge';\r\nimport { ClassifyChallenger } from './ClassifyChallenger';\r\nimport { ClassifyConfigurator } from './ClassifyConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface ClassifyChallengeDesignerProps {\r\n    challenge: ClassifyChallenge,\r\n    onChallengeChange: (challenge: ClassifyChallenge) => void\r\n}\r\n\r\nexport const ClassifyChallengeDesigner: React.FC<ClassifyChallengeDesignerProps> = (\r\n    props: ClassifyChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustGroups = (groupCount: number): ClassifyChallengeGroup[] => {\r\n        let groups = [...challenge.groups];\r\n        if (groupCount > groups.length) {\r\n            const newGroups = Array.from(Array(groupCount - groups.length))\r\n                .map(() => ({ name: '', items: []}));\r\n            groups = [...groups, ...newGroups];\r\n        } else if (groupCount < groups.length) {\r\n            groups = groups.slice(0, groupCount);\r\n        }\r\n        return groups;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: ClassifyChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: ClassifyChallengeConfig) => {\r\n        const groups = readjustGroups(config.groupCount);\r\n        const updatedChallenge: ClassifyChallenge = {\r\n            ...challenge,\r\n            groups,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <ClassifyChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <ClassifyConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../common/ChallengeQuestion';\r\nimport { SortChallenge } from '../../types/SortChallenge';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../common/Countdown';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    pictureContainer: {\r\n        height: '80%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionsContainer: {\r\n        height: '20%',\r\n        border: 'solid 1px'\r\n    },\r\n    item: {\r\n        padding: '5px 10px',\r\n        backgroundColor: theme.palette.secondary.main,\r\n        color: theme.palette.primary.contrastText,\r\n        borderRadius: '20px'\r\n    },\r\n    groupsContainer: {\r\n        height: '80%'\r\n    },\r\n}));\r\n\r\ninterface SortChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: SortChallenge,\r\n    onChallengeChange?: (updatedChallenge: SortChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const SortChallenger: React.FC<SortChallengerProps> = (props: SortChallengerProps) => {\r\n    const { mode, challenge, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [selectedAnswers /* , setSelectedAnswers */] = useState<number[]>([]);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n    //     const wrongsSelected = selectedAnswers\r\n    //         .map((anAnswerIdx: number) => challenge.answers[anAnswerIdx])\r\n    //         .filter((anAnswer: SelectAnswerChallengeAnswer) => !anAnswer.valid);\r\n    //     if (wrongsSelected.length === 0) {\r\n    //         const validsNotSelected = challenge.answers\r\n    //             .filter((anAnswer: SelectAnswerChallengeAnswer, answerIdx: number) =>\r\n    //                 anAnswer.valid && selectedAnswers.indexOf(answerIdx) === -1\r\n    //             );\r\n    //         if (validsNotSelected.length === 0) {\r\n    //             showResult(true);\r\n    //             return;\r\n    //         }\r\n    //     }\r\n    //     showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.pictureContainer}>\r\n                <Grid container justify='center' className={classes.fullHeight}>\r\n                    <Grid item xs={2} className={classes.fullHeight}>\r\n                        <Countdown\r\n                            mode={mode}\r\n                            time={challenge.config.timeLimit}\r\n                            stopTimer={stopTimer}\r\n                            onTimeUp={handlerTimeUp}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={8} className={classes.fullHeight}>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || selectedAnswers.length === 0}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;Corregir\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { SortChallengeConfig } from '../../types/SortChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface SortConfiguratorProps {\r\n    config: SortChallengeConfig,\r\n    onConfigChange?: (config: SortChallengeConfig) => void\r\n}\r\n\r\nexport const SortConfigurator: React.FC<SortConfiguratorProps> = (props: SortConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<SortChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputItemsFontSize = useRef({} as HTMLInputElement);\r\n    const inputItemCount = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemsFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemsFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('itemsFontSize', parseInt(inputItemsFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemCount}\r\n                    type='number'\r\n                    label='Número de elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('groupCount', parseInt(inputItemCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { SortChallenge, SortChallengeConfig } from '../../types/SortChallenge';\r\nimport { SortChallenger } from './SortChallenger';\r\nimport { SortConfigurator } from './SortConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface SortChallengeDesignerProps {\r\n    challenge: SortChallenge,\r\n    onChallengeChange: (challenge: SortChallenge) => void\r\n}\r\n\r\nexport const SortChallengeDesigner: React.FC<SortChallengeDesignerProps> = (\r\n    props: SortChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustItems = (itemCount: number): string[] => {\r\n        let items = [...challenge.items];\r\n        if (itemCount > items.length) {\r\n            const newItems = Array.from(Array(itemCount - items.length))\r\n                .map(() => (''));\r\n            items = [...items, ...newItems];\r\n        } else if (itemCount < items.length) {\r\n            items = items.slice(0, itemCount);\r\n        }\r\n        return items;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: SortChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: SortChallengeConfig) => {\r\n        const items = readjustItems(config.itemCount);\r\n        const updatedChallenge: SortChallenge = {\r\n            ...challenge,\r\n            items,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <SortChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <SortConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useRef, useState } from 'react';\r\nimport { Button, Grid, Icon, makeStyles, TextField } from '@material-ui/core';\r\nimport { FillTableChallengeCell } from '../../types/FillTableChallenge';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: 'solid 1px gray'\r\n    },\r\n    fixed: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: '#ffffff'\r\n    },\r\n    valid: {\r\n        backgroundColor: '#4caf50',\r\n    },\r\n    invalid: {\r\n        backgroundColor: '#f44336',\r\n    }\r\n}));\r\n\r\ninterface TableCellProps {\r\n    mode: ComponentMode,\r\n    cell: FillTableChallengeCell,\r\n    fixed?: boolean,\r\n    fontSize?: number,\r\n    showResults?: boolean,\r\n    success?: boolean,\r\n    onCellChange: (newCell: FillTableChallengeCell) => void\r\n}\r\n\r\nexport const TableCell: React.FC<TableCellProps> = (props: TableCellProps) => {\r\n    const { mode, cell, fixed, fontSize, showResults, success, onCellChange } = props;\r\n\r\n    const [formData, setFormData] = useState<FillTableChallengeCell>(cell);\r\n    const inputText = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTextChange = () => {\r\n        const newState = {\r\n            ...formData,\r\n            text: inputText.current.value\r\n        };\r\n        setFormData(newState);\r\n        onCellChange(newState);\r\n    };\r\n\r\n    const handleVisibilityChange = () => {\r\n        const newState ={\r\n            ...formData,\r\n            hidden: !formData.hidden\r\n        };\r\n        setFormData(newState);\r\n        onCellChange(newState);\r\n    };\r\n\r\n    return (\r\n        <Grid container alignItems=\"center\" className={`${classes.root} ${fixed ? classes.fixed : (showResults ? (success ? classes.valid : classes.invalid ) : '')}`}>\r\n            {\r\n                mode === ComponentMode.Design && !fixed && (\r\n                    <Grid item>\r\n                        <Button value=\"hidden\" onClick={handleVisibilityChange}>\r\n                            <Icon color={formData.hidden ? 'secondary' : 'primary'}>\r\n                                {\r\n                                    formData.hidden ? 'visibility_off' : 'visibility'\r\n                                }\r\n                            </Icon>\r\n                        </Button>\r\n                    </Grid>\r\n                )\r\n            }\r\n            <Grid item xs>\r\n                {\r\n                    (mode === ComponentMode.Design || formData.hidden) ? (\r\n                        <TextField\r\n                            inputRef={inputText}\r\n                            value={formData.text}\r\n                            color='secondary'\r\n                            style={{ marginLeft: '10px', width: 'calc(100% - 20px)' }}\r\n                            inputProps = {{\r\n                                style: {\r\n                                    textAlign: 'center',\r\n                                    fontSize: `${fontSize != null ? fontSize : 28}px`,\r\n                                    color: fixed || showResults ? '#ffffff': '#000000',\r\n                                    width: '100%'\r\n                                }\r\n                            }}\r\n                            onInput={handleTextChange}\r\n                        />\r\n                    ) : (\r\n                        <div\r\n                            style={{\r\n                                textAlign: 'center',\r\n                                fontSize: `${fontSize != null ? fontSize : 28}px`,\r\n                                color: fixed || showResults ? '#ffffff': '#000000'\r\n                            }}\r\n                        >\r\n                            {formData.text}\r\n                        </div>\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../common/ChallengeQuestion';\r\nimport { FillTableChallenge, FillTableChallengeCell } from '../../types/FillTableChallenge';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../common/Countdown';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { TableCell } from './TableCell';\r\nimport { ChallengeOptions } from '../../types/Challenge';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    answerContainer: {\r\n        height: '80%'\r\n    },\r\n    optionContainer: {\r\n        height: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    cell: {\r\n        // border: 'solid 1px gray',\r\n        height: '60px'\r\n    }\r\n}));\r\n\r\nconst initialFillTableState = (challenge: FillTableChallenge): FillTableChallengeCell[][] => {\r\n    return challenge.items.map((aRow: FillTableChallengeCell[]) => {\r\n        const updatedColumns = aRow.map((aColumn: FillTableChallengeCell) => {\r\n            return aColumn.hidden ? {...aColumn, text: ''} : {...aColumn};\r\n        });\r\n        return updatedColumns;\r\n    });\r\n};\r\n\r\ninterface FillTableChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: FillTableChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: FillTableChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const FillTableChallenger: React.FC<FillTableChallengerProps> = (props: FillTableChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [fillTableState, setFillTableState] =useState<FillTableChallengeCell[][]>(initialFillTableState(challenge));\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const handleCellChange = (newCell: FillTableChallengeCell, rowIdx: number, columnIdx: number) => {\r\n        const updatedItems = (mode === ComponentMode.Design ? challenge.items : fillTableState)\r\n            .map((aRow: FillTableChallengeCell[], auxRowIdx: number) => {\r\n                if (auxRowIdx !== rowIdx) {\r\n                    return [...aRow];\r\n                }\r\n                const updatedColumns = aRow.map((aColumn: FillTableChallengeCell, auxColumnIdx: number) => {\r\n                    return auxColumnIdx === columnIdx ? {...newCell} : {...aColumn};\r\n                });\r\n                return updatedColumns;\r\n            });\r\n        if (mode === ComponentMode.Play) {\r\n            setFillTableState(updatedItems);\r\n        } else if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                items: updatedItems\r\n            });\r\n        }\r\n    };\r\n\r\n    const completed = () => {\r\n        return fillTableState.reduce(\r\n            (accRow: boolean, currentRow: FillTableChallengeCell[], rowIdx: number) => (\r\n                accRow\r\n                && currentRow.reduce(\r\n                    (accColumn: boolean, currentColumn: FillTableChallengeCell, columnIdx: number) => (\r\n                        accColumn\r\n                        && (\r\n                            (\r\n                                challenge.config.firstRowFixed\r\n                                && rowIdx === 0\r\n                                && challenge.config.firstColumnFixed\r\n                                && columnIdx === 0\r\n                            )\r\n                            || currentColumn.text !== ''\r\n                        )\r\n                    ),\r\n                    true\r\n                )\r\n            ),\r\n            true\r\n        );\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const result = fillTableState.reduce(\r\n            (accRow: boolean, currentRow: FillTableChallengeCell[], rowIdx: number) => (\r\n                accRow\r\n                && currentRow.reduce(\r\n                    (accColumn: boolean, currentColumn: FillTableChallengeCell, columnIdx: number) => (\r\n                        accColumn\r\n                        && (\r\n                            (\r\n                                challenge.config.firstRowFixed\r\n                                && rowIdx === 0\r\n                                && challenge.config.firstColumnFixed\r\n                                && columnIdx === 0\r\n                            )\r\n                            || currentColumn.text === challenge.items[rowIdx][columnIdx].text\r\n                        )\r\n                    ),\r\n                    true\r\n                )\r\n            ),\r\n            true\r\n        );\r\n\r\n        showResult(result);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='center' style={{ height: '100%' }}>\r\n                    <Grid item xs={2} style={{ height: '100%' }}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} style={{ height: '100%' }}>\r\n                        <Grid container alignItems=\"center\" style={{ height: '100%' }}>\r\n                            <Grid item xs>\r\n                                <Grid container direction=\"column\">\r\n                                    {\r\n                                        (mode === ComponentMode.Design ? challenge.items : fillTableState)\r\n                                            .map((aRow: FillTableChallengeCell[], rowIdx: number) => (\r\n                                                <Grid item xs key={`row_${rowIdx}`}>\r\n                                                    <Grid container>\r\n                                                        {\r\n                                                            aRow.map((aColumn: FillTableChallengeCell, columnIdx: number) => (\r\n                                                                <Grid item xs key={`column_${columnIdx}`} className={classes.cell}>\r\n                                                                    {\r\n                                                                        // mode === ComponentMode.Design\r\n                                                                        // &&\r\n                                                                        !(\r\n                                                                            challenge.config.firstRowFixed\r\n                                                                            && challenge.config.firstColumnFixed\r\n                                                                            && rowIdx === 0\r\n                                                                            && columnIdx === 0\r\n                                                                        ) && (\r\n                                                                            <TableCell\r\n                                                                                mode={mode}\r\n                                                                                cell={aColumn}\r\n                                                                                fixed={\r\n                                                                                    (\r\n                                                                                        challenge.config.firstRowFixed\r\n                                                                                        && rowIdx === 0\r\n                                                                                    ) || (\r\n                                                                                        challenge.config.firstColumnFixed\r\n                                                                                        && columnIdx === 0\r\n                                                                                    )\r\n                                                                                }\r\n                                                                                fontSize={challenge.config.itemsFontSize}\r\n                                                                                showResults={highlightResults}\r\n                                                                                success={\r\n                                                                                    (\r\n                                                                                        !challenge.config.firstRowFixed\r\n                                                                                        || rowIdx !== 0\r\n                                                                                    ) && (\r\n                                                                                        !challenge.config.firstColumnFixed\r\n                                                                                        || columnIdx !== 0\r\n                                                                                    ) && (\r\n                                                                                        challenge.items[rowIdx][columnIdx].text === fillTableState[rowIdx][columnIdx].text\r\n                                                                                    )\r\n                                                                                }\r\n                                                                                onCellChange={(cell)=>{\r\n                                                                                    handleCellChange(cell, rowIdx, columnIdx);\r\n                                                                                }}\r\n                                                                            />\r\n                                                                        )\r\n                                                                    }\r\n                                                                </Grid>\r\n                                                            ))\r\n                                                        }\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            ))\r\n                                    }\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || !completed()}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;{options?.language === Language.En ? 'Check' : 'Corregir'}\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControlLabel, Grid, makeStyles, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { FillTableChallengeConfig } from '../../types/FillTableChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface FillTableConfiguratorProps {\r\n    config: FillTableChallengeConfig,\r\n    onConfigChange?: (config: FillTableChallengeConfig) => void\r\n}\r\n\r\nexport const FillTableConfigurator: React.FC<FillTableConfiguratorProps> = (props: FillTableConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<FillTableChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputItemsFontSize = useRef({} as HTMLInputElement);\r\n    const inputRowCount = useRef({} as HTMLInputElement);\r\n    const checkFirstRowFixed = useRef({} as HTMLInputElement);\r\n    const inputColumnCount = useRef({} as HTMLInputElement);\r\n    const checkFirstColumnFixed = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemsFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemsFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('itemsFontSize', parseInt(inputItemsFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputRowCount}\r\n                    type='number'\r\n                    label='Número de filas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.rowCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('rowCount', parseInt(inputRowCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkFirstRowFixed}\r\n                            name='checkMultiselect'\r\n                            checked={formData.firstRowFixed}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('firstRowFixed', checkFirstRowFixed.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Primera fila fija'\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputColumnCount}\r\n                    type='number'\r\n                    label='Número de columnas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.columnCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('columnCount', parseInt(inputColumnCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkFirstColumnFixed}\r\n                            name='checkFirstColumnFixed'\r\n                            checked={formData.firstColumnFixed}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('firstColumnFixed', checkFirstColumnFixed.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Primera columna fija'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { FillTableChallenge, FillTableChallengeCell, FillTableChallengeConfig } from '../../types/FillTableChallenge';\r\nimport { FillTableChallenger } from './FillTableChallenger';\r\nimport { FillTableConfigurator } from './FillTableConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface FillTableChallengeDesignerProps {\r\n    challenge: FillTableChallenge,\r\n    onChallengeChange: (challenge: FillTableChallenge) => void\r\n}\r\n\r\nexport const FillTableChallengeDesigner: React.FC<FillTableChallengeDesignerProps> = (\r\n    props: FillTableChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustTable = (rowCount: number, columnCount: number): FillTableChallengeCell[][] => {\r\n        let items = [...challenge.items];\r\n        if (rowCount > items.length) {\r\n            const auxColumn = Array.from(Array(items[0].length)).map(() => ({ text: '', hidden: false}));\r\n            const newRows = Array.from(Array(rowCount - items.length))\r\n                .map(() => [...auxColumn]);\r\n            items = [...items, ...newRows];\r\n        } else if (rowCount < items.length) {\r\n            items = items.slice(0, rowCount);\r\n        }\r\n\r\n        if (columnCount > items[0].length) {\r\n            const newColumns = Array.from(Array(columnCount - items[0].length))\r\n                .map(() => ({ text: '', hidden: false}));\r\n            items = items.map((anItem: FillTableChallengeCell[]) => [...anItem, ...newColumns]);\r\n        } else if (columnCount < items[0].length) {\r\n            items = items.map((anItem: FillTableChallengeCell[]) => anItem.slice(0, columnCount));\r\n        }\r\n\r\n        return items;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: FillTableChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: FillTableChallengeConfig) => {\r\n        const items = readjustTable(config.rowCount, config.columnCount);\r\n        const updatedChallenge: FillTableChallenge = {\r\n            ...challenge,\r\n            items,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <FillTableChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <FillTableConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","export const splitSentence = (text: string): string[] => {\r\n    return text\r\n        .replace(/\\./g, ' .')\r\n        .replace(/,/g, ' ,')\r\n        .replace(/;/g, ' ;')\r\n        .replace(/:/g, ' :')\r\n        .split( ' ');\r\n};\r\n\r\nexport const joinSentence = (textParts: string[]): string => {\r\n    return textParts\r\n        .join(' ')\r\n        .replace(/ \\./g, '.')\r\n        .replace(/ ,/g, ',')\r\n        .replace(/ ;/g, ';')\r\n        .replace(/ :/g, ':');\r\n};\r\n\r\nexport const createQueryString = (params: Record<string, unknown>): string => (\r\n    Object.keys(params).reduce(\r\n        (acc: string, current: string, idx: number) => (\r\n            `${acc}${idx > 0 ? '&' : ''}${current}=${params[current]}`\r\n        ),\r\n        '?'\r\n    )\r\n);\r\n\r\nexport const parseQueryString = (qs: string): any => {\r\n    const qsAux = qs[0] === '?' ? qs.slice(1) : qs;\r\n    const result: any = {};\r\n    qsAux.split(/&/g).forEach((aParam: string) => {\r\n        const paramParts = aParam.split('=');\r\n        result[paramParts[0]] = (\r\n            paramParts[1] === 'true' || paramParts[1] === 'false' ? paramParts[1] === 'true' : paramParts[1]\r\n        );\r\n    });\r\n    return result;\r\n};\r\n\r\nexport const checkEqual = (\r\n    stringA: string,\r\n    stringB: string,\r\n    checkCapitalLetters: boolean,\r\n    checkAccentMarks: boolean\r\n): boolean => {\r\n    let strA = stringA;\r\n    let strB = stringB;\r\n\r\n    if (!checkCapitalLetters) {\r\n        strA = strA.toLowerCase();\r\n        strB = strB.toLowerCase();\r\n    }\r\n\r\n    if (!checkAccentMarks) {\r\n        strA = strA\r\n            .replace(/Á/g, 'A')\r\n            .replace(/É/g, 'E')\r\n            .replace(/Í/g, 'I')\r\n            .replace(/Ó/g, 'O')\r\n            .replace(/Ú/g, 'U')\r\n            .replace(/á/g, 'a')\r\n            .replace(/é/g, 'e')\r\n            .replace(/í/g, 'i')\r\n            .replace(/ó/g, 'o')\r\n            .replace(/ú/g, 'u');\r\n        strB = strB\r\n            .replace(/Á/g, 'A')\r\n            .replace(/É/g, 'E')\r\n            .replace(/Í/g, 'I')\r\n            .replace(/Ó/g, 'O')\r\n            .replace(/Ú/g, 'U')\r\n            .replace(/á/g, 'a')\r\n            .replace(/é/g, 'e')\r\n            .replace(/í/g, 'i')\r\n            .replace(/ó/g, 'o')\r\n            .replace(/ú/g, 'u');\r\n    }\r\n\r\n    return strA === strB;\r\n};\r\n","import { CSSProperties } from '@material-ui/styles';\r\nimport React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport { colors } from '../../theme';\r\n\r\ninterface DropGapProps {\r\n    value: string,\r\n    style?: CSSProperties,\r\n    fontSize: number,\r\n    onDrop: (text: string) => void\r\n}\r\n\r\nexport const DropGap: React.FC<DropGapProps> = (props: DropGapProps) => {\r\n    const { value, style, fontSize, onDrop } = props;\r\n\r\n    const handleDrop = (item: any) => {\r\n        onDrop(item.name);\r\n    };\r\n\r\n    const [{ isOver, canDrop }, drop] = useDrop({\r\n        accept: 'dnd',\r\n        drop: handleDrop,\r\n        collect: (monitor: { isOver: () => boolean, canDrop: () => boolean }) => {\r\n            return ({\r\n                isOver: monitor.isOver(),\r\n                canDrop: monitor.canDrop()\r\n            });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div\r\n            ref={drop}\r\n            style={{\r\n                width: '150px',\r\n                height: '50px',\r\n                lineHeight: '50px',\r\n                textAlign: 'center',\r\n                borderBottom: `solid 1px ${colors.primary.main}`,\r\n                color: colors.primary.main,\r\n                fontSize: `${fontSize ? fontSize : 50}px`,\r\n                ...style\r\n            }}\r\n\r\n        >\r\n            {value}\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Grid, Icon, IconButton, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { FillMethod } from '../../enums/FillMethod';\r\nimport { FillGapsChallengeExpression, FillGapsChallengeSentence } from '../../types/FillGapsChallenge';\r\nimport { checkEqual, joinSentence, splitSentence } from '../../utils/utilStrings';\r\nimport { colors } from '../../theme';\r\nimport { DropGap } from './DropGap';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    word: {\r\n        padding: '2px',\r\n        // backgroundColor: '#f0f0f0',\r\n        '& :hover': {\r\n            backgroundColor: theme.palette.primary.light,\r\n            color:'#ffffff',\r\n            cursor: 'pointer',\r\n            borderRadius: '10px'\r\n        }\r\n    },\r\n    selected: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        borderRadius: '10px',\r\n        color:'#ffffff',\r\n    }\r\n}));\r\n\r\ninterface SentencePart {\r\n    type: 'text' | 'hidden',\r\n    hiddenIdx: number,\r\n    value: string,\r\n    answer: string\r\n}\r\n\r\nexport interface FillGapsSentenceAnswer {\r\n    hiddenIdx: number,\r\n    value: string\r\n}\r\n\r\nconst sentenceParts = (sentence: FillGapsChallengeSentence): SentencePart[] => {\r\n    const result: SentencePart[] = [];\r\n    let currentIdx = 0;\r\n    const words = splitSentence(sentence.text);\r\n    sentence.hiddenExpressions.forEach((anExp: FillGapsChallengeExpression, idx: number) => {\r\n        if (anExp.initPosition > currentIdx) {\r\n            result.push({\r\n                type: 'text',\r\n                hiddenIdx: -1,\r\n                value: joinSentence(words.slice(currentIdx, anExp.initPosition)),\r\n                answer: ''\r\n            });\r\n        }\r\n        result.push({\r\n            type: 'hidden',\r\n            hiddenIdx: idx,\r\n            value: joinSentence(words.slice(anExp.initPosition, anExp.initPosition + anExp.wordCount)),\r\n            answer: ''\r\n        });\r\n        currentIdx = anExp.initPosition + anExp.wordCount;\r\n    });\r\n    if (currentIdx < words.length - 1) {\r\n        result.push({\r\n            type: 'text',\r\n            hiddenIdx: -1,\r\n            value: joinSentence(words.slice(currentIdx)),\r\n            answer: ''\r\n        });\r\n    }\r\n    return result;\r\n};\r\n\r\ninterface FillGapsSentenceProps {\r\n    mode: ComponentMode,\r\n    sentence: FillGapsChallengeSentence,\r\n    fillMethod: FillMethod,\r\n    checkCapitalLetters: boolean,\r\n    checkAccentMarks: boolean,\r\n    showResults: boolean,\r\n    fontSize: number,\r\n    onSentenceChange: (newSentence: FillGapsChallengeSentence) => void,\r\n    onSentenceRemove: () => void,\r\n    onAnswersChange: (answers: FillGapsSentenceAnswer[]) => void\r\n}\r\n\r\nexport const FillGapsSentence: React.FC<FillGapsSentenceProps> = (props: FillGapsSentenceProps) => {\r\n    const {mode,\r\n        sentence,\r\n        fillMethod,\r\n        checkCapitalLetters,\r\n        checkAccentMarks,\r\n        showResults,\r\n        fontSize,\r\n        onSentenceChange,\r\n        onSentenceRemove,\r\n        onAnswersChange\r\n    } = props;\r\n\r\n    const [parts, setParts] = useState<SentencePart[]>(sentenceParts(sentence));\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleWordClick = (wordIdx: number) => {\r\n        let updatedHiddenExpressions: FillGapsChallengeExpression[] = [];\r\n\r\n        if (sentence.hiddenExpressions.length === 0) {\r\n            //Primera expresion\r\n            console.log('');\r\n            updatedHiddenExpressions.push({\r\n                initPosition: wordIdx,\r\n                wordCount: 1,\r\n                alternatives: []\r\n            });\r\n        }\r\n\r\n        sentence.hiddenExpressions.some((anExp: FillGapsChallengeExpression, idx: number) => {\r\n            let completeArrayFrom = -1;\r\n            if (idx === 0 && wordIdx < anExp.initPosition - 1) {\r\n                //Antes de la primera expresion y no contigua\r\n                // console.log('Antes de la primera expresion y no contigua');\r\n                updatedHiddenExpressions = [\r\n                    { initPosition: wordIdx, wordCount: 1, alternatives:[] },\r\n                    ...sentence.hiddenExpressions\r\n                ];\r\n                return true;\r\n            } else if (wordIdx === anExp.initPosition - 1) {\r\n                //Contigua a la expresion por delante\r\n                // console.log('Contigua a la expresion por delante');\r\n                updatedHiddenExpressions.push(\r\n                    { initPosition: wordIdx, wordCount: anExp.wordCount + 1, alternatives: [...anExp.alternatives] }\r\n                );\r\n                completeArrayFrom = idx;\r\n            } else if (wordIdx === anExp.initPosition) {\r\n                //Sobre la primera palabra de la expresion\r\n                // console.log('Sobre la primera palabra de la expresion');\r\n                if (anExp.wordCount === 1) {\r\n                    //Si la expresion solo tiene una palabra\r\n                    // console.log('Si la expresion solo tiene una palabra');\r\n                } else {\r\n                    //Si la expresion tiene más de una palabra\r\n                    // console.log('Si la expresion tiene más de una palabra');\r\n                    updatedHiddenExpressions.push(\r\n                        { initPosition: wordIdx + 1, wordCount: anExp.wordCount - 1, alternatives: [...anExp.alternatives] }\r\n                    );\r\n                }\r\n                completeArrayFrom = idx;\r\n            } else if (wordIdx > anExp.initPosition && wordIdx < anExp.initPosition + anExp.wordCount - 1) {\r\n                //Sobre una palabra interior de la expresion\r\n                // console.log('Sobre una palabra interior de la expresion');\r\n                updatedHiddenExpressions = [\r\n                    ...updatedHiddenExpressions,\r\n                    {\r\n                        initPosition: anExp.initPosition,\r\n                        wordCount: wordIdx - anExp.initPosition,\r\n                        alternatives: []\r\n                    },\r\n                    {\r\n                        initPosition: wordIdx + 1,\r\n                        wordCount: anExp.initPosition + anExp.wordCount - wordIdx - 1,\r\n                        alternatives: []\r\n                    }\r\n                ];\r\n                completeArrayFrom = idx;\r\n            } else if (wordIdx === anExp.initPosition + anExp.wordCount - 1) {\r\n                //Sobre la ultima palabra de la expresion\r\n                // console.log('Sobre la ultima palabra de la expresion');\r\n                if (anExp.wordCount === 1) {\r\n                    //Si la expresion solo tiene una palabra\r\n                    // console.log('Si la expresion solo tiene una palabra');\r\n                } else {\r\n                    //Si la expresion tiene más de una palabra\r\n                    // console.log('Si la expresion tiene más de una palabra');\r\n                    updatedHiddenExpressions.push(\r\n                        {\r\n                            initPosition: anExp.initPosition,\r\n                            wordCount: anExp.wordCount - 1,\r\n                            alternatives: [...anExp.alternatives]\r\n                        }\r\n                    );\r\n                }\r\n                completeArrayFrom = idx;\r\n            } else if (idx < sentence.hiddenExpressions.length - 1\r\n                && wordIdx > anExp.initPosition + anExp.wordCount\r\n                && wordIdx < sentence.hiddenExpressions[idx + 1].initPosition - 1) {\r\n                //Entre dos expresiones de manera no contigua\r\n                // console.log('Entre dos expresiones de manera no contigua');\r\n                updatedHiddenExpressions = [\r\n                    ...updatedHiddenExpressions,\r\n                    {...anExp},\r\n                    { initPosition: wordIdx, wordCount: 1, alternatives: [] }\r\n                ];\r\n                completeArrayFrom = idx;\r\n            } else if (idx < sentence.hiddenExpressions.length - 1\r\n                && wordIdx === anExp.initPosition + anExp.wordCount\r\n                && wordIdx === sentence.hiddenExpressions[idx + 1].initPosition - 1) {\r\n                //Entre dos expresiones de manera contigua a ambas\r\n                // console.log('Entre dos expresiones de manera contigua a ambas');\r\n                updatedHiddenExpressions.push({\r\n                    initPosition: anExp.initPosition,\r\n                    wordCount: anExp.wordCount + sentence.hiddenExpressions[idx + 1].wordCount + 1,\r\n                    alternatives: []\r\n                });\r\n                completeArrayFrom = idx + 1;\r\n            } else if (wordIdx === anExp.initPosition + anExp.wordCount) {\r\n                //Contigua a la expresion por detras\r\n                // console.log('Contigua a la expresion por detras');\r\n                updatedHiddenExpressions.push({\r\n                    initPosition: anExp.initPosition,\r\n                    wordCount: anExp.wordCount + 1,\r\n                    alternatives: [...anExp.alternatives]\r\n                });\r\n                completeArrayFrom = idx;\r\n            } else if (idx === sentence.hiddenExpressions.length - 1) {\r\n                //Despues de la ultima expresion y de manera no contigua\r\n                // console.log('Despues de la ultima expresion y de manera no contigua');\r\n                updatedHiddenExpressions = [\r\n                    ...updatedHiddenExpressions,\r\n                    {...anExp},\r\n                    { initPosition: wordIdx, wordCount: 1, alternatives: [] }\r\n                ];\r\n                return true;\r\n            }\r\n\r\n            if (completeArrayFrom !== -1) {\r\n                if (idx < sentence.hiddenExpressions.length - 1) {\r\n                    updatedHiddenExpressions = [\r\n                        ...updatedHiddenExpressions,\r\n                        ...sentence.hiddenExpressions.slice(completeArrayFrom + 1)\r\n                    ];\r\n                }\r\n                return true;\r\n            }\r\n\r\n            updatedHiddenExpressions.push({...anExp});\r\n            return false;\r\n        });\r\n\r\n        onSentenceChange({\r\n            ...sentence,\r\n            hiddenExpressions: updatedHiddenExpressions\r\n        });\r\n    };\r\n\r\n    const handleDeleteClick = () => {\r\n        if (onSentenceRemove) {\r\n            onSentenceRemove();\r\n        }\r\n    };\r\n\r\n    const selected = (wordIdx: number) => {\r\n        return sentence.hiddenExpressions.some(\r\n            (anExpression: FillGapsChallengeExpression) => (\r\n                wordIdx >= anExpression.initPosition\r\n                && wordIdx <= anExpression.initPosition + anExpression.wordCount - 1\r\n            )\r\n        );\r\n    };\r\n\r\n    const handlePartChange = (partIdx: number, text: string) => {\r\n        const updatedParts = parts.map((aPart: SentencePart, idx: number) => (\r\n            {\r\n                ...aPart,\r\n                answer: idx === partIdx ? text : aPart.answer\r\n            }\r\n        ));\r\n        setParts(updatedParts);\r\n        onAnswersChange(updatedParts.filter(\r\n            (aPart: SentencePart) => aPart.type === 'hidden'\r\n        ).map(\r\n            (aPart: SentencePart) => ({\r\n                hiddenIdx: aPart.hiddenIdx,\r\n                value: aPart.answer\r\n            }))\r\n        );\r\n    };\r\n\r\n    const getPartStyle = (validValues: string[], value: string) => showResults ? (\r\n        validValues.some(\r\n            (aValidValue: string) => checkEqual(\r\n                aValidValue,\r\n                value,\r\n                checkCapitalLetters,\r\n                checkAccentMarks\r\n            )\r\n        ) ? { color: '#4caf50' } : { color: '#f44336' }\r\n    ) : {};\r\n\r\n    return (\r\n        <Grid container alignItems=\"center\" spacing={1}>\r\n            <Grid item>\r\n                <Icon fontSize=\"small\" color=\"secondary\">navigate_next</Icon>\r\n            </Grid>\r\n            {\r\n                mode === ComponentMode.Design\r\n                && splitSentence(sentence.text).map((aWord: string, idx: number) => (\r\n                    <Grid\r\n                        item\r\n                        key={`word_${idx}`}\r\n                        className={`${classes.word} ${selected(idx) ? classes.selected : ''}`}\r\n                        onClick={() => { handleWordClick(idx); }}\r\n                    >\r\n                        <Typography style={{fontSize: `${fontSize ? fontSize: 50}px`}}>\r\n                            {aWord}\r\n                        </Typography>\r\n                    </Grid>\r\n                ))\r\n            }\r\n            {\r\n                mode === ComponentMode.Design && (\r\n                    <Grid item>\r\n                        <IconButton size=\"small\" onClick={handleDeleteClick}>\r\n                            <Icon>delete</Icon>\r\n                        </IconButton>\r\n                    </Grid>\r\n                )\r\n            }\r\n            {\r\n                mode === ComponentMode.Play && (\r\n                    parts.map((aPart: SentencePart, idx: number) => (\r\n                        aPart.type === 'text' ? (\r\n                            <Grid\r\n                                item\r\n                                key={`part_${idx}`}\r\n                                className={classes.word}\r\n                            >\r\n                                <Typography style={{fontSize: `${fontSize ? fontSize: 50}px`}}>\r\n                                    {aPart.value}\r\n                                </Typography>\r\n                            </Grid>\r\n                        ) : (\r\n                            <Grid\r\n                                item\r\n                                key={`part_${idx}`}\r\n                            >\r\n                                {\r\n                                    fillMethod === FillMethod.Writing ? (\r\n                                        <TextField\r\n                                            key={`input_${idx}`}\r\n                                            value={aPart.answer}\r\n                                            color=\"primary\"\r\n                                            inputProps={{\r\n                                                style: {\r\n                                                    fontSize: `${fontSize ? fontSize : 50}px`,\r\n                                                    textAlign: 'center',\r\n                                                    color: colors.primary.main,\r\n                                                    ...getPartStyle(\r\n                                                        [\r\n                                                            aPart.value,\r\n                                                            ...sentence.hiddenExpressions[aPart.hiddenIdx].alternatives\r\n                                                        ],\r\n                                                        aPart.answer\r\n                                                    )\r\n                                                }\r\n                                            }}\r\n                                            onInput={\r\n                                                (evt: React.FormEvent<HTMLInputElement>) => {\r\n                                                    handlePartChange(idx, (evt.target as any).value);\r\n                                                }\r\n                                            }\r\n                                        />\r\n                                    ) : (\r\n                                        <DropGap\r\n                                            key={`input_${idx}`}\r\n                                            value={aPart.answer}\r\n                                            style={getPartStyle(\r\n                                                [\r\n                                                    aPart.value,\r\n                                                    ...sentence.hiddenExpressions[aPart.hiddenIdx].alternatives\r\n                                                ],\r\n                                                aPart.answer\r\n                                            )}\r\n                                            fontSize={fontSize}\r\n                                            onDrop={(droppedText: string) => {\r\n                                                handlePartChange(idx, droppedText);\r\n                                            }}\r\n                                        />\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                        )\r\n                    ))\r\n                )\r\n            }\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Box, Button, Dialog, Grid, Icon, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText, makeStyles, TextField, Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n}));\r\n\r\ninterface DialogFillGapsCandidatesProps {\r\n    open: boolean,\r\n    text: string,\r\n    candidates: string[],\r\n    onAccept: (alternatives: string[]) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const DialogFillGapsCandidates: React.FC<DialogFillGapsCandidatesProps> = (props: DialogFillGapsCandidatesProps) => {\r\n    const { open, text, candidates, onAccept, onCancel } = props;\r\n\r\n    const [formState, setFormState] = useState<string[]>(candidates);\r\n\r\n    const inputCandidate = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (candidates != null) {\r\n            setFormState(candidates);\r\n        }\r\n    }, [candidates]);\r\n\r\n    const addCandidate = () => {\r\n        setFormState([\r\n            ...formState,\r\n            inputCandidate.current.value\r\n        ]);\r\n        inputCandidate.current.value = '';\r\n    };\r\n\r\n    const handleCandidateKeyPress = (evt: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (evt.code === 'Enter' && inputCandidate.current.value !== '') {\r\n            addCandidate();\r\n        }\r\n    };\r\n\r\n    const handleDeleteCandidate = (candidateIdx: number) => {\r\n        setFormState(\r\n            formState.filter((aCandidate: string, idx: number) => idx !== candidateIdx)\r\n        );\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        onAccept(formState);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth='sm'\r\n        >\r\n            <Box className={classes.dialogContainer}>\r\n                <Grid\r\n                    container\r\n                    direction='column'\r\n                    spacing={2}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h6\">\r\n                            {`Otros textos validos para \"${text}\"`}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <List>\r\n                            {\r\n                                formState.map((aCandidate: string, candidateIdx: number) => (\r\n                                    <ListItem>\r\n                                        <ListItemText primary={aCandidate} />\r\n                                        <ListItemSecondaryAction>\r\n                                            <IconButton edge=\"end\" onClick={() => { handleDeleteCandidate(candidateIdx); }}>\r\n                                                <Icon>delete</Icon>\r\n                                            </IconButton>\r\n                                        </ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                ))\r\n                            }\r\n                        </List>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            inputRef={inputCandidate}\r\n                            variant=\"outlined\"\r\n                            style={{ width: '100%' }}\r\n                            label=\"Nuevo candidato\"\r\n                            onKeyPress={handleCandidateKeyPress}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container justify='flex-end' spacing={1}>\r\n                            <Grid item>\r\n                                <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, IconButton, makeStyles, TextField } from '@material-ui/core';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../common/ChallengeQuestion';\r\nimport { FillGapsChallenge, FillGapsChallengeExpression, FillGapsChallengeSentence } from '../../types/FillGapsChallenge';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../common/Countdown';\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { FillMethod } from '../../enums/FillMethod';\r\nimport { FillGapsSentence, FillGapsSentenceAnswer } from './FillGapsSentence';\r\nimport { DragableItem } from '../common/DragableItem';\r\nimport { checkEqual, joinSentence, splitSentence } from '../../utils/utilStrings';\r\nimport { DialogFillGapsCandidates } from './DialogFillGapsCandidates';\r\nimport { ChallengeOptions } from '../../types/Challenge';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    answerContainer: {\r\n        height: '80%',\r\n        width: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionsContainer: {\r\n        border: 'solid 1px gray',\r\n        backgroundColor: '#ffffff',\r\n        minHeight: '60px'\r\n    },\r\n    sentencesContainer: {\r\n        paddingLeft: '10px'\r\n    },\r\n}));\r\n\r\nconst initialFillGapsState = (challenge: FillGapsChallenge): FillGapsSentenceAnswer[][] => {\r\n    return challenge.sentences.map((aSentence: FillGapsChallengeSentence) => ([]));\r\n};\r\n\r\nconst reorderItems = (sentences: FillGapsChallengeSentence[], mode: ComponentMode): Item[] => {\r\n    let list: Item[] = [];\r\n    sentences.forEach((aSentence: FillGapsChallengeSentence, sentenceIdx: number) => {\r\n        aSentence.hiddenExpressions.forEach((aHiddenExpression: FillGapsChallengeExpression, hiddenExpressionIdx: number) => {\r\n            list.push({\r\n                sentenceText: aSentence.text,\r\n                sentenceIdx,\r\n                hiddenExpression: aHiddenExpression,\r\n                hiddenExpressionIdx\r\n            });\r\n        });\r\n    });\r\n    if (mode === ComponentMode.Play) {\r\n        list = list.sort(() => Math.random() - 0.5);\r\n    }\r\n    return list;\r\n};\r\n\r\ninterface FillGapsChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: FillGapsChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: FillGapsChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\ninterface Item {\r\n    sentenceText: string,\r\n    sentenceIdx: number,\r\n    hiddenExpression: FillGapsChallengeExpression,\r\n    hiddenExpressionIdx: number\r\n}\r\n\r\nexport const FillGapsChallenger: React.FC<FillGapsChallengerProps> = (props: FillGapsChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const inputSentence = useRef({} as HTMLInputElement);\r\n\r\n    const [fillGapsState, setFillGapsState] = useState<FillGapsSentenceAnswer[][]>(initialFillGapsState(challenge));\r\n    const [openCandidatesDialog, setOpenCandidatesDialog] = useState<boolean>(false);\r\n    const [selectedExpression, setSelectedExpression] = useState<number[]>();\r\n    const [draggableItems, setDragabbleItems] = useState<Item[]>(reorderItems(challenge.sentences, mode));\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setDragabbleItems(reorderItems(challenge.sentences, mode));\r\n    }, [challenge.sentences]);\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const handleSentenceChange = (updatedSentence: FillGapsChallengeSentence, sentenceIdx: number) => {\r\n        if (onChallengeChange) {\r\n            const updatedSentences = challenge.sentences.map((\r\n                aSentence: FillGapsChallengeSentence,\r\n                idx: number\r\n            ) => idx === sentenceIdx ? updatedSentence : aSentence);\r\n            onChallengeChange({\r\n                ...challenge,\r\n                sentences: updatedSentences\r\n            });\r\n        }\r\n    };\r\n\r\n    const addSentence = () => {\r\n        if (onChallengeChange) {\r\n            const newSentence: FillGapsChallengeSentence = {\r\n                text: inputSentence.current.value,\r\n                hiddenExpressions: [] as FillGapsChallengeExpression[]\r\n            };\r\n            onChallengeChange({\r\n                ...challenge,\r\n                sentences: [...challenge.sentences, newSentence]\r\n            });\r\n            setFillGapsState([\r\n                ...fillGapsState,\r\n                []\r\n            ]);\r\n        }\r\n        inputSentence.current.value = '';\r\n    };\r\n\r\n    const handleSentenceKeyPress = (evt: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (evt.code === 'Enter' && inputSentence.current.value !== '') {\r\n            addSentence();\r\n        }\r\n    };\r\n\r\n    const handleSentenceRemove = (sentenceIdx: number) => {\r\n        if (onChallengeChange) {\r\n            const updatedSentences = challenge.sentences\r\n                .filter((aSentence: FillGapsChallengeSentence, idx: number) => idx !== sentenceIdx);\r\n            onChallengeChange({\r\n                ...challenge,\r\n                sentences: updatedSentences\r\n            });\r\n            setFillGapsState(fillGapsState.filter(\r\n                (aFillGapsState: FillGapsSentenceAnswer[], idx: number) => idx !== sentenceIdx\r\n            ));\r\n        }\r\n    };\r\n\r\n    const handleAddCandidateClick = (sentenceIdx: number, hiddenExpIdx: number) => {\r\n        setSelectedExpression([sentenceIdx, hiddenExpIdx]);\r\n        setOpenCandidatesDialog(true);\r\n    };\r\n\r\n    const handleCandidateAccept = (newCandidates: string[]) => {\r\n        if (onChallengeChange && selectedExpression) {\r\n            const updatedSentences = challenge.sentences.map((\r\n                aSentence: FillGapsChallengeSentence,\r\n                sentenceIdx: number\r\n            ) => sentenceIdx !== selectedExpression[0] ? aSentence : (\r\n                {\r\n                    ...aSentence,\r\n                    hiddenExpressions: aSentence.hiddenExpressions.map((\r\n                        aHiddenExpression: FillGapsChallengeExpression,\r\n                        hiddenExpresionIdx: number\r\n                    ) => hiddenExpresionIdx !== selectedExpression[1] ? aHiddenExpression : (\r\n                        {\r\n                            ...aHiddenExpression,\r\n                            alternatives: [...newCandidates]\r\n                        }\r\n                    ))\r\n                }\r\n            ));\r\n            onChallengeChange({\r\n                ...challenge,\r\n                sentences: updatedSentences\r\n            });\r\n        }\r\n        setOpenCandidatesDialog(false);\r\n    };\r\n\r\n    const expressionInSentence = (sentence: string, expression: FillGapsChallengeExpression): string => {\r\n        return joinSentence(\r\n            splitSentence(sentence)\r\n                .slice(expression.initPosition, expression.initPosition + expression.wordCount)\r\n        );\r\n    };\r\n\r\n    const handleSentenceAnswer = (sentenceIdx: number, answer: FillGapsSentenceAnswer[]) => {\r\n        console.log(answer);\r\n        const updatedState = fillGapsState.map((aFillGapsState: FillGapsSentenceAnswer[], idx: number) => (\r\n            idx === sentenceIdx ? [...answer] : [...aFillGapsState]\r\n        ));\r\n        setFillGapsState(updatedState);\r\n    };\r\n\r\n    const completed = () => {\r\n        return challenge.sentences\r\n            .reduce((acc: boolean, current: FillGapsChallengeSentence, sentenceIdx: number) => (\r\n                acc\r\n                && current.hiddenExpressions.length === fillGapsState[sentenceIdx].length\r\n                && fillGapsState[sentenceIdx].every((el: FillGapsSentenceAnswer) => (\r\n                    el.value != null && el.value !== ''\r\n                ))\r\n            ), true);\r\n    };\r\n\r\n    const isDropped = (item: Item): boolean => {\r\n        const text = expressionInSentence(\r\n            item.sentenceText,\r\n            item.hiddenExpression\r\n        );\r\n\r\n        return fillGapsState.some((sentencesAnswer: FillGapsSentenceAnswer[]) => (\r\n            sentencesAnswer.some((aSentenceAnswer: FillGapsSentenceAnswer) => (\r\n                aSentenceAnswer.value === text\r\n            ))\r\n        ));\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const correct = challenge.sentences.reduce(\r\n            (accSentences: boolean, currentSentence: FillGapsChallengeSentence, sentenceIdx: number) => {\r\n                const words: string[] = splitSentence(currentSentence.text);\r\n                const correctExpressions = currentSentence.hiddenExpressions.reduce(\r\n                    (accExpressions: boolean, currentExpression: FillGapsChallengeExpression, expressionIdx: number) => {\r\n                        const hiddenAnswer = fillGapsState[sentenceIdx]\r\n                            .find((anAnswer: FillGapsSentenceAnswer) => anAnswer.hiddenIdx === expressionIdx);\r\n\r\n                        return hiddenAnswer != null && accExpressions && (\r\n                            checkEqual(\r\n                                joinSentence(words.slice(\r\n                                    currentExpression.initPosition,\r\n                                    currentExpression.initPosition + currentExpression.wordCount\r\n                                )),\r\n                                hiddenAnswer.value,\r\n                                challenge.config.checkCapitalLetters,\r\n                                challenge.config.checkAccentMarks\r\n                            )\r\n                            || currentExpression.alternatives.some(\r\n                                (anAlternative: string) => checkEqual(\r\n                                    anAlternative,\r\n                                    hiddenAnswer.value,\r\n                                    challenge.config.checkCapitalLetters,\r\n                                    challenge.config.checkAccentMarks\r\n                                )\r\n                            )\r\n                        );\r\n                    },\r\n                    true\r\n                );\r\n                return accSentences && correctExpressions;\r\n            },\r\n            true\r\n        );\r\n        showResult(correct);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='center' className={classes.fullHeight}>\r\n                    <Grid item xs={2} className={classes.fullHeight}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} className={classes.fullHeight}>\r\n                        {\r\n                            selectedExpression && (\r\n                                <DialogFillGapsCandidates\r\n                                    open={openCandidatesDialog}\r\n                                    text={\r\n                                        expressionInSentence(\r\n                                            challenge.sentences[selectedExpression[0]].text,\r\n                                            challenge.sentences[selectedExpression[0]].hiddenExpressions[selectedExpression[1]]\r\n                                        )\r\n                                    }\r\n                                    candidates={\r\n                                        challenge.sentences[selectedExpression[0]]\r\n                                            .hiddenExpressions[selectedExpression[1]].alternatives\r\n                                    }\r\n                                    onAccept={handleCandidateAccept}\r\n                                    onCancel={() => { setOpenCandidatesDialog(false); }}\r\n                                />\r\n                            )\r\n                        }\r\n                        <DndProvider backend={HTML5Backend}>\r\n                            <Grid\r\n                                container\r\n                                spacing={2}\r\n                                direction=\"column\"\r\n                                className={classes.fullHeight}\r\n                            >\r\n                                {\r\n                                    (\r\n                                        mode === ComponentMode.Design ||\r\n                                        challenge.config.fillMethod === FillMethod.Dragging\r\n                                    ) && (\r\n                                        <Grid\r\n                                            item\r\n                                            // xs={12}\r\n                                            className={classes.optionsContainer}\r\n                                        >\r\n                                            <Grid container spacing={2} justify=\"space-around\" alignItems=\"center\">\r\n                                                {\r\n                                                    draggableItems.map((anItem: Item) => !isDropped(anItem) && (\r\n                                                        <Grid item key={`gridItem_${anItem.sentenceIdx}_${anItem.hiddenExpression.initPosition}`}>\r\n                                                            <DragableItem\r\n                                                                name={expressionInSentence(\r\n                                                                    anItem.sentenceText,\r\n                                                                    anItem.hiddenExpression\r\n                                                                )}\r\n                                                                key={`dragable_${anItem.sentenceIdx}_${anItem.hiddenExpression.initPosition}`}\r\n                                                                style={{fontSize: challenge.config.textFontSize}}\r\n                                                                iconButton={\r\n                                                                    mode === ComponentMode.Design ? (\r\n                                                                        <IconButton\r\n                                                                            size=\"small\"\r\n                                                                            onClick={() => {\r\n                                                                                handleAddCandidateClick(\r\n                                                                                    anItem.sentenceIdx,\r\n                                                                                    anItem.hiddenExpressionIdx\r\n                                                                                );\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <Icon>add_circle</Icon>\r\n                                                                        </IconButton>\r\n                                                                    ) : undefined\r\n                                                                }\r\n                                                            />\r\n                                                        </Grid>\r\n                                                    ))\r\n                                                }\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    )\r\n                                }\r\n                                <Grid\r\n                                    item\r\n                                    xs\r\n                                >\r\n                                    <Grid container direction=\"column\" justify=\"space-around\" className={`${classes.fullWidth} ${classes.fullHeight}`}>\r\n                                        {\r\n                                            challenge.sentences.map((\r\n                                                aSentence: FillGapsChallengeSentence,\r\n                                                sentenceIdx: number\r\n                                            ) => (\r\n                                                <Grid\r\n                                                    item\r\n                                                    key={`sentence_${sentenceIdx}`}\r\n                                                >\r\n                                                    <FillGapsSentence\r\n                                                        mode={mode}\r\n                                                        sentence={aSentence}\r\n                                                        fillMethod={challenge.config.fillMethod}\r\n                                                        checkCapitalLetters={challenge.config.checkCapitalLetters}\r\n                                                        checkAccentMarks={challenge.config.checkAccentMarks}\r\n                                                        showResults={highlightResults}\r\n                                                        fontSize={challenge.config.textFontSize}\r\n                                                        onSentenceChange={(\r\n                                                            updatedSentence: FillGapsChallengeSentence\r\n                                                        ) => handleSentenceChange(updatedSentence, sentenceIdx)}\r\n                                                        onSentenceRemove={() => { handleSentenceRemove(sentenceIdx); }}\r\n                                                        onAnswersChange={(answer: FillGapsSentenceAnswer[]) => {\r\n                                                            handleSentenceAnswer(sentenceIdx, answer);\r\n                                                        }}\r\n                                                    />\r\n                                                </Grid>\r\n                                            ))\r\n                                        }\r\n                                    </Grid>\r\n                                </Grid>\r\n                                {\r\n                                    mode === ComponentMode.Design && (\r\n                                        <Grid item>\r\n                                            <TextField\r\n                                                inputRef={inputSentence}\r\n                                                variant=\"outlined\"\r\n                                                style={{width: '100%'}}\r\n                                                InputProps={\r\n                                                    {\r\n                                                        style: {\r\n                                                            fontSize: challenge.config.textFontSize,\r\n                                                            color: '#000000'\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                label=\"Nueva frase\"\r\n                                                onKeyPress={handleSentenceKeyPress}\r\n                                            />\r\n                                        </Grid>\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                        </DndProvider>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || !completed()}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;{options?.language === Language.En ? 'Check' : 'Corregir'}\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControl, FormControlLabel, Grid, InputLabel, makeStyles, MenuItem, Select, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { FillGapsChallengeConfig } from '../../types/FillGapsChallenge';\r\nimport { FillMethod } from '../../enums/FillMethod';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface FillGapsConfiguratorProps {\r\n    config: FillGapsChallengeConfig,\r\n    onConfigChange?: (config: FillGapsChallengeConfig) => void\r\n}\r\n\r\nexport const FillGapsConfigurator: React.FC<FillGapsConfiguratorProps> = (props: FillGapsConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<FillGapsChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputTextFontSize = useRef({} as HTMLInputElement);\r\n    const inputFillMethod = useRef({} as HTMLSelectElement);\r\n    const checkCapitalLetters = useRef({} as HTMLInputElement);\r\n    const checkAccentMarks = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean | string) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTextFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.textFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('textFontSize', parseInt(inputTextFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControl className={classes.fullWidth}>\r\n                    <InputLabel>Modo de rellenado</InputLabel>\r\n                    <Select\r\n                        inputRef={inputFillMethod}\r\n                        label=\"Modo de rellenado\"\r\n                        value={formData.fillMethod}\r\n                        color='secondary'\r\n                        className={classes.fullWidth}\r\n                        onChange={(evt: React.ChangeEvent<{name?: string | undefined, value: unknown}>) => {\r\n                            handleConfigParameterChange('fillMethod', evt.target.value as string);\r\n                        }}\r\n                    >\r\n                        <MenuItem value={FillMethod.Writing}>Escribiendo</MenuItem>\r\n                        <MenuItem value={FillMethod.Dragging}>Arrastrando</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkCapitalLetters}\r\n                            name='checkMultiselect'\r\n                            checked={formData.checkCapitalLetters}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('checkCapitalLetters', checkCapitalLetters.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Comprobar mayúsculas/minúsculas'\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkAccentMarks}\r\n                            name='checkAccentMarks'\r\n                            checked={formData.checkAccentMarks}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('checkAccentMarks', checkAccentMarks.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Comprobar tildes'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { FillGapsChallenge, FillGapsChallengeConfig } from '../../types/FillGapsChallenge';\r\nimport { FillGapsChallenger } from './FillGapsChallenger';\r\nimport { FillGapsConfigurator } from './FillGapsConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface FillGapsChallengeDesignerProps {\r\n    challenge: FillGapsChallenge,\r\n    onChallengeChange: (challenge: FillGapsChallenge) => void\r\n}\r\n\r\nexport const FillGapsChallengeDesigner: React.FC<FillGapsChallengeDesignerProps> = (\r\n    props: FillGapsChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handlerChallengeChange = (updatedChallenge: FillGapsChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: FillGapsChallengeConfig) => {\r\n        const updatedChallenge: FillGapsChallenge = {\r\n            ...challenge,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <FillGapsChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <FillGapsConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, CardContent, Grid, TextField, Typography } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { useDrag } from 'react-dnd';\r\nimport { MatchItem } from '../../types/MatchChallenge';\r\n\r\ninterface MatchSourceProps {\r\n    mode: ComponentMode,\r\n    item: MatchItem,\r\n    fontSize: number,\r\n    arrowNode: React.ReactNode,\r\n    onTextChange?: (newText: string) => void\r\n}\r\n\r\nexport const MatchSource: React.FC<MatchSourceProps> = (props: MatchSourceProps) => {\r\n    const { mode, item, fontSize, arrowNode, onTextChange } = props;\r\n\r\n    const [textValue, setTextValue] = useState<string>(item.text);\r\n\r\n    const inputText = useRef({} as HTMLInputElement);\r\n\r\n    useEffect(() => {\r\n        setTextValue(item.text);\r\n    }, [item]);\r\n\r\n    const handleTextChange = () => {\r\n        setTextValue(inputText.current.value);\r\n        if (onTextChange) {\r\n            onTextChange(inputText.current.value);\r\n        }\r\n    };\r\n\r\n    const [{ opacity }, drag] = useDrag(\r\n        () => ({\r\n            type: 'dnd',\r\n            item: { ...item },\r\n            collect: (monitor) => ({\r\n                opacity: monitor.isDragging() ? 0.4 : 1,\r\n            }),\r\n        }),\r\n        [item],\r\n    );\r\n\r\n    return (\r\n        <Card style={{width: '100%'}}>\r\n            <CardContent>\r\n                <Grid container alignItems=\"center\">\r\n                    <Grid item xs container justify=\"center\">\r\n                        {\r\n                            mode === ComponentMode.Design ? (\r\n                                <TextField\r\n                                    inputRef={inputText}\r\n                                    value={textValue}\r\n                                    onInput={handleTextChange}\r\n                                    style={{width: '95%'}}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            fontSize: `${fontSize ? fontSize : 22}px`,\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            ) : (\r\n                                <Typography>\r\n                                    {textValue}\r\n                                </Typography>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={1} container justify=\"center\">\r\n                        <div ref={drag}>\r\n                            {arrowNode}\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, CardContent, Grid, TextField, Typography } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { useDrop } from 'react-dnd';\r\nimport { MatchItem } from '../../types/MatchChallenge';\r\n\r\ninterface MatchDestinationProps {\r\n    mode: ComponentMode,\r\n    item: MatchItem,\r\n    fontSize: number,\r\n    arrowNode: React.ReactNode,\r\n    onTextChange?: (newText: string) => void,\r\n    onDrop?: (text: MatchItem) => void\r\n}\r\n\r\nexport const MatchDestination: React.FC<MatchDestinationProps> = (props: MatchDestinationProps) => {\r\n    const { mode, item, fontSize, arrowNode, onTextChange, onDrop } = props;\r\n\r\n    const [textValue, setTextValue] = useState<string>(item.text);\r\n\r\n    const inputText = useRef({} as HTMLInputElement);\r\n\r\n    useEffect(() => {\r\n        setTextValue(item.text);\r\n    }, [item.text]);\r\n\r\n    const handleTextChange = () => {\r\n        setTextValue(inputText.current.value);\r\n        if (onTextChange) {\r\n            onTextChange(inputText.current.value);\r\n        }\r\n    };\r\n\r\n    const handleDrop = (item: any) => {\r\n        if (onDrop) {\r\n            onDrop(item);\r\n        }\r\n    };\r\n\r\n    const [{ isOver, canDrop }, drop] = useDrop({\r\n        accept: 'dnd',\r\n        drop: handleDrop,\r\n        collect: (monitor: { isOver: () => boolean, canDrop: () => boolean }) => {\r\n            return ({\r\n                isOver: monitor.isOver(),\r\n                canDrop: monitor.canDrop()\r\n            });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <Card style={{width: '100%'}}>\r\n            <CardContent>\r\n                <Grid container alignItems=\"center\">\r\n                    <Grid item xs={1} container justify=\"center\">\r\n                        <div ref={drop}>\r\n                            {arrowNode}\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs container justify=\"center\">\r\n                        {\r\n                            mode === ComponentMode.Design ? (\r\n                                <TextField\r\n                                    inputRef={inputText}\r\n                                    value={textValue}\r\n                                    onInput={handleTextChange}\r\n                                    style={{width: '95%'}}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            fontSize: `${fontSize ? fontSize : 22}px`,\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            ) : (\r\n                                <Typography>\r\n                                    {textValue}\r\n                                </Typography>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../common/ChallengeQuestion';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../common/Countdown';\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { ChallengeOptions } from '../../types/Challenge';\r\nimport { Language } from '../../enums/Language';\r\nimport { MatchChallenge, MatchChallengePair, MatchItem } from '../../types/MatchChallenge';\r\nimport { MatchSource } from './MatchSource';\r\nimport { MatchElement } from '../../enums/MatchElement';\r\nimport { MatchDestination } from './MatchDestination';\r\nimport { colors } from '../../theme';\r\nimport Xarrow from 'react-xarrows/lib';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    answerContainer: {\r\n        height: '80%',\r\n        width: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionsContainer: {\r\n        border: 'solid 1px gray',\r\n        backgroundColor: '#ffffff',\r\n        minHeight: '60px'\r\n    },\r\n    sentencesContainer: {\r\n        paddingLeft: '10px'\r\n    }\r\n}));\r\n\r\ninterface MatchAnswer {\r\n    source: MatchItem,\r\n    destination: MatchItem\r\n}\r\n\r\nconst reorderItems = (texts: string[], mode: ComponentMode): string[] => {\r\n    let list: string[] = [...texts];\r\n    if (mode === ComponentMode.Play) {\r\n        list = list.sort(() => Math.random() - 0.5);\r\n    }\r\n    return list;\r\n};\r\n\r\ninterface MatchChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: MatchChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: MatchChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const MatchChallenger: React.FC<MatchChallengerProps> = (props: MatchChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [sourceItems, setSourceItems] = useState<string[]>(reorderItems(\r\n        challenge.pairs.map((aPair: MatchChallengePair) => aPair.source),\r\n        mode\r\n    ));\r\n    const [destinationItems, setDestinationItems] = useState<string[]>(reorderItems(\r\n        challenge.pairs.map((aPair: MatchChallengePair) => aPair.destination),\r\n        mode\r\n    ));\r\n\r\n    const [matchState, setMatchState] = useState<MatchAnswer[]>([]);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setSourceItems(reorderItems(\r\n            challenge.pairs.map((aPair: MatchChallengePair) => aPair.source),\r\n            mode\r\n        ));\r\n        setDestinationItems(reorderItems(\r\n            challenge.pairs.map((aPair: MatchChallengePair) => aPair.destination),\r\n            mode\r\n        ));\r\n    }, [challenge.pairs]);\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const handleTextChange = (newText: string, element: MatchElement, pairIdx: number) => {\r\n        if (onChallengeChange) {\r\n            const pairAttribute = element === MatchElement.Source ? 'source' : 'destination';\r\n            const newChallenge: MatchChallenge = {\r\n                ...challenge,\r\n                pairs: challenge.pairs.map((aPair: MatchChallengePair, idx: number) => (\r\n                    idx === pairIdx ? {\r\n                        ...aPair,\r\n                        [pairAttribute]: newText\r\n                    } : {...aPair}\r\n                ))\r\n            };\r\n            onChallengeChange(newChallenge);\r\n        }\r\n    };\r\n\r\n    const handleDrop = (source: MatchItem, destination: MatchItem) => {\r\n        const newState = matchState.filter((anAnswer: MatchAnswer) => (\r\n            anAnswer.source.index !== source.index\r\n            && anAnswer.destination.index !== destination.index\r\n        ));\r\n        newState.push({source, destination});\r\n        setMatchState(newState);\r\n    };\r\n\r\n    const completed = () => matchState.length === challenge.pairs.length;\r\n\r\n    const handleCheckClick = () => {\r\n        const correct = challenge.pairs.reduce(\r\n            (accPairs: boolean, currentPair: MatchChallengePair) => {\r\n                const idxAnswer = matchState.findIndex((anAnswer: MatchAnswer) => (\r\n                    anAnswer.source.text === currentPair.source\r\n                    && anAnswer.destination.text === currentPair.destination\r\n                ));\r\n                return accPairs && idxAnswer >= 0;\r\n            },\r\n            true\r\n        );\r\n        showResult(correct);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='center' className={classes.fullHeight}>\r\n                    <Grid item xs={2} className={classes.fullHeight}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} className={classes.fullHeight} container>\r\n                        <DndProvider backend={HTML5Backend}>\r\n                            <Grid item xs={5} container direction=\"column\" justify=\"space-around\" alignItems=\"center\">\r\n                                {\r\n                                    sourceItems.map((aSource: string, sourceIdx: number) => (\r\n                                        <MatchSource\r\n                                            key={`source_${sourceIdx}`}\r\n                                            mode={mode}\r\n                                            item={{text: aSource, index: sourceIdx}}\r\n                                            fontSize={challenge.config.answerFontSize}\r\n                                            arrowNode={(\r\n                                                <div\r\n                                                    id={`an_s_${sourceIdx}`}\r\n                                                    style={{\r\n                                                        width: '20px',\r\n                                                        height: '20px',\r\n                                                        border: `solid 1px ${colors.primary.main}`,\r\n                                                        borderRadius: '20px'\r\n                                                    }}\r\n                                                />\r\n                                            )}\r\n                                            onTextChange={\r\n                                                (newText: string) => handleTextChange(\r\n                                                    newText,\r\n                                                    MatchElement.Source,\r\n                                                    sourceIdx\r\n                                                )\r\n                                            }\r\n                                        />\r\n                                    ))\r\n                                }\r\n                            </Grid>\r\n                            <Grid item xs={2} />\r\n                            <Grid item xs={5} container direction=\"column\" justify=\"space-around\" alignItems=\"center\">\r\n                                {\r\n                                    destinationItems.map((aDestination: string, destinationIdx: number) => (\r\n                                        <MatchDestination\r\n                                            key={`destination_${destinationIdx}`}\r\n                                            mode={mode}\r\n                                            item={{text: aDestination, index: destinationIdx}}\r\n                                            fontSize={challenge.config.answerFontSize}\r\n                                            arrowNode={(\r\n                                                <div\r\n                                                    id={`an_d_${destinationIdx}`}\r\n                                                    style={{\r\n                                                        width: '20px',\r\n                                                        height: '20px',\r\n                                                        border: `solid 1px ${colors.primary.main}`,\r\n                                                        borderRadius: '20px'\r\n                                                    }}\r\n                                                />\r\n                                            )}\r\n                                            onTextChange={\r\n                                                (newText: string) => handleTextChange(\r\n                                                    newText,\r\n                                                    MatchElement.Destination,\r\n                                                    destinationIdx\r\n                                                )\r\n                                            }\r\n                                            onDrop={(source: MatchItem) => {\r\n                                                handleDrop(source, {text: aDestination, index: destinationIdx});\r\n                                            }}\r\n                                        />\r\n                                    ))\r\n                                }\r\n                                {\r\n                                    mode === ComponentMode.Design ? (\r\n                                        sourceItems.map((aSource: string, idx: number) => (\r\n                                            <Xarrow\r\n                                                key={`designArrow_${idx}`}\r\n                                                start={`an_s_${idx}`}\r\n                                                end={`an_d_${(idx)}`}\r\n                                                curveness={0}\r\n                                            />\r\n                                        ))\r\n                                        // challenge.pairs.map((aPair: MatchChallengePair, idx: number) => (\r\n                                        //     <Xarrow\r\n                                        //         key={`designArrow_${idx}`}\r\n                                        //         start={`an_s_${idx}`}\r\n                                        //         end={`an_d_${(idx)}`}\r\n                                        //         curveness={0}\r\n                                        //     />\r\n                                        // ))\r\n                                    ) : (\r\n                                        matchState.map((anAnswer: MatchAnswer, idx: number) => (\r\n                                            <Xarrow\r\n                                                key={`playArrow_${idx}`}\r\n                                                start={`an_s_${anAnswer.source.index}`}\r\n                                                end={`an_d_${(anAnswer.destination.index)}`}\r\n                                                curveness={0}\r\n                                                color={\r\n                                                    highlightResults ? (\r\n                                                        challenge.pairs.findIndex((aPair: MatchChallengePair) => (\r\n                                                            aPair.source === anAnswer.source.text\r\n                                                            && aPair.destination === anAnswer.destination.text\r\n                                                        )) >= 0 ? '#4caf50' : '#f44336'\r\n                                                    ) : undefined\r\n                                                }\r\n                                            />\r\n                                        ))\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                        </DndProvider>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || !completed()}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;{options?.language === Language.En ? 'Check' : 'Corregir'}\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControlLabel, Grid, makeStyles, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { MatchChallengeConfig } from '../../types/MatchChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface MatchConfiguratorProps {\r\n    config: MatchChallengeConfig,\r\n    onConfigChange?: (config: MatchChallengeConfig) => void\r\n}\r\n\r\nexport const MatchConfigurator: React.FC<MatchConfiguratorProps> = (props: MatchConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<MatchChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputAnswerFontSize = useRef({} as HTMLInputElement);\r\n    const inputPairsCount = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputAnswerFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de las respuestas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.answerFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('answerFontSize', parseInt(inputAnswerFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputPairsCount}\r\n                    type='number'\r\n                    label='Número de parejas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.pairsCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('pairsCount', parseInt(inputPairsCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { MatchChallenge, MatchChallengeConfig, MatchChallengePair } from '../../types/MatchChallenge';\r\nimport { MatchChallenger } from './MatchChallenger';\r\nimport { MatchConfigurator } from './MatchConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface MatchChallengeDesignerProps {\r\n    challenge: MatchChallenge,\r\n    onChallengeChange: (challenge: MatchChallenge) => void\r\n}\r\n\r\nexport const MatchChallengeDesigner: React.FC<MatchChallengeDesignerProps> = (\r\n    props: MatchChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustPairs = (pairsCount: number): MatchChallengePair[] => {\r\n        let pairs = [...challenge.pairs];\r\n        if (pairsCount > pairs.length) {\r\n            const newPairs = Array.from(Array(pairsCount - pairs.length))\r\n                .map(() => ({ source: '', destination: ''}));\r\n            pairs = [...pairs, ...newPairs];\r\n        } else if (pairsCount < pairs.length) {\r\n            pairs = pairs.slice(0, pairsCount);\r\n        }\r\n        return pairs;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: MatchChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: MatchChallengeConfig) => {\r\n        const pairs = readjustPairs(config.pairsCount);\r\n        const updatedChallenge: MatchChallenge = {\r\n            ...challenge,\r\n            pairs,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <MatchChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <MatchConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { Challenge } from '../../types/Challenge';\r\nimport { ChallengeType } from '../../enums/ChallengeType';\r\nimport { SelectAnswerChallengeDesigner } from '../SelectAnswerChallenge/SelectAnswerChallengeDesigner';\r\nimport { SelectAnswerChallenge } from '../../types/SelectAnswerChallenge';\r\nimport { TrueOrFalseChallengeDesigner } from '../TrueOrFalseChallenge/TrueOrFalseChallengeDesigner';\r\nimport { TrueOrFalseChallenge } from '../../types/TrueOrFalseChallenge';\r\nimport { ClassifyChallengeDesigner } from '../ClassifyChallenge/ClassifyChallengeDesigner';\r\nimport { ClassifyChallenge } from '../../types/ClassifyChallenge';\r\nimport { SortChallenge } from '../../types/SortChallenge';\r\nimport { SortChallengeDesigner } from '../SortChallenge/SortChallengeDesigner';\r\nimport { FillTableChallengeDesigner } from '../FillTableChallenge/FillTableChallengeDesigner';\r\nimport { FillTableChallenge } from '../../types/FillTableChallenge';\r\nimport { FillGapsChallengeDesigner } from '../FillGapsChallenge/FillGapsChallengeDesigner';\r\nimport { FillGapsChallenge } from '../../types/FillGapsChallenge';\r\nimport { MatchChallengeDesigner } from '../MatchChallenge/MatchChallengeDesigner';\r\nimport { MatchChallenge } from '../../types/MatchChallenge';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\ninterface ChallengeDesignerProps {\r\n    challenge: Challenge,\r\n    onChallengeChange: (challenge: Challenge) => void\r\n}\r\n\r\nexport const ChallengeDesigner: React.FC<ChallengeDesignerProps> = (props: ChallengeDesignerProps) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChallengeChange = (updatedChallenge: Challenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight}>\r\n            <Grid item xs={12}>\r\n                {\r\n                    challenge?.type === ChallengeType.SelectAnswer\r\n                    && (\r\n                        <SelectAnswerChallengeDesigner\r\n                            challenge={challenge as SelectAnswerChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.TrueOrFalse\r\n                    && (\r\n                        <TrueOrFalseChallengeDesigner\r\n                            challenge={challenge as TrueOrFalseChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.FillGaps\r\n                    && (\r\n                        <FillGapsChallengeDesigner\r\n                            challenge={challenge as FillGapsChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Match\r\n                    && (\r\n                        <MatchChallengeDesigner\r\n                            challenge={challenge as MatchChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Sort\r\n                    && (\r\n                        <SortChallengeDesigner\r\n                            challenge={challenge as SortChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Classify\r\n                    && (\r\n                        <ClassifyChallengeDesigner\r\n                            challenge={challenge as ClassifyChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.FillTable\r\n                    && (\r\n                        <FillTableChallengeDesigner\r\n                            challenge={challenge as FillTableChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Grid, Icon, IconButton, ListItemIcon, makeStyles, Menu, MenuItem, Typography } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useProjects } from '../../hooks/useProjects';\r\nimport { Project } from '../../types/Project';\r\nimport { Test } from '../../types/Test';\r\nimport { ChallengeSelector } from './ChallengeSelector';\r\nimport { ChallengeDesigner } from './ChallengeDesigner';\r\nimport { Challenge } from '../../types/Challenge';\r\nimport { ChallengeType } from '../../enums/ChallengeType';\r\nimport { getChallengeTypeDescription, getChallengeTypeIcon, getDefaultChallenge } from '../../utils/utilChallenges';\r\nimport { colors } from '../../theme';\r\nimport { DialogConfirm } from '../common/DialogConfirm';\r\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },\r\n    listContainer: {\r\n        paddingRight: '10px',\r\n        height: '100%',\r\n        width: '100%',\r\n        overflow: 'hidden'\r\n    },\r\n    challengesContainer: {\r\n        height: 'calc(100% - 50px)',\r\n        width: '100%',\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        listStyle: 'none',\r\n        '&::-webkit-scrollbar': {\r\n            width: '0.2em'\r\n        },\r\n        '&::-webkit-scrollbar-track': {\r\n            boxShadow: 'inset 0 0 6px rgba(255,0,0,0.00)',\r\n            webkitBoxShadow: 'inset 0 0 6px rgba(255,0,0,0.00)'\r\n        },\r\n        '&::-webkit-scrollbar-thumb': {\r\n            backgroundColor: colors.primary.light,\r\n            outline: '1px solid slategrey'\r\n        }\r\n    },\r\n    challengeSelector: {\r\n        flexGrow: 1\r\n    }\r\n}));\r\n\r\ninterface TestDesignerProps {\r\n    projectId: string,\r\n    testId: string\r\n}\r\n\r\nexport const TestDesigner: React.FC<TestDesignerProps> = (props: TestDesignerProps) => {\r\n    const { projectId, testId } = props;\r\n\r\n    const { projects, setProjects } = useProjects();\r\n\r\n    const [test, setTest] = useState<Test>({\r\n        id: uuidv4(),\r\n        name: 'Nuevo cuestionario',\r\n        description: '',\r\n        language: Language.Es,\r\n        challenges: []\r\n    });\r\n\r\n    const [compactList, setCompactList] = useState<boolean>(false);\r\n    const [selectedChallenge, setSelectedChallenge] = useState<Challenge>();\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n    const [deletedChallenge, setDeletedChallenge] = useState<Challenge>();\r\n    const [openRemoveChallengeConfirm, setOpenRemoveChallengeConfirm] = useState<boolean>(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        const project = projects.find((aProject: Project) => aProject.id === projectId);\r\n        if (project != null) {\r\n            const test = project.tests.find((aTest: Test) => aTest.id === testId);\r\n            if (test != null) {\r\n                setTest(test);\r\n                if (test.challenges.length > 0) {\r\n                    if (selectedChallenge == null) {\r\n                        setSelectedChallenge(test.challenges[0]);\r\n                    } else {\r\n                        setSelectedChallenge({ ...selectedChallenge });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, [projects, projectId, testId]);\r\n\r\n    const handleSelectChallenge = (challenge: Challenge) => {\r\n        setSelectedChallenge(challenge);\r\n    };\r\n\r\n    const handleDeleteChallenge = (challenge: Challenge) => {\r\n        setDeletedChallenge(challenge);\r\n        setOpenRemoveChallengeConfirm(true);\r\n    };\r\n\r\n    const handleClickNewChallengeMenu = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleNewChallengeOptionClick = (type: ChallengeType) => {\r\n        const newChallenge: Challenge = getDefaultChallenge(type);\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return { ...aProject };\r\n            }\r\n            const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                if (aTest.id !== testId) {\r\n                    return { ...aTest };\r\n                }\r\n                return {\r\n                    ...aTest,\r\n                    challenges: [...aTest.challenges, newChallenge]\r\n                };\r\n            });\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        setSelectedChallenge(newChallenge);\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleCloseNewChallengeMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleChallengeChange = (updatedChallenge: Challenge) => {\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return aProject;\r\n            }\r\n            const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                if (aTest.id !== testId) {\r\n                    return { ...aTest };\r\n                }\r\n                const updatedChallenges = aTest.challenges.map((aChallenge: Challenge) => {\r\n                    if (aChallenge.id !== updatedChallenge.id) {\r\n                        return { ...aChallenge };\r\n                    }\r\n                    return { ...updatedChallenge };\r\n                });\r\n                return {\r\n                    ...aTest,\r\n                    challenges: [...updatedChallenges]\r\n                };\r\n            });\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        setSelectedChallenge({ ...updatedChallenge });\r\n    };\r\n\r\n    const handleConfirmRemoveChallenge = () => {\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return aProject;\r\n            }\r\n            const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                if (aTest.id !== testId) {\r\n                    return aTest;\r\n                }\r\n                if (deletedChallenge?.id === selectedChallenge?.id) {\r\n                    setSelectedChallenge(aTest.challenges.find(\r\n                        (aChallenge: Challenge) => aChallenge.id !== deletedChallenge?.id\r\n                    ));\r\n                }\r\n                const updatedChallenges = aTest.challenges.filter((\r\n                    aChallenge: Challenge\r\n                ) => aChallenge.id !== deletedChallenge?.id);\r\n                return {\r\n                    ...aTest,\r\n                    challenges: [...updatedChallenges]\r\n                };\r\n            });\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        setOpenRemoveChallengeConfirm(false);\r\n    };\r\n\r\n    const handleRefuseRemoveChallenge = () => {\r\n        setOpenRemoveChallengeConfirm(false);\r\n    };\r\n\r\n    const handleListModeChange = (event: React.MouseEvent<HTMLElement>, newListMode: boolean) => {\r\n        setCompactList(newListMode);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <DialogConfirm\r\n                open={openRemoveChallengeConfirm}\r\n                text='¿Seguro que deseas eliminar la pregunta?'\r\n                width='xs'\r\n                onConfirm={handleConfirmRemoveChallenge}\r\n                onRefuse={handleRefuseRemoveChallenge}\r\n            />\r\n            <Grid container className={classes.fullHeight} spacing={2}>\r\n                <Grid item xs={2} className={classes.listContainer}>\r\n                    <Grid container direction='column' className={classes.fullHeight}>\r\n                        <Grid item className={classes.fullWidth}>\r\n                            <Grid container justify='space-between' alignItems='center'>\r\n                                <Grid item>\r\n                                    <Typography variant='h5'>Preguntas</Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Grid container justify='flex-end' alignItems='center'>\r\n                                        <Grid item>\r\n                                            <ToggleButtonGroup size=\"small\" value={compactList} exclusive onChange={handleListModeChange}>\r\n                                                <ToggleButton value={false}>\r\n                                                    <Icon>crop_din</Icon>\r\n                                                </ToggleButton>\r\n                                                <ToggleButton value={true}>\r\n                                                    <Icon>reorder</Icon>\r\n                                                </ToggleButton>\r\n                                            </ToggleButtonGroup>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <IconButton onClick={handleClickNewChallengeMenu}>\r\n                                                <Icon color='primary'>add_circle</Icon>\r\n                                            </IconButton>\r\n                                            <Menu\r\n                                                id='new-challenge-menu'\r\n                                                anchorEl={anchorEl}\r\n                                                keepMounted\r\n                                                open={Boolean(anchorEl)}\r\n                                                onClose={handleCloseNewChallengeMenu}\r\n                                            >\r\n                                                <MenuItem onClick={() => {\r\n                                                    handleNewChallengeOptionClick(ChallengeType.SelectAnswer);\r\n                                                }}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.SelectAnswer, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.SelectAnswer)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => {\r\n                                                    handleNewChallengeOptionClick(ChallengeType.TrueOrFalse);\r\n                                                }}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.TrueOrFalse, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.TrueOrFalse)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => {\r\n                                                    handleNewChallengeOptionClick(ChallengeType.FillGaps);\r\n                                                }}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.FillGaps, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.FillGaps)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => {\r\n                                                    handleNewChallengeOptionClick(ChallengeType.Match);\r\n                                                }}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.Match, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.Match)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem disabled onClick={handleCloseNewChallengeMenu}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.Sort, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.Sort)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => {\r\n                                                    handleNewChallengeOptionClick(ChallengeType.Classify);\r\n                                                }}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.Classify, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.Classify)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => {\r\n                                                    handleNewChallengeOptionClick(ChallengeType.FillTable);\r\n                                                }}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.FillTable, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.FillTable)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem disabled onClick={handleCloseNewChallengeMenu}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.TheOddOne, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.TheOddOne)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem disabled onClick={handleCloseNewChallengeMenu}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.Crossword, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.Crossword)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                            </Menu>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item className={classes.challengesContainer}>\r\n                            <ChallengeSelector\r\n                                challenges={test.challenges}\r\n                                compactList={compactList}\r\n                                selected={selectedChallenge}\r\n                                onSelect={handleSelectChallenge}\r\n                                onDelete={handleDeleteChallenge}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={10}>\r\n                    {\r\n                        selectedChallenge && (\r\n                            <ChallengeDesigner\r\n                                challenge={selectedChallenge}\r\n                                onChallengeChange={handleChallengeChange}\r\n                            />\r\n                        )\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { useParams } from \"react-router\";\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { TestDesigner } from '../../components/Designer/TestDesigner';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\nexport const Designer = () => {\r\n    const { projectId, testId } = useParams() as any;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n            className={classes.fullHeight}\r\n        >\r\n            <Grid item xs={12} className={classes.fullHeight}>\r\n                <TestDesigner\r\n                    projectId={projectId}\r\n                    testId={testId}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Challenge, ChallengeOptions } from '../../types/Challenge';\r\nimport { ChallengeType } from '../../enums/ChallengeType';\r\nimport { SelectAnswerChallenger } from '../SelectAnswerChallenge/SelectAnswerChallenger';\r\nimport { SelectAnswerChallenge } from '../../types/SelectAnswerChallenge';\r\nimport { TrueOrFalseChallenge } from '../../types/TrueOrFalseChallenge';\r\nimport { TrueOrFalseChallenger } from '../TrueOrFalseChallenge/TrueOrFalseChallenger';\r\nimport { ClassifyChallenger } from '../ClassifyChallenge/ClassifyChallenger';\r\nimport { ClassifyChallenge } from '../../types/ClassifyChallenge';\r\nimport { FillTableChallenger } from '../FillTableChallenge/FillTableChallenger';\r\nimport { FillTableChallenge } from '../../types/FillTableChallenge';\r\nimport { FillGapsChallenger } from '../FillGapsChallenge/FillGapsChallenger';\r\nimport { FillGapsChallenge } from '../../types/FillGapsChallenge';\r\nimport { MatchChallenger } from '../MatchChallenge/MatchChallenger';\r\nimport { MatchChallenge } from '../../types/MatchChallenge';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\ninterface ChallengeEvaluatorProps {\r\n    challenge: Challenge,\r\n    options: ChallengeOptions,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const ChallengeEvaluator: React.FC<ChallengeEvaluatorProps> = (props: ChallengeEvaluatorProps) => {\r\n    const { challenge, options, onSuccess, onError } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handlerSucessChallenge = () => {\r\n        if (onSuccess) {\r\n            onSuccess();\r\n        }\r\n    };\r\n\r\n    const handlerErrorChallenge = () => {\r\n        if (onError) {\r\n            onError();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight}>\r\n            <Grid item xs={12}>\r\n                {\r\n                    challenge?.type === ChallengeType.SelectAnswer\r\n                    && (\r\n                        <SelectAnswerChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as SelectAnswerChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.TrueOrFalse\r\n                    && (\r\n                        <TrueOrFalseChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as TrueOrFalseChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.FillGaps\r\n                    && (\r\n                        <FillGapsChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as FillGapsChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Match\r\n                    && (\r\n                        <MatchChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as MatchChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Classify\r\n                    && (\r\n                        <ClassifyChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as ClassifyChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.FillTable\r\n                    && (\r\n                        <FillTableChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as FillTableChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import { Divider, Grid, LinearProgress, makeStyles, Typography } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { ChallengeType } from '../../enums/ChallengeType';\r\nimport { Language } from '../../enums/Language';\r\nimport { getChallengeTypeDescription } from '../../utils/utilChallenges';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: 'solid 1px',\r\n        backgroundColor: theme.palette.primary.light,\r\n    }\r\n}));\r\n\r\ninterface ChallengeLauncherProps {\r\n    challengeType: ChallengeType,\r\n    challengeNumber: number,\r\n    challengeTotalCount: number,\r\n    language: Language,\r\n    delay: number,\r\n    onEnd: () => void\r\n}\r\n\r\nexport const ChallengeLauncher: React.FC<ChallengeLauncherProps> = (props: ChallengeLauncherProps) => {\r\n    const { challengeType, challengeNumber, challengeTotalCount, language, delay, onEnd } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => { onEnd(); }, delay * 1000);\r\n    }, []);\r\n\r\n    return (\r\n        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={2} className={classes.root}>\r\n            <Grid item>\r\n                <Typography variant=\"h2\">\r\n                    {\r\n                        getChallengeTypeDescription(challengeType, language)\r\n                    }\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item style={{width: '100%'}}>\r\n                <LinearProgress color=\"secondary\" />\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant=\"h4\">\r\n                    {\r\n                        language === Language.En ? (\r\n                            `Question ${challengeNumber.toString()} of ${challengeTotalCount.toString()}`\r\n                        ) : (\r\n                            `Pregunta ${challengeNumber.toString()} de ${challengeTotalCount.toString()}`\r\n                        )\r\n                    }\r\n                </Typography>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Button, Grid, Icon, makeStyles, Typography } from '@material-ui/core';\r\nimport { Test } from '../../types/Test';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        border: 'solid 1px'\r\n    },\r\n    timeline: {\r\n        transform: 'rotate(-90deg)'\r\n    },\r\n    timelineContentContainer: {\r\n        textAlign: 'left',\r\n        padding: '0px'\r\n    },\r\n    timelineContent: {\r\n        transform: 'rotate(90deg)',\r\n        padding: '0px 5px'\r\n    },\r\n    timelineIcon: {\r\n        transform: 'rotate(90deg)'\r\n    }\r\n}));\r\n\r\ninterface TestResultProps {\r\n    test: Test,\r\n    results: boolean[],\r\n    onBackHome: () => void,\r\n    onRepeatTest: () => void\r\n}\r\n\r\nexport const TestResult: React.FC<TestResultProps> = (props: TestResultProps) => {\r\n    const { test, results, onBackHome, onRepeatTest } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container\r\n            direction=\"column\"\r\n            className={classes.root}\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={4}\r\n        >\r\n            <Grid item>\r\n                <Typography variant=\"h2\">\r\n                    {test.name}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant=\"h3\">\r\n                    {test.description}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant=\"h4\">\r\n                    {\r\n                        `${test.language === Language.En ? 'Correct answers' : 'Respuestas correctas'}: ${results.filter((aResult: boolean) => aResult).length}/${results.length}`\r\n                    }\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item container justify=\"center\" alignItems=\"center\" spacing={4}>\r\n                <Grid item>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onBackHome}>\r\n                        <Icon>navigate_before</Icon>\r\n                        &nbsp;\r\n                        { test.language === Language.En ? 'Go back to home' : 'Volver a la pantalla principal' }\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onRepeatTest}>\r\n                        <Icon>replay</Icon>\r\n                        &nbsp;\r\n                        { test.language === Language.En ? 'repeat test' : 'Repetir cuestionario' }\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport { Test, TestOptions } from '../../types/Test';\r\nimport { useProjects } from '../../hooks/useProjects';\r\nimport { Project } from '../../types/Project';\r\nimport { ChallengeEvaluator } from '../../components/Evaluator/ChallengeEvaluator';\r\nimport { ChallengeLauncher } from '../../components/Evaluator/ChallengeLauncher';\r\nimport { TestResult } from '../../components/Evaluator/TestResult';\r\nimport { parseQueryString } from '../../utils/utilStrings';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\ninterface IParams {\r\n    projectId: string,\r\n    testId: string\r\n}\r\n\r\ninterface ChallengeState {\r\n    idx: number,\r\n    launching: boolean\r\n}\r\n\r\nexport const Evaluator: React.FC = () => {\r\n    const { projectId, testId } = useParams() as IParams;\r\n    const history = useHistory();\r\n\r\n    const { projects } = useProjects();\r\n    const [testOptions] = useState<TestOptions>(parseQueryString(history.location.search));\r\n    const [test, setTest] = useState<Test>();\r\n    const [currentChallengeState, setCurrentChallengeState] = useState<ChallengeState>({idx: -1, launching: false});\r\n    const [results, setResults] = useState<boolean[]>([]);\r\n    const [showResult, setShowResult] = useState<boolean>(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (projectId != null && testId != null) {\r\n            const theProject: Project = projects.find((aProject: Project) => aProject.id === projectId);\r\n            if (theProject != null) {\r\n                const theTest: Test | undefined = theProject.tests.find((aTest: Test) => aTest.id === testId);\r\n                if (theTest != null) {\r\n                    setTest(theTest);\r\n                    setCurrentChallengeState({idx: 0, launching: true});\r\n                }\r\n            }\r\n        }\r\n    }, [projectId, testId]);\r\n\r\n    const next = () => {\r\n        if (test != null) {\r\n            if (currentChallengeState.launching) {\r\n                setCurrentChallengeState({\r\n                    ...currentChallengeState,\r\n                    launching: false\r\n                });\r\n            } else {\r\n                if (currentChallengeState.idx < test.challenges.length - 1) {\r\n                    setCurrentChallengeState({\r\n                        idx: currentChallengeState.idx + 1,\r\n                        launching: true\r\n                    });\r\n                } else {\r\n                    setCurrentChallengeState({\r\n                        idx: -1,\r\n                        launching: false\r\n                    });\r\n                    setShowResult(true);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleResponse = (success: boolean) => {\r\n        setResults([...results, success]);\r\n        if (testOptions.autoNext) {\r\n            next();\r\n        }\r\n    };\r\n\r\n    const handleBackHome = () => {\r\n        history.push('/');\r\n    };\r\n\r\n    const handleRepeatTest = () => {\r\n        setCurrentChallengeState({idx: 0, launching: true});\r\n        setResults([]);\r\n        setShowResult(false);\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n            className={classes.fullHeight}\r\n        >\r\n            <Grid item xs={2}></Grid>\r\n            <Grid item xs={8} className={classes.fullHeight}>\r\n                {\r\n                    test != null && currentChallengeState.launching && currentChallengeState.idx >= 0 && (\r\n                        <ChallengeLauncher\r\n                            challengeType={test.challenges[currentChallengeState.idx].type}\r\n                            challengeNumber={currentChallengeState.idx + 1}\r\n                            challengeTotalCount={test.challenges.length}\r\n                            language={test.language}\r\n                            delay={3}\r\n                            onEnd={next}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    test != null && !currentChallengeState.launching && currentChallengeState.idx >= 0 && (\r\n                        <ChallengeEvaluator\r\n                            challenge={test.challenges[currentChallengeState.idx]}\r\n                            options={{\r\n                                language: test.language,\r\n                                ignoreTimeLimit: testOptions.ignoreTimeLimit\r\n                            }}\r\n                            onSuccess={() => { handleResponse(true); }}\r\n                            onError={() => { handleResponse(false); }}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    test != null && showResult && (\r\n                        <TestResult\r\n                            test={test}\r\n                            results={results}\r\n                            onBackHome={handleBackHome}\r\n                            onRepeatTest={handleRepeatTest}\r\n                        />\r\n                    )\r\n                }\r\n            </Grid>\r\n            <Grid item xs={2} className={`${classes.fullHeight} ${classes.centerAll}`}>\r\n                {\r\n                    !testOptions.autoNext\r\n                    && currentChallengeState.idx === results.length - 1\r\n                    && (\r\n                        <Fab\r\n                            variant=\"extended\"\r\n                            size=\"large\"\r\n                            color=\"primary\"\r\n                            onClick={next}\r\n                        >\r\n                            {test?.language === Language.En ? 'Next' : 'Siguiente'}&nbsp;<Icon>navigate_next</Icon>\r\n                        </Fab>\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\r\nimport { ProjectContextProvider } from './context/ProjectContext';\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route\r\n} from \"react-router-dom\";\r\nimport { theme } from \"./theme\";\r\nimport { MainHeader } from \"./components/common/MainHeader\";\r\nimport { Home } from \"./views/Home\";\r\nimport { Designer } from \"./views/Designer\";\r\nimport { Evaluator } from \"./views/Evaluator\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    mainContainer: {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    headerContainer: {\r\n        width: '100%',\r\n        height: '75px'\r\n    },\r\n    content: {\r\n        margin: '30px',\r\n        height: 'calc(100% - 135px)'\r\n    }\r\n}));\r\n\r\nexport default function App() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Router>\r\n            <ThemeProvider theme={theme}>\r\n                <ProjectContextProvider>\r\n                    <div className={classes.mainContainer}>\r\n                        <div className={classes.headerContainer}>\r\n                            <MainHeader></MainHeader>\r\n                        </div>\r\n                        <div className={classes.content}>\r\n                            <Switch>\r\n                                <Route exact path=\"/\">\r\n                                    <Home />\r\n                                </Route>\r\n                                <Route path=\"/designer/:projectId/:testId\">\r\n                                    <Designer />\r\n                                </Route>\r\n                                <Route path=\"/play/:projectId/:testId\">\r\n                                    <Evaluator />\r\n                                </Route>\r\n                            </Switch>\r\n                        </div>\r\n                    </div>\r\n                </ProjectContextProvider>\r\n            </ThemeProvider>\r\n        </Router >\r\n    );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}