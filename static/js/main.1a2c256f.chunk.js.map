{"version":3,"sources":["enums/ChallengeType.ts","enums/ComponentMode.ts","enums/ElementDirection.ts","enums/FillMethod.ts","enums/Language.ts","enums/MatchElement.ts","enums/PictureType.ts","context/ProjectContext.tsx","theme/index.ts","components/Common/MainHeader.tsx","hooks/useProjects.ts","components/BasicChallengeTemplate/BasicChallengeTemplate.tsx","components/ClassifyChallenge/ClassifyChallengeDesigner.tsx","assets/sounds/correct.wav","assets/sounds/incorrect.wav","components/ClassifyChallenge/ClassifyChallenger.tsx","components/ClassifyChallenge/ClassifyConfigurator.tsx","components/ClassifyChallenge/DropGroup.tsx","components/Common/ChallengeConfigurator.tsx","components/Common/ChallengeQuestion.tsx","components/Common/Countdown.tsx","components/Common/DialogConfirm.tsx","components/Common/DialogPictureSelector.tsx","components/Common/DragableItem.tsx","components/Common/JsonLoader.tsx","components/Common/PictureGrid.tsx","components/Common/SelectableOption.tsx","components/Designer/ChallengeDesigner.tsx","components/Designer/ChallengeSelector.tsx","utils/utilChallenges.tsx","utils/utilStrings.ts","utils/utilValidationTypes.ts","components/Designer/ChallengeThumbnail.tsx","components/Designer/TestDesigner.tsx","components/Evaluator/ChallengeEvaluator.tsx","components/Evaluator/ChallengeLauncher.tsx","components/Evaluator/TestResult.tsx","components/FillGapsChallenge/DialogFillGapsCandidates.tsx","components/FillGapsChallenge/DropGap.tsx","components/FillGapsChallenge/FillGapsChallengeDesigner.tsx","components/FillGapsChallenge/FillGapsChallenger.tsx","components/FillGapsChallenge/FillGapsConfigurator.tsx","components/FillGapsChallenge/FillGapsSentence.tsx","components/FillTableChallenge/FillTableChallengeDesigner.tsx","components/FillTableChallenge/FillTableChallenger.tsx","components/FillTableChallenge/FillTableConfigurator.tsx","components/FillTableChallenge/TableCell.tsx","components/Home/DialogTestOptions.tsx","components/Home/DialogProjectForm.tsx","components/Home/ProjectForm.tsx","components/Home/ProjectList.tsx","components/Home/TestForm.tsx","components/Home/TestList.tsx","components/MatchChallenge/MatchChallengeDesigner.tsx","components/MatchChallenge/MatchChallenger.tsx","components/MatchChallenge/MatchConfigurator.tsx","components/MatchChallenge/MatchDestination.tsx","components/MatchChallenge/MatchSource.tsx","components/PictureChallengeTemplate/PictureChallengeTemplate.tsx","components/SelectAnswerChallenge/SelectAnswerChallengeDesigner.tsx","components/SelectAnswerChallenge/SelectAnswerChallenger.tsx","components/SelectAnswerChallenge/SelectAnswerConfigurator.tsx","components/SortChallenge/SortChallengeDesigner.tsx","components/SortChallenge/SortChallenger.tsx","components/SortChallenge/SortConfigurator.tsx","components/TheOddOneChallenge/TheOddOneChallengeDesigner.tsx","components/TheOddOneChallenge/TheOddOneChallenger.tsx","components/TheOddOneChallenge/TheOddOneConfigurator.tsx","components/TheOddOneChallenge/TheOddOneSerie.tsx","components/TrueOrFalseChallenge/TrueOrFalseChallengeDesigner.tsx","components/TrueOrFalseChallenge/TrueOrFalseChallenger.tsx","components/TrueOrFalseChallenge/TrueOrFalseConfigurator.tsx","views/Home/index.tsx","views/Designer/index.tsx","views/Evaluator/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChallengeType","ComponentMode","ElementDirection","FillMethod","Language","MatchElement","PictureType","ProjectContext","React","createContext","ProjectContextProvider","children","useState","projects","setProjects","Provider","value","colors","main","light","dark","mainContrast","contrast","errorContrast","theme","createMuiTheme","palette","primary","contrastText","secondary","background","default","paper","error","text","typography","fontSize","useStyles","makeStyles","fullHeight","height","noMinHeight","breakpoints","down","minHeight","MainHeader","classes","useEffect","ReactGA","initialize","process","pageview","window","location","pathname","AppBar","position","className","Toolbar","to","style","color","textDecoration","fontWeight","LOCALSTORAGE_KEY","useProjects","useContext","saveProjects","length","strProjects","localStorage","getItem","JSON","parse","newProjects","setItem","stringify","root","backgroundColor","titleContainer","centralSmallContainer","centralFullContainer","bottomContainer","paddingTop","centerAll","display","justifyContent","alignItems","BasicChallengeTemplate","props","mode","challenge","options","onChallengeChange","stopTime","onTimeUp","showCheck","disabledCheck","onCheckClick","centralComponent","bottomComponent","answered","setAnswered","stopTimer","setStopTimer","Card","variant","question","config","questionFontSize","onChange","newTitle","Grid","container","justify","item","xs","Design","ignoreTimeLimit","time","timeLimit","Fab","size","disabled","onClick","Icon","language","En","ClassifyChallengeDesigner","spacing","updatedChallenge","onConfigChange","groups","groupCount","newGroups","Array","from","map","name","items","slice","readjustGroups","optionsContainer","border","groupsContainer","reorderItems","list","reduce","acc","current","Play","sort","Math","random","ClassifyChallenger","onSuccess","onError","aGroup","groupName","initialClassifyState","classifyState","setClassifyState","highlightResults","setHighlightResults","draggableItems","setDragabbleItems","useSound","correct","playCorrect","incorrect","playIncorrect","showResult","success","setTimeout","isDropped","itemName","indexOf","newChallenge","accGroups","currentGroup","correctItems","accItems","currentItem","theGroup","find","DndProvider","backend","HTML5Backend","anItem","idx","itemsFontSize","title","validItems","showResults","onTitleChange","newName","groupIdx","updatedName","updatedGroups","handleNameChange","onItemsChange","newItems","updatedItems","handleItemsChange","droppedItems","auxGroup","onDrop","droppedItem","newDroppedItems","filter","findIndex","handleDrop","fullWidth","width","ClassifyConfigurator","formData","setFormData","inputItemsFontSize","useRef","inputGroupCount","handleConfigParameterChange","parameter","newConfig","direction","Typography","newBaseConfig","TextField","inputRef","type","label","inputProps","min","onInput","parseInt","padding","itemsContainer","DropGroup","useDrop","accept","drop","collect","monitor","isOver","canDrop","groupState","setGroupState","inputTitle","inputItem","addValidItem","newState","elevation","textAlign","itemIdx","Chip","onDelete","handleRemoveValidItem","InputProps","onKeyPress","evt","code","ref","aDroppedItem","ChallengeConfigurator","inputTimeLimit","inputQuestionFontSize","inputContainer","input","ChallengeQuestion","questionText","setQuestionText","inputQuestion","isMobile","isTablet","lineHeight","readOnly","disableUnderline","placeholder","multiline","rowsMax","Countdown","timeRemaining","setTimeRemaining","stop","setStop","timeoutId","clearTimeout","Box","CircularProgress","round","top","left","bottom","right","component","DialogConfirm","open","acceptButtonText","cancelButtonText","onConfirm","onRefuse","Dialog","maxWidth","DialogContent","DialogActions","Button","autoFocus","dialogContainer","DialogPictureForm","picture","onAccept","onCancel","formState","setFormState","inputUrl","DialogTitle","data","newPicture","Url","borderRadius","cursor","DragableItem","iconButton","useDrag","opacity","isDragging","drag","uploadInput","JsonLoader","onDataLoaded","inputImport","id","uuidv4","multiple","event","target","files","file","reader","FileReader","readAsText","onloadend","e","newProject","result","err","htmlFor","pic","maxHeight","PictureGrid","pictures","onPicturesChange","pictureDialogState","setPictureDialogState","pictureItemSize","setPictureItemSize","openDialog","selectedPicture","newPic","pictureIdx","selectedPictureIdx","aPicture","None","src","alt","handleAddPictureClick","toString","option","optionActionArea","optionInput","optionInnerInput","optionIcon","selector","checked","SelectableOption","icon","valid","selected","multiselect","onTextChange","onValidChange","optionState","setOptionState","inputTextOption","radioOption","checkOption","borderStyle","borderWidth","borderColor","startAdornment","InputAdornment","endAdornment","Checkbox","Radio","ev","preventDefault","CardActionArea","justifySelf","ChallengeDesigner","handleChallengeChange","SelectAnswer","TrueOrFalse","FillGaps","Match","Sort","Classify","FillTable","TheOddOne","overflowY","ChallengeSelector","challenges","compactList","onChallengeReorder","onSelect","localChallenges","setLocalChallenges","undefined","selectedChallenge","setSelectedChallenge","handleThumbnailClick","handleThumbnailDelete","handleChallengeMove","dragIndex","hoverIndex","filteredCards","aChallenge","newChallenges","index","compact","onChallengeMove","getChallengeTypeDescription","Es","Crossword","getChallengeTypeIcon","getDefaultChallengeConfig","defaultChallengeConfig","answerFontSize","pictureCount","pictureLabel","pairsCount","textFontSize","fillMethod","Writing","itemCount","elementsDirection","Horizontal","rowCount","columnCount","firstRowFixed","firstColumnFixed","seriesCount","seriesLength","splitSentence","replace","split","joinSentence","textParts","join","checkEqual","stringA","stringB","checkCapitalLetters","checkAccentMarks","strA","strB","toLowerCase","isValidChallenge","errorMessage","push","configValidation","customConfig","isValidConfig","customChallenge","some","answers","anAnswer","sentences","hiddenExpressions","pairs","source","destination","accRow","currentRow","rowIdx","accColumn","currentColumn","columnIdx","series","accSerie","currentSerie","elements","accElement","currentElement","aSerie","theOddOneIndex","isValidTest","test","headerContainer","overflow","contentContainer","actionContainer","marginTop","descriptionContainer","description","whiteSpace","textOverflow","tooltipRow","statusContainer","ChallengeThumbnail","validation","setValidation","hover","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","hoverClientY","getClientOffset","y","preview","getEmptyImage","captureDraggingState","onMouseDown","CardHeader","content","avatar","subheader","action","Tooltip","arrow","aMessage","messageIdx","CardContent","noWrap","CardActions","IconButton","listContainer","paddingRight","challengesContainer","overflowX","listStyle","boxShadow","webkitBoxShadow","outline","challengeSelector","flexGrow","addMenuItems","TestDesigner","projectId","testId","setTest","setCompactList","anchorEl","setAnchorEl","deletedChallenge","setDeletedChallenge","openRemoveChallengeConfirm","setOpenRemoveChallengeConfirm","project","aProject","tests","aTest","handleReorderChallenges","useCallback","reorderedChallenges","updatedProjects","updatedTests","handleNewChallengeOptionClick","defaultChallenge","answer","hidden","getDefaultChallenge","selectedPosition","updatedChallenges","ToggleButtonGroup","exclusive","newListMode","ToggleButton","currentTarget","Menu","keepMounted","Boolean","onClose","challengeType","MenuItem","ListItemIcon","ChallengeEvaluator","handlerSucessChallenge","handlerErrorChallenge","ChallengeLauncher","challengeNumber","challengeTotalCount","delay","onEnd","LinearProgress","timeline","transform","timelineContentContainer","timelineContent","timelineIcon","TestResult","results","onBackHome","onRepeatTest","aResult","DialogFillGapsCandidates","candidates","inputCandidate","List","aCandidate","candidateIdx","ListItem","ListItemText","ListItemSecondaryAction","edge","handleDeleteCandidate","DropGap","borderBottom","FillGapsChallengeDesigner","forEach","aSentence","sentenceIdx","aHiddenExpression","hiddenExpressionIdx","sentenceText","hiddenExpression","FillGapsChallenger","inputSentence","initialFillGapsState","fillGapsState","setFillGapsState","openCandidatesDialog","setOpenCandidatesDialog","selectedExpression","setSelectedExpression","expressionInSentence","sentence","expression","initPosition","wordCount","every","el","accSentences","currentSentence","words","correctExpressions","accExpressions","currentExpression","expressionIdx","hiddenAnswer","hiddenIdx","alternatives","anAlternative","newCandidates","updatedSentences","hiddenExpresionIdx","Dragging","sentencesAnswer","aSentenceAnswer","hiddenExpIdx","onSentenceChange","updatedSentence","handleSentenceChange","onSentenceRemove","aFillGapsState","handleSentenceRemove","onAnswersChange","updatedState","handleSentenceAnswer","newSentence","addSentence","FillGapsConfigurator","inputTextFontSize","inputFillMethod","FormControl","InputLabel","Select","FormControlLabel","control","Switch","word","selectableWord","FillGapsSentence","currentIdx","anExp","sentenceParts","parts","setParts","handlePartChange","partIdx","updatedParts","aPart","getPartStyle","validValues","aValidValue","aWord","wordIdx","anExpression","updatedHiddenExpressions","completeArrayFrom","handleWordClick","droppedText","FillTableChallengeDesigner","auxColumn","newRows","newColumns","readjustTable","cell","FillTableChallenger","aRow","aColumn","initialFillTableState","fillTableState","setFillTableState","fixed","onCellChange","newCell","auxRowIdx","auxColumnIdx","handleCellChange","FillTableConfigurator","inputRowCount","checkFirstRowFixed","inputColumnCount","checkFirstColumnFixed","invalid","TableCell","inputText","marginLeft","DialogTestOptions","autoNext","disorderedChallenges","checkIgnoreTimeLimit","checkAutoNextChallenge","checkDisorderedChallenges","handleAttributeChange","attribute","ProjectForm","initialState","inputName","inputDescription","heading","pxToRem","secondaryHeading","gridContainer","gridItems","messageControl","ProjectList","history","useHistory","expandedProject","setExpandedProject","preimportedProject","setPreimportedProject","openOverwriteProject","setOpenOverwriteProject","openProjectForm","setOpenProjectForm","openRemoveProjectConfirm","setOpenRemoveProjectConfirm","selectedProject","setSelectedProject","openMessage","setOpenMessage","messageText","setMessageText","handleCreateTest","openDesign","theProject","updating","handleDeleteTest","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","SnackbarContent","message","sm","isValidProject","Divider","Accordion","expanded","isExpanded","handleExpandChange","AccordionSummary","stopPropagation","element","document","createElement","setAttribute","encodeURIComponent","body","appendChild","click","removeChild","handleExportProjectClick","AccordionDetails","onCreateTest","onDeleteTest","TestForm","shrink","labelId","updatedLanguage","newTest","inline","listItemSecondaryAction","visibility","listItem","play","TestList","selectedTest","setSelectedTest","preimportedTest","setPreimportedTest","anchorElEdit","setAnchorElEdit","openOverwriteTest","setOpenOverwriteTest","openTestForm","setOpenTestForm","openRemoveTestConfirm","setOpenRemoveTestConfirm","playOptionsState","setPlayOptionsState","Link","button","openOptions","handleEditClick","handleExportTestClick","testOptions","MatchChallengeDesigner","newPairs","readjustPairs","texts","MatchChallenger","aPair","sourceItems","setSourceItems","destinationItems","setDestinationItems","matchState","setMatchState","handleTextChange","newText","pairIdx","pairAttribute","Source","accPairs","currentPair","idxAnswer","aSource","sourceIdx","arrowNode","aDestination","destinationIdx","Destination","start","end","curveness","MatchConfigurator","inputAnswerFontSize","inputPairsCount","MatchDestination","textValue","setTextValue","MatchSource","PictureChallengeTemplate","newPictures","SelectAnswerChallengeDesigner","readjustPictures","validPresent","readjustValidAnswers","optionContainer","SelectAnswerChallenger","selectedAnswers","setSelectedAnswers","handleAnswerChange","updatedAnswer","updatedAnswers","handlerOptionClick","answerIdx","theIndex","anAnswerIdx","picChallenge","SelectAnswerConfigurator","inputPictureCount","checkPictureLabel","checkMultiselect","max","SortChallengeDesigner","readjustItems","SortChallenger","SortConfigurator","inputItemCount","inputElementsDirection","Vertical","TheOddOneChallengeDesigner","newElements","newOddOneIndex","newSeries","readjustSeries","answerContainer","sentencesContainer","paddingLeft","TheOddOneChallenger","theOddOneState","setTheOddOneState","accSeries","serieIdx","serieIndex","answerIndex","serie","onSerieChange","updatedSerie","newSerie","idxSerie","handleSerieChange","onAnswerChange","selectedIdx","splice","handleSerieAnswer","TheOddOneConfigurator","inputSeriesCount","inputSeriesLength","mainContainer","selectableAnswer","selectedAnswer","TheOddOneSerie","setSelectedAnswer","getElementStyle","elementIdx","anElement","selIdx","auxElements","TrueOrFalseChallengeDesigner","TrueOrFalseChallenger","TrueOrFalseConfigurator","Home","lg","xl","Designer","useParams","Evaluator","qs","qsAux","aParam","paramParts","parseQueryString","search","launching","currentChallengeState","setCurrentChallengeState","setResults","setShowResult","theTest","a","b","next","handleResponse","App","ThemeProvider","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1a2c256f.chunk.js","sourcesContent":["export enum ChallengeType {\r\n    SelectAnswer = 'SA',\r\n    TrueOrFalse = 'TF',\r\n    FillGaps = 'FG',\r\n    Match = 'MT',\r\n    Sort = 'SO',\r\n    Classify = 'CL',\r\n    FillTable = 'FT',\r\n    TheOddOne = 'OO',\r\n    Crossword = 'CW'\r\n}\r\n","export enum ComponentMode {\r\n    Design,\r\n    Play\r\n}\r\n","export enum ElementDirection {\r\n    Horizontal = 'H',\r\n    Vertical = 'V'\r\n}\r\n","export enum FillMethod {\r\n    Writing = 'W',\r\n    Dragging = 'D'\r\n}\r\n","export enum Language {\r\n    Es = 'ES',\r\n    En = 'EN'\r\n}\r\n","export enum MatchElement {\r\n    Source,\r\n    Destination\r\n}\r\n","export enum PictureType {\r\n    None = 'NONE',\r\n    Url = 'URL',\r\n    Base64 = 'BASE64'\r\n}\r\n","import React, { useState } from 'react';\r\n\r\n/**\r\n * Contexto para almacenar los proyectos importados\r\n */\r\nexport const ProjectContext = React.createContext<any | React.Dispatch<any>>([]);\r\n\r\ntype Props = {\r\n    children: React.ReactNode\r\n}\r\n\r\n/** Proveedor del contexto de proyectos */\r\nexport const ProjectContextProvider = ({ children }: Props) => {\r\n    // Hook para mantener el estado del contexto\r\n    const [projects, setProjects] = useState<any | React.Dispatch<any>>([]);\r\n\r\n    return (\r\n        <ProjectContext.Provider value={{ projects, setProjects }}>\r\n            {children}\r\n        </ProjectContext.Provider>\r\n    );\r\n};\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nexport const colors = {\r\n    primary: {\r\n        main: '#2196f3',\r\n        light: '#6ec6ff',\r\n        dark: '#0069c0'\r\n    },\r\n    secondary: {\r\n        main: '#e91e63',\r\n        light: '#ff6090',\r\n        dark: '#b0003a'\r\n    },\r\n    error: '#f44336',\r\n    background: {\r\n        main: '#2196f3',\r\n        light: '#ffffff',\r\n        dark: '#0069c0'\r\n    },\r\n    font: {\r\n        main: '#000000',\r\n        mainContrast: \"#ffffff\",\r\n        light: '#000000',\r\n        dark: '#888888',\r\n        contrast: '#6ec6ff',\r\n        errorContrast: \"#ffffff\"\r\n    },\r\n    action: \"#4caf50\"\r\n};\r\n\r\nexport const fontSize = {\r\n    s: 10,\r\n    m: 12,\r\n    l: 16\r\n};\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: colors.primary.main,\r\n            contrastText: colors.font.mainContrast,\r\n            light: colors.primary.light\r\n        },\r\n        secondary: {\r\n            main: colors.secondary.main,\r\n            contrastText: colors.font.main,\r\n            light: colors.secondary.light\r\n        },\r\n        background: {\r\n            default: colors.background.main,\r\n            paper: colors.background.light\r\n        },\r\n        error: {\r\n            main: colors.error,\r\n        },\r\n        text: {\r\n            primary: colors.font.main,\r\n            secondary: colors.font.dark\r\n        }\r\n    },\r\n    typography: {\r\n        fontSize: fontSize.m,\r\n    }\r\n});\r\n","import React, { useEffect } from 'react';\r\nimport { AppBar, makeStyles, Toolbar } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport ReactGA from 'react-ga';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    noMinHeight: {\r\n        [theme.breakpoints.down('sm')]: {\r\n            minHeight: '30px'\r\n        }\r\n    }\r\n}));\r\n\r\nexport const MainHeader: React.FC = () => {\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (process.env.NODE_ENV === 'production') {\r\n            ReactGA.initialize(process.env.REACT_APP_GA_TRACKID || '');\r\n            ReactGA.pageview(window.location.pathname);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <AppBar position='static' className={classes.fullHeight}>\r\n            <Toolbar className={`${classes.fullHeight} ${classes.noMinHeight}`}>\r\n                <Link to=\"/\" style={{color: '#ffffff', textDecoration: 'none', fontWeight: 'bold'}}>!toohaK</Link>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n","import { useContext, useEffect } from 'react';\r\nimport { ProjectContext } from 'context/ProjectContext';\r\nimport { Project } from 'types';\r\n\r\nconst LOCALSTORAGE_KEY = 'projects';\r\n\r\n/**\r\n * Hook para la gestión del mapa\r\n */\r\nexport const useProjects = (): any => {\r\n    // Contexto del mapa\r\n    const { projects, setProjects: saveProjects } = useContext(ProjectContext);\r\n\r\n    useEffect(() => {\r\n        if (projects == null || projects.length === 0) {\r\n            const strProjects = localStorage.getItem(LOCALSTORAGE_KEY);\r\n            if (strProjects != null && strProjects !== '') {\r\n                saveProjects(JSON.parse(strProjects));\r\n            } else {\r\n                saveProjects([]);\r\n            }\r\n        }\r\n    });\r\n\r\n    const setProjects = (newProjects: Project[]) => {\r\n        localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(newProjects));\r\n        saveProjects(newProjects);\r\n    };\r\n\r\n    return { projects, setProjects };\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport { ChallengeOptions, Challenge } from 'types';\r\nimport { ComponentMode, Language } from 'enums';\r\nimport { ChallengeQuestion, Countdown } from 'components';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    centralSmallContainer: {\r\n        height: '50%'\r\n    },\r\n    centralFullContainer: {\r\n        height: '80%'\r\n    },\r\n    bottomContainer: {\r\n        height: '30%',\r\n        paddingTop: '10px'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\ninterface BasicChallengeTemplateProps {\r\n    mode: ComponentMode,\r\n    challenge: Challenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: Challenge) => void,\r\n    stopTime?: boolean,\r\n    onTimeUp?: () => void,\r\n    showCheck?: boolean,\r\n    disabledCheck?: boolean,\r\n    onCheckClick?: () => void,\r\n    centralComponent?: React.ReactChild | React.ReactChild[],\r\n    bottomComponent?: React.ReactChild | React.ReactChild[]\r\n}\r\n\r\nexport const BasicChallengeTemplate: React.FC<BasicChallengeTemplateProps> = (props: BasicChallengeTemplateProps) => {\r\n    const {\r\n        mode, challenge, options, onChallengeChange,\r\n        stopTime, onTimeUp, showCheck, disabledCheck, onCheckClick,\r\n        centralComponent, bottomComponent\r\n    } = props;\r\n\r\n    const [answered, setAnswered] = useState<boolean>(false);\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (stopTime) {\r\n            setStopTimer(true);\r\n        }\r\n    }, [stopTime]);\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        if (onTimeUp) {\r\n            onTimeUp();\r\n        }\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        setAnswered(true);\r\n        if (onCheckClick) {\r\n            onCheckClick();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={bottomComponent ? classes.centralSmallContainer : classes.centralFullContainer}>\r\n                <Grid container justify='center' style={{ height: '100%' }}>\r\n                    <Grid item xs={2} style={{ height: '100%' }}>\r\n                        {\r\n                            (mode === ComponentMode.Design || (options != null && !options.ignoreTimeLimit)) && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={mode === ComponentMode.Design || stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} style={{ height: '100%' }}>\r\n                        { centralComponent }\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            showCheck && (\r\n                                <Fab\r\n                                    variant=\"extended\"\r\n                                    size=\"large\"\r\n                                    color=\"primary\"\r\n                                    disabled={answered || disabledCheck}\r\n                                    onClick={() => { handleCheckClick(); }}\r\n                                >\r\n                                    <Icon>check</Icon>&nbsp;{options?.language === Language.En ? 'Check' : 'Corregir'}\r\n                                </Fab>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n            {\r\n                bottomComponent && (\r\n                    <div className={classes.bottomContainer}>\r\n                        { bottomComponent }\r\n                    </div>\r\n                )\r\n            }\r\n        </Card>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { ClassifyChallenge, ClassifyChallengeConfig, ClassifyChallengeGroup } from 'types';\r\nimport { ComponentMode } from 'enums';\r\nimport { ClassifyChallenger, ClassifyConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface ClassifyChallengeDesignerProps {\r\n    challenge: ClassifyChallenge,\r\n    onChallengeChange: (challenge: ClassifyChallenge) => void\r\n}\r\n\r\nexport const ClassifyChallengeDesigner: React.FC<ClassifyChallengeDesignerProps> = (\r\n    props: ClassifyChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustGroups = (groupCount: number): ClassifyChallengeGroup[] => {\r\n        let groups = [...challenge.groups];\r\n        if (groupCount > groups.length) {\r\n            const newGroups = Array.from(Array(groupCount - groups.length))\r\n                .map(() => ({ name: '', items: []}));\r\n            groups = [...groups, ...newGroups];\r\n        } else if (groupCount < groups.length) {\r\n            groups = groups.slice(0, groupCount);\r\n        }\r\n        return groups;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: ClassifyChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: ClassifyChallengeConfig) => {\r\n        const groups = readjustGroups(config.groupCount);\r\n        const updatedChallenge: ClassifyChallenge = {\r\n            ...challenge,\r\n            groups,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <ClassifyChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <ClassifyConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/correct.6415db46.wav\";","export default __webpack_public_path__ + \"static/media/incorrect.70fff5c7.wav\";","import React, { useEffect, useState } from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport useSound from 'use-sound';\r\nimport correct from 'assets/sounds/correct.wav';\r\nimport incorrect from 'assets/sounds/incorrect.wav';\r\nimport { Challenge, ChallengeOptions, ClassifyChallenge, ClassifyChallengeGroup } from 'types';\r\nimport { ComponentMode } from 'enums';\r\nimport { BasicChallengeTemplate, DragableItem, DropGroup } from 'components';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    optionsContainer: {\r\n        height: '20%',\r\n        border: 'solid 1px gray',\r\n        backgroundColor: '#ffffff'\r\n    },\r\n    groupsContainer: {\r\n        height: '80%'\r\n    }\r\n}));\r\n\r\ninterface dropState {\r\n    groupName: string,\r\n    items: string[]\r\n}\r\n\r\nconst initialClassifyState = (challenge: ClassifyChallenge): dropState[] => {\r\n    return challenge.groups.map((aGroup: ClassifyChallengeGroup) => (\r\n        {\r\n            groupName: aGroup.name,\r\n            items: []\r\n        }\r\n    ));\r\n};\r\n\r\nconst reorderItems = (groups: ClassifyChallengeGroup[], mode: ComponentMode): string[] => {\r\n    let list: string[] = groups.reduce((acc: string[], current: ClassifyChallengeGroup) => [...acc, ...current.items], []);\r\n    if (mode === ComponentMode.Play) {\r\n        list = list.sort(() => Math.random() - 0.5);\r\n    }\r\n    return list;\r\n};\r\n\r\ninterface ClassifyChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: ClassifyChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: ClassifyChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const ClassifyChallenger: React.FC<ClassifyChallengerProps> = (props: ClassifyChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [classifyState, setClassifyState] = useState<dropState[]>(initialClassifyState(challenge));\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [draggableItems, setDragabbleItems] = useState<string[]>(reorderItems(challenge.groups, mode));\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setDragabbleItems(reorderItems(challenge.groups, mode));\r\n    }, [challenge.groups]);\r\n\r\n    const handleChallengeChange = (newChallenge: Challenge) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                ...(newChallenge as ClassifyChallenge)\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleNameChange = (groupIdx: number, updatedName: string) => {\r\n        const updatedGroups = challenge.groups.map((aGroup: ClassifyChallengeGroup, idx: number) => {\r\n            return {\r\n                ...aGroup,\r\n                name: idx !== groupIdx ? aGroup.name : updatedName\r\n            };\r\n        });\r\n\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                groups: updatedGroups\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleItemsChange = (groupIdx: number, updatedItems: string[]) => {\r\n        const updatedGroups = challenge.groups.map((aGroup: ClassifyChallengeGroup, idx: number) => {\r\n            if (idx !== groupIdx) {\r\n                return { ...aGroup };\r\n            }\r\n            return {\r\n                ...aGroup,\r\n                items: [...updatedItems]\r\n            };\r\n        });\r\n\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                groups: updatedGroups\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const correct = challenge.groups.reduce(\r\n            (accGroups: boolean, currentGroup: ClassifyChallengeGroup) => {\r\n                const correctItems = currentGroup.items.reduce(\r\n                    (accItems: boolean, currentItem: string) => {\r\n                        const theGroup = classifyState.find((aGroup: dropState) => aGroup.groupName === currentGroup.name);\r\n                        if (theGroup != null) {\r\n                            return accItems && theGroup.items.indexOf(currentItem) >= 0;\r\n                        }\r\n                        return false;\r\n                    },\r\n                    true\r\n                );\r\n                return accGroups && correctItems;\r\n            },\r\n            true\r\n        );\r\n        showResult(correct);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const isDropped = (itemName: string) => classifyState.reduce(\r\n        (acc: boolean, current: dropState) => acc || current.items.indexOf(itemName) >= 0,\r\n        false\r\n    );\r\n\r\n    const completed = () => {\r\n        const optionCount = challenge.groups.reduce(\r\n            (acc: number, current: ClassifyChallengeGroup) => acc + current.items.length,\r\n            0\r\n        );\r\n        const dropCount = classifyState.reduce(\r\n            (acc: number, current: dropState) => acc + current.items.length,\r\n            0\r\n        );\r\n        return optionCount === dropCount;\r\n    };\r\n\r\n    const handleDrop = (groupName: string, droppedItem: any) => {\r\n        const newDroppedItems: dropState[] = classifyState.map((aGroup: { groupName: string, items: string[] }) => {\r\n            if (aGroup.groupName !== groupName) {\r\n                return {\r\n                    ...aGroup,\r\n                    items: aGroup.items.filter((anItem: string) => anItem !== droppedItem.name)\r\n                };\r\n            }\r\n\r\n            const idxItem = aGroup.items.findIndex((anItem: string) => anItem === droppedItem.name);\r\n            if (idxItem >= 0) {\r\n                return { ...aGroup };\r\n            }\r\n            return {\r\n                ...aGroup,\r\n                items: [\r\n                    ...aGroup.items,\r\n                    droppedItem.name\r\n                ]\r\n            };\r\n        });\r\n        setClassifyState(newDroppedItems);\r\n    };\r\n\r\n    return (\r\n        <BasicChallengeTemplate\r\n            mode={mode}\r\n            challenge={challenge}\r\n            options={options}\r\n            onChallengeChange={handleChallengeChange}\r\n            stopTime={stopTimer}\r\n            onTimeUp={handlerTimeUp}\r\n            showCheck={true}\r\n            disabledCheck={mode === ComponentMode.Design || !completed()}\r\n            onCheckClick={handleCheckClick}\r\n            centralComponent={\r\n                <Grid item xs={12} className={classes.fullHeight}>\r\n                    <DndProvider backend={HTML5Backend}>\r\n                        <Grid container spacing={2} className={classes.fullHeight}>\r\n                            <Grid item xs={12} className={classes.optionsContainer}>\r\n                                <Grid container spacing={2} justify=\"space-around\" alignItems=\"center\">\r\n                                    {\r\n                                        draggableItems.map((anItem: string, idx: number) => !isDropped(anItem) && (\r\n                                            !isDropped(anItem) && (\r\n                                                <Grid item key={`gridItem_${idx}`}>\r\n                                                    <DragableItem\r\n                                                        name={anItem}\r\n                                                        key={`dragable_${idx}`}\r\n                                                        style={{ fontSize: challenge.config.itemsFontSize }}\r\n                                                    />\r\n                                                </Grid>\r\n                                            )\r\n                                        ))\r\n                                    }\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={12} className={classes.groupsContainer}>\r\n                                <Grid container justify=\"space-evenly\" spacing={2} style={{ height: '100%' }}>\r\n                                    {\r\n                                        challenge.groups.map((aGroup: ClassifyChallengeGroup, idx: number) => (\r\n                                            <Grid\r\n                                                item\r\n                                                xs={4}\r\n                                                key={`group_${idx}`}\r\n                                            >\r\n                                                <DropGroup\r\n                                                    mode={mode}\r\n                                                    title={aGroup.name}\r\n                                                    validItems={aGroup.items}\r\n                                                    showResults={highlightResults}\r\n                                                    fontSize={challenge.config.itemsFontSize}\r\n                                                    onTitleChange={(newName: string) => handleNameChange(idx, newName)}\r\n                                                    onItemsChange={(newItems: string[]) => handleItemsChange(idx, newItems)}\r\n                                                    droppedItems={\r\n                                                        classifyState\r\n                                                            .find((auxGroup: dropState) => auxGroup.groupName === aGroup.name)\r\n                                                            ?.items\r\n                                                    }\r\n                                                    onDrop={(droppedItem: unknown) => handleDrop(aGroup.name, droppedItem)}\r\n                                                />\r\n                                            </Grid>\r\n                                        ))\r\n                                    }\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </DndProvider>\r\n                </Grid>\r\n            }\r\n        />\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ChallengeConfig, ClassifyChallengeConfig } from 'types';\r\nimport { ChallengeConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface ClassifyConfiguratorProps {\r\n    config: ClassifyChallengeConfig,\r\n    onConfigChange?: (config: ClassifyChallengeConfig) => void\r\n}\r\n\r\nexport const ClassifyConfigurator: React.FC<ClassifyConfiguratorProps> = (props: ClassifyConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<ClassifyChallengeConfig>(config);\r\n\r\n    const inputItemsFontSize = useRef({} as HTMLInputElement);\r\n    const inputGroupCount = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    const handleBaseConfigChange = (newBaseConfig: ChallengeConfig) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            ...newBaseConfig\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <ChallengeConfigurator\r\n                    config={config}\r\n                    onConfigChange={handleBaseConfigChange}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemsFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemsFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('itemsFontSize', parseInt(inputItemsFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputGroupCount}\r\n                    type='number'\r\n                    label='Número de grupos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.groupCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('groupCount', parseInt(inputGroupCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, Chip, Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { useDrop } from 'react-dnd';\r\nimport { ComponentMode } from 'enums';\r\nimport { DragableItem } from 'components';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        width: '100%',\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    titleContainer: {\r\n        width: '100%',\r\n        padding: '5px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.primary.contrastText\r\n    },\r\n    itemsContainer: {\r\n        padding: '5px',\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\ninterface GroupState {\r\n    title: string,\r\n    validItems: string[],\r\n    droppedItems: string[]\r\n}\r\n\r\ninterface DropGroupProps {\r\n    mode: ComponentMode,\r\n    title: string,\r\n    validItems: string[],\r\n    showResults: boolean,\r\n    fontSize?: number,\r\n    onTitleChange?: (newTitle: string) => void,\r\n    onItemsChange?: (newTitle: string[]) => void,\r\n    droppedItems?: string[],\r\n    onDrop?: (item: unknown) => void\r\n}\r\n\r\nexport const DropGroup: React.FC<DropGroupProps> = (props: DropGroupProps) => {\r\n    const {\r\n        mode,\r\n        title,\r\n        validItems,\r\n        showResults,\r\n        fontSize,\r\n        onTitleChange,\r\n        onItemsChange,\r\n        droppedItems,\r\n        onDrop\r\n    } = props;\r\n\r\n    const handleDrop = (item: unknown) => {\r\n        if(onDrop) {\r\n            onDrop(item);\r\n        }\r\n    };\r\n\r\n    const [{ isOver, canDrop }, drop] = useDrop({\r\n        accept: 'dnd',\r\n        drop: handleDrop,\r\n        collect: (monitor: { isOver: () => boolean, canDrop: () => boolean }) => ({\r\n            isOver: monitor.isOver(),\r\n            canDrop: monitor.canDrop(),\r\n        })\r\n    });\r\n\r\n    const [groupState, setGroupState] = useState<GroupState>({\r\n        title: title || '',\r\n        validItems: validItems || [],\r\n        droppedItems: droppedItems || []\r\n    });\r\n\r\n    const inputTitle = useRef({} as HTMLInputElement);\r\n    const inputItem = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (droppedItems != null) {\r\n            setGroupState({\r\n                ...groupState,\r\n                droppedItems: [...droppedItems]\r\n            });\r\n        }\r\n    }, [droppedItems]);\r\n\r\n\r\n    const handleTitleChange = () => {\r\n        const newState = {\r\n            ...groupState,\r\n            title: inputTitle.current.value\r\n        };\r\n        setGroupState(newState);\r\n        if (onTitleChange) {\r\n            onTitleChange(inputTitle.current.value);\r\n        }\r\n    };\r\n\r\n    const handleValidItemKeyPress = (evt: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (evt.code === 'Enter' && inputItem.current.value !== '') {\r\n            addValidItem();\r\n        }\r\n    };\r\n\r\n    const addValidItem = () => {\r\n        const updatedItems = [...(groupState.validItems), inputItem.current.value];\r\n        const newState: GroupState = {\r\n            ...groupState,\r\n            validItems: updatedItems\r\n        };\r\n        setGroupState(newState);\r\n        if (onItemsChange) {\r\n            onItemsChange(updatedItems);\r\n        }\r\n        inputItem.current.value = '';\r\n    };\r\n\r\n    const handleRemoveValidItem = (itemIdx: number) => {\r\n        const updatedItems = groupState.validItems.filter((anItem: string, idx: number) => itemIdx !== idx);\r\n        const newState: GroupState = {\r\n            ...groupState,\r\n            validItems: updatedItems\r\n        };\r\n        setGroupState(newState);\r\n        if (onItemsChange) {\r\n            onItemsChange(updatedItems);\r\n        }\r\n    };\r\n\r\n    const getDragableItemStyle = (item: string) => showResults ? (\r\n        validItems.indexOf(item) >= 0 ? {\r\n            fontSize: `${fontSize}px`,\r\n            backgroundColor: '#4caf50'\r\n        } : {\r\n            fontSize: `${fontSize}px`,\r\n            backgroundColor: '#f44336'\r\n        }\r\n    ) : {fontSize: `${fontSize}px`};\r\n\r\n    return (\r\n        <Card\r\n            elevation={4}\r\n            className={classes.root}\r\n            style={{\r\n                backgroundColor: (isOver && canDrop) ? '#efefef' : '#ffffff'\r\n            }}\r\n        >\r\n            <Grid container direction=\"column\" className={`${classes.fullHeight} ${classes.fullWidth}`}>\r\n                <Grid item className={classes.titleContainer}>\r\n                    {\r\n                        mode === ComponentMode.Play ? (\r\n                            <Typography style={{ fontSize }}>\r\n                                { title}\r\n                            </Typography>\r\n                        ) : (\r\n                            <TextField\r\n                                inputRef={inputTitle}\r\n                                value={groupState.title}\r\n                                style={{\r\n                                    width: '100%'\r\n                                }}\r\n                                inputProps={\r\n                                    {\r\n                                        style: {\r\n                                            fontSize,\r\n                                            textAlign: 'center',\r\n                                            color: '#ffffff'\r\n\r\n                                        }\r\n                                    }\r\n                                }\r\n                                onInput={handleTitleChange}\r\n                            />\r\n                        )\r\n                    }\r\n                </Grid>\r\n                <Grid item xs>\r\n                    <Grid container direction=\"column\" alignItems=\"center\" className={classes.itemsContainer} spacing={2}>\r\n                        {\r\n                            mode === ComponentMode.Design\r\n                            && groupState.validItems.map((anItem: string, itemIdx: number) => (\r\n                                <Grid item key={`item_${itemIdx}`}>\r\n                                    <Chip\r\n                                        label={anItem}\r\n                                        color=\"secondary\"\r\n                                        size=\"medium\"\r\n                                        style={{ fontSize, color: '#ffffff' }}\r\n                                        onDelete={() => handleRemoveValidItem(itemIdx)}\r\n                                    />\r\n                                </Grid>\r\n                            ))\r\n                        }\r\n                        {\r\n                            mode === ComponentMode.Design && (\r\n                                <Grid item key=\"newItem\">\r\n                                    <TextField\r\n                                        inputRef={inputItem}\r\n                                        variant=\"outlined\"\r\n                                        InputProps={\r\n                                            {\r\n                                                style: {\r\n                                                    fontSize,\r\n                                                    color: '#000000'\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        label=\"Nuevo elemento\"\r\n                                        onKeyPress={handleValidItemKeyPress}\r\n                                    />\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                        {\r\n                            mode === ComponentMode.Play && (\r\n                                <Grid item key=\"dropItem\" xs className={`${classes.fullWidth} ${classes.fullHeight}`}>\r\n                                    <div\r\n                                        ref={drop}\r\n                                        className={`${classes.fullWidth} ${classes.fullHeight}`}\r\n                                    >\r\n                                        <Grid container direction=\"column\" alignItems=\"center\" spacing={1} className={classes.fullHeight}>\r\n                                            {\r\n                                                groupState.droppedItems.map((aDroppedItem: string) => (\r\n                                                    <Grid\r\n                                                        item\r\n                                                        key={`gridItem_${aDroppedItem}`}\r\n                                                    >\r\n                                                        <DragableItem\r\n                                                            key={aDroppedItem}\r\n                                                            name={aDroppedItem}\r\n                                                            style={getDragableItemStyle(aDroppedItem)}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                ))\r\n                                            }\r\n                                        </Grid>\r\n                                    </div>\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ChallengeConfig } from 'types';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface ChallengeConfiguratorProps {\r\n    config: ChallengeConfig,\r\n    onConfigChange?: (config: ChallengeConfig) => void\r\n}\r\n\r\nexport const ChallengeConfigurator: React.FC<ChallengeConfiguratorProps> = (props: ChallengeConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<ChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, makeStyles, TextField } from '@material-ui/core';\r\nimport { isMobile, isTablet } from 'react-device-detect';\r\nimport { ComponentMode } from 'enums';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    inputContainer: {\r\n        width: '90%',\r\n        height: '80%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    input: {\r\n        width: '90%'\r\n    }\r\n});\r\n\r\ninterface ChallengeQuestionProps {\r\n    mode: ComponentMode,\r\n    question: string,\r\n    fontSize?: number,\r\n    onChange?: (newTitle: string) => void\r\n}\r\n\r\nexport const ChallengeQuestion: React.FC<ChallengeQuestionProps> = (props: ChallengeQuestionProps) => {\r\n    const { mode, question, fontSize, onChange } = props;\r\n\r\n    const [questionText, setQuestionText] = useState<string>(question);\r\n    const inputQuestion = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setQuestionText(question);\r\n    },[question]);\r\n\r\n    const handleInputChange = () => {\r\n        setQuestionText(inputQuestion.current.value);\r\n        if (onChange) {\r\n            onChange(inputQuestion.current.value);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Card className={classes.inputContainer}>\r\n                <TextField\r\n                    inputRef={inputQuestion}\r\n                    variant='standard'\r\n                    className={classes.input}\r\n                    inputProps = {{\r\n                        style: {\r\n                            textAlign: 'center',\r\n                            fontSize: `${fontSize != null ? (fontSize / ((isMobile && !isTablet) ? 2 : 1)) : 28}px`,\r\n                            lineHeight: '32px'\r\n                        }\r\n                    }}\r\n                    InputProps={{\r\n                        readOnly: mode === ComponentMode.Play,\r\n                        disableUnderline: mode === ComponentMode.Play\r\n                    }}\r\n                    placeholder='Escribe aquí el enunciado o pregunta'\r\n                    multiline\r\n                    rowsMax={2}\r\n                    value={questionText}\r\n                    onInput={handleInputChange}\r\n                />\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Box, CircularProgress, Grid, Typography } from '@material-ui/core';\r\nimport { ComponentMode } from 'enums';\r\n\r\ninterface CountdownProps {\r\n    mode: ComponentMode,\r\n    time: number,\r\n    stopTimer?: boolean,\r\n    onTimeUp?: () => void\r\n}\r\n\r\n\r\nexport const Countdown: React.FC<CountdownProps> = (props: CountdownProps) => {\r\n    const { mode, time, stopTimer, onTimeUp } = props;\r\n\r\n    const [timeRemaining, setTimeRemaining] = useState<number>(time);\r\n    const [stop, setStop] = useState<boolean>(stopTimer || false);\r\n\r\n\r\n    useEffect(() => {\r\n        setTimeRemaining(time);\r\n    }, [time]);\r\n\r\n    useEffect(() => {\r\n        setStop(stopTimer || false);\r\n    }, [stopTimer]);\r\n\r\n    useEffect(() => {\r\n        let timeoutId: NodeJS.Timeout;\r\n        if (mode === ComponentMode.Play && !stop) {\r\n            timeoutId = setTimeout(() => {\r\n                if (timeRemaining === 0) {\r\n                    if (onTimeUp) {\r\n                        onTimeUp();\r\n                    }\r\n                } else {\r\n                    setTimeRemaining(timeRemaining - 1);\r\n                }\r\n            }, 1000);\r\n        }\r\n        return () => {\r\n            if (timeoutId != null) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n        };\r\n    }, [timeRemaining, onTimeUp]);\r\n\r\n    return (\r\n        <Grid container justify=\"center\" alignItems=\"center\" style={{height: '100%'}}>\r\n            <Grid item>\r\n                <Box position=\"relative\" display=\"inline-flex\">\r\n                    <CircularProgress\r\n                        variant=\"determinate\"\r\n                        color={timeRemaining > 5 ? 'primary': 'secondary'}\r\n                        size=\"75px\"\r\n                        value={Math.round((timeRemaining * 100.0) / (time * 1.0))} />\r\n                    <Box\r\n                        top={0}\r\n                        left={0}\r\n                        bottom={0}\r\n                        right={0}\r\n                        position=\"absolute\"\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                    >\r\n                        <Typography variant=\"h5\" component=\"div\" color=\"textSecondary\">{timeRemaining}</Typography>\r\n                    </Box>\r\n                </Box>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Button, Dialog, DialogActions, DialogContent, Grid, Typography } from '@material-ui/core';\r\n\r\ninterface DialogConfirmProps {\r\n    open: boolean,\r\n    text: string,\r\n    acceptButtonText?: string,\r\n    cancelButtonText?: string,\r\n    width?: 'xs' | 'sm' | 'md' | 'lg' | 'xl',\r\n    onConfirm: () => void,\r\n    onRefuse: () => void\r\n}\r\n\r\nexport const DialogConfirm: React.FC<DialogConfirmProps> = (props: DialogConfirmProps) => {\r\n    const {open, text, acceptButtonText, cancelButtonText, width, onConfirm, onRefuse} = props;\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth={ width ? width : 'sm' }\r\n        >\r\n            <DialogContent>\r\n                <Grid container justify='center'>\r\n                    <Grid item>\r\n                        <Typography variant='button'>{text}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </DialogContent>\r\n            <DialogActions >\r\n                <Button autoFocus onClick={onConfirm} color='primary' variant='contained'>\r\n                    { acceptButtonText ? acceptButtonText : 'Aceptar' }\r\n                </Button>\r\n                <Button onClick={onRefuse} color='primary'>\r\n                    { cancelButtonText ? cancelButtonText : 'Cancelar' }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Box, Button, Dialog, DialogTitle, Grid, makeStyles, TextField } from '@material-ui/core';\r\nimport { ChallengePicture } from 'types';\r\nimport { PictureType } from 'enums';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n}));\r\n\r\ninterface DialogPictureFormProps {\r\n    open: boolean,\r\n    picture: ChallengePicture,\r\n    onAccept: (picture: ChallengePicture) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const DialogPictureForm: React.FC<DialogPictureFormProps> = (props: DialogPictureFormProps) => {\r\n    const {open, picture, onAccept, onCancel} = props;\r\n\r\n    const [formState, setFormState] = useState<ChallengePicture>(picture);\r\n\r\n    const inputUrl = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (picture != null) {\r\n            setFormState(picture);\r\n        }\r\n    }, [picture]);\r\n\r\n    const handleUrlChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            data: inputUrl.current.value\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        const newPicture = {\r\n            type: PictureType.Url,\r\n            data: inputUrl.current.value\r\n        };\r\n\r\n        onAccept(newPicture);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth='sm'\r\n        >\r\n            <DialogTitle>Imagen</DialogTitle>\r\n            <Box className={classes.dialogContainer}>\r\n                <Grid\r\n                    container\r\n                    direction='column'\r\n                    spacing={2}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            inputRef={inputUrl}\r\n                            label='URL de la imagen'\r\n                            fullWidth\r\n                            value={formState.data}\r\n                            onInput={handleUrlChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container justify='flex-end' spacing={1}>\r\n                            <Grid item>\r\n                                <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { CSSProperties } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { useDrag } from 'react-dnd';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    item: {\r\n        borderRadius: '10em',\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.primary.contrastText,\r\n        padding: '0.5rem 1rem',\r\n        cursor: 'move',\r\n    }\r\n}));\r\n\r\ninterface DragableItemProps {\r\n    name: string,\r\n    style?: CSSProperties,\r\n    iconButton?: React.ReactNode\r\n}\r\n\r\nexport const DragableItem: React.FC<DragableItemProps> = (props: DragableItemProps) => {\r\n    const  { name, style, iconButton } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [{ opacity }, drag] = useDrag(\r\n        () => ({\r\n            type: 'dnd',\r\n            item: { name },\r\n            collect: (monitor) => ({\r\n                opacity: monitor.isDragging() ? 0.4 : 1,\r\n            }),\r\n        }),\r\n        [name],\r\n    );\r\n\r\n    return (\r\n        <div\r\n            ref={drag}\r\n            className={classes.item}\r\n            style={{\r\n                opacity,\r\n                ...style\r\n            }}\r\n        >\r\n            {name}\r\n            {\r\n                iconButton\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import React, { Fragment, useRef } from 'react';\r\nimport { Button, makeStyles } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { colors } from 'theme';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    uploadInput: {\r\n        display: 'none'\r\n    }\r\n}));\r\n\r\ninterface HTMLInputEvent extends Event {\r\n    target: HTMLInputElement & EventTarget\r\n}\r\n\r\ninterface JsonLoaderProps {\r\n    label: string,\r\n    onDataLoaded: (data: unknown) => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const JsonLoader: React.FC<JsonLoaderProps> = (props: JsonLoaderProps) => {\r\n    const { label, onDataLoaded, onError } = props;\r\n\r\n    const inputImport = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    const id = uuidv4();\r\n\r\n    const handleInput = (event: unknown) => {\r\n        try {\r\n            const evt = event as HTMLInputEvent;\r\n            if (evt?.target?.files != null) {\r\n                const file = evt.target.files[0];\r\n                const reader = new FileReader();\r\n                reader.readAsText(file);\r\n                reader.onloadend = (e) => {\r\n                    try {\r\n                        const newProject = JSON.parse(reader.result as string);\r\n                        onDataLoaded(newProject);\r\n                    } catch (err) {\r\n                        if (onError) {\r\n                            onError();\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n        } catch (err) {\r\n            if (onError) {\r\n                onError();\r\n            }\r\n        }\r\n        inputImport.current.value = '';\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <input\r\n                ref={inputImport}\r\n                accept='text'\r\n                className={classes.uploadInput}\r\n                id={id}\r\n                multiple\r\n                type='file'\r\n                onInput={handleInput}\r\n            />\r\n            <Button style={{ color: colors.primary.dark }}>\r\n                <label htmlFor={id}>\r\n                    {label}\r\n                </label>\r\n            </Button>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Fab, Grid, GridSize, Icon, makeStyles } from '@material-ui/core';\r\nimport { ChallengePicture } from 'types';\r\nimport { ComponentMode, PictureType } from 'enums';\r\nimport { DialogPictureForm } from 'components';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '99%',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    pic: {\r\n        maxWidth: '100%',\r\n        maxHeight: '100%'\r\n    }\r\n}));\r\n\r\ninterface PictureDialogState {\r\n    selectedPicture: ChallengePicture,\r\n    selectedPictureIdx: number,\r\n    openDialog: boolean\r\n}\r\n\r\ninterface ItemGridSize {\r\n    height: string,\r\n    width: GridSize\r\n}\r\n\r\ninterface PictureGridProps {\r\n    mode: ComponentMode,\r\n    pictures: ChallengePicture[],\r\n    onPicturesChange?: (newPictures: ChallengePicture[]) => void\r\n}\r\n\r\nexport const PictureGrid: React.FC<PictureGridProps> = (props: PictureGridProps) => {\r\n    const { mode, pictures, onPicturesChange } = props;\r\n\r\n    const [pictureDialogState, setPictureDialogState] = useState<PictureDialogState>();\r\n\r\n    const classes = useStyles();\r\n\r\n    const [pictureItemSize, setPictureItemSize] = useState<ItemGridSize>({ height: '100%', width: 8 });\r\n\r\n    useEffect(() => {\r\n        switch (pictures.length) {\r\n            case 9:\r\n            case 8:\r\n            case 7:\r\n                setPictureItemSize({ height: '33.3%', width: 4 });\r\n                break;\r\n            case 6:\r\n            case 5:\r\n                setPictureItemSize({ height: '50%', width: 4 });\r\n                break;\r\n            case 4:\r\n            case 3:\r\n                setPictureItemSize({ height: '50%', width: 6 });\r\n                break;\r\n            case 2:\r\n                setPictureItemSize({ height: '100%', width: 6 });\r\n                break;\r\n            default:\r\n                setPictureItemSize({ height: '100%', width: 12 });\r\n                break;\r\n        }\r\n    }, [pictures]);\r\n\r\n    const handleAddPictureClick = (picture: ChallengePicture, pictureIdx: number) => {\r\n        setPictureDialogState({\r\n            openDialog: true,\r\n            selectedPicture: picture,\r\n            selectedPictureIdx: pictureIdx\r\n        });\r\n    };\r\n\r\n    const handleAcceptPicture = (picture: ChallengePicture, pictureIdx: number) => {\r\n        if (onPicturesChange) {\r\n            onPicturesChange(\r\n                pictures.map((aPicture: ChallengePicture, idx: number) => idx !== pictureIdx ? {...aPicture} : {...picture})\r\n            );\r\n        }\r\n        setPictureDialogState({\r\n            openDialog: false,\r\n            selectedPicture: {\r\n                type: PictureType.None,\r\n                data: ''\r\n            },\r\n            selectedPictureIdx: -1\r\n        });\r\n    };\r\n\r\n    const handleCancelPicture = () => {\r\n        setPictureDialogState({\r\n            openDialog: false,\r\n            selectedPicture: {\r\n                type: PictureType.None,\r\n                data: ''\r\n            },\r\n            selectedPictureIdx: -1\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            {\r\n                pictureDialogState && (\r\n                    <DialogPictureForm\r\n                        open={pictureDialogState.openDialog}\r\n                        picture={pictureDialogState.selectedPicture}\r\n                        onAccept={(newPic: ChallengePicture) => handleAcceptPicture(\r\n                            newPic, pictureDialogState.selectedPictureIdx\r\n                        )}\r\n                        onCancel={handleCancelPicture}\r\n                    />\r\n                )\r\n            }\r\n            <Grid container className={classes.root}>\r\n                {\r\n                    pictures.map((aPicture: ChallengePicture, pictureIdx: number) => (\r\n                        <Grid item\r\n                            key={`pic${pictureIdx.toString()}`}\r\n                            xs={pictureItemSize.width}\r\n                            style={{ height: pictureItemSize.height, border: mode === ComponentMode.Design ? 'solid 1px' : '0px' }}\r\n                        >\r\n                            <Grid container justify=\"center\" alignItems=\"center\" className={classes.fullHeight}>\r\n                                {\r\n                                    aPicture.type !== PictureType.None && (\r\n                                        <img className={classes.pic} src={aPicture.data} alt=\"\"/>\r\n                                    )\r\n                                }\r\n                                {\r\n                                    mode === ComponentMode.Design && (\r\n                                        <Fab\r\n                                            size=\"medium\"\r\n                                            color=\"primary\"\r\n                                            style={{position: 'absolute', color: '#ffffff'}}\r\n                                            onClick={() => { handleAddPictureClick(aPicture, pictureIdx); }}\r\n                                        >\r\n                                            <Icon>add_a_photo</Icon>\r\n                                        </Fab>\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                        </Grid>\r\n                    ))\r\n                }\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n    Card,\r\n    CardActionArea,\r\n    Checkbox,\r\n    Grid,\r\n    Icon,\r\n    InputAdornment,\r\n    makeStyles,\r\n    Radio,\r\n    TextField\r\n} from '@material-ui/core';\r\nimport { isMobile, isTablet } from 'react-device-detect';\r\nimport { ComponentMode } from 'enums';\r\nimport { colors } from 'theme';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    option: {\r\n        width: '100%',\r\n        height: '100%'\r\n    },\r\n    optionActionArea: {\r\n        height: '100%',\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionInput: {\r\n        width: '90%',\r\n        color: '#ffffff'\r\n    },\r\n    optionInnerInput: {\r\n        cursor: 'pointer'\r\n    },\r\n    optionIcon: {\r\n        color: '#ffffff'\r\n    },\r\n    selector: {\r\n        color: '#ffffff',\r\n        '&$checked': {\r\n            color: '#ffffff'\r\n        }\r\n    },\r\n    checked: {}\r\n}));\r\n\r\ninterface OptionState {\r\n    text: string,\r\n    valid: boolean\r\n}\r\n\r\ninterface SelectableOptionProps {\r\n    mode: ComponentMode,\r\n    text: string,\r\n    icon: string,\r\n    valid?: boolean,\r\n    selected?: boolean,\r\n    color?: string,\r\n    fontSize?: number,\r\n    multiselect?: boolean,\r\n    showResults?: boolean,\r\n    onClick?: () => void,\r\n    onTextChange?: (newText: string) => void,\r\n    onValidChange?(newValid: boolean): void\r\n}\r\n\r\nexport const SelectableOption: React.FC<SelectableOptionProps> = (props: SelectableOptionProps) => {\r\n    const {\r\n        mode,\r\n        text,\r\n        icon,\r\n        valid,\r\n        selected,\r\n        color,\r\n        fontSize,\r\n        multiselect,\r\n        showResults,\r\n        onClick,\r\n        onTextChange,\r\n        onValidChange\r\n    } = props;\r\n\r\n    const [optionState, setOptionState] = useState<OptionState>({ text: text || '', valid: valid || false });\r\n    const inputTextOption = useRef({} as HTMLInputElement);\r\n    const radioOption = useRef({} as HTMLInputElement);\r\n    const checkOption = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setOptionState({ text: text || '', valid: valid || false });\r\n    }, [text, valid]);\r\n\r\n    const handleOptionTextChange = () => {\r\n        const newState = {\r\n            ...optionState,\r\n            text: inputTextOption.current.value\r\n        };\r\n        setOptionState(newState);\r\n        if (onTextChange) {\r\n            onTextChange(inputTextOption.current.value);\r\n        }\r\n    };\r\n\r\n    const handleRadioChange = () => {\r\n        const newState = {\r\n            ...optionState,\r\n            selected: radioOption.current.checked\r\n        };\r\n        setOptionState(newState);\r\n        if (onValidChange) {\r\n            onValidChange(radioOption.current.checked);\r\n        }\r\n    };\r\n\r\n    const handleCheckboxChange = () => {\r\n        const newState = {\r\n            ...optionState,\r\n            selected: checkOption.current.checked\r\n        };\r\n        setOptionState(newState);\r\n        if (onValidChange) {\r\n            onValidChange(checkOption.current.checked);\r\n        }\r\n    };\r\n\r\n    const handlerOptionClick = () => {\r\n        if (onClick) {\r\n            onClick();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            className={classes.option}\r\n            style={{\r\n                backgroundColor: color || colors.primary.main,\r\n                borderStyle: 'solid',\r\n                borderWidth: (showResults && valid) || selected ? '3px' : '0px',\r\n                borderColor: showResults ? (\r\n                    valid ? '#00ff00' : '#ff0000'\r\n                ) : '#323232'\r\n            }}>\r\n            {\r\n                mode === ComponentMode.Design ? (\r\n                    <div className={classes.optionActionArea}>\r\n                        <TextField\r\n                            inputRef={inputTextOption}\r\n                            value={optionState.text}\r\n                            placeholder=\"Escribe aquí una respuesta\"\r\n                            className={classes.optionInput}\r\n                            InputProps={{\r\n                                style: {\r\n                                    color: '#ffffff',\r\n                                    fontSize: `${fontSize || 22}px`,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <Icon className={classes.optionIcon}>{icon}</Icon>\r\n                                    </InputAdornment>\r\n                                ),\r\n                                endAdornment: (\r\n                                    multiselect ? (\r\n                                        <Checkbox\r\n                                            inputRef={checkOption}\r\n                                            checked={optionState.valid}\r\n                                            classes={{ root: classes.selector, checked: classes.checked }}\r\n                                            onChange={handleCheckboxChange}\r\n                                        />\r\n                                    ) : (\r\n                                        <Radio\r\n                                            inputRef={radioOption}\r\n                                            checked={optionState.valid}\r\n                                            classes={{ root: classes.selector, checked: classes.checked }}\r\n                                            onChange={handleRadioChange}\r\n                                        />\r\n                                    )\r\n                                ),\r\n                            }}\r\n                            onInput={handleOptionTextChange}\r\n                            onClick={(ev) => { ev.preventDefault(); }}\r\n                        />\r\n                    </div>\r\n                ): (\r\n                    <CardActionArea\r\n                        className={classes.optionActionArea}\r\n                        onClick={handlerOptionClick}\r\n                    >\r\n                        <Grid container className={classes.optionInput} spacing={2} alignItems=\"center\">\r\n                            {\r\n                                (!isMobile || isTablet) && (\r\n                                    <Grid item>\r\n                                        <Icon className={classes.optionIcon}>{icon}</Icon>\r\n                                    </Grid>\r\n                                )\r\n                            }\r\n                            <Grid item>\r\n                                <label style={{color: '#ffffff', fontSize: `${fontSize != null ? (fontSize / (isMobile && !isTablet ? 2 : 1)) : 22}px`, justifySelf: 'left'}}>\r\n                                    {optionState.text}\r\n                                </label>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardActionArea>\r\n                )\r\n            }\r\n        </Card>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { ClassifyChallengeDesigner, FillGapsChallengeDesigner, FillTableChallengeDesigner, MatchChallengeDesigner, SelectAnswerChallengeDesigner, SortChallengeDesigner, TheOddOneChallengeDesigner, TrueOrFalseChallengeDesigner } from 'components';\r\nimport { Challenge, ClassifyChallenge, FillGapsChallenge, FillTableChallenge, MatchChallenge, SelectAnswerChallenge, SortChallenge, TheOddOneChallenge, TrueOrFalseChallenge } from 'types';\r\nimport { ChallengeType } from 'enums';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\ninterface ChallengeDesignerProps {\r\n    challenge: Challenge,\r\n    onChallengeChange: (challenge: Challenge) => void\r\n}\r\n\r\nexport const ChallengeDesigner: React.FC<ChallengeDesignerProps> = (props: ChallengeDesignerProps) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChallengeChange = (updatedChallenge: Challenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight}>\r\n            <Grid item xs={12}>\r\n                {\r\n                    challenge?.type === ChallengeType.SelectAnswer\r\n                    && (\r\n                        <SelectAnswerChallengeDesigner\r\n                            challenge={challenge as SelectAnswerChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.TrueOrFalse\r\n                    && (\r\n                        <TrueOrFalseChallengeDesigner\r\n                            challenge={challenge as TrueOrFalseChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.FillGaps\r\n                    && (\r\n                        <FillGapsChallengeDesigner\r\n                            challenge={challenge as FillGapsChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Match\r\n                    && (\r\n                        <MatchChallengeDesigner\r\n                            challenge={challenge as MatchChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Sort\r\n                    && (\r\n                        <SortChallengeDesigner\r\n                            challenge={challenge as SortChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Classify\r\n                    && (\r\n                        <ClassifyChallengeDesigner\r\n                            challenge={challenge as ClassifyChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.FillTable\r\n                    && (\r\n                        <FillTableChallengeDesigner\r\n                            challenge={challenge as FillTableChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.TheOddOne\r\n                    && (\r\n                        <TheOddOneChallengeDesigner\r\n                            challenge={challenge as TheOddOneChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { Challenge } from 'types';\r\nimport { ChallengeThumbnail } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        overflowY: 'auto'\r\n    },\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface ChallengeSelectorProps {\r\n    challenges: Challenge[],\r\n    compactList?: boolean,\r\n    selected?: Challenge,\r\n    onChallengeReorder?: (orderedChallenges: Challenge[]) => void,\r\n    onSelect?: (challenge: Challenge) => void,\r\n    onDelete?: (challenge: Challenge) => void\r\n}\r\n\r\nexport const ChallengeSelector: React.FC<ChallengeSelectorProps> = (props: ChallengeSelectorProps) => {\r\n    const { challenges, compactList, selected, onChallengeReorder, onSelect, onDelete } = props;\r\n\r\n    const [localChallenges, setLocalChallenges] = useState<Challenge[]>(challenges);\r\n    const [selectedChallenge, setSelectedChallenge] = useState<Challenge | undefined>(selected || undefined);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setLocalChallenges(challenges);\r\n    }, [challenges]);\r\n\r\n    useEffect(() => {\r\n        setSelectedChallenge(selected);\r\n    }, [selected]);\r\n\r\n    const handleThumbnailClick = (challenge: Challenge) => {\r\n        setSelectedChallenge(challenge);\r\n        if (onSelect) {\r\n            onSelect(challenge);\r\n        }\r\n    };\r\n\r\n    const handleThumbnailDelete = (challenge: Challenge) => {\r\n        if (onDelete) {\r\n            onDelete(challenge);\r\n        }\r\n    };\r\n\r\n    const handleChallengeMove = (dragIndex: number, hoverIndex: number) => {\r\n        if (onChallengeReorder) {\r\n            const filteredCards = challenges.filter(\r\n                (aChallenge: Challenge, idx: number) => idx !== dragIndex\r\n            );\r\n            const newChallenges = [\r\n                ...filteredCards.slice(0, hoverIndex),\r\n                challenges[dragIndex],\r\n                ...filteredCards.slice(hoverIndex)\r\n            ];\r\n            setLocalChallenges(newChallenges);\r\n            onChallengeReorder(newChallenges);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' alignItems='center' spacing={2} className={classes.root}>\r\n            {\r\n                localChallenges.map((aChallenge: Challenge, idx: number) => (\r\n                    <ChallengeThumbnail\r\n                        key={aChallenge.id}\r\n                        challenge={aChallenge}\r\n                        index={idx}\r\n                        selected={selectedChallenge?.id === aChallenge.id}\r\n                        compact={compactList}\r\n                        onChallengeMove={handleChallengeMove}\r\n                        onClick={handleThumbnailClick}\r\n                        onDelete={handleThumbnailDelete}\r\n                    />\r\n                ))\r\n            }\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Icon } from '@material-ui/core';\r\nimport { CSSProperties } from '@material-ui/styles';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { ChallengeType, ElementDirection, FillMethod, Language, PictureType } from 'enums';\r\nimport { Challenge, ChallengeConfig, ClassifyChallenge, ClassifyChallengeConfig, FillGapsChallenge, FillGapsChallengeConfig, FillGapsChallengeSentence, FillTableChallenge, FillTableChallengeConfig, MatchChallenge, MatchChallengeConfig, SelectAnswerChallenge, SelectAnswerChallengeConfig, SortChallenge, SortChallengeConfig, TheOddOneChallenge, TheOddOneChallengeConfig, TrueOrFalseChallenge, TrueOrFalseChallengeConfig } from 'types';\r\n\r\nexport const getChallengeTypeDescription = (type: ChallengeType, language: Language = Language.Es): string => {\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer:\r\n            return language === Language.Es ? \"Selecciona la respuesta correcta\" : \"Choose the correct answer\";\r\n        case ChallengeType.TrueOrFalse:\r\n            return language === Language.Es ? \"Verdadero o falso\" : \"True or false\";\r\n        case ChallengeType.Match:\r\n            return language === Language.Es ? \"Une las opciones\" : \"Match the options\";\r\n        case ChallengeType.FillGaps:\r\n            return language === Language.Es ? \"Rellena los huecos\" : \"Fill in the gaps\";\r\n        case ChallengeType.Sort:\r\n            return language === Language.Es ? \"Ordena los elementos\" : \"Order the elements\";\r\n        case ChallengeType.Classify:\r\n            return language === Language.Es ? \"Clasifica los elementos\" : \"Classify the elements\";\r\n        case ChallengeType.FillTable:\r\n            return language === Language.Es ? \"Completa la tabla\" : \"Complete the table\";\r\n        case ChallengeType.TheOddOne:\r\n            return language === Language.Es ? \"Encuentra el que sobra\" : \"Find the odd one\";\r\n        case ChallengeType.Crossword:\r\n            return language === Language.Es ? \"Crucigrama\" : \"Crossword\";\r\n        default:\r\n            return language === Language.Es ? \"Sin definir\" : \"Undefined\";\r\n    }\r\n};\r\n\r\nexport const getChallengeTypeIcon = (type: ChallengeType, size: 'large' | 'default' | 'small' = 'default', style: CSSProperties = {}): JSX.Element => {\r\n    return (\r\n        <Icon fontSize={size} style={style}>\r\n            {\r\n                type === ChallengeType.SelectAnswer ? 'widgets'\r\n                    : type === ChallengeType.TrueOrFalse ? 'check'\r\n                        : type === ChallengeType.FillGaps ? 'space_bar'\r\n                            : type === ChallengeType.Match ? 'shuffle'\r\n                                : type === ChallengeType.Sort ? 'swap_vert'\r\n                                    : type === ChallengeType.Classify ? 'category'\r\n                                        : type === ChallengeType.FillTable ? 'grid_on'\r\n                                            : type === ChallengeType.TheOddOne ? 'touch_app'\r\n                                                : type === ChallengeType.Crossword ? 'font_download' : ''\r\n            }\r\n        </Icon>\r\n    );\r\n};\r\n\r\nconst getDefaultChallengeConfig = (type: ChallengeType): ChallengeConfig => {\r\n    const defaultChallengeConfig: ChallengeConfig = {\r\n        timeLimit: 30,\r\n        questionFontSize: 28\r\n    };\r\n\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                answerFontSize: 22,\r\n                pictureCount: 1,\r\n                pictureLabel: false,\r\n                multiselect: false\r\n            } as SelectAnswerChallengeConfig;\r\n        case ChallengeType.TrueOrFalse:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                pictureCount: 1,\r\n                pictureLabel: false\r\n            } as TrueOrFalseChallengeConfig;\r\n        case ChallengeType.Match:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                answerFontSize: 22,\r\n                pairsCount: 4\r\n            } as MatchChallengeConfig;\r\n        case ChallengeType.FillGaps:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                textFontSize: 18,\r\n                fillMethod: FillMethod.Writing\r\n            } as FillGapsChallengeConfig;\r\n        case ChallengeType.Sort:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                itemsFontSize: 18,\r\n                itemCount: 5,\r\n                elementsDirection: ElementDirection.Horizontal\r\n            } as SortChallengeConfig;\r\n        case ChallengeType.Classify:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                itemsFontSize: 18,\r\n                groupCount: 3\r\n            } as ClassifyChallengeConfig;\r\n        case ChallengeType.FillTable:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                itemsFontSize: 18,\r\n                rowCount: 3,\r\n                columnCount: 3,\r\n                firstRowFixed: false,\r\n                firstColumnFixed: false\r\n            } as FillTableChallengeConfig;\r\n        case ChallengeType.TheOddOne:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                answerFontSize: 15,\r\n                seriesCount: 3,\r\n                seriesLength: 4\r\n            } as TheOddOneChallengeConfig;\r\n        default:\r\n            return defaultChallengeConfig;\r\n    }\r\n};\r\n\r\nexport const getDefaultChallenge = (type: ChallengeType): Challenge => {\r\n    const defaultChallenge: Challenge = {\r\n        id: uuidv4(),\r\n        type,\r\n        question: '',\r\n        config: getDefaultChallengeConfig(type)\r\n    };\r\n\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer:\r\n            return {\r\n                ...defaultChallenge,\r\n                pictures: [{\r\n                    type: PictureType.None,\r\n                    data: ''\r\n                }],\r\n                answers: [\r\n                    { text: '', valid: false },\r\n                    { text: '', valid: false },\r\n                    { text: '', valid: false },\r\n                    { text: '', valid: false }\r\n                ]\r\n            } as SelectAnswerChallenge;\r\n        case ChallengeType.TrueOrFalse:\r\n            return {\r\n                ...defaultChallenge,\r\n                pictures: [{\r\n                    type: PictureType.None,\r\n                    data: ''\r\n                }],\r\n                answer: true\r\n            } as TrueOrFalseChallenge;\r\n        case ChallengeType.Match:\r\n            return {\r\n                ...defaultChallenge,\r\n                pairs: [\r\n                    { source: '', destination: '' },\r\n                    { source: '', destination: '' },\r\n                    { source: '', destination: '' },\r\n                    { source: '', destination: '' }\r\n                ]\r\n            } as MatchChallenge;\r\n        case ChallengeType.FillGaps:\r\n            return {\r\n                ...defaultChallenge,\r\n                sentences: [] as FillGapsChallengeSentence[]\r\n            } as FillGapsChallenge;\r\n        case ChallengeType.Sort:\r\n            return {\r\n                ...defaultChallenge,\r\n                items: ['', '', '', '', '']\r\n            } as SortChallenge;\r\n        case ChallengeType.Classify:\r\n            return {\r\n                ...defaultChallenge,\r\n                groups: [\r\n                    { name: '', items: ([] as string[]) },\r\n                    { name: '', items: ([] as string[]) },\r\n                    { name: '', items: ([] as string[]) }\r\n                ]\r\n            } as ClassifyChallenge;\r\n        case ChallengeType.FillTable:\r\n            return {\r\n                ...defaultChallenge,\r\n                items: [\r\n                    [{ text: '', hidden: false },{ text: '', hidden: false },{ text: '', hidden: false }],\r\n                    [{ text: '', hidden: false },{ text: '', hidden: false },{ text: '', hidden: false }],\r\n                    [{ text: '', hidden: false },{ text: '', hidden: false },{ text: '', hidden: false }]\r\n                ]\r\n            } as FillTableChallenge;\r\n        case ChallengeType.TheOddOne:\r\n            return {\r\n                ...defaultChallenge,\r\n                series: [\r\n                    { elements: ['', '', '', ''], theOddOneIndex: -1 },\r\n                    { elements: ['', '', '', ''], theOddOneIndex: -1 },\r\n                    { elements: ['', '', '', ''], theOddOneIndex: -1 }\r\n                ]\r\n            } as TheOddOneChallenge;\r\n        default:\r\n            return defaultChallenge;\r\n    }\r\n};\r\n","export const splitSentence = (text: string): string[] => {\r\n    return text\r\n        .replace(/\\./g, ' .')\r\n        .replace(/,/g, ' ,')\r\n        .replace(/;/g, ' ;')\r\n        .replace(/:/g, ' :')\r\n        .split( ' ');\r\n};\r\n\r\nexport const joinSentence = (textParts: string[]): string => {\r\n    return textParts\r\n        .join(' ')\r\n        .replace(/ \\./g, '.')\r\n        .replace(/ ,/g, ',')\r\n        .replace(/ ;/g, ';')\r\n        .replace(/ :/g, ':');\r\n};\r\n\r\nexport const createQueryString = (params: Record<string, unknown>): string => (\r\n    Object.keys(params).reduce(\r\n        (acc: string, current: string, idx: number) => (\r\n            `${acc}${idx > 0 ? '&' : ''}${current}=${params[current]}`\r\n        ),\r\n        '?'\r\n    )\r\n);\r\n\r\nexport const parseQueryString = (qs: string): any => {\r\n    const qsAux = qs[0] === '?' ? qs.slice(1) : qs;\r\n    const result: any = {};\r\n    qsAux.split(/&/g).forEach((aParam: string) => {\r\n        const paramParts = aParam.split('=');\r\n        result[paramParts[0]] = (\r\n            paramParts[1] === 'true' || paramParts[1] === 'false' ? paramParts[1] === 'true' : paramParts[1]\r\n        );\r\n    });\r\n    return result;\r\n};\r\n\r\nexport const checkEqual = (\r\n    stringA: string,\r\n    stringB: string,\r\n    checkCapitalLetters: boolean,\r\n    checkAccentMarks: boolean\r\n): boolean => {\r\n    let strA = stringA;\r\n    let strB = stringB;\r\n\r\n    if (!checkCapitalLetters) {\r\n        strA = strA.toLowerCase();\r\n        strB = strB.toLowerCase();\r\n    }\r\n\r\n    if (!checkAccentMarks) {\r\n        strA = strA\r\n            .replace(/Á/g, 'A')\r\n            .replace(/É/g, 'E')\r\n            .replace(/Í/g, 'I')\r\n            .replace(/Ó/g, 'O')\r\n            .replace(/Ú/g, 'U')\r\n            .replace(/á/g, 'a')\r\n            .replace(/é/g, 'e')\r\n            .replace(/í/g, 'i')\r\n            .replace(/ó/g, 'o')\r\n            .replace(/ú/g, 'u');\r\n        strB = strB\r\n            .replace(/Á/g, 'A')\r\n            .replace(/É/g, 'E')\r\n            .replace(/Í/g, 'I')\r\n            .replace(/Ó/g, 'O')\r\n            .replace(/Ú/g, 'U')\r\n            .replace(/á/g, 'a')\r\n            .replace(/é/g, 'e')\r\n            .replace(/í/g, 'i')\r\n            .replace(/ó/g, 'o')\r\n            .replace(/ú/g, 'u');\r\n    }\r\n\r\n    return strA === strB;\r\n};\r\n","import { ChallengeType, PictureType } from \"enums\";\r\nimport { Challenge, ChallengeConfig, ChallengePicture, ClassifyChallenge, ClassifyChallengeGroup, FillGapsChallenge, FillGapsChallengeSentence, FillTableChallenge, FillTableChallengeCell, MatchChallenge, MatchChallengePair, Project, SelectAnswerChallenge, SelectAnswerChallengeAnswer, SelectAnswerChallengeConfig, SortChallenge, Test, TheOddOneChallenge, TheOddOneChallengeSerie } from \"types\";\r\n\r\nexport interface Validation {\r\n    valid: boolean,\r\n    errorMessage: string[]\r\n}\r\n\r\nexport const isValidConfig = (type: ChallengeType, config: ChallengeConfig): Validation => {\r\n    const errorMessage: string[] = [];\r\n\r\n    if (config?.timeLimit == null || config?.timeLimit <= 0) { errorMessage.push('El tiempo límite debe ser mayor de 0') ;}\r\n    if (config?.questionFontSize == null || config?.questionFontSize <= 0) { errorMessage.push('El tamaño de fuente del titulo debe ser mayor de 0'); }\r\n\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer: {\r\n            const customConfig = config as SelectAnswerChallengeConfig;\r\n            if (customConfig?.pictureCount == null || customConfig?.pictureCount <= 0) { errorMessage.push('El número de imágenes debe ser mayor de 0'); }\r\n            if (customConfig?.pictureLabel == null) { errorMessage.push('Error en indicador de etiquetado de imágenes'); }\r\n            if (customConfig?.multiselect == null) { errorMessage.push('Error en indicador de seleccion múltiple'); }\r\n            break;\r\n        }\r\n        case ChallengeType.TrueOrFalse:\r\n            break;\r\n        case ChallengeType.FillGaps:\r\n            break;\r\n        case ChallengeType.Match:\r\n            break;\r\n        case ChallengeType.Sort:\r\n            break;\r\n        case ChallengeType.Classify:\r\n            break;\r\n        case ChallengeType.FillTable:\r\n            break;\r\n        case ChallengeType.Crossword:\r\n            break;\r\n    }\r\n    return {\r\n        valid: errorMessage.length === 0,\r\n        errorMessage\r\n    };\r\n};\r\n\r\nexport const isValidChallenge = (challenge: Challenge): Validation => {\r\n    let errorMessage: string[] = [];\r\n\r\n    if (challenge?.id == null || challenge?.type == null) { errorMessage.push('Datos internos incorrectos'); }\r\n    const configValidation = isValidConfig(challenge?.type, challenge?.config);\r\n    if (!configValidation.valid) { errorMessage = [...errorMessage, ...configValidation.errorMessage]; }\r\n    if (challenge?.question == null || challenge?.question === '') { errorMessage.push('Se debe rellenar el enunciado / pregunta'); }\r\n\r\n    switch (challenge.type) {\r\n        case ChallengeType.SelectAnswer: {\r\n            const customChallenge = challenge as SelectAnswerChallenge;\r\n            if (customChallenge.config.pictureCount > 1\r\n                && customChallenge.pictures.some((aPicture: ChallengePicture) => aPicture.type === PictureType.None)\r\n            ) {\r\n                errorMessage.push('Hay imágenes vacías');\r\n            }\r\n            if(!customChallenge.answers.reduce(\r\n                (acc: boolean, current: SelectAnswerChallengeAnswer) => acc && current.text != null && current.text !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay alguna respuesta vacía');\r\n            }\r\n            if(!customChallenge.answers.some((anAnswer: SelectAnswerChallengeAnswer) => anAnswer.valid)) {\r\n                errorMessage.push('Debe marcarse al menos una respuesta como válida');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.TrueOrFalse:\r\n            break;\r\n        case ChallengeType.FillGaps:{\r\n            const customChallenge = challenge as FillGapsChallenge;\r\n            if(!customChallenge.sentences.reduce(\r\n                (acc: boolean, current: FillGapsChallengeSentence) => acc && current != null && current.text !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay elementos sin texto');\r\n            }\r\n            if (customChallenge.sentences.length === 0) {\r\n                errorMessage.push('Debe haber al menos una frase');\r\n            }\r\n            if(!customChallenge.sentences.reduce(\r\n                (acc: boolean, current: FillGapsChallengeSentence) => (\r\n                    acc\r\n                    && current != null\r\n                    && current.hiddenExpressions.length > 0\r\n                ),\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay frases sin palabras ocultas');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.Match: {\r\n            const customChallenge = challenge as MatchChallenge;\r\n            if(!customChallenge.pairs.reduce(\r\n                (acc: boolean, current: MatchChallengePair) => (\r\n                    acc\r\n                    && current.source != null && current.source !== ''\r\n                    && current.destination != null && current.destination !== ''\r\n                ),\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay elementos sin texto');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.Sort: {\r\n            const customChallenge = challenge as SortChallenge;\r\n            if(!customChallenge.items.reduce(\r\n                (acc: boolean, current: string) => acc && current != null && current !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay elementos sin texto');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.Classify: {\r\n            const customChallenge = challenge as ClassifyChallenge;\r\n            if(!customChallenge.groups.reduce(\r\n                (acc: boolean, current: ClassifyChallengeGroup) => acc && current.name != null && current.name !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Todos los grupos deben tener un título');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.FillTable: {\r\n            const customChallenge = challenge as FillTableChallenge;\r\n            if(!customChallenge.items.reduce(\r\n                (accRow: boolean, currentRow: FillTableChallengeCell[], rowIdx: number) => (\r\n                    accRow\r\n                    && currentRow.reduce(\r\n                        (accColumn: boolean, currentColumn: FillTableChallengeCell, columnIdx: number) => (\r\n                            accColumn\r\n                            && (\r\n                                (\r\n                                    customChallenge.config.firstRowFixed\r\n                                    && rowIdx === 0\r\n                                    && customChallenge.config.firstColumnFixed\r\n                                    && columnIdx === 0\r\n                                )\r\n                                || currentColumn.text !== ''\r\n                            )\r\n                        ),\r\n                        true\r\n                    )\r\n                ),\r\n                true\r\n            )) {\r\n                errorMessage.push('Todas las celdas deben estar rellenas');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.TheOddOne: {\r\n            const customChallenge = challenge as TheOddOneChallenge;\r\n            if(!customChallenge.series.reduce(\r\n                (accSerie: boolean, currentSerie: TheOddOneChallengeSerie) => accSerie && currentSerie.elements.reduce(\r\n                    (accElement: boolean, currentElement) => accElement && currentElement != null && currentElement !== '',\r\n                    true\r\n                ),\r\n                true\r\n            )) {\r\n                errorMessage.push('Todos los elementos deben estar rellenos');\r\n            }\r\n            if(customChallenge.series.some(\r\n                (aSerie: TheOddOneChallengeSerie) => aSerie.theOddOneIndex === -1\r\n            )) {\r\n                errorMessage.push('Todas las series deben tener un elemento que sobra marcado');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.Crossword:\r\n            break;\r\n    }\r\n    return {\r\n        valid: errorMessage.length === 0,\r\n        errorMessage\r\n    };\r\n};\r\n\r\nexport const isValidTest = (test: Test): boolean => {\r\n    return test != null\r\n        && test.id != null\r\n        && test.name != null\r\n        && test.challenges != null\r\n        && test.challenges.reduce(\r\n            (acc: boolean, current: Challenge) => acc && isValidChallenge(current).valid,\r\n            true\r\n        );\r\n};\r\n\r\nexport const isValidProject = (project: Project): boolean => {\r\n    return project != null\r\n        && project.id != null\r\n        && project.name != null\r\n        && project.tests != null\r\n        && project.tests.reduce(\r\n            (acc: boolean, current: Test) => acc && isValidTest(current),\r\n            true\r\n        );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, CardActionArea, CardActions, CardContent, CardHeader, Chip, Grid, Icon, IconButton, makeStyles, Tooltip, Typography } from '@material-ui/core';\r\nimport { DropTargetMonitor, useDrag, useDrop, XYCoord } from 'react-dnd';\r\nimport { getEmptyImage } from 'react-dnd-html5-backend';\r\nimport { Challenge } from 'types';\r\nimport { getChallengeTypeDescription, getChallengeTypeIcon, isValidChallenge, Validation } from 'utils';\r\nimport { colors } from 'theme';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    },\r\n    fullHeight: {\r\n        height: '100%',\r\n    },\r\n    headerContainer: {\r\n        overflow: \"hidden\"\r\n    },\r\n    contentContainer: {\r\n        overflow: \"hidden\"\r\n    },\r\n    actionContainer: {\r\n        marginTop: '8px'\r\n    },\r\n    descriptionContainer: {\r\n        width: '100%',\r\n    },\r\n    description: {\r\n        whiteSpace: 'nowrap',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis'\r\n    },\r\n    tooltipRow: {\r\n        fontSize: '12px'\r\n    },\r\n    statusContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    }\r\n});\r\n\r\ninterface DragItem {\r\n    index: number,\r\n    challenge: Challenge,\r\n    type: string\r\n}\r\n\r\ninterface ChallengeThumbnailProps {\r\n    challenge: Challenge,\r\n    index: number,\r\n    selected?: boolean,\r\n    compact?: boolean,\r\n    onChallengeMove: (dragIndex: number, hoverIndex: number) => void,\r\n    onClick?: (selectedChallenge: Challenge) => void,\r\n    onDelete?: (deletedChallenge: Challenge) => void\r\n}\r\n\r\nexport const ChallengeThumbnail: React.FC<ChallengeThumbnailProps> = (props: ChallengeThumbnailProps) => {\r\n    const { challenge, index, selected, compact, onChallengeMove, onClick, onDelete } = props;\r\n\r\n    const ref = useRef(null);\r\n\r\n    const [validation, setValidation] = useState<Validation>({ valid: true, errorMessage: [] });\r\n\r\n    const classes = useStyles();\r\n\r\n    const [, drop] = useDrop({\r\n        accept: 'challengeThumbnail',\r\n        hover(item: DragItem, monitor: DropTargetMonitor) {\r\n            if (!ref.current) {\r\n                return;\r\n            }\r\n            const dragIndex = item.index;\r\n            const hoverIndex = index;\r\n\r\n            if (dragIndex === hoverIndex) {\r\n                return;\r\n            }\r\n\r\n            const hoverBoundingRect = (ref.current as any).getBoundingClientRect();\r\n            const hoverMiddleY =\r\n                (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n            const clientOffset = monitor.getClientOffset();\r\n            const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\r\n\r\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n                return;\r\n            }\r\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n                return;\r\n            }\r\n            onChallengeMove(dragIndex, hoverIndex);\r\n            item.index = hoverIndex;\r\n        },\r\n    });\r\n\r\n    const [{ isDragging }, drag, preview] = useDrag({\r\n        type: 'challengeThumbnail',\r\n        item: { type: 'challengeThumbnail', challenge, index },\r\n        collect: (monitor: any) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n    });\r\n\r\n    useEffect(() => {\r\n        preview(getEmptyImage(), { captureDraggingState: true });\r\n    }, []);\r\n\r\n    const style = isDragging ? ({\r\n        opacity: 5,\r\n        backgroundColor: colors.primary.light\r\n    }) : ({\r\n        opacity: 1\r\n    });\r\n    drag(drop(ref));\r\n\r\n\r\n    const handleClick = () => {\r\n        if (onClick) {\r\n            onClick(challenge);\r\n        }\r\n    };\r\n\r\n    const handleDeleteClick = () => {\r\n        if (onDelete) {\r\n            onDelete(challenge);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setValidation(isValidChallenge(challenge));\r\n    }, [challenge]);\r\n\r\n    return (\r\n        <Grid item className={classes.fullWidth}>\r\n            <Card\r\n                ref={ref}\r\n                style={{ ...style }}\r\n                variant={selected ? 'elevation' : 'outlined'}\r\n                elevation={10}\r\n                className={classes.fullWidth}\r\n            >\r\n                <CardActionArea className={classes.fullWidth} onMouseDown={handleClick}>\r\n                    <CardHeader\r\n                        classes={{\r\n                            root: classes.headerContainer,\r\n                            content: classes.contentContainer,\r\n                        }}\r\n                        avatar={\r\n                            compact ? getChallengeTypeIcon(challenge.type, 'small') : undefined\r\n                        }\r\n                        subheader={\r\n                            <Typography variant='subtitle2' color={selected ? 'secondary' : 'textPrimary'} className={classes.description}>\r\n                                {compact ? challenge.question : `#${index + 1} ${getChallengeTypeDescription(challenge.type)}`}\r\n                            </Typography>\r\n                        }\r\n                        action={\r\n                            compact ? (\r\n                                <Grid container alignItems=\"center\" className={classes.actionContainer}>\r\n                                    {\r\n                                        validation.valid ? <Icon color=\"primary\" fontSize=\"small\">check</Icon>\r\n                                            : (\r\n                                                <Tooltip arrow title={\r\n                                                    <>\r\n                                                        {\r\n                                                            validation.errorMessage.map((\r\n                                                                aMessage: string,\r\n                                                                messageIdx: number\r\n                                                            ) => (\r\n                                                                <li\r\n                                                                    key={`li_${messageIdx}`}\r\n                                                                    className={classes.tooltipRow}\r\n                                                                >\r\n                                                                    {aMessage}\r\n                                                                </li>\r\n                                                            ))\r\n                                                        }\r\n                                                    </>\r\n                                                }>\r\n                                                    <Icon color=\"secondary\" fontSize=\"small\">priority_high</Icon>\r\n                                                </Tooltip>\r\n                                            )\r\n                                    }\r\n                                </Grid>\r\n                            ) : undefined\r\n                        }\r\n                    />\r\n                    {\r\n                        !compact && (\r\n                            <CardContent>\r\n                                <Typography noWrap>{challenge.question}</Typography>\r\n                            </CardContent>\r\n                        )\r\n                    }\r\n                </CardActionArea>\r\n                {\r\n                    !compact && (\r\n                        <CardActions className={classes.statusContainer}>\r\n                            {\r\n                                validation.valid ? <Chip label=\"completo\" color=\"primary\" size=\"small\" icon={<Icon fontSize=\"small\">check</Icon>} />\r\n                                    : (\r\n                                        <Tooltip arrow title={\r\n                                            <>\r\n                                                {\r\n                                                    validation.errorMessage.map((aMessage: string, messageIdx) => (\r\n                                                        <li\r\n                                                            key={`li_${messageIdx}`}\r\n                                                            className={classes.tooltipRow}>\r\n                                                            {aMessage}\r\n                                                        </li>\r\n                                                    ))\r\n                                                }\r\n                                            </>\r\n                                        }>\r\n                                            <Chip label=\"error\" color=\"secondary\" size=\"small\" style={{ color: '#ffffff' }} icon={<Icon fontSize=\"small\">priority_high</Icon>} />\r\n                                        </Tooltip>\r\n                                    )\r\n                            }\r\n                            <IconButton onClick={handleDeleteClick}>\r\n                                <Icon>delete</Icon>\r\n                            </IconButton>\r\n                        </CardActions>\r\n                    )\r\n                }\r\n            </Card>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { Fragment, useCallback, useEffect, useState } from 'react';\r\nimport { Grid, Icon, IconButton, ListItemIcon, makeStyles, Menu, MenuItem, Typography } from '@material-ui/core';\r\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useProjects } from 'hooks/useProjects';\r\nimport { Challenge, Project, Test } from 'types';\r\nimport { ChallengeType, Language } from 'enums';\r\nimport { ChallengeDesigner, ChallengeSelector, DialogConfirm } from 'components';\r\nimport { getChallengeTypeDescription, getChallengeTypeIcon, getDefaultChallenge } from 'utils';\r\nimport { colors } from 'theme';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },\r\n    listContainer: {\r\n        paddingRight: '10px',\r\n        height: '100%',\r\n        width: '100%',\r\n        overflow: 'hidden'\r\n    },\r\n    challengesContainer: {\r\n        height: 'calc(100% - 50px)',\r\n        width: '100%',\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        listStyle: 'none',\r\n        '&::-webkit-scrollbar': {\r\n            width: '0.2em'\r\n        },\r\n        '&::-webkit-scrollbar-track': {\r\n            boxShadow: 'inset 0 0 6px rgba(255,0,0,0.00)',\r\n            webkitBoxShadow: 'inset 0 0 6px rgba(255,0,0,0.00)'\r\n        },\r\n        '&::-webkit-scrollbar-thumb': {\r\n            backgroundColor: colors.primary.light,\r\n            outline: '1px solid slategrey'\r\n        }\r\n    },\r\n    challengeSelector: {\r\n        flexGrow: 1\r\n    }\r\n}));\r\n\r\nconst addMenuItems = [\r\n    { type: ChallengeType.SelectAnswer, disabled: false },\r\n    { type: ChallengeType.TrueOrFalse, disabled: false },\r\n    { type: ChallengeType.FillGaps, disabled: false },\r\n    { type: ChallengeType.Match, disabled: false },\r\n    { type: ChallengeType.Sort, disabled: true },\r\n    { type: ChallengeType.Classify, disabled: false },\r\n    { type: ChallengeType.FillTable, disabled: false },\r\n    { type: ChallengeType.TheOddOne, disabled: false },\r\n    { type: ChallengeType.Crossword, disabled: true }\r\n];\r\n\r\ninterface TestDesignerProps {\r\n    projectId: string,\r\n    testId: string\r\n}\r\n\r\nexport const TestDesigner: React.FC<TestDesignerProps> = (props: TestDesignerProps) => {\r\n    const { projectId, testId } = props;\r\n\r\n    const { projects, setProjects } = useProjects();\r\n\r\n    const [test, setTest] = useState<Test>({\r\n        id: uuidv4(),\r\n        name: 'Nuevo cuestionario',\r\n        description: '',\r\n        language: Language.Es,\r\n        challenges: []\r\n    });\r\n\r\n    const [compactList, setCompactList] = useState<boolean>(false);\r\n    const [selectedChallenge, setSelectedChallenge] = useState<Challenge>();\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n    const [deletedChallenge, setDeletedChallenge] = useState<Challenge>();\r\n    const [openRemoveChallengeConfirm, setOpenRemoveChallengeConfirm] = useState<boolean>(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        const project = projects.find((aProject: Project) => aProject.id === projectId);\r\n        if (project != null) {\r\n            const test = project.tests.find((aTest: Test) => aTest.id === testId);\r\n            if (test != null) {\r\n                setTest(test);\r\n                if (test.challenges.length > 0) {\r\n                    if (selectedChallenge == null) {\r\n                        setSelectedChallenge(test.challenges[0]);\r\n                    } else {\r\n                        setSelectedChallenge({ ...selectedChallenge });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, [projects, projectId, testId]);\r\n\r\n    const handleReorderChallenges = useCallback(\r\n        (reorderedChallenges: Challenge[]) => {\r\n            const updatedProjects = projects.map((aProject: Project) => {\r\n                if (aProject.id !== projectId) {\r\n                    return { ...aProject };\r\n                }\r\n                const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                    if (aTest.id !== testId) {\r\n                        return { ...aTest };\r\n                    }\r\n                    return {\r\n                        ...aTest,\r\n                        challenges: reorderedChallenges\r\n                    };\r\n                });\r\n                return {\r\n                    ...aProject,\r\n                    tests: [...updatedTests]\r\n                };\r\n            });\r\n            setProjects(updatedProjects);\r\n        },\r\n        [projects]\r\n    );\r\n\r\n    const handleSelectChallenge = (challenge: Challenge) => {\r\n        setSelectedChallenge(challenge);\r\n    };\r\n\r\n    const handleDeleteChallenge = (challenge: Challenge) => {\r\n        setDeletedChallenge(challenge);\r\n        setOpenRemoveChallengeConfirm(true);\r\n    };\r\n\r\n    const handleClickNewChallengeMenu = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleNewChallengeOptionClick = (type: ChallengeType) => {\r\n        const newChallenge: Challenge = getDefaultChallenge(type);\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return { ...aProject };\r\n            }\r\n            const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                if (aTest.id !== testId) {\r\n                    return { ...aTest };\r\n                }\r\n                const selectedPosition = selectedChallenge != null ? (\r\n                    test.challenges.findIndex(\r\n                        (aChallenge: Challenge) => aChallenge.id === selectedChallenge?.id\r\n                    )\r\n                ) : 0;\r\n                return {\r\n                    ...aTest,\r\n                    challenges: [\r\n                        ...aTest.challenges.slice(0, selectedPosition + 1),\r\n                        newChallenge,\r\n                        ...aTest.challenges.slice(selectedPosition + 1)\r\n                    ]\r\n                };\r\n            });\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        setSelectedChallenge(newChallenge);\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleCloseNewChallengeMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleChallengeChange = (updatedChallenge: Challenge) => {\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return aProject;\r\n            }\r\n            const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                if (aTest.id !== testId) {\r\n                    return { ...aTest };\r\n                }\r\n                const updatedChallenges = aTest.challenges.map((aChallenge: Challenge) => {\r\n                    if (aChallenge.id !== updatedChallenge.id) {\r\n                        return { ...aChallenge };\r\n                    }\r\n                    return { ...updatedChallenge };\r\n                });\r\n                return {\r\n                    ...aTest,\r\n                    challenges: [...updatedChallenges]\r\n                };\r\n            });\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        setSelectedChallenge({ ...updatedChallenge });\r\n    };\r\n\r\n    const handleConfirmRemoveChallenge = () => {\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return aProject;\r\n            }\r\n            const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                if (aTest.id !== testId) {\r\n                    return aTest;\r\n                }\r\n                if (deletedChallenge?.id === selectedChallenge?.id) {\r\n                    setSelectedChallenge(aTest.challenges.find(\r\n                        (aChallenge: Challenge) => aChallenge.id !== deletedChallenge?.id\r\n                    ));\r\n                }\r\n                const updatedChallenges = aTest.challenges.filter((\r\n                    aChallenge: Challenge\r\n                ) => aChallenge.id !== deletedChallenge?.id);\r\n                return {\r\n                    ...aTest,\r\n                    challenges: [...updatedChallenges]\r\n                };\r\n            });\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        setOpenRemoveChallengeConfirm(false);\r\n    };\r\n\r\n    const handleRefuseRemoveChallenge = () => {\r\n        setOpenRemoveChallengeConfirm(false);\r\n    };\r\n\r\n    const handleListModeChange = (event: React.MouseEvent<HTMLElement>, newListMode: boolean) => {\r\n        setCompactList(newListMode);\r\n    };\r\n\r\n    const renderAddMenuItem = (challengeType: ChallengeType, disabled: boolean): React.ReactNode => {\r\n        return (\r\n            <MenuItem key={`item_${challengeType}`} disabled={disabled} onClick={() => {\r\n                handleNewChallengeOptionClick(challengeType);\r\n            }}>\r\n                <ListItemIcon>{getChallengeTypeIcon(challengeType, 'large')}</ListItemIcon>\r\n                <Typography variant='button'>\r\n                    {getChallengeTypeDescription(challengeType)}\r\n                </Typography>\r\n            </MenuItem>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <DialogConfirm\r\n                open={openRemoveChallengeConfirm}\r\n                text='¿Seguro que deseas eliminar la pregunta?'\r\n                width='xs'\r\n                onConfirm={handleConfirmRemoveChallenge}\r\n                onRefuse={handleRefuseRemoveChallenge}\r\n            />\r\n            <Grid container className={classes.fullHeight}>\r\n                <Grid item xs={2} className={classes.listContainer}>\r\n                    <Grid container direction='column' className={classes.fullHeight}>\r\n                        <Grid item className={classes.fullWidth}>\r\n                            <Grid container justify='space-between' alignItems='center'>\r\n                                <Grid item>\r\n                                    <Typography variant='h5'>Preguntas</Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Grid container justify='flex-end' alignItems='center'>\r\n                                        <Grid item>\r\n                                            <ToggleButtonGroup size=\"small\" value={compactList} exclusive onChange={handleListModeChange}>\r\n                                                <ToggleButton value={false}>\r\n                                                    <Icon>crop_din</Icon>\r\n                                                </ToggleButton>\r\n                                                <ToggleButton value={true}>\r\n                                                    <Icon>reorder</Icon>\r\n                                                </ToggleButton>\r\n                                            </ToggleButtonGroup>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <IconButton onClick={handleClickNewChallengeMenu}>\r\n                                                <Icon color='primary'>add_circle</Icon>\r\n                                            </IconButton>\r\n                                            <Menu\r\n                                                id='new-challenge-menu'\r\n                                                anchorEl={anchorEl}\r\n                                                keepMounted\r\n                                                open={Boolean(anchorEl)}\r\n                                                onClose={handleCloseNewChallengeMenu}\r\n                                            >\r\n                                                {\r\n                                                    addMenuItems.map((anItem) => (\r\n                                                        renderAddMenuItem(anItem.type, anItem.disabled)\r\n                                                    ))\r\n                                                }\r\n                                            </Menu>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item className={classes.challengesContainer}>\r\n                            <DndProvider backend={HTML5Backend}>\r\n                                <ChallengeSelector\r\n                                    challenges={test.challenges}\r\n                                    compactList={compactList}\r\n                                    selected={selectedChallenge}\r\n                                    onChallengeReorder={handleReorderChallenges}\r\n                                    onSelect={handleSelectChallenge}\r\n                                    onDelete={handleDeleteChallenge}\r\n                                />\r\n                            </DndProvider>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={10}>\r\n                    {\r\n                        selectedChallenge && (\r\n                            <ChallengeDesigner\r\n                                challenge={selectedChallenge}\r\n                                onChallengeChange={handleChallengeChange}\r\n                            />\r\n                        )\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { Challenge, ChallengeOptions, ClassifyChallenge, FillGapsChallenge, FillTableChallenge, MatchChallenge, SelectAnswerChallenge, TheOddOneChallenge, TrueOrFalseChallenge } from 'types';\r\nimport { ChallengeType, ComponentMode } from 'enums';\r\nimport { ClassifyChallenger, FillGapsChallenger, FillTableChallenger, MatchChallenger, SelectAnswerChallenger, TheOddOneChallenger, TrueOrFalseChallenger } from 'components';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\ninterface ChallengeEvaluatorProps {\r\n    challenge: Challenge,\r\n    options: ChallengeOptions,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const ChallengeEvaluator: React.FC<ChallengeEvaluatorProps> = (props: ChallengeEvaluatorProps) => {\r\n    const { challenge, options, onSuccess, onError } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handlerSucessChallenge = () => {\r\n        if (onSuccess) {\r\n            onSuccess();\r\n        }\r\n    };\r\n\r\n    const handlerErrorChallenge = () => {\r\n        if (onError) {\r\n            onError();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight}>\r\n            <Grid item xs={12}>\r\n                {\r\n                    challenge?.type === ChallengeType.SelectAnswer\r\n                    && (\r\n                        <SelectAnswerChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as SelectAnswerChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.TrueOrFalse\r\n                    && (\r\n                        <TrueOrFalseChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as TrueOrFalseChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.FillGaps\r\n                    && (\r\n                        <FillGapsChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as FillGapsChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Match\r\n                    && (\r\n                        <MatchChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as MatchChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Classify\r\n                    && (\r\n                        <ClassifyChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as ClassifyChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.FillTable\r\n                    && (\r\n                        <FillTableChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as FillTableChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.TheOddOne\r\n                    && (\r\n                        <TheOddOneChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as TheOddOneChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { Grid, LinearProgress, makeStyles, Typography } from '@material-ui/core';\r\nimport { ChallengeType, Language } from 'enums';\r\nimport { getChallengeTypeDescription } from 'utils';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: 'solid 1px',\r\n        backgroundColor: theme.palette.primary.light,\r\n    }\r\n}));\r\n\r\ninterface ChallengeLauncherProps {\r\n    challengeType: ChallengeType,\r\n    challengeNumber: number,\r\n    challengeTotalCount: number,\r\n    language: Language,\r\n    delay: number,\r\n    onEnd: () => void\r\n}\r\n\r\nexport const ChallengeLauncher: React.FC<ChallengeLauncherProps> = (props: ChallengeLauncherProps) => {\r\n    const { challengeType, challengeNumber, challengeTotalCount, language, delay, onEnd } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => { onEnd(); }, delay * 1000);\r\n    }, []);\r\n\r\n    return (\r\n        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={2} className={classes.root}>\r\n            <Grid item>\r\n                <Typography variant=\"h2\">\r\n                    {\r\n                        getChallengeTypeDescription(challengeType, language)\r\n                    }\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item style={{width: '100%'}}>\r\n                <LinearProgress color=\"secondary\" />\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant=\"h4\">\r\n                    {\r\n                        language === Language.En ? (\r\n                            `Question ${challengeNumber.toString()} of ${challengeTotalCount.toString()}`\r\n                        ) : (\r\n                            `Pregunta ${challengeNumber.toString()} de ${challengeTotalCount.toString()}`\r\n                        )\r\n                    }\r\n                </Typography>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Button, Grid, Icon, makeStyles, Typography } from '@material-ui/core';\r\nimport { Test } from 'types';\r\nimport { Language } from 'enums';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        border: 'solid 1px'\r\n    },\r\n    timeline: {\r\n        transform: 'rotate(-90deg)'\r\n    },\r\n    timelineContentContainer: {\r\n        textAlign: 'left',\r\n        padding: '0px'\r\n    },\r\n    timelineContent: {\r\n        transform: 'rotate(90deg)',\r\n        padding: '0px 5px'\r\n    },\r\n    timelineIcon: {\r\n        transform: 'rotate(90deg)'\r\n    }\r\n}));\r\n\r\ninterface TestResultProps {\r\n    test: Test,\r\n    results: boolean[],\r\n    onBackHome: () => void,\r\n    onRepeatTest: () => void\r\n}\r\n\r\nexport const TestResult: React.FC<TestResultProps> = (props: TestResultProps) => {\r\n    const { test, results, onBackHome, onRepeatTest } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container\r\n            direction=\"column\"\r\n            className={classes.root}\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={4}\r\n        >\r\n            <Grid item>\r\n                <Typography variant=\"h2\">\r\n                    {test.name}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant=\"h3\">\r\n                    {test.description}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant=\"h4\">\r\n                    {\r\n                        `${test.language === Language.En ? 'Correct answers' : 'Respuestas correctas'}: ${results.filter((aResult: boolean) => aResult).length}/${results.length}`\r\n                    }\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item container justify=\"center\" alignItems=\"center\" spacing={4}>\r\n                <Grid item>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onBackHome}>\r\n                        <Icon>navigate_before</Icon>\r\n                        &nbsp;\r\n                        { test.language === Language.En ? 'Go back to home' : 'Volver a la pantalla principal' }\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onRepeatTest}>\r\n                        <Icon>replay</Icon>\r\n                        &nbsp;\r\n                        { test.language === Language.En ? 'repeat test' : 'Repetir cuestionario' }\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Box, Button, Dialog, Grid, Icon, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText, makeStyles, TextField, Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n}));\r\n\r\ninterface DialogFillGapsCandidatesProps {\r\n    open: boolean,\r\n    text: string,\r\n    candidates: string[],\r\n    onAccept: (alternatives: string[]) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const DialogFillGapsCandidates: React.FC<DialogFillGapsCandidatesProps> = (props: DialogFillGapsCandidatesProps) => {\r\n    const { open, text, candidates, onAccept, onCancel } = props;\r\n\r\n    const [formState, setFormState] = useState<string[]>(candidates);\r\n\r\n    const inputCandidate = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (candidates != null) {\r\n            setFormState(candidates);\r\n        }\r\n    }, [candidates]);\r\n\r\n    const addCandidate = () => {\r\n        setFormState([\r\n            ...formState,\r\n            inputCandidate.current.value\r\n        ]);\r\n        inputCandidate.current.value = '';\r\n    };\r\n\r\n    const handleCandidateKeyPress = (evt: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (evt.code === 'Enter' && inputCandidate.current.value !== '') {\r\n            addCandidate();\r\n        }\r\n    };\r\n\r\n    const handleDeleteCandidate = (candidateIdx: number) => {\r\n        setFormState(\r\n            formState.filter((aCandidate: string, idx: number) => idx !== candidateIdx)\r\n        );\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        onAccept(formState);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth='sm'\r\n        >\r\n            <Box className={classes.dialogContainer}>\r\n                <Grid\r\n                    container\r\n                    direction='column'\r\n                    spacing={2}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h6\">\r\n                            {`Otros textos validos para \"${text}\"`}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <List>\r\n                            {\r\n                                formState.map((aCandidate: string, candidateIdx: number) => (\r\n                                    <ListItem>\r\n                                        <ListItemText primary={aCandidate} />\r\n                                        <ListItemSecondaryAction>\r\n                                            <IconButton edge=\"end\" onClick={() => { handleDeleteCandidate(candidateIdx); }}>\r\n                                                <Icon>delete</Icon>\r\n                                            </IconButton>\r\n                                        </ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                ))\r\n                            }\r\n                        </List>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            inputRef={inputCandidate}\r\n                            variant=\"outlined\"\r\n                            style={{ width: '100%' }}\r\n                            label=\"Nuevo candidato\"\r\n                            onKeyPress={handleCandidateKeyPress}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container justify='flex-end' spacing={1}>\r\n                            <Grid item>\r\n                                <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { CSSProperties } from '@material-ui/styles';\r\nimport { useDrop } from 'react-dnd';\r\nimport { colors } from 'theme';\r\n\r\ninterface DropGapProps {\r\n    value: string,\r\n    style?: CSSProperties,\r\n    fontSize: number,\r\n    onDrop: (text: string) => void\r\n}\r\n\r\nexport const DropGap: React.FC<DropGapProps> = (props: DropGapProps) => {\r\n    const { value, style, fontSize, onDrop } = props;\r\n\r\n    const handleDrop = (item: any) => {\r\n        onDrop(item.name);\r\n    };\r\n\r\n    const [/* { isOver, canDrop } */, drop] = useDrop({\r\n        accept: 'dnd',\r\n        drop: handleDrop,\r\n        collect: (monitor: { isOver: () => boolean, canDrop: () => boolean }) => {\r\n            return ({\r\n                isOver: monitor.isOver(),\r\n                canDrop: monitor.canDrop()\r\n            });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div\r\n            ref={drop}\r\n            style={{\r\n                width: '150px',\r\n                height: '50px',\r\n                lineHeight: '50px',\r\n                textAlign: 'center',\r\n                borderBottom: `solid 1px ${colors.primary.main}`,\r\n                color: colors.primary.main,\r\n                fontSize: `${fontSize ? fontSize : 50}px`,\r\n                ...style\r\n            }}\r\n\r\n        >\r\n            {value}\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { FillGapsChallenge, FillGapsChallengeConfig } from 'types';\r\nimport { ComponentMode } from 'enums';\r\nimport { FillGapsChallenger, FillGapsConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface FillGapsChallengeDesignerProps {\r\n    challenge: FillGapsChallenge,\r\n    onChallengeChange: (challenge: FillGapsChallenge) => void\r\n}\r\n\r\nexport const FillGapsChallengeDesigner: React.FC<FillGapsChallengeDesignerProps> = (\r\n    props: FillGapsChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handlerChallengeChange = (updatedChallenge: FillGapsChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: FillGapsChallengeConfig) => {\r\n        const updatedChallenge: FillGapsChallenge = {\r\n            ...challenge,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <FillGapsChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <FillGapsConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Grid, Icon, IconButton, makeStyles, TextField } from '@material-ui/core';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport useSound from 'use-sound';\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { Challenge, ChallengeOptions, FillGapsChallenge, FillGapsChallengeExpression, FillGapsChallengeSentence } from 'types';\r\nimport { ComponentMode, FillMethod } from 'enums';\r\nimport { BasicChallengeTemplate, DialogFillGapsCandidates, DragableItem, FillGapsSentence, FillGapsSentenceAnswer } from 'components';\r\nimport { checkEqual, joinSentence, splitSentence } from 'utils';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },\r\n    optionsContainer: {\r\n        border: 'solid 1px gray',\r\n        backgroundColor: '#ffffff',\r\n        minHeight: '60px'\r\n    }\r\n}));\r\n\r\nconst initialFillGapsState = (challenge: FillGapsChallenge): FillGapsSentenceAnswer[][] => {\r\n    return challenge.sentences.map((aSentence: FillGapsChallengeSentence) => ([]));\r\n};\r\n\r\nconst reorderItems = (sentences: FillGapsChallengeSentence[], mode: ComponentMode): Item[] => {\r\n    let list: Item[] = [];\r\n    sentences.forEach((aSentence: FillGapsChallengeSentence, sentenceIdx: number) => {\r\n        aSentence.hiddenExpressions.forEach((aHiddenExpression: FillGapsChallengeExpression, hiddenExpressionIdx: number) => {\r\n            list.push({\r\n                sentenceText: aSentence.text,\r\n                sentenceIdx,\r\n                hiddenExpression: aHiddenExpression,\r\n                hiddenExpressionIdx\r\n            });\r\n        });\r\n    });\r\n    if (mode === ComponentMode.Play) {\r\n        list = list.sort(() => Math.random() - 0.5);\r\n    }\r\n    return list;\r\n};\r\n\r\ninterface FillGapsChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: FillGapsChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: FillGapsChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\ninterface Item {\r\n    sentenceText: string,\r\n    sentenceIdx: number,\r\n    hiddenExpression: FillGapsChallengeExpression,\r\n    hiddenExpressionIdx: number\r\n}\r\n\r\nexport const FillGapsChallenger: React.FC<FillGapsChallengerProps> = (props: FillGapsChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const inputSentence = useRef({} as HTMLInputElement);\r\n\r\n    const [fillGapsState, setFillGapsState] = useState<FillGapsSentenceAnswer[][]>(initialFillGapsState(challenge));\r\n    const [openCandidatesDialog, setOpenCandidatesDialog] = useState<boolean>(false);\r\n    const [selectedExpression, setSelectedExpression] = useState<number[]>();\r\n    const [draggableItems, setDragabbleItems] = useState<Item[]>(reorderItems(challenge.sentences, mode));\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setDragabbleItems(reorderItems(challenge.sentences, mode));\r\n    }, [challenge.sentences]);\r\n\r\n    const handleChallengeChange = (newChallenge: Challenge) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                ...(newChallenge as FillGapsChallenge)\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const handleSentenceChange = (updatedSentence: FillGapsChallengeSentence, sentenceIdx: number) => {\r\n        if (onChallengeChange) {\r\n            const updatedSentences = challenge.sentences.map((\r\n                aSentence: FillGapsChallengeSentence,\r\n                idx: number\r\n            ) => idx === sentenceIdx ? updatedSentence : aSentence);\r\n            onChallengeChange({\r\n                ...challenge,\r\n                sentences: updatedSentences\r\n            });\r\n        }\r\n    };\r\n\r\n    const addSentence = () => {\r\n        if (onChallengeChange) {\r\n            const newSentence: FillGapsChallengeSentence = {\r\n                text: inputSentence.current.value,\r\n                hiddenExpressions: [] as FillGapsChallengeExpression[]\r\n            };\r\n            onChallengeChange({\r\n                ...challenge,\r\n                sentences: [...challenge.sentences, newSentence]\r\n            });\r\n            setFillGapsState([\r\n                ...fillGapsState,\r\n                []\r\n            ]);\r\n        }\r\n        inputSentence.current.value = '';\r\n    };\r\n\r\n    const handleSentenceKeyPress = (evt: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (evt.code === 'Enter' && inputSentence.current.value !== '') {\r\n            addSentence();\r\n        }\r\n    };\r\n\r\n    const handleSentenceRemove = (sentenceIdx: number) => {\r\n        if (onChallengeChange) {\r\n            const updatedSentences = challenge.sentences\r\n                .filter((aSentence: FillGapsChallengeSentence, idx: number) => idx !== sentenceIdx);\r\n            onChallengeChange({\r\n                ...challenge,\r\n                sentences: updatedSentences\r\n            });\r\n            setFillGapsState(fillGapsState.filter(\r\n                (aFillGapsState: FillGapsSentenceAnswer[], idx: number) => idx !== sentenceIdx\r\n            ));\r\n        }\r\n    };\r\n\r\n    const handleAddCandidateClick = (sentenceIdx: number, hiddenExpIdx: number) => {\r\n        setSelectedExpression([sentenceIdx, hiddenExpIdx]);\r\n        setOpenCandidatesDialog(true);\r\n    };\r\n\r\n    const handleCandidateAccept = (newCandidates: string[]) => {\r\n        if (onChallengeChange && selectedExpression) {\r\n            const updatedSentences = challenge.sentences.map((\r\n                aSentence: FillGapsChallengeSentence,\r\n                sentenceIdx: number\r\n            ) => sentenceIdx !== selectedExpression[0] ? aSentence : (\r\n                {\r\n                    ...aSentence,\r\n                    hiddenExpressions: aSentence.hiddenExpressions.map((\r\n                        aHiddenExpression: FillGapsChallengeExpression,\r\n                        hiddenExpresionIdx: number\r\n                    ) => hiddenExpresionIdx !== selectedExpression[1] ? aHiddenExpression : (\r\n                        {\r\n                            ...aHiddenExpression,\r\n                            alternatives: [...newCandidates]\r\n                        }\r\n                    ))\r\n                }\r\n            ));\r\n            onChallengeChange({\r\n                ...challenge,\r\n                sentences: updatedSentences\r\n            });\r\n        }\r\n        setOpenCandidatesDialog(false);\r\n    };\r\n\r\n    const expressionInSentence = (sentence: string, expression: FillGapsChallengeExpression): string => {\r\n        return joinSentence(\r\n            splitSentence(sentence)\r\n                .slice(expression.initPosition, expression.initPosition + expression.wordCount)\r\n        );\r\n    };\r\n\r\n    const handleSentenceAnswer = (sentenceIdx: number, answer: FillGapsSentenceAnswer[]) => {\r\n        const updatedState = fillGapsState.map((aFillGapsState: FillGapsSentenceAnswer[], idx: number) => (\r\n            idx === sentenceIdx ? [...answer] : [...aFillGapsState]\r\n        ));\r\n        setFillGapsState(updatedState);\r\n    };\r\n\r\n    const completed = () => {\r\n        return challenge.sentences\r\n            .reduce((acc: boolean, current: FillGapsChallengeSentence, sentenceIdx: number) => (\r\n                acc\r\n                && current.hiddenExpressions.length === fillGapsState[sentenceIdx].length\r\n                && fillGapsState[sentenceIdx].every((el: FillGapsSentenceAnswer) => (\r\n                    el.value != null && el.value !== ''\r\n                ))\r\n            ), true);\r\n    };\r\n\r\n    const isDropped = (item: Item): boolean => {\r\n        const text = expressionInSentence(\r\n            item.sentenceText,\r\n            item.hiddenExpression\r\n        );\r\n\r\n        return fillGapsState.some((sentencesAnswer: FillGapsSentenceAnswer[]) => (\r\n            sentencesAnswer.some((aSentenceAnswer: FillGapsSentenceAnswer) => (\r\n                aSentenceAnswer.value === text\r\n            ))\r\n        ));\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const correct = challenge.sentences.reduce(\r\n            (accSentences: boolean, currentSentence: FillGapsChallengeSentence, sentenceIdx: number) => {\r\n                const words: string[] = splitSentence(currentSentence.text);\r\n                const correctExpressions = currentSentence.hiddenExpressions.reduce(\r\n                    (accExpressions: boolean, currentExpression: FillGapsChallengeExpression, expressionIdx: number) => {\r\n                        const hiddenAnswer = fillGapsState[sentenceIdx]\r\n                            .find((anAnswer: FillGapsSentenceAnswer) => anAnswer.hiddenIdx === expressionIdx);\r\n\r\n                        return hiddenAnswer != null && accExpressions && (\r\n                            checkEqual(\r\n                                joinSentence(words.slice(\r\n                                    currentExpression.initPosition,\r\n                                    currentExpression.initPosition + currentExpression.wordCount\r\n                                )),\r\n                                hiddenAnswer.value,\r\n                                challenge.config.checkCapitalLetters,\r\n                                challenge.config.checkAccentMarks\r\n                            )\r\n                            || currentExpression.alternatives.some(\r\n                                (anAlternative: string) => checkEqual(\r\n                                    anAlternative,\r\n                                    hiddenAnswer.value,\r\n                                    challenge.config.checkCapitalLetters,\r\n                                    challenge.config.checkAccentMarks\r\n                                )\r\n                            )\r\n                        );\r\n                    },\r\n                    true\r\n                );\r\n                return accSentences && correctExpressions;\r\n            },\r\n            true\r\n        );\r\n        showResult(correct);\r\n    };\r\n\r\n    return (\r\n        <BasicChallengeTemplate\r\n            mode={mode}\r\n            challenge={challenge}\r\n            options={options}\r\n            onChallengeChange={handleChallengeChange}\r\n            stopTime={stopTimer}\r\n            onTimeUp={handlerTimeUp}\r\n            showCheck={true}\r\n            disabledCheck={mode === ComponentMode.Design || !completed()}\r\n            onCheckClick={handleCheckClick}\r\n            centralComponent={\r\n                <Grid item xs={12} className={classes.fullHeight}>\r\n                    {\r\n                        selectedExpression && (\r\n                            <DialogFillGapsCandidates\r\n                                open={openCandidatesDialog}\r\n                                text={\r\n                                    expressionInSentence(\r\n                                        challenge.sentences[selectedExpression[0]].text,\r\n                                        challenge.sentences[selectedExpression[0]].hiddenExpressions[selectedExpression[1]]\r\n                                    )\r\n                                }\r\n                                candidates={\r\n                                    challenge.sentences[selectedExpression[0]]\r\n                                        .hiddenExpressions[selectedExpression[1]].alternatives\r\n                                }\r\n                                onAccept={handleCandidateAccept}\r\n                                onCancel={() => { setOpenCandidatesDialog(false); }}\r\n                            />\r\n                        )\r\n                    }\r\n                    <DndProvider backend={HTML5Backend}>\r\n                        <Grid\r\n                            container\r\n                            spacing={2}\r\n                            direction=\"column\"\r\n                            className={classes.fullHeight}\r\n                        >\r\n                            {\r\n                                (\r\n                                    mode === ComponentMode.Design ||\r\n                                    challenge.config.fillMethod === FillMethod.Dragging\r\n                                ) && (\r\n                                    <Grid\r\n                                        item\r\n                                        // xs={12}\r\n                                        className={classes.optionsContainer}\r\n                                    >\r\n                                        <Grid container spacing={2} justify=\"space-around\" alignItems=\"center\">\r\n                                            {\r\n                                                draggableItems.map((anItem: Item) => !isDropped(anItem) && (\r\n                                                    <Grid item key={`gridItem_${anItem.sentenceIdx}_${anItem.hiddenExpression.initPosition}`}>\r\n                                                        <DragableItem\r\n                                                            name={expressionInSentence(\r\n                                                                anItem.sentenceText,\r\n                                                                anItem.hiddenExpression\r\n                                                            )}\r\n                                                            key={`dragable_${anItem.sentenceIdx}_${anItem.hiddenExpression.initPosition}`}\r\n                                                            style={{ fontSize: challenge.config.textFontSize }}\r\n                                                            iconButton={\r\n                                                                mode === ComponentMode.Design ? (\r\n                                                                    <IconButton\r\n                                                                        size=\"small\"\r\n                                                                        onClick={() => {\r\n                                                                            handleAddCandidateClick(\r\n                                                                                anItem.sentenceIdx,\r\n                                                                                anItem.hiddenExpressionIdx\r\n                                                                            );\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <Icon>add_circle</Icon>\r\n                                                                    </IconButton>\r\n                                                                ) : undefined\r\n                                                            }\r\n                                                        />\r\n                                                    </Grid>\r\n                                                ))\r\n                                            }\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                )\r\n                            }\r\n                            <Grid item xs>\r\n                                <Grid container direction=\"column\" justify=\"space-around\" className={`${classes.fullWidth} ${classes.fullHeight}`}>\r\n                                    {\r\n                                        challenge.sentences.map((\r\n                                            aSentence: FillGapsChallengeSentence,\r\n                                            sentenceIdx: number\r\n                                        ) => (\r\n                                            <Grid\r\n                                                item\r\n                                                key={`sentence_${sentenceIdx}`}\r\n                                            >\r\n                                                <FillGapsSentence\r\n                                                    mode={mode}\r\n                                                    sentence={aSentence}\r\n                                                    fillMethod={challenge.config.fillMethod}\r\n                                                    checkCapitalLetters={challenge.config.checkCapitalLetters}\r\n                                                    checkAccentMarks={challenge.config.checkAccentMarks}\r\n                                                    showResults={highlightResults}\r\n                                                    fontSize={challenge.config.textFontSize}\r\n                                                    onSentenceChange={(\r\n                                                        updatedSentence: FillGapsChallengeSentence\r\n                                                    ) => handleSentenceChange(updatedSentence, sentenceIdx)}\r\n                                                    onSentenceRemove={() => { handleSentenceRemove(sentenceIdx); }}\r\n                                                    onAnswersChange={(answer: FillGapsSentenceAnswer[]) => {\r\n                                                        handleSentenceAnswer(sentenceIdx, answer);\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        ))\r\n                                    }\r\n                                </Grid>\r\n                            </Grid>\r\n                            {\r\n                                mode === ComponentMode.Design && (\r\n                                    <Grid item>\r\n                                        <TextField\r\n                                            inputRef={inputSentence}\r\n                                            variant=\"outlined\"\r\n                                            style={{ width: '100%' }}\r\n                                            InputProps={\r\n                                                {\r\n                                                    style: {\r\n                                                        fontSize: challenge.config.textFontSize,\r\n                                                        color: '#000000'\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            label=\"Nueva frase\"\r\n                                            onKeyPress={handleSentenceKeyPress}\r\n                                        />\r\n                                    </Grid>\r\n                                )\r\n                            }\r\n                        </Grid>\r\n                    </DndProvider>\r\n                </Grid>\r\n            }\r\n        />\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControl, FormControlLabel, Grid, InputLabel, makeStyles, MenuItem, Select, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { ChallengeConfig, FillGapsChallengeConfig } from 'types';\r\nimport { FillMethod } from 'enums';\r\nimport { ChallengeConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface FillGapsConfiguratorProps {\r\n    config: FillGapsChallengeConfig,\r\n    onConfigChange?: (config: FillGapsChallengeConfig) => void\r\n}\r\n\r\nexport const FillGapsConfigurator: React.FC<FillGapsConfiguratorProps> = (props: FillGapsConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<FillGapsChallengeConfig>(config);\r\n\r\n    const inputTextFontSize = useRef({} as HTMLInputElement);\r\n    const inputFillMethod = useRef({} as HTMLSelectElement);\r\n    const checkCapitalLetters = useRef({} as HTMLInputElement);\r\n    const checkAccentMarks = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean | string) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    const handleBaseConfigChange = (newBaseConfig: ChallengeConfig) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            ...newBaseConfig\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <ChallengeConfigurator\r\n                    config={config}\r\n                    onConfigChange={handleBaseConfigChange}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTextFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.textFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('textFontSize', parseInt(inputTextFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControl className={classes.fullWidth}>\r\n                    <InputLabel>Modo de rellenado</InputLabel>\r\n                    <Select\r\n                        inputRef={inputFillMethod}\r\n                        label=\"Modo de rellenado\"\r\n                        value={formData.fillMethod}\r\n                        color='secondary'\r\n                        className={classes.fullWidth}\r\n                        onChange={(evt: React.ChangeEvent<{name?: string | undefined, value: unknown}>) => {\r\n                            handleConfigParameterChange('fillMethod', evt.target.value as string);\r\n                        }}\r\n                    >\r\n                        <MenuItem value={FillMethod.Writing}>Escribiendo</MenuItem>\r\n                        <MenuItem value={FillMethod.Dragging}>Arrastrando</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkCapitalLetters}\r\n                            name='checkMultiselect'\r\n                            checked={formData.checkCapitalLetters}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('checkCapitalLetters', checkCapitalLetters.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Comprobar mayúsculas/minúsculas'\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkAccentMarks}\r\n                            name='checkAccentMarks'\r\n                            checked={formData.checkAccentMarks}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('checkAccentMarks', checkAccentMarks.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Comprobar tildes'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Grid, Icon, IconButton, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { FillGapsChallengeExpression, FillGapsChallengeSentence } from 'types';\r\nimport { ComponentMode, FillMethod } from 'enums';\r\nimport { DropGap } from 'components';\r\nimport { checkEqual, joinSentence, splitSentence } from 'utils';\r\nimport { colors } from 'theme';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    word: {\r\n        padding: '2px',\r\n    },\r\n    selectableWord: {\r\n        padding: '2px',\r\n        // backgroundColor: '#f0f0f0',\r\n        '& :hover': {\r\n            backgroundColor: theme.palette.primary.light,\r\n            color:'#ffffff',\r\n            cursor: 'pointer',\r\n            borderRadius: '10px'\r\n        }\r\n    },\r\n    selected: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        borderRadius: '10px',\r\n        color:'#ffffff',\r\n    }\r\n}));\r\n\r\ninterface SentencePart {\r\n    type: 'text' | 'hidden',\r\n    hiddenIdx: number,\r\n    value: string,\r\n    answer: string\r\n}\r\n\r\nexport interface FillGapsSentenceAnswer {\r\n    hiddenIdx: number,\r\n    value: string\r\n}\r\n\r\nconst sentenceParts = (sentence: FillGapsChallengeSentence): SentencePart[] => {\r\n    const result: SentencePart[] = [];\r\n    let currentIdx = 0;\r\n    const words = splitSentence(sentence.text);\r\n    sentence.hiddenExpressions.forEach((anExp: FillGapsChallengeExpression, idx: number) => {\r\n        if (anExp.initPosition > currentIdx) {\r\n            result.push({\r\n                type: 'text',\r\n                hiddenIdx: -1,\r\n                value: joinSentence(words.slice(currentIdx, anExp.initPosition)),\r\n                answer: ''\r\n            });\r\n        }\r\n        result.push({\r\n            type: 'hidden',\r\n            hiddenIdx: idx,\r\n            value: joinSentence(words.slice(anExp.initPosition, anExp.initPosition + anExp.wordCount)),\r\n            answer: ''\r\n        });\r\n        currentIdx = anExp.initPosition + anExp.wordCount;\r\n    });\r\n    if (currentIdx < words.length - 1) {\r\n        result.push({\r\n            type: 'text',\r\n            hiddenIdx: -1,\r\n            value: joinSentence(words.slice(currentIdx)),\r\n            answer: ''\r\n        });\r\n    }\r\n    return result;\r\n};\r\n\r\ninterface FillGapsSentenceProps {\r\n    mode: ComponentMode,\r\n    sentence: FillGapsChallengeSentence,\r\n    fillMethod: FillMethod,\r\n    checkCapitalLetters: boolean,\r\n    checkAccentMarks: boolean,\r\n    showResults: boolean,\r\n    fontSize: number,\r\n    onSentenceChange: (newSentence: FillGapsChallengeSentence) => void,\r\n    onSentenceRemove: () => void,\r\n    onAnswersChange: (answers: FillGapsSentenceAnswer[]) => void\r\n}\r\n\r\nexport const FillGapsSentence: React.FC<FillGapsSentenceProps> = (props: FillGapsSentenceProps) => {\r\n    const {mode,\r\n        sentence,\r\n        fillMethod,\r\n        checkCapitalLetters,\r\n        checkAccentMarks,\r\n        showResults,\r\n        fontSize,\r\n        onSentenceChange,\r\n        onSentenceRemove,\r\n        onAnswersChange\r\n    } = props;\r\n\r\n    const [parts, setParts] = useState<SentencePart[]>(sentenceParts(sentence));\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleWordClick = (wordIdx: number) => {\r\n        let updatedHiddenExpressions: FillGapsChallengeExpression[] = [];\r\n\r\n        if (sentence.hiddenExpressions.length === 0) {\r\n            updatedHiddenExpressions.push({\r\n                initPosition: wordIdx,\r\n                wordCount: 1,\r\n                alternatives: []\r\n            });\r\n        }\r\n\r\n        sentence.hiddenExpressions.some((anExp: FillGapsChallengeExpression, idx: number) => {\r\n            let completeArrayFrom = -1;\r\n            if (idx === 0 && wordIdx < anExp.initPosition - 1) {\r\n                //Antes de la primera expresion y no contigua\r\n                updatedHiddenExpressions = [\r\n                    { initPosition: wordIdx, wordCount: 1, alternatives:[] },\r\n                    ...sentence.hiddenExpressions\r\n                ];\r\n                return true;\r\n            } else if (wordIdx === anExp.initPosition - 1) {\r\n                //Contigua a la expresion por delante\r\n                updatedHiddenExpressions.push(\r\n                    { initPosition: wordIdx, wordCount: anExp.wordCount + 1, alternatives: [...anExp.alternatives] }\r\n                );\r\n                completeArrayFrom = idx;\r\n            } else if (wordIdx === anExp.initPosition) {\r\n                //Sobre la primera palabra de la expresion\r\n                if (anExp.wordCount === 1) {\r\n                    //Si la expresion solo tiene una palabra\r\n                } else {\r\n                    //Si la expresion tiene más de una palabra\r\n                    updatedHiddenExpressions.push(\r\n                        { initPosition: wordIdx + 1, wordCount: anExp.wordCount - 1, alternatives: [...anExp.alternatives] }\r\n                    );\r\n                }\r\n                completeArrayFrom = idx;\r\n            } else if (wordIdx > anExp.initPosition && wordIdx < anExp.initPosition + anExp.wordCount - 1) {\r\n                //Sobre una palabra interior de la expresion\r\n                updatedHiddenExpressions = [\r\n                    ...updatedHiddenExpressions,\r\n                    {\r\n                        initPosition: anExp.initPosition,\r\n                        wordCount: wordIdx - anExp.initPosition,\r\n                        alternatives: []\r\n                    },\r\n                    {\r\n                        initPosition: wordIdx + 1,\r\n                        wordCount: anExp.initPosition + anExp.wordCount - wordIdx - 1,\r\n                        alternatives: []\r\n                    }\r\n                ];\r\n                completeArrayFrom = idx;\r\n            } else if (wordIdx === anExp.initPosition + anExp.wordCount - 1) {\r\n                //Sobre la ultima palabra de la expresion\r\n                if (anExp.wordCount === 1) {\r\n                    //Si la expresion solo tiene una palabra\r\n                } else {\r\n                    //Si la expresion tiene más de una palabra\r\n                    updatedHiddenExpressions.push(\r\n                        {\r\n                            initPosition: anExp.initPosition,\r\n                            wordCount: anExp.wordCount - 1,\r\n                            alternatives: [...anExp.alternatives]\r\n                        }\r\n                    );\r\n                }\r\n                completeArrayFrom = idx;\r\n            } else if (idx < sentence.hiddenExpressions.length - 1\r\n                && wordIdx > anExp.initPosition + anExp.wordCount\r\n                && wordIdx < sentence.hiddenExpressions[idx + 1].initPosition - 1) {\r\n                //Entre dos expresiones de manera no contigua\r\n                updatedHiddenExpressions = [\r\n                    ...updatedHiddenExpressions,\r\n                    {...anExp},\r\n                    { initPosition: wordIdx, wordCount: 1, alternatives: [] }\r\n                ];\r\n                completeArrayFrom = idx;\r\n            } else if (idx < sentence.hiddenExpressions.length - 1\r\n                && wordIdx === anExp.initPosition + anExp.wordCount\r\n                && wordIdx === sentence.hiddenExpressions[idx + 1].initPosition - 1) {\r\n                //Entre dos expresiones de manera contigua a ambas\r\n                updatedHiddenExpressions.push({\r\n                    initPosition: anExp.initPosition,\r\n                    wordCount: anExp.wordCount + sentence.hiddenExpressions[idx + 1].wordCount + 1,\r\n                    alternatives: []\r\n                });\r\n                completeArrayFrom = idx + 1;\r\n            } else if (wordIdx === anExp.initPosition + anExp.wordCount) {\r\n                //Contigua a la expresion por detras\r\n                updatedHiddenExpressions.push({\r\n                    initPosition: anExp.initPosition,\r\n                    wordCount: anExp.wordCount + 1,\r\n                    alternatives: [...anExp.alternatives]\r\n                });\r\n                completeArrayFrom = idx;\r\n            } else if (idx === sentence.hiddenExpressions.length - 1) {\r\n                //Despues de la ultima expresion y de manera no contigua\r\n                updatedHiddenExpressions = [\r\n                    ...updatedHiddenExpressions,\r\n                    {...anExp},\r\n                    { initPosition: wordIdx, wordCount: 1, alternatives: [] }\r\n                ];\r\n                return true;\r\n            }\r\n\r\n            if (completeArrayFrom !== -1) {\r\n                if (idx < sentence.hiddenExpressions.length - 1) {\r\n                    updatedHiddenExpressions = [\r\n                        ...updatedHiddenExpressions,\r\n                        ...sentence.hiddenExpressions.slice(completeArrayFrom + 1)\r\n                    ];\r\n                }\r\n                return true;\r\n            }\r\n\r\n            updatedHiddenExpressions.push({...anExp});\r\n            return false;\r\n        });\r\n\r\n        onSentenceChange({\r\n            ...sentence,\r\n            hiddenExpressions: updatedHiddenExpressions\r\n        });\r\n    };\r\n\r\n    const handleDeleteClick = () => {\r\n        if (onSentenceRemove) {\r\n            onSentenceRemove();\r\n        }\r\n    };\r\n\r\n    const selected = (wordIdx: number) => {\r\n        return sentence.hiddenExpressions.some(\r\n            (anExpression: FillGapsChallengeExpression) => (\r\n                wordIdx >= anExpression.initPosition\r\n                && wordIdx <= anExpression.initPosition + anExpression.wordCount - 1\r\n            )\r\n        );\r\n    };\r\n\r\n    const handlePartChange = (partIdx: number, text: string) => {\r\n        const updatedParts = parts.map((aPart: SentencePart, idx: number) => (\r\n            {\r\n                ...aPart,\r\n                answer: idx === partIdx ? text : aPart.answer\r\n            }\r\n        ));\r\n        setParts(updatedParts);\r\n        onAnswersChange(updatedParts.filter(\r\n            (aPart: SentencePart) => aPart.type === 'hidden'\r\n        ).map(\r\n            (aPart: SentencePart) => ({\r\n                hiddenIdx: aPart.hiddenIdx,\r\n                value: aPart.answer\r\n            }))\r\n        );\r\n    };\r\n\r\n    const getPartStyle = (validValues: string[], value: string) => showResults ? (\r\n        validValues.some(\r\n            (aValidValue: string) => checkEqual(\r\n                aValidValue,\r\n                value,\r\n                checkCapitalLetters,\r\n                checkAccentMarks\r\n            )\r\n        ) ? { color: '#4caf50' } : { color: '#f44336' }\r\n    ) : {};\r\n\r\n    return (\r\n        <Grid container alignItems=\"center\" spacing={1}>\r\n            <Grid item>\r\n                <Icon fontSize=\"small\" color=\"secondary\">navigate_next</Icon>\r\n            </Grid>\r\n            {\r\n                mode === ComponentMode.Design\r\n                && splitSentence(sentence.text).map((aWord: string, idx: number) => (\r\n                    <Grid\r\n                        item\r\n                        key={`word_${idx}`}\r\n                        className={`${classes.selectableWord} ${selected(idx) ? classes.selected : ''}`}\r\n                        onClick={() => { handleWordClick(idx); }}\r\n                    >\r\n                        <Typography style={{fontSize: `${fontSize ? fontSize: 50}px`}}>\r\n                            {aWord}\r\n                        </Typography>\r\n                    </Grid>\r\n                ))\r\n            }\r\n            {\r\n                mode === ComponentMode.Design && (\r\n                    <Grid item>\r\n                        <IconButton size=\"small\" onClick={handleDeleteClick}>\r\n                            <Icon>delete</Icon>\r\n                        </IconButton>\r\n                    </Grid>\r\n                )\r\n            }\r\n            {\r\n                mode === ComponentMode.Play && (\r\n                    parts.map((aPart: SentencePart, idx: number) => (\r\n                        aPart.type === 'text' ? (aPart.value.split(' ').map((aWord: string) => (\r\n                            <Grid\r\n                                item\r\n                                key={`part_${idx}`}\r\n                                className={classes.word}\r\n                            >\r\n                                <Typography style={{fontSize: `${fontSize ? fontSize: 50}px`}}>\r\n                                    {aWord}\r\n                                </Typography>\r\n                            </Grid>\r\n                        ))) : (\r\n                            <Grid\r\n                                item\r\n                                key={`part_${idx}`}\r\n                            >\r\n                                {\r\n                                    fillMethod === FillMethod.Writing ? (\r\n                                        <TextField\r\n                                            key={`input_${idx}`}\r\n                                            value={aPart.answer}\r\n                                            color=\"primary\"\r\n                                            inputProps={{\r\n                                                style: {\r\n                                                    fontSize: `${fontSize ? fontSize : 50}px`,\r\n                                                    textAlign: 'center',\r\n                                                    color: colors.primary.main,\r\n                                                    ...getPartStyle(\r\n                                                        [\r\n                                                            aPart.value,\r\n                                                            ...sentence.hiddenExpressions[aPart.hiddenIdx].alternatives\r\n                                                        ],\r\n                                                        aPart.answer\r\n                                                    )\r\n                                                }\r\n                                            }}\r\n                                            onInput={\r\n                                                (evt: React.FormEvent<HTMLInputElement>) => {\r\n                                                    handlePartChange(idx, (evt.target as any).value);\r\n                                                }\r\n                                            }\r\n                                        />\r\n                                    ) : (\r\n                                        <DropGap\r\n                                            key={`input_${idx}`}\r\n                                            value={aPart.answer}\r\n                                            style={getPartStyle(\r\n                                                [\r\n                                                    aPart.value,\r\n                                                    ...sentence.hiddenExpressions[aPart.hiddenIdx].alternatives\r\n                                                ],\r\n                                                aPart.answer\r\n                                            )}\r\n                                            fontSize={fontSize}\r\n                                            onDrop={(droppedText: string) => {\r\n                                                handlePartChange(idx, droppedText);\r\n                                            }}\r\n                                        />\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                        )\r\n                    ))\r\n                )\r\n            }\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { FillTableChallenge, FillTableChallengeCell, FillTableChallengeConfig } from 'types';\r\nimport { ComponentMode } from 'enums';\r\nimport { FillTableChallenger, FillTableConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface FillTableChallengeDesignerProps {\r\n    challenge: FillTableChallenge,\r\n    onChallengeChange: (challenge: FillTableChallenge) => void\r\n}\r\n\r\nexport const FillTableChallengeDesigner: React.FC<FillTableChallengeDesignerProps> = (\r\n    props: FillTableChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustTable = (rowCount: number, columnCount: number): FillTableChallengeCell[][] => {\r\n        let items = [...challenge.items];\r\n        if (rowCount > items.length) {\r\n            const auxColumn = Array.from(Array(items[0].length)).map(() => ({ text: '', hidden: false}));\r\n            const newRows = Array.from(Array(rowCount - items.length))\r\n                .map(() => [...auxColumn]);\r\n            items = [...items, ...newRows];\r\n        } else if (rowCount < items.length) {\r\n            items = items.slice(0, rowCount);\r\n        }\r\n\r\n        if (columnCount > items[0].length) {\r\n            const newColumns = Array.from(Array(columnCount - items[0].length))\r\n                .map(() => ({ text: '', hidden: false}));\r\n            items = items.map((anItem: FillTableChallengeCell[]) => [...anItem, ...newColumns]);\r\n        } else if (columnCount < items[0].length) {\r\n            items = items.map((anItem: FillTableChallengeCell[]) => anItem.slice(0, columnCount));\r\n        }\r\n\r\n        return items;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: FillTableChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: FillTableChallengeConfig) => {\r\n        const items = readjustTable(config.rowCount, config.columnCount);\r\n        const updatedChallenge: FillTableChallenge = {\r\n            ...challenge,\r\n            items,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <FillTableChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <FillTableConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { Challenge, ChallengeOptions, FillTableChallenge, FillTableChallengeCell } from 'types';\r\nimport { ComponentMode } from 'enums';\r\nimport { BasicChallengeTemplate, TableCell } from 'components';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    cell: {\r\n        height: '60px'\r\n    }\r\n}));\r\n\r\nconst initialFillTableState = (challenge: FillTableChallenge): FillTableChallengeCell[][] => {\r\n    return challenge.items.map((aRow: FillTableChallengeCell[]) => {\r\n        const updatedColumns = aRow.map((aColumn: FillTableChallengeCell) => {\r\n            return aColumn.hidden ? { ...aColumn, text: '' } : { ...aColumn };\r\n        });\r\n        return updatedColumns;\r\n    });\r\n};\r\n\r\ninterface FillTableChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: FillTableChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: FillTableChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const FillTableChallenger: React.FC<FillTableChallengerProps> = (props: FillTableChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [fillTableState, setFillTableState] = useState<FillTableChallengeCell[][]>(initialFillTableState(challenge));\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChallengeChange = (newChallenge: Challenge) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                ...(newChallenge as FillTableChallenge)\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const handleCellChange = (newCell: FillTableChallengeCell, rowIdx: number, columnIdx: number) => {\r\n        const updatedItems = (mode === ComponentMode.Design ? challenge.items : fillTableState)\r\n            .map((aRow: FillTableChallengeCell[], auxRowIdx: number) => {\r\n                if (auxRowIdx !== rowIdx) {\r\n                    return [...aRow];\r\n                }\r\n                const updatedColumns = aRow.map((aColumn: FillTableChallengeCell, auxColumnIdx: number) => {\r\n                    return auxColumnIdx === columnIdx ? { ...newCell } : { ...aColumn };\r\n                });\r\n                return updatedColumns;\r\n            });\r\n        if (mode === ComponentMode.Play) {\r\n            setFillTableState(updatedItems);\r\n        } else if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                items: updatedItems\r\n            });\r\n        }\r\n    };\r\n\r\n    const completed = () => {\r\n        return fillTableState.reduce(\r\n            (accRow: boolean, currentRow: FillTableChallengeCell[], rowIdx: number) => (\r\n                accRow\r\n                && currentRow.reduce(\r\n                    (accColumn: boolean, currentColumn: FillTableChallengeCell, columnIdx: number) => (\r\n                        accColumn\r\n                        && (\r\n                            (\r\n                                challenge.config.firstRowFixed\r\n                                && rowIdx === 0\r\n                                && challenge.config.firstColumnFixed\r\n                                && columnIdx === 0\r\n                            )\r\n                            || currentColumn.text !== ''\r\n                        )\r\n                    ),\r\n                    true\r\n                )\r\n            ),\r\n            true\r\n        );\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const result = fillTableState.reduce(\r\n            (accRow: boolean, currentRow: FillTableChallengeCell[], rowIdx: number) => (\r\n                accRow\r\n                && currentRow.reduce(\r\n                    (accColumn: boolean, currentColumn: FillTableChallengeCell, columnIdx: number) => (\r\n                        accColumn\r\n                        && (\r\n                            (\r\n                                challenge.config.firstRowFixed\r\n                                && rowIdx === 0\r\n                                && challenge.config.firstColumnFixed\r\n                                && columnIdx === 0\r\n                            )\r\n                            || currentColumn.text === challenge.items[rowIdx][columnIdx].text\r\n                        )\r\n                    ),\r\n                    true\r\n                )\r\n            ),\r\n            true\r\n        );\r\n\r\n        showResult(result);\r\n    };\r\n\r\n    return (\r\n        <BasicChallengeTemplate\r\n            mode={mode}\r\n            challenge={challenge}\r\n            options={options}\r\n            onChallengeChange={handleChallengeChange}\r\n            stopTime={stopTimer}\r\n            onTimeUp={handlerTimeUp}\r\n            showCheck={true}\r\n            disabledCheck={mode === ComponentMode.Design || !completed()}\r\n            onCheckClick={handleCheckClick}\r\n            centralComponent={\r\n                <Grid container alignItems=\"center\" style={{ height: '100%' }}>\r\n                    <Grid item xs>\r\n                        <Grid container direction=\"column\">\r\n                            {\r\n                                (mode === ComponentMode.Design ? challenge.items : fillTableState)\r\n                                    .map((aRow: FillTableChallengeCell[], rowIdx: number) => (\r\n                                        <Grid item xs key={`row_${rowIdx}`}>\r\n                                            <Grid container>\r\n                                                {\r\n                                                    aRow.map((aColumn: FillTableChallengeCell, columnIdx: number) => (\r\n                                                        <Grid item xs key={`column_${columnIdx}`} className={classes.cell}>\r\n                                                            {\r\n                                                                !(\r\n                                                                    challenge.config.firstRowFixed\r\n                                                                    && challenge.config.firstColumnFixed\r\n                                                                    && rowIdx === 0\r\n                                                                    && columnIdx === 0\r\n                                                                ) && (\r\n                                                                    <TableCell\r\n                                                                        mode={mode}\r\n                                                                        cell={aColumn}\r\n                                                                        fixed={\r\n                                                                            (\r\n                                                                                challenge.config.firstRowFixed\r\n                                                                                && rowIdx === 0\r\n                                                                            ) || (\r\n                                                                                challenge.config.firstColumnFixed\r\n                                                                                && columnIdx === 0\r\n                                                                            )\r\n                                                                        }\r\n                                                                        fontSize={challenge.config.itemsFontSize}\r\n                                                                        showResults={highlightResults}\r\n                                                                        success={\r\n                                                                            (\r\n                                                                                !challenge.config.firstRowFixed\r\n                                                                                || rowIdx !== 0\r\n                                                                            ) && (\r\n                                                                                !challenge.config.firstColumnFixed\r\n                                                                                || columnIdx !== 0\r\n                                                                            ) && (\r\n                                                                                challenge.items != null\r\n                                                                                && challenge.items[rowIdx] != null\r\n                                                                                && challenge.items[rowIdx][columnIdx] != null\r\n                                                                                && fillTableState[rowIdx] != null\r\n                                                                                && fillTableState[rowIdx][columnIdx] != null\r\n                                                                            ) && (\r\n                                                                                challenge.items[rowIdx][columnIdx].text\r\n                                                                                === fillTableState[rowIdx][columnIdx].text\r\n                                                                            )\r\n                                                                        }\r\n                                                                        onCellChange={(cell) => {\r\n                                                                            handleCellChange(cell, rowIdx, columnIdx);\r\n                                                                        }}\r\n                                                                    />\r\n                                                                )\r\n                                                            }\r\n                                                        </Grid>\r\n                                                    ))\r\n                                                }\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    ))\r\n                            }\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            }\r\n        />\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControlLabel, Grid, makeStyles, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { ChallengeConfig, FillTableChallengeConfig } from 'types';\r\nimport { ChallengeConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface FillTableConfiguratorProps {\r\n    config: FillTableChallengeConfig,\r\n    onConfigChange?: (config: FillTableChallengeConfig) => void\r\n}\r\n\r\nexport const FillTableConfigurator: React.FC<FillTableConfiguratorProps> = (props: FillTableConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<FillTableChallengeConfig>(config);\r\n\r\n    const inputItemsFontSize = useRef({} as HTMLInputElement);\r\n    const inputRowCount = useRef({} as HTMLInputElement);\r\n    const checkFirstRowFixed = useRef({} as HTMLInputElement);\r\n    const inputColumnCount = useRef({} as HTMLInputElement);\r\n    const checkFirstColumnFixed = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    const handleBaseConfigChange = (newBaseConfig: ChallengeConfig) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            ...newBaseConfig\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <ChallengeConfigurator\r\n                    config={config}\r\n                    onConfigChange={handleBaseConfigChange}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemsFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemsFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('itemsFontSize', parseInt(inputItemsFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputRowCount}\r\n                    type='number'\r\n                    label='Número de filas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.rowCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('rowCount', parseInt(inputRowCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkFirstRowFixed}\r\n                            name='checkMultiselect'\r\n                            checked={formData.firstRowFixed}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('firstRowFixed', checkFirstRowFixed.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Primera fila fija'\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputColumnCount}\r\n                    type='number'\r\n                    label='Número de columnas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.columnCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('columnCount', parseInt(inputColumnCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkFirstColumnFixed}\r\n                            name='checkFirstColumnFixed'\r\n                            checked={formData.firstColumnFixed}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('firstColumnFixed', checkFirstColumnFixed.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Primera columna fija'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useRef, useState } from 'react';\r\nimport { Button, Grid, Icon, makeStyles, TextField } from '@material-ui/core';\r\nimport { FillTableChallengeCell } from 'types';\r\nimport { ComponentMode } from 'enums';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: 'solid 1px gray'\r\n    },\r\n    fixed: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: '#ffffff'\r\n    },\r\n    valid: {\r\n        backgroundColor: '#4caf50',\r\n    },\r\n    invalid: {\r\n        backgroundColor: '#f44336',\r\n    }\r\n}));\r\n\r\ninterface TableCellProps {\r\n    mode: ComponentMode,\r\n    cell: FillTableChallengeCell,\r\n    fixed?: boolean,\r\n    fontSize?: number,\r\n    showResults?: boolean,\r\n    success?: boolean,\r\n    onCellChange: (newCell: FillTableChallengeCell) => void\r\n}\r\n\r\nexport const TableCell: React.FC<TableCellProps> = (props: TableCellProps) => {\r\n    const { mode, cell, fixed, fontSize, showResults, success, onCellChange } = props;\r\n\r\n    const [formData, setFormData] = useState<FillTableChallengeCell>(cell);\r\n    const inputText = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTextChange = () => {\r\n        const newState = {\r\n            ...formData,\r\n            text: inputText.current.value\r\n        };\r\n        setFormData(newState);\r\n        onCellChange(newState);\r\n    };\r\n\r\n    const handleVisibilityChange = () => {\r\n        const newState ={\r\n            ...formData,\r\n            hidden: !formData.hidden\r\n        };\r\n        setFormData(newState);\r\n        onCellChange(newState);\r\n    };\r\n\r\n    return (\r\n        <Grid container alignItems=\"center\" className={`${classes.root} ${fixed ? classes.fixed : (showResults ? (success ? classes.valid : classes.invalid ) : '')}`}>\r\n            {\r\n                mode === ComponentMode.Design && !fixed && (\r\n                    <Grid item>\r\n                        <Button value=\"hidden\" onClick={handleVisibilityChange}>\r\n                            <Icon color={formData.hidden ? 'secondary' : 'primary'}>\r\n                                {\r\n                                    formData.hidden ? 'visibility_off' : 'visibility'\r\n                                }\r\n                            </Icon>\r\n                        </Button>\r\n                    </Grid>\r\n                )\r\n            }\r\n            <Grid item xs>\r\n                {\r\n                    (mode === ComponentMode.Design || formData.hidden) ? (\r\n                        <TextField\r\n                            inputRef={inputText}\r\n                            value={formData.text}\r\n                            color='secondary'\r\n                            style={{ marginLeft: '10px', width: 'calc(100% - 20px)' }}\r\n                            inputProps = {{\r\n                                style: {\r\n                                    textAlign: 'center',\r\n                                    fontSize: `${fontSize != null ? fontSize : 28}px`,\r\n                                    color: fixed || showResults ? '#ffffff': '#000000',\r\n                                    width: '100%'\r\n                                }\r\n                            }}\r\n                            onInput={handleTextChange}\r\n                        />\r\n                    ) : (\r\n                        <div\r\n                            style={{\r\n                                textAlign: 'center',\r\n                                fontSize: `${fontSize != null ? fontSize : 28}px`,\r\n                                color: fixed || showResults ? '#ffffff': '#000000'\r\n                            }}\r\n                        >\r\n                            {formData.text}\r\n                        </div>\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useRef, useState } from 'react';\r\nimport { Box, Button, Dialog, DialogTitle, FormControlLabel, Grid, makeStyles, Switch } from '@material-ui/core';\r\nimport { TestOptions } from 'types';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n}));\r\n\r\ninterface DialogTestOptionsProps {\r\n    open: boolean,\r\n    onAccept: (options: TestOptions) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const DialogTestOptions: React.FC<DialogTestOptionsProps> = (props: DialogTestOptionsProps) => {\r\n    const {open, onAccept, onCancel} = props;\r\n\r\n    const [formState, setFormState] = useState<TestOptions>({\r\n        ignoreTimeLimit: false,\r\n        autoNext: true,\r\n        disorderedChallenges: false\r\n    });\r\n\r\n    const checkIgnoreTimeLimit = useRef({} as HTMLInputElement);\r\n    const checkAutoNextChallenge = useRef({} as HTMLInputElement);\r\n    const checkDisorderedChallenges = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleAttributeChange = (attribute: string, value: boolean) => {\r\n        setFormState({\r\n            ...formState,\r\n            [attribute]: value\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        onAccept(formState);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth='sm'\r\n        >\r\n            <DialogTitle>Opciones del cuestionario</DialogTitle>\r\n            <Box className={classes.dialogContainer}>\r\n                <Grid\r\n                    container\r\n                    direction='column'\r\n                    spacing={2}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    inputRef={checkIgnoreTimeLimit}\r\n                                    name='checkIgnoreTimeLimit'\r\n                                    checked={formState.ignoreTimeLimit}\r\n                                    color='secondary'\r\n                                    onChange={() => { handleAttributeChange('ignoreTimeLimit', checkIgnoreTimeLimit.current.checked); }}\r\n                                />\r\n                            }\r\n                            label='Desactivar tiempo límite de las preguntas'\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    inputRef={checkAutoNextChallenge}\r\n                                    name='checkAutoNextChallenge'\r\n                                    checked={formState.autoNext}\r\n                                    color='secondary'\r\n                                    onChange={() => { handleAttributeChange('autoNext', checkAutoNextChallenge.current.checked); }}\r\n                                />\r\n                            }\r\n                            label='Avanzar automáticamente a la siguiente pregunta'\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    inputRef={checkDisorderedChallenges}\r\n                                    name='checkDisorderedChallenges'\r\n                                    checked={formState.disorderedChallenges}\r\n                                    color='secondary'\r\n                                    onChange={() => { handleAttributeChange('disorderedChallenges', checkDisorderedChallenges.current.checked); }}\r\n                                />\r\n                            }\r\n                            label='Desordenar preguntas'\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container justify='flex-end' spacing={1}>\r\n                            <Grid item>\r\n                                <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Box, Dialog, DialogTitle, makeStyles } from '@material-ui/core';\r\nimport { Project } from 'types';\r\nimport { ProjectForm } from 'components';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n}));\r\n\r\ninterface DialogProjectFormProps {\r\n    open: boolean,\r\n    project?: Project,\r\n    onAccept: (project: Project) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const DialogProjectForm: React.FC<DialogProjectFormProps> = (props: DialogProjectFormProps) => {\r\n    const {open, project, onAccept, onCancel} = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth='sm'\r\n        >\r\n            <DialogTitle>Proyecto</DialogTitle>\r\n            <Box className={classes.dialogContainer}>\r\n                <ProjectForm\r\n                    project={project}\r\n                    onAccept={onAccept}\r\n                    onCancel={onCancel}\r\n                />\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { useRef, useState } from 'react';\r\nimport { Button, Grid, TextField } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Project } from 'types';\r\n\r\ninterface FormState {\r\n    name: string,\r\n    description: string\r\n}\r\n\r\nconst initialState = (project?: Project): FormState => {\r\n    if (project != null) {\r\n        return {\r\n            name: project.name,\r\n            description: project.description || ''\r\n        };\r\n    }\r\n    return {\r\n        name: '',\r\n        description: ''\r\n    };\r\n};\r\n\r\ninterface ProjectFormProps {\r\n    project?: Project,\r\n    onAccept: (newProject: Project) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const ProjectForm: React.FC<ProjectFormProps> = (props: ProjectFormProps) => {\r\n    const { project, onAccept, onCancel } = props;\r\n\r\n    const [formState, setFormState] = useState<FormState>(initialState(project));\r\n\r\n    const inputName = useRef({} as HTMLInputElement);\r\n    const inputDescription = useRef({} as HTMLInputElement);\r\n\r\n    const handleNameChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            name: inputName.current.value\r\n        });\r\n    };\r\n\r\n    const handleDescriptionChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            description: inputDescription.current.value\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        const newProject: Project = project ?\r\n            {\r\n                ...project,\r\n                name: inputName.current.value,\r\n                description: inputDescription.current.value\r\n            }\r\n            : {\r\n                id: uuidv4(),\r\n                name: inputName.current.value,\r\n                description: inputDescription.current.value,\r\n                tests: []\r\n            };\r\n\r\n        onAccept(newProject);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            direction='column'\r\n            spacing={2}\r\n        >\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputName}\r\n                    label='Nombre'\r\n                    fullWidth\r\n                    value={formState.name}\r\n                    onInput={handleNameChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputDescription}\r\n                    label='Descripción'\r\n                    fullWidth\r\n                    value={formState.description}\r\n                    onInput={handleDescriptionChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid container justify='flex-end' spacing={1}>\r\n                    <Grid item>\r\n                        <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { ChangeEvent, Fragment, useState } from 'react';\r\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Button, Dialog, DialogTitle, Divider, Grid, Icon, IconButton, makeStyles, Snackbar, SnackbarContent, Typography } from '@material-ui/core';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Project, Test } from 'types';\r\nimport { DialogConfirm, JsonLoader, ProjectForm, TestList } from 'components';\r\nimport { isValidProject } from 'utils';\r\nimport { colors } from 'theme';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15)\r\n    },\r\n    secondaryHeading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        color: colors.secondary.main,\r\n        whiteSpace: 'nowrap',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis'\r\n    },\r\n    gridContainer: {\r\n        padding: '0px 10px'\r\n    },\r\n    gridItems: {\r\n        flexGrow: 1,\r\n    },\r\n    messageControl: {\r\n        backgroundColor: colors.error,\r\n        color: colors.font.errorContrast\r\n    },\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    }\r\n}));\r\n\r\ninterface ProjectListProps {\r\n    projects: Project[],\r\n    setProjects: (newProjects: Project[]) => void\r\n}\r\n\r\nexport const ProjectList: React.FC<ProjectListProps> = (props: ProjectListProps) => {\r\n    const { projects, setProjects } = props;\r\n\r\n    const history = useHistory();\r\n\r\n    const [expandedProject, setExpandedProject] = React.useState<string | false>(false);\r\n    const [preimportedProject, setPreimportedProject] = React.useState<Project | undefined>();\r\n    const [openOverwriteProject, setOpenOverwriteProject] = React.useState<boolean>(false);\r\n    const [openProjectForm, setOpenProjectForm] = useState<boolean>(false);\r\n    const [openRemoveProjectConfirm, setOpenRemoveProjectConfirm] = useState<boolean>(false);\r\n    const [selectedProject, setSelectedProject] = useState<Project>();\r\n    const [openMessage, setOpenMessage] = useState<boolean>(false);\r\n    const [messageText, setMessageText] = useState<string>('');\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleExpandChange = (project: Project, isExpanded: boolean) => {\r\n        setExpandedProject(isExpanded ? project.id : false);\r\n    };\r\n\r\n    const handleNewProjectClick = () => {\r\n        setOpenProjectForm(true);\r\n    };\r\n\r\n    const handleEditProjectClick = (project: Project) => {\r\n        setSelectedProject(project);\r\n        setOpenProjectForm(true);\r\n    };\r\n\r\n    const handleRemoveProjectClick = (project: Project) => {\r\n        setSelectedProject(project);\r\n        setOpenRemoveProjectConfirm(true);\r\n    };\r\n\r\n    const handleExportProjectClick = (project: Project) => {\r\n        const element = document.createElement('a');\r\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(project)));\r\n        element.setAttribute('download', project.name.replace(/ /g, '_'));\r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n        element.click();\r\n        document.body.removeChild(element);\r\n    };\r\n\r\n    const handleProjectFormAccept = (newProject: Project) => {\r\n        if (selectedProject != null) {\r\n            setProjects(projects.map((aProject: Project) => aProject.id === newProject.id ? newProject : aProject));\r\n        } else {\r\n            setProjects([\r\n                ...projects,\r\n                {\r\n                    ...newProject\r\n                }\r\n            ]);\r\n        }\r\n        setSelectedProject(undefined);\r\n        setOpenProjectForm(false);\r\n    };\r\n\r\n    const handleProjectFormCancel = () => {\r\n        setSelectedProject(undefined);\r\n        setOpenProjectForm(false);\r\n    };\r\n\r\n    const handleImportProject = (project: unknown) => {\r\n        const newProject = project as Project;\r\n        if (!isValidProject(newProject)) {\r\n            setMessageText('El proyecto es inválido');\r\n            setOpenMessage(true);\r\n        }\r\n        const exist = projects.find((aProject: Project) => aProject.id === newProject.id) != null;\r\n        if (!exist) {\r\n            setProjects([\r\n                ...projects,\r\n                {...newProject}\r\n            ]);\r\n        } else {\r\n            setPreimportedProject(newProject);\r\n            setOpenOverwriteProject(true);\r\n        }\r\n    };\r\n\r\n    const handleConfirmOverwriteProject = () => {\r\n        if (preimportedProject) {\r\n            setProjects(\r\n                projects.map((aProject: Project) => aProject.id === preimportedProject.id ? preimportedProject : aProject)\r\n            );\r\n            setPreimportedProject(undefined);\r\n        }\r\n        setOpenOverwriteProject(false);\r\n    };\r\n\r\n    const handleRefuseOverwriteProject = () => {\r\n        if (preimportedProject) {\r\n            const newProject = {\r\n                ...preimportedProject,\r\n                id: uuidv4(),\r\n                name: `Copia ${preimportedProject?.name}`\r\n            };\r\n            setProjects([\r\n                ...projects,\r\n                {...newProject}\r\n            ]);\r\n            setPreimportedProject(undefined);\r\n        }\r\n        setOpenOverwriteProject(false);\r\n    };\r\n\r\n    const handleImportProjectError = () => {\r\n        setMessageText('Se produjo un error en la importación');\r\n        setOpenMessage(true);\r\n    };\r\n\r\n    const handleConfirmRemoveProject = () => {\r\n        if (selectedProject != null) {\r\n            setProjects(projects.filter((aProject: Project) => aProject.id !== selectedProject.id));\r\n        }\r\n        setOpenRemoveProjectConfirm(false);\r\n    };\r\n\r\n    const handleRefuseRemoveProject = () => {\r\n        setOpenRemoveProjectConfirm(false);\r\n    };\r\n\r\n    const handleCreateTest = (projectId: string, test: Test, openDesign: boolean) => {\r\n        const theProject = projects.find((aProject: Project) => aProject.id === projectId);\r\n        const updating = theProject != null && theProject.tests.some((aTest: Test) => aTest.id === test.id);\r\n\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return {...aProject};\r\n            }\r\n            if (updating) {\r\n                const updatedTests = aProject.tests.map((aTest: Test) => aTest.id === test.id ? {...test} : {...aTest});\r\n                return {\r\n                    ...aProject,\r\n                    tests: [...updatedTests]\r\n                };\r\n            }\r\n            return {\r\n                ...aProject,\r\n                tests: [...aProject.tests, test]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        if (!updating && openDesign) {\r\n            history.push(`/designer/${projectId}/${test.id}`);\r\n        }\r\n    };\r\n\r\n    const handleDeleteTest = (projectId: string, test: Test) => {\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return {...aProject};\r\n            }\r\n            const updatedTests = aProject.tests.filter((aTest: Test) => aTest.id !== test.id);\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n    };\r\n\r\n    const handleMessageClose = () => {\r\n        setOpenMessage(false);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <DialogConfirm\r\n                open={openOverwriteProject}\r\n                text=\"El proyecto ya existe. ¿Qué deseas hacer?\"\r\n                acceptButtonText=\"Sobreescribir proyecto\"\r\n                cancelButtonText=\"Crear nueva copia\"\r\n                width=\"sm\"\r\n                onConfirm={handleConfirmOverwriteProject}\r\n                onRefuse={handleRefuseOverwriteProject}\r\n            />\r\n            <Dialog\r\n                open={openProjectForm}\r\n                fullWidth\r\n                maxWidth='sm'\r\n            >\r\n                <DialogTitle>Proyecto</DialogTitle>\r\n                <Box className={classes.dialogContainer}>\r\n                    <ProjectForm\r\n                        project={selectedProject}\r\n                        onAccept={handleProjectFormAccept}\r\n                        onCancel={handleProjectFormCancel}\r\n                    />\r\n                </Box>\r\n            </Dialog>\r\n            <DialogConfirm\r\n                open={openRemoveProjectConfirm}\r\n                text='¿Seguro que deseas eliminar el proyecto?'\r\n                width='xs'\r\n                onConfirm={handleConfirmRemoveProject}\r\n                onRefuse={handleRefuseRemoveProject}\r\n            />\r\n            <Snackbar\r\n                open={openMessage}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                autoHideDuration={3000}\r\n                onClose={handleMessageClose}\r\n            >\r\n                <SnackbarContent\r\n                    message={\r\n                        <Grid container spacing={4}>\r\n                            <Grid item xs={1}>\r\n                                <Icon>error</Icon>\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <Typography>{messageText}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    }\r\n                    className={classes.messageControl}\r\n                />\r\n            </Snackbar>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <Grid container direction='row' justify='center' alignItems='center' spacing={2} className={classes.gridContainer}>\r\n                        <Grid item xs={6}>\r\n                            <Typography variant='h6'>\r\n                                Proyectos\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6} container justify='flex-end'>\r\n                            <Grid item xs={6} sm={4} container justify='flex-end'>\r\n                                <Button\r\n                                    style={{ color: colors.primary.dark }}\r\n                                    onClick={handleNewProjectClick}\r\n                                >\r\n                                    Nuevo proyecto\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={6} sm={4} container justify='flex-end'>\r\n                                <JsonLoader\r\n                                    label=\"Importar proyecto\"\r\n                                    onDataLoaded={handleImportProject}\r\n                                    onError={handleImportProjectError}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    {\r\n                        projects.map((aProject: Project) => (\r\n                            <Accordion\r\n                                key={aProject.id}\r\n                                expanded={expandedProject === aProject.id}\r\n                                onChange={ (event: ChangeEvent<unknown>, isExpanded: boolean) => {\r\n                                    handleExpandChange(aProject, isExpanded);\r\n                                }}\r\n                            >\r\n                                <AccordionSummary title={aProject.description}>\r\n                                    <Grid container justify='space-between' alignItems='center'>\r\n                                        <Grid item xs={3}>\r\n                                            <Typography className={classes.heading}>{aProject.name}</Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={3}>\r\n                                            <Typography className={classes.secondaryHeading}>\r\n                                                {`${aProject.tests.length} cuestionario${aProject.tests.length !== 1 ? 's' : ''}`}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={6} container justify='flex-end'>\r\n                                            <IconButton\r\n                                                title='Descargar proyecto'\r\n                                                color='primary'\r\n                                                onClick={(evt) => {\r\n                                                    evt.stopPropagation();\r\n                                                    handleExportProjectClick(aProject);\r\n                                                }}\r\n                                            >\r\n                                                <Icon>download</Icon>\r\n                                            </IconButton>\r\n                                            {\r\n                                                <IconButton\r\n                                                    title='Editar proyecto'\r\n                                                    color='primary'\r\n                                                    onClick={(evt) => {\r\n                                                        evt.stopPropagation();\r\n                                                        handleEditProjectClick(aProject);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon>edit</Icon>\r\n                                                </IconButton>\r\n                                            }\r\n                                            {\r\n                                                <IconButton\r\n                                                    title='Eliminar proyecto'\r\n                                                    onClick={(evt) => {\r\n                                                        evt.stopPropagation();\r\n                                                        handleRemoveProjectClick(aProject);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon>delete</Icon>\r\n                                                </IconButton>\r\n                                            }\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </AccordionSummary>\r\n                                <AccordionDetails>\r\n                                    <TestList\r\n                                        project={aProject}\r\n                                        onCreateTest={handleCreateTest}\r\n                                        onDeleteTest={handleDeleteTest}\r\n                                    />\r\n                                </AccordionDetails>\r\n                            </Accordion>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useRef, useState } from 'react';\r\nimport { Button, Grid, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Test } from 'types';\r\nimport { Language } from 'enums';\r\n\r\ninterface TestState {\r\n    name: string,\r\n    description: string,\r\n    language: Language\r\n}\r\n\r\nconst initialState = (test?: Test): TestState => {\r\n    if (test != null) {\r\n        return {\r\n            name: test.name,\r\n            description: test.description || '',\r\n            language: test.language || Language.Es\r\n        };\r\n    }\r\n    return {\r\n        name: '',\r\n        description: '',\r\n        language: Language.Es\r\n    };\r\n};\r\n\r\ninterface TestFormProps {\r\n    test?: Test,\r\n    onAccept: (newTest: Test) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const TestForm: React.FC<TestFormProps> = (props: TestFormProps) => {\r\n    const { test, onAccept, onCancel } = props;\r\n\r\n    const [formState, setFormState] = useState<TestState>(initialState(test));\r\n\r\n    const inputName = useRef({} as HTMLInputElement);\r\n    const inputDescription = useRef({} as HTMLInputElement);\r\n\r\n    const handleNameChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            name: inputName.current.value\r\n        });\r\n    };\r\n\r\n    const handleDescriptionChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            description: inputDescription.current.value\r\n        });\r\n    };\r\n\r\n    const handleLanguageChange = (evt: React.ChangeEvent<{ name?: string | undefined, value: unknown}>) => {\r\n        const updatedLanguage = evt.target.value === Language.Es.toString() ? Language.Es : Language.En;\r\n        setFormState({\r\n            ...formState,\r\n            language: updatedLanguage\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        const newTest: Test = test ?\r\n            {\r\n                ...test,\r\n                name: formState.name,\r\n                description: formState.description,\r\n                language: formState.language\r\n            }\r\n            : {\r\n                id: uuidv4(),\r\n                name: formState.name,\r\n                description: formState.description,\r\n                language: formState.language,\r\n                challenges: []\r\n            };\r\n\r\n        onAccept(newTest);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            direction='column'\r\n            spacing={4}\r\n        >\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputName}\r\n                    id='newTestNameInput'\r\n                    label='Nombre'\r\n                    fullWidth\r\n                    value={formState.name}\r\n                    onInput={handleNameChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputDescription}\r\n                    id='newTestNameInput'\r\n                    label='Descripción'\r\n                    fullWidth\r\n                    value={formState.description}\r\n                    onInput={handleDescriptionChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <InputLabel shrink id=\"label-language\">\r\n                    Idioma\r\n                </InputLabel>\r\n                <Select\r\n                    labelId=\"label-language\"\r\n                    id='newTestLanguageInput'\r\n                    label='Idioma'\r\n                    fullWidth\r\n                    value={formState.language.toString()}\r\n                    onChange={handleLanguageChange}\r\n                >\r\n                    <MenuItem value={Language.Es.toString()}>Español</MenuItem>\r\n                    <MenuItem value={Language.En.toString()}>Inglés</MenuItem>\r\n                </Select>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid container justify='flex-end' spacing={1}>\r\n                    <Grid item>\r\n                        <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { Fragment, useState } from 'react';\r\nimport { Box, Button, Dialog, DialogTitle, Divider, Grid, Icon, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText, makeStyles, Menu, MenuItem, Snackbar, SnackbarContent, Typography } from '@material-ui/core';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { colors } from 'theme';\r\nimport { Project, Test, TestOptions } from 'types';\r\nimport { isValidTest } from 'utils';\r\nimport { DialogConfirm, DialogTestOptions, JsonLoader, TestForm } from 'components';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    fullWidth: {\r\n        width: '100%',\r\n        [theme.breakpoints.down('xs')]: {\r\n            width: '50px'\r\n        }\r\n    },\r\n    listItemSecondaryAction: {\r\n        visibility: 'hidden'\r\n    },\r\n    listItem: {\r\n        '&:hover $listItemSecondaryAction': {\r\n            visibility: 'inherit'\r\n        }\r\n    },\r\n    bottomContainer: {\r\n        marginTop: '10px'\r\n    },\r\n    play: {\r\n        color: colors.action\r\n    },\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n    messageControl: {\r\n        backgroundColor: colors.error,\r\n        color: colors.font.errorContrast\r\n    }\r\n}));\r\n\r\ninterface PlayOptionsState {\r\n    projectId?: string,\r\n    testId?: string,\r\n    openOptions: boolean\r\n}\r\ninterface TestListProps {\r\n    project: Project,\r\n    onCreateTest: (projectId: string, test: Test, openDesign: boolean) => void,\r\n    onDeleteTest: (projectId: string, test: Test) => void\r\n}\r\n\r\nexport const TestList: React.FC<TestListProps> = (props: TestListProps) => {\r\n    const { project, onCreateTest, onDeleteTest } = props;\r\n\r\n    const history = useHistory();\r\n\r\n    const [selectedTest, setSelectedTest] = React.useState<Test | undefined>();\r\n    const [preimportedTest, setPreimportedTest] = React.useState<Test | undefined>();\r\n    const [anchorElEdit, setAnchorElEdit] = React.useState<Element | null>(null);\r\n    const [openOverwriteTest, setOpenOverwriteTest] = React.useState<boolean>(false);\r\n    const [openTestForm, setOpenTestForm] = useState<boolean>(false);\r\n    const [openRemoveTestConfirm, setOpenRemoveTestConfirm] = useState<boolean>(false);\r\n    const [playOptionsState, setPlayOptionsState] = useState<PlayOptionsState>();\r\n    const [openMessage, setOpenMessage] = useState<boolean>(false);\r\n    const [messageText, setMessageText] = useState<string>('');\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleCreateTestClick = () => {\r\n        setOpenTestForm(true);\r\n    };\r\n\r\n    const handleImportTest = (test: unknown) => {\r\n        const newTest = test as Test;\r\n        if (!isValidTest(newTest)) {\r\n            setMessageText('El cuestionario es inválido');\r\n            setOpenMessage(true);\r\n        }\r\n        const exist = project.tests.find((aTest: Test) => aTest.id === newTest.id) != null;\r\n        if (!exist) {\r\n            onCreateTest(project.id, newTest, false);\r\n        } else {\r\n            setPreimportedTest(newTest);\r\n            setOpenOverwriteTest(true);\r\n        }\r\n    };\r\n\r\n    const handleConfirmOverwriteTest = () => {\r\n        if (preimportedTest) {\r\n            onCreateTest(project.id, preimportedTest, false);\r\n            setPreimportedTest(undefined);\r\n        }\r\n        setOpenOverwriteTest(false);\r\n    };\r\n\r\n    const handleRefuseOverwriteTest = () => {\r\n        if (preimportedTest) {\r\n            const newTest = {\r\n                ...preimportedTest,\r\n                id: uuidv4(),\r\n                name: `Copia ${preimportedTest?.name}`\r\n            };\r\n            onCreateTest(project.id, newTest, false);\r\n            setPreimportedTest(undefined);\r\n        }\r\n        setOpenOverwriteTest(false);\r\n    };\r\n\r\n    const handleImportTestError = () => {\r\n        setMessageText('Se produjo un error en la importación');\r\n        setOpenMessage(true);\r\n    };\r\n\r\n    const handleTestFormAccept = (newTest: Test) => {\r\n        onCreateTest(project.id, newTest, true);\r\n        setSelectedTest(undefined);\r\n        setOpenTestForm(false);\r\n    };\r\n\r\n    const handleTestFormCancel = () => {\r\n        setSelectedTest(undefined);\r\n        setOpenTestForm(false);\r\n    };\r\n\r\n    const handleEditClick = (evt: React.MouseEvent<HTMLButtonElement>, test: Test) => {\r\n        setSelectedTest(test);\r\n        setAnchorElEdit(evt.currentTarget);\r\n    };\r\n\r\n    const handleCloseEditMenu = () => {\r\n        setAnchorElEdit(null);\r\n    };\r\n\r\n    const handleEditDataClick = () => {\r\n        setAnchorElEdit(null);\r\n        setOpenTestForm(true);\r\n    };\r\n\r\n    const handleExportTestClick = (test: Test) => {\r\n        const element = document.createElement('a');\r\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(test)));\r\n        element.setAttribute('download', test.name.replace(/ /g, '_'));\r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n        element.click();\r\n        document.body.removeChild(element);\r\n    };\r\n\r\n    const handleRemoveTestClick = (test: Test) => {\r\n        setSelectedTest(test);\r\n        setOpenRemoveTestConfirm(true);\r\n    };\r\n\r\n    const handleConfirmRemoveTest = () => {\r\n        if (selectedTest != null) {\r\n            onDeleteTest(project.id, selectedTest);\r\n        }\r\n        setSelectedTest(undefined);\r\n        setOpenRemoveTestConfirm(false);\r\n    };\r\n\r\n    const handleRefuseRemoveTest = () => {\r\n        setSelectedTest(undefined);\r\n        setOpenRemoveTestConfirm(false);\r\n    };\r\n\r\n    const handlePlayClick = (projectId: string, testId: string) => {\r\n        setPlayOptionsState({\r\n            projectId,\r\n            testId,\r\n            openOptions: true\r\n        });\r\n    };\r\n\r\n    const handleAcceptPlayOptions = (testOptions: TestOptions) => {\r\n        history.push(\r\n            `/play/${playOptionsState?.projectId}/${playOptionsState?.testId}?` +\r\n            `ignoreTimeLimit=${testOptions.ignoreTimeLimit}&` +\r\n            `autoNext=${testOptions.autoNext}&` +\r\n            `disorderedChallenges=${testOptions.disorderedChallenges}`, playOptionsState);\r\n        setPlayOptionsState({\r\n            openOptions: false\r\n        });\r\n    };\r\n\r\n    const handleCancelPlayOptions = () => {\r\n        setPlayOptionsState({\r\n            openOptions: false\r\n        });\r\n    };\r\n\r\n    const handleMessageClose = () => {\r\n        setOpenMessage(false);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Menu\r\n                id=\"addNewMenu\"\r\n                anchorEl={anchorElEdit}\r\n                keepMounted\r\n                open={Boolean(anchorElEdit)}\r\n                onClose={handleCloseEditMenu}\r\n            >\r\n                <MenuItem onClick={handleEditDataClick}>\r\n                    <Typography variant=\"subtitle2\">\r\n                        Editar datos generales\r\n                    </Typography>\r\n                </MenuItem>\r\n                <MenuItem component={Link} to={`/designer/${project.id}/${selectedTest?.id}`}>\r\n                    <Typography variant=\"subtitle2\">\r\n                        Editar preguntas\r\n                    </Typography>\r\n                </MenuItem>\r\n            </Menu>\r\n            <DialogConfirm\r\n                open={openOverwriteTest}\r\n                text=\"El cuestionario ya existe en este proyecto. ¿Qué deseas hacer?\"\r\n                acceptButtonText=\"Sobreescribir cuestionario\"\r\n                cancelButtonText=\"Crear nueva copia\"\r\n                width=\"sm\"\r\n                onConfirm={handleConfirmOverwriteTest}\r\n                onRefuse={handleRefuseOverwriteTest}\r\n            />\r\n            <Dialog\r\n                open={openTestForm}\r\n                fullWidth\r\n                maxWidth='sm'\r\n            >\r\n                <DialogTitle>Cuestionario</DialogTitle>\r\n                <Box className={classes.dialogContainer}>\r\n                    <TestForm\r\n                        test={selectedTest}\r\n                        onAccept={handleTestFormAccept}\r\n                        onCancel={handleTestFormCancel}\r\n                    />\r\n                </Box>\r\n            </Dialog>\r\n            <DialogConfirm\r\n                open={openRemoveTestConfirm}\r\n                text='¿Seguro que deseas eliminar el proyecto?'\r\n                width='xs'\r\n                onConfirm={handleConfirmRemoveTest}\r\n                onRefuse={handleRefuseRemoveTest}\r\n            />\r\n            <Snackbar\r\n                open={openMessage}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                autoHideDuration={3000}\r\n                onClose={handleMessageClose}\r\n            >\r\n                <SnackbarContent\r\n                    message={\r\n                        <Grid container spacing={4}>\r\n                            <Grid item xs={1}>\r\n                                <Icon>error</Icon>\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <Typography>{messageText}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    }\r\n                    className={classes.messageControl}\r\n                />\r\n            </Snackbar>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    {\r\n                        project.tests.length === 0\r\n                        && <Typography>No hay cuestionarios</Typography>\r\n                    }\r\n                    {\r\n                        project.tests.length > 0\r\n                        && <List>\r\n                            {\r\n                                project.tests.map((aTest: Test) => (\r\n                                    <Fragment key={`fragment_${aTest.id}`}>\r\n                                        <ListItem\r\n                                            button\r\n                                            key={aTest.id}\r\n                                            alignItems='flex-start'\r\n                                            classes={{ container: classes.listItem }}\r\n                                        >\r\n                                            <Grid container>\r\n                                                <Grid item xs={12} sm={6}>\r\n                                                    <ListItemText\r\n                                                        primary={\r\n                                                            aTest.name\r\n                                                        }\r\n                                                        secondary={\r\n                                                            <Typography\r\n                                                                component='span'\r\n                                                                variant='body2'\r\n                                                                className={classes.inline}\r\n                                                                color='textPrimary'\r\n                                                            >\r\n                                                                {aTest.description}\r\n                                                            </Typography>\r\n                                                        }\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={12} sm={2}>\r\n                                                    <ListItemText\r\n                                                        secondary={`${aTest.challenges.length} pregunta${aTest.challenges.length !== 1 ? 's' : ''}`}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <ListItemSecondaryAction className={classes.listItemSecondaryAction}>\r\n                                                <Grid container className={classes.fullWidth}>\r\n                                                    <Grid item xs={6} sm={3}>\r\n                                                        {\r\n                                                            isValidTest(aTest) ? (\r\n                                                                <IconButton title='Jugar!' onClick={() => { handlePlayClick(project.id, aTest.id); }}>\r\n                                                                    <Icon className={classes.play}>play_circle_filled</Icon>\r\n                                                                </IconButton>\r\n                                                            ) : (\r\n                                                                <IconButton title='Errores en el cuestionario'>\r\n                                                                    <Icon color='error'>error</Icon>\r\n                                                                </IconButton>\r\n                                                            )\r\n                                                        }\r\n                                                    </Grid>\r\n                                                    <Grid item xs={6} sm={3}>\r\n                                                        <IconButton title='Editar cuestionario' onClick={(evt: React.MouseEvent<HTMLButtonElement>) => {\r\n                                                            evt.stopPropagation();\r\n                                                            handleEditClick(evt, aTest);\r\n                                                        }}>\r\n                                                            <Icon color='primary'>edit</Icon>\r\n                                                        </IconButton>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={6} sm={3}>\r\n                                                        <IconButton title='Descargar cuestionario' onClick={(evt) => {\r\n                                                            evt.stopPropagation();\r\n                                                            handleExportTestClick(aTest);\r\n                                                        }}>\r\n                                                            <Icon>download</Icon>\r\n                                                        </IconButton>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={6} sm={3}>\r\n                                                        <IconButton title='Eliminar cuestionario' onClick={(evt) => {\r\n                                                            evt.stopPropagation();\r\n                                                            handleRemoveTestClick(aTest);\r\n                                                        }}>\r\n                                                            <Icon>delete</Icon>\r\n                                                        </IconButton>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </ListItemSecondaryAction>\r\n                                        </ListItem>\r\n                                        <Divider variant='inset' component='li' />\r\n                                    </Fragment>\r\n                                ))\r\n                            }\r\n                        </List>\r\n                    }\r\n                    <Grid item xs={12} className={classes.bottomContainer}>\r\n                        <Grid container justify='flex-end' spacing={1}>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant='contained'\r\n                                    color='primary'\r\n                                    onClick={handleCreateTestClick}\r\n                                >\r\n                                    Nuevo cuestionario\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <JsonLoader\r\n                                    label=\"Importar cuestionario\"\r\n                                    onDataLoaded={handleImportTest}\r\n                                    onError={handleImportTestError}\r\n                                />\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            {\r\n                playOptionsState && (\r\n                    <DialogTestOptions\r\n                        open={playOptionsState.openOptions}\r\n                        onAccept={handleAcceptPlayOptions}\r\n                        onCancel={handleCancelPlayOptions}\r\n                    />\r\n                )\r\n            }\r\n        </Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { MatchChallenge, MatchChallengeConfig, MatchChallengePair } from 'types';\r\nimport { ComponentMode } from 'enums';\r\nimport { MatchChallenger, MatchConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface MatchChallengeDesignerProps {\r\n    challenge: MatchChallenge,\r\n    onChallengeChange: (challenge: MatchChallenge) => void\r\n}\r\n\r\nexport const MatchChallengeDesigner: React.FC<MatchChallengeDesignerProps> = (\r\n    props: MatchChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustPairs = (pairsCount: number): MatchChallengePair[] => {\r\n        let pairs = [...challenge.pairs];\r\n        if (pairsCount > pairs.length) {\r\n            const newPairs = Array.from(Array(pairsCount - pairs.length))\r\n                .map(() => ({ source: '', destination: ''}));\r\n            pairs = [...pairs, ...newPairs];\r\n        } else if (pairsCount < pairs.length) {\r\n            pairs = pairs.slice(0, pairsCount);\r\n        }\r\n        return pairs;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: MatchChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: MatchChallengeConfig) => {\r\n        const pairs = readjustPairs(config.pairsCount);\r\n        const updatedChallenge: MatchChallenge = {\r\n            ...challenge,\r\n            pairs,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <MatchChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <MatchConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport Xarrow from 'react-xarrows/lib';\r\nimport useSound from 'use-sound';\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { Challenge, ChallengeOptions, MatchChallenge, MatchChallengePair, MatchItem } from 'types';\r\nimport { ComponentMode, MatchElement } from 'enums';\r\nimport { BasicChallengeTemplate, MatchDestination, MatchSource } from 'components';\r\nimport { colors } from 'theme';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\ninterface MatchAnswer {\r\n    source: MatchItem,\r\n    destination: MatchItem\r\n}\r\n\r\nconst reorderItems = (texts: string[], mode: ComponentMode): string[] => {\r\n    let list: string[] = [...texts];\r\n    if (mode === ComponentMode.Play) {\r\n        list = list.sort(() => Math.random() - 0.5);\r\n    }\r\n    return list;\r\n};\r\n\r\ninterface MatchChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: MatchChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: MatchChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const MatchChallenger: React.FC<MatchChallengerProps> = (props: MatchChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [sourceItems, setSourceItems] = useState<string[]>(reorderItems(\r\n        challenge.pairs.map((aPair: MatchChallengePair) => aPair.source),\r\n        mode\r\n    ));\r\n    const [destinationItems, setDestinationItems] = useState<string[]>(reorderItems(\r\n        challenge.pairs.map((aPair: MatchChallengePair) => aPair.destination),\r\n        mode\r\n    ));\r\n\r\n    const [matchState, setMatchState] = useState<MatchAnswer[]>([]);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setSourceItems(reorderItems(\r\n            challenge.pairs.map((aPair: MatchChallengePair) => aPair.source),\r\n            mode\r\n        ));\r\n        setDestinationItems(reorderItems(\r\n            challenge.pairs.map((aPair: MatchChallengePair) => aPair.destination),\r\n            mode\r\n        ));\r\n    }, [challenge.pairs]);\r\n\r\n    const handleChallengeChange = (newChallenge: Challenge) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                ...(newChallenge as MatchChallenge)\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const handleTextChange = (newText: string, element: MatchElement, pairIdx: number) => {\r\n        if (onChallengeChange) {\r\n            const pairAttribute = element === MatchElement.Source ? 'source' : 'destination';\r\n            const newChallenge: MatchChallenge = {\r\n                ...challenge,\r\n                pairs: challenge.pairs.map((aPair: MatchChallengePair, idx: number) => (\r\n                    idx === pairIdx ? {\r\n                        ...aPair,\r\n                        [pairAttribute]: newText\r\n                    } : {...aPair}\r\n                ))\r\n            };\r\n            onChallengeChange(newChallenge);\r\n        }\r\n    };\r\n\r\n    const handleDrop = (source: MatchItem, destination: MatchItem) => {\r\n        const newState = matchState.filter((anAnswer: MatchAnswer) => (\r\n            anAnswer.source.index !== source.index\r\n            && anAnswer.destination.index !== destination.index\r\n        ));\r\n        newState.push({source, destination});\r\n        setMatchState(newState);\r\n    };\r\n\r\n    const completed = () => matchState.length === challenge.pairs.length;\r\n\r\n    const handleCheckClick = () => {\r\n        const correct = challenge.pairs.reduce(\r\n            (accPairs: boolean, currentPair: MatchChallengePair) => {\r\n                const idxAnswer = matchState.findIndex((anAnswer: MatchAnswer) => (\r\n                    anAnswer.source.text === currentPair.source\r\n                    && anAnswer.destination.text === currentPair.destination\r\n                ));\r\n                return accPairs && idxAnswer >= 0;\r\n            },\r\n            true\r\n        );\r\n        showResult(correct);\r\n    };\r\n\r\n    return (\r\n        <BasicChallengeTemplate\r\n            mode={mode}\r\n            challenge={challenge}\r\n            options={options}\r\n            onChallengeChange={handleChallengeChange}\r\n            stopTime={stopTimer}\r\n            onTimeUp={handlerTimeUp}\r\n            showCheck={true}\r\n            disabledCheck={mode === ComponentMode.Design || !completed()}\r\n            onCheckClick={handleCheckClick}\r\n            centralComponent={\r\n                <Grid container xs={12} className={classes.fullHeight}>\r\n                    <DndProvider backend={HTML5Backend}>\r\n                        <Grid item xs={5} container direction=\"column\" justify=\"space-around\" alignItems=\"center\">\r\n                            {\r\n                                sourceItems.map((aSource: string, sourceIdx: number) => (\r\n                                    <MatchSource\r\n                                        key={`source_${sourceIdx}`}\r\n                                        mode={mode}\r\n                                        item={{text: aSource, index: sourceIdx}}\r\n                                        fontSize={challenge.config.answerFontSize}\r\n                                        arrowNode={(\r\n                                            <div\r\n                                                id={`an_s_${sourceIdx}`}\r\n                                                style={{\r\n                                                    width: '20px',\r\n                                                    height: '20px',\r\n                                                    border: `solid 1px ${colors.primary.main}`,\r\n                                                    borderRadius: '20px'\r\n                                                }}\r\n                                            />\r\n                                        )}\r\n                                        onTextChange={\r\n                                            (newText: string) => handleTextChange(\r\n                                                newText,\r\n                                                MatchElement.Source,\r\n                                                sourceIdx\r\n                                            )\r\n                                        }\r\n                                    />\r\n                                ))\r\n                            }\r\n                        </Grid>\r\n                        <Grid item xs={2} />\r\n                        <Grid item xs={5} container direction=\"column\" justify=\"space-around\" alignItems=\"center\">\r\n                            {\r\n                                destinationItems.map((aDestination: string, destinationIdx: number) => (\r\n                                    <MatchDestination\r\n                                        key={`destination_${destinationIdx}`}\r\n                                        mode={mode}\r\n                                        item={{text: aDestination, index: destinationIdx}}\r\n                                        fontSize={challenge.config.answerFontSize}\r\n                                        arrowNode={(\r\n                                            <div\r\n                                                id={`an_d_${destinationIdx}`}\r\n                                                style={{\r\n                                                    width: '20px',\r\n                                                    height: '20px',\r\n                                                    border: `solid 1px ${colors.primary.main}`,\r\n                                                    borderRadius: '20px'\r\n                                                }}\r\n                                            />\r\n                                        )}\r\n                                        onTextChange={\r\n                                            (newText: string) => handleTextChange(\r\n                                                newText,\r\n                                                MatchElement.Destination,\r\n                                                destinationIdx\r\n                                            )\r\n                                        }\r\n                                        onDrop={(source: MatchItem) => {\r\n                                            handleDrop(source, {text: aDestination, index: destinationIdx});\r\n                                        }}\r\n                                    />\r\n                                ))\r\n                            }\r\n                            {\r\n                                mode === ComponentMode.Design ? (\r\n                                    sourceItems.map((aSource: string, idx: number) => (\r\n                                        <Xarrow\r\n                                            key={`designArrow_${idx}`}\r\n                                            start={`an_s_${idx}`}\r\n                                            end={`an_d_${(idx)}`}\r\n                                            curveness={0}\r\n                                        />\r\n                                    ))\r\n                                ) : (\r\n                                    matchState.map((anAnswer: MatchAnswer, idx: number) => (\r\n                                        <Xarrow\r\n                                            key={`playArrow_${idx}`}\r\n                                            start={`an_s_${anAnswer.source.index}`}\r\n                                            end={`an_d_${(anAnswer.destination.index)}`}\r\n                                            curveness={0}\r\n                                            color={\r\n                                                highlightResults ? (\r\n                                                    challenge.pairs.findIndex((aPair: MatchChallengePair) => (\r\n                                                        aPair.source === anAnswer.source.text\r\n                                                        && aPair.destination === anAnswer.destination.text\r\n                                                    )) >= 0 ? '#4caf50' : '#f44336'\r\n                                                ) : undefined\r\n                                            }\r\n                                        />\r\n                                    ))\r\n                                )\r\n                            }\r\n                        </Grid>\r\n                    </DndProvider>\r\n                </Grid>\r\n            }\r\n        />\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ChallengeConfig, MatchChallengeConfig } from 'types';\r\nimport { ChallengeConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface MatchConfiguratorProps {\r\n    config: MatchChallengeConfig,\r\n    onConfigChange?: (config: MatchChallengeConfig) => void\r\n}\r\n\r\nexport const MatchConfigurator: React.FC<MatchConfiguratorProps> = (props: MatchConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<MatchChallengeConfig>(config);\r\n\r\n    const inputAnswerFontSize = useRef({} as HTMLInputElement);\r\n    const inputPairsCount = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    const handleBaseConfigChange = (newBaseConfig: ChallengeConfig) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            ...newBaseConfig\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <ChallengeConfigurator\r\n                    config={config}\r\n                    onConfigChange={handleBaseConfigChange}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputAnswerFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de las respuestas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.answerFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('answerFontSize', parseInt(inputAnswerFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputPairsCount}\r\n                    type='number'\r\n                    label='Número de parejas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.pairsCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('pairsCount', parseInt(inputPairsCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, CardContent, Grid, TextField, Typography } from '@material-ui/core';\r\nimport { useDrop } from 'react-dnd';\r\nimport { MatchItem } from 'types';\r\nimport { ComponentMode } from 'enums';\r\n\r\ninterface MatchDestinationProps {\r\n    mode: ComponentMode,\r\n    item: MatchItem,\r\n    fontSize: number,\r\n    arrowNode: React.ReactNode,\r\n    onTextChange?: (newText: string) => void,\r\n    onDrop?: (text: MatchItem) => void\r\n}\r\n\r\nexport const MatchDestination: React.FC<MatchDestinationProps> = (props: MatchDestinationProps) => {\r\n    const { mode, item, fontSize, arrowNode, onTextChange, onDrop } = props;\r\n\r\n    const [textValue, setTextValue] = useState<string>(item.text);\r\n\r\n    const inputText = useRef({} as HTMLInputElement);\r\n\r\n    useEffect(() => {\r\n        setTextValue(item.text);\r\n    }, [item.text]);\r\n\r\n    const handleTextChange = () => {\r\n        setTextValue(inputText.current.value);\r\n        if (onTextChange) {\r\n            onTextChange(inputText.current.value);\r\n        }\r\n    };\r\n\r\n    const handleDrop = (item: any) => {\r\n        if (onDrop) {\r\n            onDrop(item);\r\n        }\r\n    };\r\n\r\n    const [/* { isOver, canDrop } */, drop] = useDrop({\r\n        accept: 'dnd',\r\n        drop: handleDrop,\r\n        collect: (monitor: { isOver: () => boolean, canDrop: () => boolean }) => {\r\n            return ({\r\n                isOver: monitor.isOver(),\r\n                canDrop: monitor.canDrop()\r\n            });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <Card style={{width: '100%'}}>\r\n            <CardContent>\r\n                <Grid container alignItems=\"center\">\r\n                    <Grid item xs={1} container justify=\"center\">\r\n                        <div ref={drop}>\r\n                            {arrowNode}\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs container justify=\"center\">\r\n                        {\r\n                            mode === ComponentMode.Design ? (\r\n                                <TextField\r\n                                    inputRef={inputText}\r\n                                    value={textValue}\r\n                                    onInput={handleTextChange}\r\n                                    style={{width: '95%'}}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            fontSize: `${fontSize ? fontSize : 22}px`,\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            ) : (\r\n                                <Typography>\r\n                                    {textValue}\r\n                                </Typography>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, CardContent, Grid, TextField, Typography } from '@material-ui/core';\r\nimport { useDrag } from 'react-dnd';\r\nimport { MatchItem } from 'types';\r\nimport { ComponentMode } from 'enums';\r\n\r\ninterface MatchSourceProps {\r\n    mode: ComponentMode,\r\n    item: MatchItem,\r\n    fontSize: number,\r\n    arrowNode: React.ReactNode,\r\n    onTextChange?: (newText: string) => void\r\n}\r\n\r\nexport const MatchSource: React.FC<MatchSourceProps> = (props: MatchSourceProps) => {\r\n    const { mode, item, fontSize, arrowNode, onTextChange } = props;\r\n\r\n    const [textValue, setTextValue] = useState<string>(item.text);\r\n\r\n    const inputText = useRef({} as HTMLInputElement);\r\n\r\n    useEffect(() => {\r\n        setTextValue(item.text);\r\n    }, [item]);\r\n\r\n    const handleTextChange = () => {\r\n        setTextValue(inputText.current.value);\r\n        if (onTextChange) {\r\n            onTextChange(inputText.current.value);\r\n        }\r\n    };\r\n\r\n    const [/* { opacity } */, drag] = useDrag(\r\n        () => ({\r\n            type: 'dnd',\r\n            item: { ...item },\r\n            collect: (monitor) => ({\r\n                opacity: monitor.isDragging() ? 0.4 : 1,\r\n            }),\r\n        }),\r\n        [item],\r\n    );\r\n\r\n    return (\r\n        <Card style={{width: '100%'}}>\r\n            <CardContent>\r\n                <Grid container alignItems=\"center\">\r\n                    <Grid item xs container justify=\"center\">\r\n                        {\r\n                            mode === ComponentMode.Design ? (\r\n                                <TextField\r\n                                    inputRef={inputText}\r\n                                    value={textValue}\r\n                                    onInput={handleTextChange}\r\n                                    style={{width: '95%'}}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            fontSize: `${fontSize ? fontSize : 22}px`,\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            ) : (\r\n                                <Typography>\r\n                                    {textValue}\r\n                                </Typography>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={1} container justify=\"center\">\r\n                        <div ref={drag}>\r\n                            {arrowNode}\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Challenge, ChallengeOptions, ChallengePicture, PictureChallenge } from 'types';\r\nimport { ComponentMode } from 'enums';\r\nimport { BasicChallengeTemplate, PictureGrid } from 'components';\r\n\r\ninterface PictureChallengeTemplateProps {\r\n    mode: ComponentMode,\r\n    challenge: PictureChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: PictureChallenge) => void,\r\n    stopTime?: boolean,\r\n    onTimeUp?: () => void,\r\n    showCheck?: boolean,\r\n    disabledCheck?: boolean,\r\n    onCheckClick?: () => void,\r\n    children?: React.ReactChild | React.ReactChild[]\r\n}\r\n\r\nexport const PictureChallengeTemplate: React.FC<PictureChallengeTemplateProps> = (props: PictureChallengeTemplateProps) => {\r\n    const {\r\n        mode, challenge, options, onChallengeChange,\r\n        stopTime, onTimeUp, showCheck, disabledCheck, onCheckClick,\r\n        children\r\n    } = props;\r\n\r\n    const handleChallengeChange = (newChallenge: Challenge) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                ...(newChallenge as PictureChallenge)\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlePicturesChange = (newPictures: ChallengePicture[]) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                pictures: [...newPictures]\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <BasicChallengeTemplate\r\n            mode={mode}\r\n            challenge={challenge}\r\n            options={options}\r\n            onChallengeChange={handleChallengeChange}\r\n            stopTime={stopTime}\r\n            onTimeUp={onTimeUp}\r\n            showCheck={showCheck}\r\n            disabledCheck={disabledCheck}\r\n            onCheckClick={onCheckClick}\r\n            centralComponent={\r\n                <PictureGrid\r\n                    mode={mode}\r\n                    pictures={challenge.pictures}\r\n                    onPicturesChange={handlePicturesChange}\r\n                />\r\n            }\r\n            bottomComponent={\r\n                children\r\n            }\r\n        />\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { ChallengePicture, SelectAnswerChallenge, SelectAnswerChallengeAnswer, SelectAnswerChallengeConfig } from 'types';\r\nimport { ComponentMode, PictureType } from 'enums';\r\nimport { SelectAnswerChallenger, SelectAnswerConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface SelectAnswerChallengeDesignerProps {\r\n    challenge: SelectAnswerChallenge,\r\n    onChallengeChange: (challenge: SelectAnswerChallenge) => void\r\n}\r\n\r\nexport const SelectAnswerChallengeDesigner: React.FC<SelectAnswerChallengeDesignerProps> = (\r\n    props: SelectAnswerChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustPictures = (pictureCount: number): ChallengePicture[] => {\r\n        let pictures = [...challenge.pictures];\r\n        if (pictureCount > pictures.length) {\r\n            const newPictures = Array.from(Array(pictureCount - pictures.length))\r\n                .map(() => ({ type: PictureType.None, data: ''}));\r\n            pictures = [...pictures, ...newPictures];\r\n        } else if (pictureCount < pictures.length) {\r\n            pictures = pictures.slice(0, pictureCount);\r\n        }\r\n        return pictures;\r\n    };\r\n\r\n    const readjustValidAnswers = (multiselect: boolean): SelectAnswerChallengeAnswer[] => {\r\n        let validPresent = false;\r\n        const answers: SelectAnswerChallengeAnswer[] = challenge.answers.map((anAnswer: SelectAnswerChallengeAnswer) => {\r\n            if (!multiselect) {\r\n                if (anAnswer.valid && !validPresent) {\r\n                    validPresent = true;\r\n                    return { ...anAnswer };\r\n                }\r\n                return { ...anAnswer, valid: false };\r\n            }\r\n            return { ...anAnswer };\r\n        });\r\n        return answers;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: SelectAnswerChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: SelectAnswerChallengeConfig) => {\r\n        const pictures = readjustPictures(config.pictureCount);\r\n        const answers = readjustValidAnswers(config.multiselect);\r\n        const updatedChallenge: SelectAnswerChallenge = {\r\n            ...challenge,\r\n            pictures: [...pictures],\r\n            answers: [...answers],\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <SelectAnswerChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <SelectAnswerConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { ChallengeOptions, PictureChallenge, SelectAnswerChallenge, SelectAnswerChallengeAnswer } from 'types';\r\nimport { ComponentMode } from 'enums';\r\nimport { SelectableOption } from 'components';\r\nimport { PictureChallengeTemplate } from 'components/PictureChallengeTemplate';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    optionContainer: {\r\n        height: '50%'\r\n    }\r\n}));\r\n\r\ninterface SelectAnswerChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: SelectAnswerChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: SelectAnswerChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const SelectAnswerChallenger: React.FC<SelectAnswerChallengerProps> = (props: SelectAnswerChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [selectedAnswers, setSelectedAnswers] = useState<number[]>([]);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handlePictureChallengeChange = (picChallenge: PictureChallenge) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                ...(picChallenge as SelectAnswerChallenge)\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleAnswerChange = (position: number, updatedAnswer: SelectAnswerChallengeAnswer) => {\r\n        const updatedAnswers = challenge.answers.map((anAnswer: SelectAnswerChallengeAnswer, idx: number) => {\r\n            if (idx !== position) {\r\n                if (!challenge.config.multiselect) {\r\n                    return {\r\n                        ...anAnswer,\r\n                        valid: false\r\n                    };\r\n                }\r\n                return { ...anAnswer };\r\n            }\r\n            return { ...updatedAnswer };\r\n        });\r\n\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                answers: updatedAnswers\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handlerOptionClick = (answerIdx: number) => {\r\n        if (mode === ComponentMode.Play) {\r\n            if (challenge.config.multiselect) {\r\n                const theIndex = selectedAnswers.findIndex((anAnswerIdx: number) => anAnswerIdx === answerIdx);\r\n                if (theIndex === -1) {\r\n                    setSelectedAnswers([...selectedAnswers, answerIdx]);\r\n                } else {\r\n                    setSelectedAnswers(selectedAnswers.filter((anAnswerIdx: number) => anAnswerIdx !== answerIdx));\r\n                }\r\n            } else {\r\n                if (challenge.answers[answerIdx].valid) {\r\n                    showResult(true);\r\n                } else {\r\n                    showResult(false);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const wrongsSelected = selectedAnswers\r\n            .map((anAnswerIdx: number) => challenge.answers[anAnswerIdx])\r\n            .filter((anAnswer: SelectAnswerChallengeAnswer) => !anAnswer.valid);\r\n        if (wrongsSelected.length === 0) {\r\n            const validsNotSelected = challenge.answers\r\n                .filter((anAnswer: SelectAnswerChallengeAnswer, answerIdx: number) =>\r\n                    anAnswer.valid && selectedAnswers.indexOf(answerIdx) === -1\r\n                );\r\n            if (validsNotSelected.length === 0) {\r\n                showResult(true);\r\n                return;\r\n            }\r\n        }\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    return (\r\n        <PictureChallengeTemplate\r\n            mode={mode}\r\n            challenge={challenge}\r\n            options={options}\r\n            onChallengeChange={handlePictureChallengeChange}\r\n            stopTime={stopTimer}\r\n            onTimeUp={handlerTimeUp}\r\n            showCheck={challenge.config.multiselect}\r\n            disabledCheck={mode === ComponentMode.Design || selectedAnswers.length === 0}\r\n            onCheckClick={handleCheckClick}\r\n        >\r\n            <Grid container justify='space-evenly' spacing={2} style={{ height: '100%' }}>\r\n                <Grid item xs={5} className={classes.optionContainer}>\r\n                    <SelectableOption\r\n                        mode={mode}\r\n                        text={challenge.answers[0].text}\r\n                        icon=\"wb_sunny\"\r\n                        valid={challenge.answers[0].valid}\r\n                        selected={\r\n                            mode === ComponentMode.Play\r\n                            && selectedAnswers.indexOf(0) >= 0\r\n                        }\r\n                        color='#f44336'\r\n                        fontSize={challenge.config.answerFontSize}\r\n                        multiselect={challenge.config.multiselect}\r\n                        showResults={highlightResults}\r\n                        onTextChange={(newText: string) => {\r\n                            handleAnswerChange(0, { ...challenge.answers[0], text: newText });\r\n                        }}\r\n                        onValidChange={(valid: boolean) => {\r\n                            handleAnswerChange(0, { ...challenge.answers[0], valid });\r\n                        }}\r\n                        onClick={() => { handlerOptionClick(0); }}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={5} className={classes.optionContainer}>\r\n                    <SelectableOption\r\n                        mode={mode}\r\n                        text={challenge.answers[1].text}\r\n                        icon=\"brightness_2\"\r\n                        valid={challenge.answers[1].valid}\r\n                        selected={\r\n                            mode === ComponentMode.Play\r\n                            && selectedAnswers.indexOf(1) >= 0\r\n                        }\r\n                        color='#03a9f4'\r\n                        fontSize={challenge.config.answerFontSize}\r\n                        multiselect={challenge.config.multiselect}\r\n                        showResults={highlightResults}\r\n                        onTextChange={(newText: string) => {\r\n                            handleAnswerChange(1, { ...challenge.answers[1], text: newText });\r\n                        }}\r\n                        onValidChange={(valid: boolean) => {\r\n                            handleAnswerChange(1, { ...challenge.answers[1], valid });\r\n                        }}\r\n                        onClick={() => { handlerOptionClick(1); }}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={5} className={classes.optionContainer}>\r\n                    <SelectableOption\r\n                        mode={mode}\r\n                        text={challenge.answers[2].text}\r\n                        icon=\"flash_on\"\r\n                        valid={challenge.answers[2].valid}\r\n                        selected={\r\n                            mode === ComponentMode.Play\r\n                            && selectedAnswers.indexOf(2) >= 0\r\n                        }\r\n                        color='#ffc107'\r\n                        fontSize={challenge.config.answerFontSize}\r\n                        multiselect={challenge.config.multiselect}\r\n                        showResults={highlightResults}\r\n                        onTextChange={(newText: string) => {\r\n                            handleAnswerChange(2, { ...challenge.answers[2], text: newText });\r\n                        }}\r\n                        onValidChange={(valid: boolean) => {\r\n                            handleAnswerChange(2, { ...challenge.answers[2], valid });\r\n                        }}\r\n                        onClick={() => { handlerOptionClick(2); }}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={5} className={classes.optionContainer}>\r\n                    <SelectableOption\r\n                        mode={mode}\r\n                        text={challenge.answers[3].text}\r\n                        icon=\"cloud\"\r\n                        valid={challenge.answers[3].valid}\r\n                        selected={\r\n                            mode === ComponentMode.Play\r\n                            && selectedAnswers.indexOf(3) >= 0\r\n                        }\r\n                        color='#4caf50'\r\n                        fontSize={challenge.config.answerFontSize}\r\n                        multiselect={challenge.config.multiselect}\r\n                        showResults={highlightResults}\r\n                        onTextChange={(newText: string) => {\r\n                            handleAnswerChange(3, { ...challenge.answers[3], text: newText });\r\n                        }}\r\n                        onValidChange={(valid: boolean) => {\r\n                            handleAnswerChange(3, { ...challenge.answers[3], valid });\r\n                        }}\r\n                        onClick={() => { handlerOptionClick(3); }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </PictureChallengeTemplate>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControlLabel, Grid, makeStyles, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { ChallengeConfig, SelectAnswerChallengeConfig } from 'types';\r\nimport { ChallengeConfigurator } from 'components/Common';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface SelectAnswerConfiguratorProps {\r\n    config: SelectAnswerChallengeConfig,\r\n    onConfigChange?: (config: SelectAnswerChallengeConfig) => void\r\n}\r\n\r\nexport const SelectAnswerConfigurator: React.FC<SelectAnswerConfiguratorProps> = (props: SelectAnswerConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<SelectAnswerChallengeConfig>(config);\r\n\r\n    const inputPictureCount = useRef({} as HTMLInputElement);\r\n    const checkPictureLabel = useRef({} as HTMLInputElement);\r\n    const inputAnswerFontSize = useRef({} as HTMLInputElement);\r\n    const checkMultiselect = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    const handleBaseConfigChange = (newBaseConfig: ChallengeConfig) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            ...newBaseConfig\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <ChallengeConfigurator\r\n                    config={config}\r\n                    onConfigChange={handleBaseConfigChange}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputPictureCount}\r\n                    type='number'\r\n                    label='Número de imágenes'\r\n                    inputProps={{ min: 1, max: 9 }}\r\n                    value={formData.pictureCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('pictureCount', parseInt(inputPictureCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkPictureLabel}\r\n                            name='checkPictureLabel'\r\n                            checked={formData.pictureLabel}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('pictureLabel', checkPictureLabel.current.checked); }}\r\n                        />}\r\n                    label='Numerar imágenes'\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputAnswerFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de las respuestas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.answerFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('answerFontSize', parseInt(inputAnswerFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkMultiselect}\r\n                            name='checkMultiselect'\r\n                            checked={formData.multiselect}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('multiselect', checkMultiselect.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Respuesta múltiple'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { SortChallenge, SortChallengeConfig } from 'types';\r\nimport { ComponentMode } from 'enums';\r\nimport { SortChallenger, SortConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface SortChallengeDesignerProps {\r\n    challenge: SortChallenge,\r\n    onChallengeChange: (challenge: SortChallenge) => void\r\n}\r\n\r\nexport const SortChallengeDesigner: React.FC<SortChallengeDesignerProps> = (\r\n    props: SortChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustItems = (itemCount: number): string[] => {\r\n        let items = [...challenge.items];\r\n        if (itemCount > items.length) {\r\n            const newItems = Array.from(Array(itemCount - items.length))\r\n                .map(() => (''));\r\n            items = [...items, ...newItems];\r\n        } else if (itemCount < items.length) {\r\n            items = items.slice(0, itemCount);\r\n        }\r\n        return items;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: SortChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: SortChallengeConfig) => {\r\n        const items = readjustItems(config.itemCount);\r\n        const updatedChallenge: SortChallenge = {\r\n            ...challenge,\r\n            items,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <SortChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <SortConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { Challenge, ChallengeOptions, SortChallenge } from 'types';\r\nimport { ComponentMode, ElementDirection } from 'enums';\r\nimport { BasicChallengeTemplate, ChallengeQuestion, Countdown } from 'components';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    item: {\r\n        padding: '5px 10px',\r\n        backgroundColor: theme.palette.secondary.main,\r\n        color: theme.palette.primary.contrastText,\r\n        borderRadius: '20px'\r\n    }\r\n}));\r\n\r\ninterface SortChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: SortChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: SortChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const SortChallenger: React.FC<SortChallengerProps> = (props: SortChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [selectedAnswers /* , setSelectedAnswers */] = useState<number[]>([]);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChallengeChange = (newChallenge: Challenge) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                ...(newChallenge as SortChallenge)\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n    //     const wrongsSelected = selectedAnswers\r\n    //         .map((anAnswerIdx: number) => challenge.answers[anAnswerIdx])\r\n    //         .filter((anAnswer: SelectAnswerChallengeAnswer) => !anAnswer.valid);\r\n    //     if (wrongsSelected.length === 0) {\r\n    //         const validsNotSelected = challenge.answers\r\n    //             .filter((anAnswer: SelectAnswerChallengeAnswer, answerIdx: number) =>\r\n    //                 anAnswer.valid && selectedAnswers.indexOf(answerIdx) === -1\r\n    //             );\r\n    //         if (validsNotSelected.length === 0) {\r\n    //             showResult(true);\r\n    //             return;\r\n    //         }\r\n    //     }\r\n    //     showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    return (\r\n        <BasicChallengeTemplate\r\n            mode={mode}\r\n            challenge={challenge}\r\n            options={options}\r\n            onChallengeChange={handleChallengeChange}\r\n            stopTime={stopTimer}\r\n            onTimeUp={handlerTimeUp}\r\n            showCheck={true}\r\n            disabledCheck={mode === ComponentMode.Design}\r\n            onCheckClick={handleCheckClick}\r\n            centralComponent={\r\n                <Grid\r\n                    container\r\n                    direction={challenge.config.elementsDirection === ElementDirection.Horizontal ? 'row' : 'column'}\r\n                    justify=\"space-evenly\"\r\n                    alignItems=\"center\"\r\n                    className={classes.fullHeight}\r\n                >\r\n                    {\r\n                        challenge.items.map((anItem: string) => (\r\n                            <Grid item className={classes.item}>\r\n                                {'anItem'}\r\n                            </Grid>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n            }\r\n        />\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControl, Grid, InputLabel, makeStyles, MenuItem, Select, TextField, Typography } from '@material-ui/core';\r\nimport { ChallengeConfig, SortChallengeConfig } from 'types';\r\nimport { ChallengeConfigurator } from 'components';\r\nimport { ElementDirection } from 'enums';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface SortConfiguratorProps {\r\n    config: SortChallengeConfig,\r\n    onConfigChange?: (config: SortChallengeConfig) => void\r\n}\r\n\r\nexport const SortConfigurator: React.FC<SortConfiguratorProps> = (props: SortConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<SortChallengeConfig>(config);\r\n\r\n    const inputItemsFontSize = useRef({} as HTMLInputElement);\r\n    const inputItemCount = useRef({} as HTMLInputElement);\r\n    const inputElementsDirection = useRef({} as HTMLSelectElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean | string) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    const handleBaseConfigChange = (newBaseConfig: ChallengeConfig) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            ...newBaseConfig\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <ChallengeConfigurator\r\n                    config={config}\r\n                    onConfigChange={handleBaseConfigChange}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemsFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemsFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('itemsFontSize', parseInt(inputItemsFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemCount}\r\n                    type='number'\r\n                    label='Número de elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('groupCount', parseInt(inputItemCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControl className={classes.fullWidth}>\r\n                    <InputLabel>Orientación de elementos</InputLabel>\r\n                    <Select\r\n                        inputRef={inputElementsDirection}\r\n                        label=\"Orientación de elementos\"\r\n                        value={formData.elementsDirection}\r\n                        color='secondary'\r\n                        className={classes.fullWidth}\r\n                        onChange={(evt: React.ChangeEvent<{name?: string | undefined, value: unknown}>) => {\r\n                            handleConfigParameterChange('elementsDirection', evt.target.value as string);\r\n                        }}\r\n                    >\r\n                        <MenuItem value={ElementDirection.Horizontal}>Horizontal</MenuItem>\r\n                        <MenuItem value={ElementDirection.Vertical}>Vertical</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { TheOddOneChallenge, TheOddOneChallengeConfig, TheOddOneChallengeSerie } from 'types';\r\nimport { ComponentMode } from 'enums';\r\nimport { TheOddOneChallenger, TheOddOneConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface TheOddOneChallengeDesignerProps {\r\n    challenge: TheOddOneChallenge,\r\n    onChallengeChange: (challenge: TheOddOneChallenge) => void\r\n}\r\n\r\nexport const TheOddOneChallengeDesigner: React.FC<TheOddOneChallengeDesignerProps> = (\r\n    props: TheOddOneChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustSeries = (seriesCount: number, seriesLength: number): TheOddOneChallengeSerie[] => {\r\n        let series = [...challenge.series];\r\n\r\n        series = series.map((aSerie: TheOddOneChallengeSerie) => {\r\n            if (aSerie.elements.length === seriesLength) {\r\n                return { ...aSerie };\r\n            } else if (aSerie.elements.length < seriesLength) {\r\n                const newElements = Array.from(Array(seriesLength - aSerie.elements.length)).map(() => '');\r\n                return {\r\n                    ...aSerie,\r\n                    elements: [\r\n                        ...aSerie.elements,\r\n                        ...newElements\r\n                    ]\r\n                };\r\n            } else {\r\n                const newOddOneIndex = aSerie.theOddOneIndex >= seriesLength ? -1 : aSerie.theOddOneIndex;\r\n                return {\r\n                    elements: aSerie.elements.slice(0, seriesLength),\r\n                    theOddOneIndex: newOddOneIndex\r\n                };\r\n            }\r\n        });\r\n\r\n        if (seriesCount > series.length) {\r\n            const newSeries = Array.from(Array(seriesCount - series.length))\r\n                .map(() => ({\r\n                    elements: Array.from(Array(seriesLength)).map(() => ''),\r\n                    theOddOneIndex: -1\r\n                }));\r\n            series = [...series, ...newSeries];\r\n        } else if (seriesCount < series.length) {\r\n            series = series.slice(0, seriesCount);\r\n        }\r\n        return series;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: TheOddOneChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: TheOddOneChallengeConfig) => {\r\n        const series = readjustSeries(config.seriesCount, config.seriesLength);\r\n        const updatedChallenge: TheOddOneChallenge = {\r\n            ...challenge,\r\n            series,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <TheOddOneChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <TheOddOneConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { Challenge, ChallengeOptions, TheOddOneChallenge, TheOddOneChallengeSerie } from 'types';\r\nimport { ComponentMode, Language } from 'enums';\r\nimport { BasicChallengeTemplate, ChallengeQuestion, Countdown, TheOddOneSerie } from 'components';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    answerContainer: {\r\n        height: '80%',\r\n        width: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionsContainer: {\r\n        border: 'solid 1px gray',\r\n        backgroundColor: '#ffffff',\r\n        minHeight: '60px'\r\n    },\r\n    sentencesContainer: {\r\n        paddingLeft: '10px'\r\n    }\r\n}));\r\n\r\ninterface TheOddOneAnswer {\r\n    serieIndex: number,\r\n    answerIndex: number\r\n}\r\n\r\ninterface TheOddOneChallengeProps {\r\n    mode: ComponentMode,\r\n    challenge: TheOddOneChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: TheOddOneChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const TheOddOneChallenger: React.FC<TheOddOneChallengeProps> = (props: TheOddOneChallengeProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [theOddOneState, setTheOddOneState] = useState<TheOddOneAnswer[]>([]);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChallengeChange = (newChallenge: Challenge) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                ...(newChallenge as TheOddOneChallenge)\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const handleSerieChange = (newSerie: TheOddOneChallengeSerie, idxSerie: number) => {\r\n        if (onChallengeChange) {\r\n            const newChallenge: TheOddOneChallenge = {\r\n                ...challenge,\r\n                series: challenge.series.map((aSerie: TheOddOneChallengeSerie, idx: number) => (\r\n                    idxSerie === idx ? { ...newSerie } : { ...aSerie }\r\n                ))\r\n            };\r\n            onChallengeChange(newChallenge);\r\n        }\r\n    };\r\n\r\n    const completed = () => theOddOneState.length === challenge.series.length;\r\n\r\n    const handleCheckClick = () => {\r\n        const correct = challenge.series.reduce(\r\n            (accSeries: boolean, currentSerie: TheOddOneChallengeSerie, serieIdx: number) => {\r\n                const idxAnswer = theOddOneState.findIndex((anAnswer: TheOddOneAnswer) => (\r\n                    anAnswer.serieIndex === serieIdx\r\n                ));\r\n                return accSeries && theOddOneState[idxAnswer].answerIndex === currentSerie.theOddOneIndex;\r\n            },\r\n            true\r\n        );\r\n        showResult(correct);\r\n    };\r\n\r\n    const handleSerieAnswer = (serieIdx: number, selectedIdx: number) => {\r\n        const answerIdx = theOddOneState.findIndex((anAnswer: TheOddOneAnswer) => anAnswer.serieIndex === serieIdx);\r\n        const newState = [...theOddOneState];\r\n        if (answerIdx >= 0) {\r\n            newState.splice(answerIdx, 1, {\r\n                serieIndex: serieIdx,\r\n                answerIndex: selectedIdx\r\n            });\r\n        } else {\r\n            newState.push(\r\n                {\r\n                    serieIndex: serieIdx,\r\n                    answerIndex: selectedIdx\r\n                }\r\n            );\r\n        }\r\n        setTheOddOneState(newState);\r\n    };\r\n\r\n    return (\r\n        <BasicChallengeTemplate\r\n            mode={mode}\r\n            challenge={challenge}\r\n            options={options}\r\n            onChallengeChange={handleChallengeChange}\r\n            stopTime={stopTimer}\r\n            onTimeUp={handlerTimeUp}\r\n            showCheck={true}\r\n            disabledCheck={mode === ComponentMode.Design || !completed()}\r\n            onCheckClick={handleCheckClick}\r\n            centralComponent={\r\n                <Grid\r\n                    item xs={12}\r\n                    className={classes.fullHeight}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"space-evenly\"\r\n                >\r\n                    {\r\n                        challenge.series.map((aSerie: TheOddOneChallengeSerie, serieIdx: number) => (\r\n                            <Grid item>\r\n                                <TheOddOneSerie\r\n                                    mode={mode}\r\n                                    serie={aSerie}\r\n                                    showResults={highlightResults}\r\n                                    fontSize={challenge.config.answerFontSize}\r\n                                    onSerieChange={\r\n                                        (updatedSerie: TheOddOneChallengeSerie) => handleSerieChange(updatedSerie, serieIdx)\r\n                                    }\r\n                                    onAnswerChange={(selectedIdx: number) => handleSerieAnswer(serieIdx, selectedIdx)}\r\n                                />\r\n                            </Grid>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n            }\r\n        />\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ChallengeConfig, TheOddOneChallengeConfig } from 'types';\r\nimport { ChallengeConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface TheOddOneConfiguratorProps {\r\n    config: TheOddOneChallengeConfig,\r\n    onConfigChange?: (config: TheOddOneChallengeConfig) => void\r\n}\r\n\r\nexport const TheOddOneConfigurator: React.FC<TheOddOneConfiguratorProps> = (props: TheOddOneConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<TheOddOneChallengeConfig>(config);\r\n\r\n    const inputAnswerFontSize = useRef({} as HTMLInputElement);\r\n    const inputSeriesCount = useRef({} as HTMLInputElement);\r\n    const inputSeriesLength = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    const handleBaseConfigChange = (newBaseConfig: ChallengeConfig) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            ...newBaseConfig\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <ChallengeConfigurator\r\n                    config={config}\r\n                    onConfigChange={handleBaseConfigChange}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputAnswerFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de las respuestas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.answerFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('answerFontSize', parseInt(inputAnswerFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputSeriesCount}\r\n                    type='number'\r\n                    label='Número de series'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.seriesCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('seriesCount', parseInt(inputSeriesCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputSeriesLength}\r\n                    type='number'\r\n                    label='Elementos en cada serie'\r\n                    inputProps={{ min: 3 }}\r\n                    value={formData.seriesLength}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('seriesLength', parseInt(inputSeriesLength.current.value)); }}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Grid, makeStyles, Radio, TextField, Typography } from '@material-ui/core';\r\nimport { TheOddOneChallengeSerie } from 'types';\r\nimport { ComponentMode } from 'enums';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    mainContainer: {\r\n        backgroundColor: '#ffffff',\r\n        padding: '5px'\r\n    },\r\n    selectableAnswer: {\r\n        cursor: 'pointer',\r\n        borderRadius: '10px',\r\n        padding: '2px',\r\n        '&:hover': {\r\n            backgroundColor: theme.palette.primary.light,\r\n            color:'#ffffff'\r\n        }\r\n    },\r\n    selectedAnswer: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        color:'#ffffff'\r\n    },\r\n    correct: {\r\n        backgroundColor: '#4caf50',\r\n        color:'#ffffff'\r\n    },\r\n    error: {\r\n        backgroundColor: '#f44336',\r\n        color:'#ffffff'\r\n    }\r\n}));\r\n\r\ninterface TheOddOneSerieProps {\r\n    mode: ComponentMode,\r\n    serie: TheOddOneChallengeSerie,\r\n    showResults: boolean,\r\n    fontSize: number,\r\n    onSerieChange: (newSerie: TheOddOneChallengeSerie) => void,\r\n    onAnswerChange: (selectedIdx: number) => void\r\n}\r\n\r\nexport const TheOddOneSerie: React.FC<TheOddOneSerieProps> = (props: TheOddOneSerieProps) => {\r\n    const { mode, serie, showResults, fontSize, onSerieChange, onAnswerChange } = props;\r\n\r\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(-1);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleSelectedChange = (selIdx: number) => {\r\n        if (onSerieChange) {\r\n            onSerieChange({\r\n                ...serie,\r\n                theOddOneIndex: selIdx\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleTextChange = (elementIdx: number, newText: string) => {\r\n        if (onSerieChange) {\r\n            const auxElements = [...serie.elements];\r\n            auxElements.splice(elementIdx, 1, newText);\r\n            onSerieChange({\r\n                ...serie,\r\n                elements: auxElements\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleAnswerChange = (answerIdx: number) => {\r\n        if (onAnswerChange && mode === ComponentMode.Play) {\r\n            setSelectedAnswer(answerIdx);\r\n            onAnswerChange(answerIdx);\r\n        }\r\n    };\r\n\r\n    const getElementStyle = (elementIdx: number) => {\r\n        if (elementIdx === selectedAnswer) {\r\n            if (showResults) {\r\n                return elementIdx === serie.theOddOneIndex ? classes.correct : classes.error;\r\n            } else {\r\n                return classes.selectedAnswer;\r\n            }\r\n        }\r\n        return '';\r\n    };\r\n\r\n    return (\r\n        <Grid container justify=\"space-evenly\" alignItems=\"center\" className={classes.mainContainer}>\r\n            {\r\n                serie.elements.map((anElement: string, elementIdx: number) => (\r\n                    <>\r\n                        <Grid\r\n                            item\r\n                            key={`element_${elementIdx}`}\r\n                            onClick={() => handleAnswerChange(elementIdx)}\r\n                        >\r\n                            {\r\n                                mode === ComponentMode.Design ? (\r\n                                    <>\r\n                                        <Radio\r\n                                            value={elementIdx}\r\n                                            checked={serie.theOddOneIndex === elementIdx}\r\n                                            name=\"radio-button-demo\"\r\n                                            onChange={() => handleSelectedChange(elementIdx)}\r\n                                        />\r\n                                        <TextField\r\n                                            value={anElement}\r\n                                            inputProps={{\r\n                                                style: {\r\n                                                    fontSize: `${fontSize ? fontSize : 50}px`\r\n                                                }\r\n                                            }}\r\n                                            onInput={\r\n                                                (event: React.FormEvent<HTMLInputElement>) => handleTextChange(\r\n                                                    elementIdx,\r\n                                                    (event.target as any).value\r\n                                                )\r\n                                            }\r\n                                        />\r\n                                    </>\r\n                                ) : (\r\n                                    <Typography\r\n                                        style={{\r\n                                            fontSize: `${fontSize ? fontSize: 50}px`\r\n                                        }}\r\n                                        className={\r\n                                            `${classes.selectableAnswer} ${getElementStyle(elementIdx)}`\r\n                                        }\r\n                                    >\r\n                                        {anElement}\r\n                                    </Typography>\r\n                                )\r\n                            }\r\n                        </Grid>\r\n                        {\r\n                            elementIdx < serie.elements.length - 1 && (\r\n                                <Grid\r\n                                    item\r\n                                    key={`separator_${elementIdx}`}\r\n                                >\r\n                                    -\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                    </>\r\n                ))\r\n            }\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { ChallengePicture, TrueOrFalseChallenge, TrueOrFalseChallengeConfig } from 'types';\r\nimport { ComponentMode, PictureType } from 'enums';\r\nimport { TrueOrFalseChallenger, TrueOrFalseConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface TrueOrFalseChallengeDesignerProps {\r\n    challenge: TrueOrFalseChallenge,\r\n    onChallengeChange: (challenge: TrueOrFalseChallenge) => void\r\n}\r\n\r\nexport const TrueOrFalseChallengeDesigner: React.FC<TrueOrFalseChallengeDesignerProps> = (\r\n    props: TrueOrFalseChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustPictures = (pictureCount: number): ChallengePicture[] => {\r\n        let pictures = [...challenge.pictures];\r\n        if (pictureCount > pictures.length) {\r\n            const newPictures = Array.from(Array(pictureCount - pictures.length))\r\n                .map(() => ({ type: PictureType.None, data: ''}));\r\n            pictures = [...pictures, ...newPictures];\r\n        } else if (pictureCount < pictures.length) {\r\n            pictures = pictures.slice(0, pictureCount);\r\n        }\r\n        return pictures;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: TrueOrFalseChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: TrueOrFalseChallengeConfig) => {\r\n        const pictures = readjustPictures(config.pictureCount);\r\n        const updatedChallenge: TrueOrFalseChallenge = {\r\n            ...challenge,\r\n            pictures: [...pictures],\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <TrueOrFalseChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <TrueOrFalseConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport { SelectableOption } from '../Common/SelectableOption';\r\nimport { TrueOrFalseChallenge } from '../../types/TrueOrFalseChallenge';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { ChallengeOptions, PictureChallenge } from '../../types/Challenge';\r\nimport { Language } from '../../enums/Language';\r\nimport { PictureChallengeTemplate } from 'components';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    optionContainer: {\r\n        height: 'calc(100% - 80px)',\r\n        marginTop: '40px'\r\n    }\r\n}));\r\n\r\ninterface TrueOrFalseChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: TrueOrFalseChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: TrueOrFalseChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const TrueOrFalseChallenger: React.FC<TrueOrFalseChallengerProps> = (props: TrueOrFalseChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handlePictureChallengeChange = (picChallenge: PictureChallenge) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                ...(picChallenge as TrueOrFalseChallenge)\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleAnswerChange = (updatedAnswer: boolean) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                answer: updatedAnswer\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handlerOptionClick = (answer: boolean) => {\r\n        if (mode === ComponentMode.Play) {\r\n            if (challenge.answer === answer) {\r\n                showResult(true);\r\n            } else {\r\n                showResult(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    return (\r\n        <PictureChallengeTemplate\r\n            mode={mode}\r\n            challenge={challenge}\r\n            options={options}\r\n            onChallengeChange={handlePictureChallengeChange}\r\n            stopTime={stopTimer}\r\n            onTimeUp={handlerTimeUp}\r\n            showCheck={false}\r\n        >\r\n            <Grid container justify='space-evenly' spacing={2} style={{ height: '100%' }}>\r\n                <Grid item xs={5} className={classes.optionContainer}>\r\n                    <SelectableOption\r\n                        mode={mode}\r\n                        text={options?.language === Language.En ? 'True' : 'Verdadero'}\r\n                        icon=\"wb_sunny\"\r\n                        valid={challenge.answer}\r\n                        color='#4caf50'\r\n                        fontSize={42}\r\n                        showResults={highlightResults}\r\n                        onValidChange={(valid: boolean) => {\r\n                            handleAnswerChange(true);\r\n                        }}\r\n                        onClick={() => { handlerOptionClick(true); }}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={5} className={classes.optionContainer}>\r\n                    <SelectableOption\r\n                        mode={mode}\r\n                        text={options?.language === Language.En ? 'False' : 'Falso'}\r\n                        icon=\"brightness_2\"\r\n                        valid={!challenge.answer}\r\n                        color='#f44336'\r\n                        fontSize={42}\r\n                        showResults={highlightResults}\r\n                        onValidChange={(valid: boolean) => {\r\n                            handleAnswerChange(false);\r\n                        }}\r\n                        onClick={() => { handlerOptionClick(false); }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </PictureChallengeTemplate>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControlLabel, Grid, makeStyles, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { ChallengeConfig, TrueOrFalseChallengeConfig } from 'types';\r\nimport { ChallengeConfigurator } from 'components/Common';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface TrueOrFalseConfiguratorProps {\r\n    config: TrueOrFalseChallengeConfig,\r\n    onConfigChange?: (config: TrueOrFalseChallengeConfig) => void\r\n}\r\n\r\nexport const TrueOrFalseConfigurator: React.FC<TrueOrFalseConfiguratorProps> = (props: TrueOrFalseConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<TrueOrFalseChallengeConfig>(config);\r\n\r\n    const inputPictureCount = useRef({} as HTMLInputElement);\r\n    const checkPictureLabel = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    const handleBaseConfigChange = (newBaseConfig: ChallengeConfig) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            ...newBaseConfig\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <ChallengeConfigurator\r\n                    config={config}\r\n                    onConfigChange={handleBaseConfigChange}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputPictureCount}\r\n                    type='number'\r\n                    label='Número de imágenes'\r\n                    inputProps={{ min: 1, max: 9 }}\r\n                    value={formData.pictureCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('pictureCount', parseInt(inputPictureCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkPictureLabel}\r\n                            name='checkPictureLabel'\r\n                            checked={formData.pictureLabel}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('pictureLabel', checkPictureLabel.current.checked); }}\r\n                        />}\r\n                    label='Numerar imágenes'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { useProjects } from 'hooks/useProjects';\r\nimport { ProjectList } from 'components';\r\n\r\nexport const Home: React.FC = () => {\r\n    const { projects, setProjects } = useProjects();\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n        >\r\n            <Grid item xs={12} lg={10} xl={7}>\r\n                <ProjectList\r\n                    projects={projects}\r\n                    setProjects={setProjects}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { useParams } from \"react-router\";\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { TestDesigner } from 'components';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\nexport const Designer: React.FC = () => {\r\n    const { projectId, testId } = useParams() as any;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n            className={classes.fullHeight}\r\n        >\r\n            <Grid item xs={12} className={classes.fullHeight}>\r\n                <TestDesigner\r\n                    projectId={projectId}\r\n                    testId={testId}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport { useProjects } from 'hooks/useProjects';\r\nimport { Challenge, Project, Test, TestOptions } from 'types';\r\nimport { Language } from 'enums';\r\nimport { ChallengeEvaluator, ChallengeLauncher, TestResult } from 'components';\r\nimport { parseQueryString } from 'utils';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\ninterface IParams {\r\n    projectId: string,\r\n    testId: string\r\n}\r\n\r\ninterface ChallengeState {\r\n    idx: number,\r\n    launching: boolean\r\n}\r\n\r\nexport const Evaluator: React.FC = () => {\r\n    const { projectId, testId } = useParams() as IParams;\r\n    const history = useHistory();\r\n\r\n    const { projects } = useProjects();\r\n    const [testOptions] = useState<TestOptions>(parseQueryString(history.location.search));\r\n    const [test, setTest] = useState<Test>();\r\n    const [currentChallengeState, setCurrentChallengeState] = useState<ChallengeState>({idx: -1, launching: false});\r\n    const [results, setResults] = useState<boolean[]>([]);\r\n    const [showResult, setShowResult] = useState<boolean>(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (projectId != null && testId != null) {\r\n            const theProject: Project = projects.find((aProject: Project) => aProject.id === projectId);\r\n            if (theProject != null) {\r\n                const theTest: Test | undefined = theProject.tests.find((aTest: Test) => aTest.id === testId);\r\n                if (theTest != null) {\r\n                    if (testOptions.disorderedChallenges) {\r\n                        const disorderedChallenges = theTest.challenges.map(\r\n                            (aChallenge: Challenge) => ({ ...aChallenge })\r\n                        ).sort((a, b) => 0.5 - Math.random());\r\n                        setTest({\r\n                            ...theTest,\r\n                            challenges: disorderedChallenges\r\n                        });\r\n                    } else {\r\n                        setTest(theTest);\r\n                    }\r\n                    setCurrentChallengeState({idx: 0, launching: true});\r\n                }\r\n            }\r\n        }\r\n    }, [projectId, testId]);\r\n\r\n    const next = () => {\r\n        if (test != null) {\r\n            if (currentChallengeState.launching) {\r\n                setCurrentChallengeState({\r\n                    ...currentChallengeState,\r\n                    launching: false\r\n                });\r\n            } else {\r\n                if (currentChallengeState.idx < test.challenges.length - 1) {\r\n                    setCurrentChallengeState({\r\n                        idx: currentChallengeState.idx + 1,\r\n                        launching: true\r\n                    });\r\n                } else {\r\n                    setCurrentChallengeState({\r\n                        idx: -1,\r\n                        launching: false\r\n                    });\r\n                    setShowResult(true);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleResponse = (success: boolean) => {\r\n        setResults([...results, success]);\r\n        if (testOptions.autoNext) {\r\n            next();\r\n        }\r\n    };\r\n\r\n    const handleBackHome = () => {\r\n        history.push('/');\r\n    };\r\n\r\n    const handleRepeatTest = () => {\r\n        setCurrentChallengeState({idx: 0, launching: true});\r\n        setResults([]);\r\n        setShowResult(false);\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n            className={classes.fullHeight}\r\n        >\r\n            {\r\n                !testOptions.autoNext ? <Grid item xs={1} xl={2} /> : undefined\r\n            }\r\n            <Grid item xs={testOptions.autoNext ? 12 : 10} xl={8} className={classes.fullHeight}>\r\n                {\r\n                    test != null && currentChallengeState.launching && currentChallengeState.idx >= 0 && (\r\n                        <ChallengeLauncher\r\n                            challengeType={test.challenges[currentChallengeState.idx].type}\r\n                            challengeNumber={currentChallengeState.idx + 1}\r\n                            challengeTotalCount={test.challenges.length}\r\n                            language={test.language}\r\n                            delay={3}\r\n                            onEnd={next}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    test != null && !currentChallengeState.launching && currentChallengeState.idx >= 0 && (\r\n                        <ChallengeEvaluator\r\n                            challenge={test.challenges[currentChallengeState.idx]}\r\n                            options={{\r\n                                language: test.language,\r\n                                ignoreTimeLimit: testOptions.ignoreTimeLimit\r\n                            }}\r\n                            onSuccess={() => { handleResponse(true); }}\r\n                            onError={() => { handleResponse(false); }}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    test != null && showResult && (\r\n                        <TestResult\r\n                            test={test}\r\n                            results={results}\r\n                            onBackHome={handleBackHome}\r\n                            onRepeatTest={handleRepeatTest}\r\n                        />\r\n                    )\r\n                }\r\n            </Grid>\r\n            {\r\n                !testOptions.autoNext ? (\r\n                    <Grid item xs={1} xl={2} className={`${classes.fullHeight} ${classes.centerAll}`}>\r\n                        {\r\n                            !testOptions.autoNext\r\n                            && currentChallengeState.idx === results.length - 1\r\n                            && (\r\n                                <Fab\r\n                                    variant=\"extended\"\r\n                                    size=\"large\"\r\n                                    color=\"primary\"\r\n                                    onClick={next}\r\n                                >\r\n                                    {test?.language === Language.En ? 'Next' : 'Siguiente'}&nbsp;<Icon>navigate_next</Icon>\r\n                                </Fab>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                ) : undefined\r\n            }\r\n        </Grid>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\r\nimport { ProjectContextProvider } from './context/ProjectContext';\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route\r\n} from \"react-router-dom\";\r\nimport { theme } from \"./theme\";\r\nimport { MainHeader } from \"./components/Common/MainHeader\";\r\nimport { Home } from \"./views/Home\";\r\nimport { Designer } from \"./views/Designer\";\r\nimport { Evaluator } from \"./views/Evaluator\";\r\n\r\nconst LIMIT = 'sm';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    mainContainer: {\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden'\r\n    },\r\n    headerContainer: {\r\n        width: '100%',\r\n        height: '65px',\r\n        [theme.breakpoints.down(LIMIT)]: {\r\n            height: '30px'\r\n        }\r\n    },\r\n    content: {\r\n        height: 'calc(100% - 105px)',\r\n        padding: '20px 10px',\r\n        [theme.breakpoints.down(LIMIT)]: {\r\n            height: 'calc(100% - 35px)',\r\n            paddingTop: '5px'\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function App() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Router>\r\n            <ThemeProvider theme={theme}>\r\n                <ProjectContextProvider>\r\n                    <div className={classes.mainContainer}>\r\n                        <div className={classes.headerContainer}>\r\n                            <MainHeader></MainHeader>\r\n                        </div>\r\n                        <div className={classes.content}>\r\n                            <Switch>\r\n                                <Route exact path=\"/\">\r\n                                    <Home />\r\n                                </Route>\r\n                                <Route path=\"/designer/:projectId/:testId\">\r\n                                    <Designer />\r\n                                </Route>\r\n                                <Route path=\"/play/:projectId/:testId\">\r\n                                    <Evaluator />\r\n                                </Route>\r\n                            </Switch>\r\n                        </div>\r\n                    </div>\r\n                </ProjectContextProvider>\r\n            </ThemeProvider>\r\n        </Router >\r\n    );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}