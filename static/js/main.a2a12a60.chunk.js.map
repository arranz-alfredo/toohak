{"version":3,"sources":["enums/ChallengeType.ts","enums/PictureType.ts","context/ProjectContext.tsx","theme/index.ts","components/MainHeader/index.tsx","hooks/useProjects.ts","utils/utilValidationTypes.ts","enums/Language.ts","components/TestForm/index.tsx","enums/ComponentMode.ts","components/DialogConfirm/index.tsx","components/TestList/index.tsx","components/JsonLoader/index.tsx","components/ProjectForm/index.tsx","components/ProjectList/index.tsx","views/Home/index.tsx","utils/utilChallenges.tsx","components/ChallengeThumbnail/index.tsx","components/ChallengeSelector/index.tsx","components/ChallengeQuestion/index.tsx","components/SelectableOption/index.tsx","components/DialogPictureSelector/index.tsx","components/PictureGrid/index.tsx","components/Countdown/index.tsx","assets/sounds/correct.wav","assets/sounds/incorrect.wav","components/SelectAnswerChallenger/index.tsx","components/SelectAnswerConfigurator/index.tsx","components/SelectAnswerChallengeDesigner/index.tsx","components/TrueOrFalseChallenger/index.tsx","components/TrueOrFalseConfigurator/index.tsx","components/TrueOrFalseChallengeDesigner/index.tsx","components/DragableItem/index.tsx","components/DropGroup/index.tsx","components/ClassifyChallenger/index.tsx","components/ClassifyConfigurator/index.tsx","components/ClassifyChallengeDesigner/index.tsx","components/SortChallenger/index.tsx","components/SortConfigurator/index.tsx","components/SortChallengeDesigner/index.tsx","components/ChallengeDesigner/index.tsx","components/TestDesigner/index.tsx","views/Designer/index.tsx","components/ChallengeEvaluator/index.tsx","components/ChallengeLauncher/index.tsx","components/TestResult/index.tsx","views/Evaluator/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChallengeType","PictureType","ProjectContext","React","createContext","ProjectContextProvider","children","useState","projects","setProjects","Provider","value","colors","main","light","dark","mainContrast","contrast","errorContrast","theme","createMuiTheme","palette","primary","contrastText","secondary","background","default","paper","error","text","typography","fontSize","MainHeader","AppBar","position","Toolbar","Typography","variant","LOCALSTORAGE_KEY","useProjects","useContext","saveProjects","useEffect","length","strProjects","localStorage","getItem","JSON","parse","newProjects","setItem","stringify","Language","isValidChallenge","challenge","errorMessage","id","type","push","configValidation","config","timeLimit","questionFontSize","SelectAnswer","customConfig","pictureCount","pictureLabel","multiselect","TrueOrFalse","FillGaps","Match","Sort","Classify","FillTable","Crossword","valid","isValidConfig","question","customChallenge","pictures","some","aPicture","None","answers","reduce","acc","current","anAnswer","items","groups","name","isValidTest","test","challenges","ComponentMode","TestForm","props","onAccept","onCancel","description","language","Es","initialState","formState","setFormState","inputName","useRef","inputDescription","Grid","container","direction","spacing","item","xs","TextField","inputRef","label","fullWidth","onInput","InputLabel","shrink","Select","labelId","toString","onChange","evt","updatedLanguage","target","En","MenuItem","justify","Button","color","onClick","newTest","uuidv4","DialogConfirm","open","acceptButtonText","cancelButtonText","width","onConfirm","onRefuse","Dialog","maxWidth","DialogContent","DialogActions","autoFocus","useStyles","makeStyles","inline","display","listItemSecondaryAction","visibility","listItem","bottomContainer","marginTop","play","dialogContainer","padding","TestList","project","onCreateTest","onDeleteTest","selectedTest","setSelectedTest","anchorElEdit","setAnchorElEdit","openTestForm","setOpenTestForm","openRemoveTestConfirm","setOpenRemoveTestConfirm","classes","Menu","anchorEl","keepMounted","Boolean","onClose","component","Link","to","DialogTitle","Box","className","undefined","tests","List","map","aTest","ListItem","button","alignItems","ListItemText","ListItemSecondaryAction","IconButton","title","Icon","stopPropagation","currentTarget","handleEditClick","Divider","uploadInput","JsonLoader","onDataLoaded","onError","inputImport","ref","accept","multiple","event","files","file","reader","FileReader","readAsText","onloadend","e","newProject","result","err","style","htmlFor","ProjectForm","heading","pxToRem","secondaryHeading","gridContainer","gridItems","flexGrow","messageControl","backgroundColor","ProjectList","history","useHistory","expandedProject","setExpandedProject","openProjectForm","setOpenProjectForm","openRemoveProjectConfirm","setOpenRemoveProjectConfirm","selectedProject","setSelectedProject","openMessage","setOpenMessage","messageText","setMessageText","handleCreateTest","projectId","theProject","find","aProject","updating","updatedProjects","updatedTests","handleDeleteTest","filter","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","SnackbarContent","message","isValidProject","Accordion","expanded","isExpanded","handleExpandChange","AccordionSummary","element","document","createElement","setAttribute","encodeURIComponent","replace","body","appendChild","click","removeChild","handleExportProjectClick","AccordionDetails","Home","getChallengeTypeDescription","getChallengeTypeIcon","size","getDefaultChallengeConfig","defaultChallengeConfig","answerFontSize","itemsFontSize","itemCount","groupCount","whiteSpace","overflow","textOverflow","tooltipRow","statusContainer","justifyContent","ChallengeThumbnail","selected","compact","onDelete","validation","setValidation","Card","elevation","CardActionArea","CardHeader","avatar","subheader","action","Tooltip","arrow","aMessage","CardContent","noWrap","CardActions","Chip","icon","root","overflowY","ChallengeSelector","compactList","onSelect","selectedChallenge","setSelectedChallenge","handleThumbnailClick","handleThumbnailDelete","aChallenge","idx","height","inputContainer","input","ChallengeQuestion","mode","questionText","setQuestionText","inputQuestion","inputProps","textAlign","lineHeight","InputProps","readOnly","Play","disableUnderline","placeholder","multiline","rowsMax","option","optionActionArea","optionInput","optionInnerInput","cursor","optionIcon","selector","checked","SelectableOption","showResults","onTextChange","onValidChange","optionState","setOptionState","inputTextOption","radioOption","checkOption","borderStyle","borderWidth","borderColor","Design","startAdornment","InputAdornment","endAdornment","Checkbox","newState","Radio","ev","preventDefault","justifySelf","DialogPictureForm","picture","inputUrl","data","newPicture","Url","fullHeight","pic","maxHeight","PictureGrid","onPicturesChange","pictureDialogState","setPictureDialogState","pictureItemSize","setPictureItemSize","openDialog","selectedPicture","newPic","pictureIdx","selectedPictureIdx","border","src","alt","Fab","handleAddPictureClick","Countdown","time","stopTimer","onTimeUp","timeRemaining","setTimeRemaining","stop","setStop","timeoutId","setTimeout","clearTimeout","CircularProgress","Math","round","top","left","bottom","right","titleContainer","pictureContainer","answerContainer","paddingTop","optionContainer","centerAll","SelectAnswerChallenger","onChallengeChange","onSuccess","setStopTimer","selectedAnswers","setSelectedAnswers","highlightResults","setHighlightResults","useSound","correct","playCorrect","incorrect","playIncorrect","handleAnswerChange","updatedAnswer","updatedAnswers","handlerOptionClick","answerIdx","theIndex","findIndex","anAnswerIdx","showResult","success","newTitle","newPictures","disabled","indexOf","handleCheckClick","newText","SelectAnswerConfigurator","onConfigChange","formData","setFormData","inputTimeLimit","inputQuestionFontSize","inputPictureCount","checkPictureLabel","inputAnswerFontSize","checkMultiselect","handleConfigParameterChange","parameter","newConfig","min","parseInt","max","FormControlLabel","control","Switch","SelectAnswerChallengeDesigner","updatedChallenge","Array","from","slice","readjustPictures","validPresent","readjustValidAnswers","TrueOrFalseChallenger","answer","TrueOrFalseConfigurator","TrueOrFalseChallengeDesigner","borderRadius","DragableItem","useDrag","collect","monitor","opacity","isDragging","drag","itemsContainer","DropGroup","validItems","onTitleChange","onItemsChange","acceptTypes","droppedItems","onDrop","useDrop","drop","console","log","isOver","canDrop","groupState","setGroupState","inputTitle","inputItem","addValidItem","updatedItems","anItem","itemIdx","handleRemoveValidItem","onKeyPress","code","aDroppedItem","classifyContainer","optionsContainer","groupsContainer","ClassifyChallenger","aGroup","groupName","initialClassifyState","classifyState","setClassifyState","DndProvider","backend","HTML5Backend","itemName","newName","groupIdx","updatedName","updatedGroups","handleNameChange","newItems","handleItemsChange","auxGroup","droppedItem","newDroppedItems","handleDrop","accGroups","currentGroup","correctItems","accItems","currentItem","theGroup","ClassifyConfigurator","inputItemsFontSize","inputGroupCount","ClassifyChallengeDesigner","newGroups","readjustGroups","SortChallenger","SortConfigurator","inputItemCount","SortChallengeDesigner","readjustItems","ChallengeDesigner","handleChallengeChange","listContainer","paddingRight","challengesContainer","overflowX","listStyle","boxShadow","webkitBoxShadow","outline","challengeSelector","TestDesigner","testId","setTest","setCompactList","setAnchorEl","deletedChallenge","setDeletedChallenge","openRemoveChallengeConfirm","setOpenRemoveChallengeConfirm","handleNewChallengeOptionClick","newChallenge","defaultChallenge","getDefaultChallenge","handleCloseNewChallengeMenu","updatedChallenges","ToggleButtonGroup","exclusive","newListMode","ToggleButton","ListItemIcon","Designer","useParams","ChallengeEvaluator","handlerSucessChallenge","handlerErrorChallenge","ChallengeLauncher","challengeType","delay","onEnd","timeline","transform","timelineContentContainer","timelineContent","timelineIcon","TestResult","results","aResult","Timeline","challengeIdx","TimelineItem","TimelineSeparator","TimelineConnector","TimelineContent","Evaluator","launching","currentChallengeState","setCurrentChallengeState","setResults","setShowResult","theTest","next","handleResponse","mainContainer","flexDirection","headerContainer","content","margin","App","ThemeProvider","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a2a12a60.chunk.js","sourcesContent":["export enum ChallengeType {\r\n    SelectAnswer = 'SA',\r\n    TrueOrFalse = 'TF',\r\n    FillGaps = 'FG',\r\n    Match = 'MT',\r\n    Sort = 'SO',\r\n    Classify = 'CL',\r\n    FillTable = 'FT',\r\n    Crossword = 'CW'\r\n}","export enum PictureType {\r\n    None = 'NONE',\r\n    Url = 'URL',\r\n    Base64 = 'BASE64'\r\n}","import React, { useState } from 'react';\r\n\r\n/**\r\n * Contexto para almacenar los proyectos importados\r\n */\r\nexport const ProjectContext = React.createContext<any | React.Dispatch<any>>([]);\r\n\r\ntype Props = {\r\n    children: React.ReactNode\r\n}\r\n\r\n/** Proveedor del contexto de proyectos */\r\nexport const ProjectContextProvider = ({ children }: Props) => {\r\n    // Hook para mantener el estado del contexto\r\n    const [projects, setProjects] = useState<any | React.Dispatch<any>>([]);\r\n\r\n    return (\r\n        <ProjectContext.Provider value={{ projects, setProjects }}>\r\n            {children}\r\n        </ProjectContext.Provider>\r\n    );\r\n};\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nexport const colors = {\r\n    primary: {\r\n        main: '#2196f3',\r\n        light: '#6ec6ff',\r\n        dark: '#0069c0'\r\n    },\r\n    secondary: {\r\n        main: '#e91e63',\r\n        light: '#ff6090',\r\n        dark: '#b0003a'\r\n    },\r\n    error: '#f44336',\r\n    background: {\r\n        main: '#2196f3',\r\n        light: '#ffffff',\r\n        dark: '#0069c0'\r\n    },\r\n    font: {\r\n        main: '#000000',\r\n        mainContrast: \"#ffffff\",\r\n        light: '#000000',\r\n        dark: '#888888',\r\n        contrast: '#6ec6ff',\r\n        errorContrast: \"#ffffff\"\r\n    },\r\n    action: \"#4caf50\"\r\n};\r\n\r\nexport const fontSize = {\r\n    s: 10,\r\n    m: 12,\r\n    l: 16\r\n};\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        primary: {            \r\n            main: colors.primary.main,\r\n            contrastText: colors.font.mainContrast,\r\n            light: colors.primary.light\r\n        },\r\n        secondary: {\r\n            main: colors.secondary.main,\r\n            contrastText: colors.font.main,\r\n            light: colors.secondary.light\r\n        },\r\n        background: {\r\n            default: colors.background.main,\r\n            paper: colors.background.light\r\n        },\r\n        error: {\r\n            main: colors.error,\r\n        },\r\n        text: {\r\n            primary: colors.font.main,\r\n            secondary: colors.font.dark\r\n        }\r\n    },\r\n    typography: {\r\n        fontSize: fontSize.m,\r\n    }\r\n});","import React, { Fragment } from 'react';\r\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\r\n\r\nexport const MainHeader: React.FC = () => (\r\n    <Fragment>\r\n        <AppBar position='static'>\r\n            <Toolbar>\r\n                <Typography variant='h5'>\r\n                    !toohaK\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    </Fragment>\r\n);\r\n","import { useContext, useEffect } from 'react';\r\nimport { ProjectContext } from '../context/ProjectContext';\r\nimport { Project } from '../types/Project';\r\n\r\nconst LOCALSTORAGE_KEY = 'projects';\r\n\r\n/**\r\n * Hook para la gestión del mapa\r\n */\r\nexport const useProjects = (): any => {\r\n    // Contexto del mapa\r\n    const { projects, setProjects: saveProjects } = useContext(ProjectContext);\r\n\r\n    useEffect(() => {\r\n        if (projects == null || projects.length === 0) {\r\n            const strProjects = localStorage.getItem(LOCALSTORAGE_KEY);\r\n            if (strProjects != null && strProjects !== '') {\r\n                saveProjects(JSON.parse(strProjects));\r\n            } else {\r\n                saveProjects([]);\r\n            }\r\n        }\r\n    });\r\n\r\n    const setProjects = (newProjects: Project[]) => {\r\n        localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(newProjects));\r\n        saveProjects(newProjects);\r\n    };\r\n\r\n    return { projects, setProjects };\r\n};\r\n","import { ChallengeType } from '../enums/ChallengeType';\r\nimport { PictureType } from '../enums/PictureType';\r\nimport { Challenge, ChallengeConfig, ChallengePicture } from '../types/Challenge';\r\nimport { ClassifyChallenge, ClassifyChallengeGroup } from '../types/ClassifyChallenge';\r\nimport { Project } from '../types/Project';\r\nimport { SelectAnswerChallenge, SelectAnswerChallengeAnswer, SelectAnswerChallengeConfig } from '../types/SelectAnswerChallenge';\r\nimport { SortChallenge } from '../types/SortChallenge';\r\nimport { Test } from '../types/Test';\r\n\r\nexport interface Validation {\r\n    valid: boolean,\r\n    errorMessage: string[]\r\n}\r\n\r\nexport const isValidConfig = (type: ChallengeType, config: ChallengeConfig): Validation => {\r\n    const errorMessage: string[] = [];\r\n\r\n    if (config?.timeLimit == null || config?.timeLimit <= 0) { errorMessage.push('El tiempo límite debe ser mayor de 0') ;}\r\n    if (config?.questionFontSize == null || config?.questionFontSize <= 0) { errorMessage.push('El tamaño de fuente del titulo debe ser mayor de 0'); }\r\n\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer: {\r\n            const customConfig = config as SelectAnswerChallengeConfig;\r\n            if (customConfig?.pictureCount == null || customConfig?.pictureCount <= 0) { errorMessage.push('El número de imágenes debe ser mayor de 0'); }\r\n            if (customConfig?.pictureLabel == null) { errorMessage.push('Error en indicador de etiquetado de imágenes'); }\r\n            if (customConfig?.multiselect == null) { errorMessage.push('Error en indicador de seleccion múltiple'); }\r\n            break;\r\n        }\r\n        case ChallengeType.TrueOrFalse:\r\n            break;\r\n        case ChallengeType.FillGaps:\r\n            break;\r\n        case ChallengeType.Match:\r\n            break;\r\n        case ChallengeType.Sort:\r\n            break;\r\n        case ChallengeType.Classify:\r\n            break;\r\n        case ChallengeType.FillTable:\r\n            break;\r\n        case ChallengeType.Crossword:\r\n            break;\r\n    }\r\n    return {\r\n        valid: errorMessage.length === 0,\r\n        errorMessage\r\n    };\r\n};\r\n\r\nexport const isValidChallenge = (challenge: Challenge): Validation => {\r\n    let errorMessage: string[] = [];\r\n\r\n    if (challenge?.id == null || challenge?.type == null) { errorMessage.push('Datos internos incorrectos'); }\r\n    const configValidation = isValidConfig(challenge?.type, challenge?.config);\r\n    if (!configValidation.valid) { errorMessage = [...errorMessage, ...configValidation.errorMessage]; }\r\n    if (challenge?.question == null || challenge?.question === '') { errorMessage.push('Se debe rellenar el enunciado / pregunta'); }\r\n\r\n    switch (challenge.type) {\r\n        case ChallengeType.SelectAnswer: {\r\n            const customChallenge = challenge as SelectAnswerChallenge;\r\n            if (customChallenge.config.pictureCount > 1\r\n                && customChallenge.pictures.some((aPicture: ChallengePicture) => aPicture.type === PictureType.None)\r\n            ) {\r\n                errorMessage.push('Hay imágenes vacías');\r\n            }\r\n            if(!customChallenge.answers.reduce(\r\n                (acc: boolean, current: SelectAnswerChallengeAnswer) => acc && current.text != null && current.text !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay alguna respuesta vacía');\r\n            }\r\n            if(!customChallenge.answers.some((anAnswer: SelectAnswerChallengeAnswer) => anAnswer.valid)) {\r\n                errorMessage.push('Debe marcarse al menos una respuesta como válida');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.TrueOrFalse:\r\n            break;\r\n        case ChallengeType.FillGaps:\r\n            break;\r\n        case ChallengeType.Match:\r\n            break;\r\n        case ChallengeType.Sort: {\r\n            const customChallenge = challenge as SortChallenge;\r\n            if(!customChallenge.items.reduce(\r\n                (acc: boolean, current: string) => acc && current != null && current !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay elementos sin texto');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.Classify: {\r\n            const customChallenge = challenge as ClassifyChallenge;\r\n            if(!customChallenge.groups.reduce(\r\n                (acc: boolean, current: ClassifyChallengeGroup) => acc && current.name != null && current.name !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Todos los grupos deben tener un título');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.FillTable:\r\n            break;\r\n        case ChallengeType.Crossword:\r\n            break;\r\n    }\r\n    return {\r\n        valid: errorMessage.length === 0,\r\n        errorMessage\r\n    };\r\n};\r\n\r\nexport const isValidTest = (test: Test): boolean => {\r\n    return test != null\r\n        && test.id != null\r\n        && test.name != null\r\n        && test.challenges != null\r\n        && test.challenges.reduce(\r\n            (acc: boolean, current: Challenge) => acc && isValidChallenge(current).valid,\r\n            true\r\n        );\r\n};\r\n\r\nexport const isValidProject = (project: Project): boolean => {\r\n    return project != null\r\n        && project.id != null\r\n        && project.name != null\r\n        && project.tests != null\r\n        && project.tests.reduce(\r\n            (acc: boolean, current: Test) => acc && isValidTest(current),\r\n            true\r\n        );\r\n};","export enum Language {\r\n    Es = 'ES',\r\n    En = 'EN'\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport { Button, Grid, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Language } from '../../enums/Language';\r\nimport { Test } from '../../types/Test';\r\n\r\ninterface TestState {\r\n    name: string,\r\n    description: string\r\n    language: Language\r\n}\r\n\r\nconst initialState = (test?: Test): TestState => {\r\n    if (test != null) {\r\n        return {\r\n            name: test.name,\r\n            description: test.description || '',\r\n            language: test.language || Language.Es\r\n        };\r\n    }\r\n    return {\r\n        name: '',\r\n        description: '',\r\n        language: Language.Es\r\n    };\r\n};\r\n\r\ninterface TestFormProps {\r\n    test?: Test,\r\n    onAccept: (newTest: Test) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const TestForm: React.FC<TestFormProps> = (props: TestFormProps) => {\r\n    const { test, onAccept, onCancel } = props;\r\n\r\n    const [formState, setFormState] = useState<TestState>(initialState(test));\r\n\r\n    const inputName = useRef({} as HTMLInputElement);\r\n    const inputDescription = useRef({} as HTMLInputElement);\r\n\r\n    const handleNameChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            name: inputName.current.value\r\n        });\r\n    };\r\n\r\n    const handleDescriptionChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            description: inputDescription.current.value\r\n        });\r\n    };\r\n\r\n    const handleLanguageChange = (evt: React.ChangeEvent<{ name?: string | undefined; value: unknown; }>) => {\r\n        const updatedLanguage = evt.target.value === Language.Es.toString() ? Language.Es : Language.En;\r\n        setFormState({\r\n            ...formState,\r\n            language: updatedLanguage\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        const newTest: Test = test ?\r\n            {\r\n                ...test,\r\n                name: formState.name,\r\n                description: formState.description,\r\n                language: formState.language\r\n            }\r\n            : {\r\n                id: uuidv4(),\r\n                name: formState.name,\r\n                description: formState.description,\r\n                language: formState.language,\r\n                challenges: []\r\n            };\r\n\r\n        onAccept(newTest);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            direction='column'\r\n            spacing={4}\r\n        >\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputName}\r\n                    id='newTestNameInput'\r\n                    label='Nombre'\r\n                    fullWidth\r\n                    value={formState.name}\r\n                    onInput={handleNameChange} \r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputDescription}\r\n                    id='newTestNameInput'\r\n                    label='Descripción'\r\n                    fullWidth\r\n                    value={formState.description}\r\n                    onInput={handleDescriptionChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <InputLabel shrink id=\"label-language\">\r\n                    Idioma\r\n                </InputLabel>                    \r\n                <Select\r\n                    labelId=\"label-language\"\r\n                    id='newTestLanguageInput'\r\n                    label='Idioma'\r\n                    fullWidth\r\n                    value={formState.language.toString()}\r\n                    onChange={handleLanguageChange}                    \r\n                >\r\n                    <MenuItem value={Language.Es.toString()}>Español</MenuItem>\r\n                    <MenuItem value={Language.En.toString()}>Inglés</MenuItem>\r\n                </Select>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid container justify='flex-end' spacing={1}>\r\n                    <Grid item>\r\n                        <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","export enum ComponentMode {\r\n    Design,\r\n    Play\r\n}","import React from 'react';\r\nimport { Button, Dialog, DialogActions, DialogContent, Grid, Typography } from '@material-ui/core';\r\n\r\ninterface DialogConfirmProps {\r\n    open: boolean,\r\n    text: string,\r\n    acceptButtonText?: string,\r\n    cancelButtonText?: string,\r\n    width?: 'xs' | 'sm' | 'md' | 'lg' | 'xl'\r\n    onConfirm: () => void,\r\n    onRefuse: () => void\r\n}\r\n\r\nexport const DialogConfirm: React.FC<DialogConfirmProps> = (props: DialogConfirmProps) => {\r\n    const {open, text, acceptButtonText, cancelButtonText, width, onConfirm, onRefuse} = props;\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth={ width ? width : 'sm' }\r\n        >\r\n            <DialogContent>\r\n                <Grid container justify='center'>\r\n                    <Grid item>\r\n                        <Typography variant='button'>{text}</Typography>\r\n                    </Grid>\r\n                </Grid>                \r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button autoFocus onClick={onConfirm} color='primary' variant='contained'>\r\n                    { acceptButtonText ? acceptButtonText : 'Aceptar' }\r\n                </Button>\r\n                <Button onClick={onRefuse} color='primary'>\r\n                    { cancelButtonText ? cancelButtonText : 'Cancelar' }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { Fragment, useState } from 'react';\r\nimport { Box, Button, Dialog, DialogTitle, Divider, Grid, Icon, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText, makeStyles, Menu, MenuItem, Typography } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport { Test } from '../../types/Test';\r\nimport { colors } from '../../theme';\r\nimport { Project } from '../../types/Project';\r\nimport { isValidTest } from '../../utils/utilValidationTypes';\r\nimport { TestForm } from '../TestForm';\r\nimport { DialogConfirm } from '../DialogConfirm';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    listItemSecondaryAction: {\r\n        visibility: 'hidden'\r\n    },\r\n    listItem: {\r\n        '&:hover $listItemSecondaryAction': {\r\n            visibility: 'inherit'\r\n        }\r\n    },\r\n    bottomContainer: {\r\n        marginTop: '10px'\r\n    },\r\n    play: {\r\n        color: colors.action\r\n    },\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    }\r\n}));\r\n\r\ninterface TestListProps {\r\n    project: Project,\r\n    onCreateTest: (projectId: string, test: Test) => void\r\n    onDeleteTest: (projectId: string, test: Test) => void\r\n}\r\n\r\nexport const TestList: React.FC<TestListProps> = (props: TestListProps) => {\r\n    const { project, onCreateTest, onDeleteTest } = props;\r\n\r\n    const [selectedTest, setSelectedTest] = React.useState<Test | undefined>();\r\n    const [anchorElEdit, setAnchorElEdit] = React.useState<Element | null>(null);\r\n    const [openTestForm, setOpenTestForm] = useState<boolean>(false);\r\n    const [openRemoveTestConfirm, setOpenRemoveTestConfirm] = useState<boolean>(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleCreateTestClick = () => {\r\n        setOpenTestForm(true);\r\n    };\r\n\r\n    const handleTestFormAccept = (newTest: Test) => {\r\n        onCreateTest(project.id, newTest);\r\n        setSelectedTest(undefined);\r\n        setOpenTestForm(false);\r\n    };\r\n\r\n    const handleTestFormCancel = () => {\r\n        setSelectedTest(undefined);\r\n        setOpenTestForm(false);\r\n    };\r\n\r\n    const handleEditClick = (evt: React.MouseEvent<HTMLButtonElement>, test: Test) => {\r\n        setSelectedTest(test);\r\n        setAnchorElEdit(evt.currentTarget);\r\n    };\r\n\r\n    const handleCloseEditMenu = () => {\r\n        setAnchorElEdit(null);\r\n    };\r\n\r\n    const handleEditDataClick = () => {\r\n        setAnchorElEdit(null);\r\n        setOpenTestForm(true);\r\n    };\r\n\r\n    const handleRemoveTestClick = (test: Test) => {\r\n        setSelectedTest(test);\r\n        setOpenRemoveTestConfirm(true);\r\n    };\r\n\r\n    const handleConfirmRemoveTest = () => {\r\n        if (selectedTest != null) {\r\n            onDeleteTest(project.id, selectedTest);\r\n        }\r\n        setSelectedTest(undefined);\r\n        setOpenRemoveTestConfirm(false);\r\n    };\r\n\r\n    const handleRefuseRemoveTest = () => {\r\n        setSelectedTest(undefined);\r\n        setOpenRemoveTestConfirm(false);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Menu\r\n                id=\"addNewMenu\"\r\n                anchorEl={anchorElEdit}\r\n                keepMounted\r\n                open={Boolean(anchorElEdit)}\r\n                onClose={handleCloseEditMenu}\r\n            >\r\n                <MenuItem onClick={handleEditDataClick}>\r\n                    <Typography variant=\"subtitle2\">\r\n                        Editar datos generales\r\n                    </Typography>\r\n                </MenuItem>\r\n                <MenuItem component={Link} to={`/designer/${project.id}/${selectedTest?.id}`}>\r\n                    <Typography variant=\"subtitle2\">\r\n                        Editar preguntas\r\n                    </Typography>\r\n                </MenuItem>\r\n            </Menu>            \r\n            <Dialog\r\n                open={openTestForm}\r\n                fullWidth\r\n                maxWidth='sm'\r\n            >\r\n                <DialogTitle>Cuestionario</DialogTitle>\r\n                <Box className={classes.dialogContainer}>\r\n                    <TestForm\r\n                        test={selectedTest}\r\n                        onAccept={handleTestFormAccept}\r\n                        onCancel={handleTestFormCancel}\r\n                    />\r\n                </Box>\r\n            </Dialog>\r\n            <DialogConfirm\r\n                open={openRemoveTestConfirm}\r\n                text='¿Seguro que deseas eliminar el proyecto?'\r\n                width='xs'\r\n                onConfirm={handleConfirmRemoveTest}\r\n                onRefuse={handleRefuseRemoveTest}\r\n            />            \r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    {\r\n                        project.tests.length === 0\r\n                        && <Typography>No hay cuestionarios</Typography>\r\n                    }\r\n                    {\r\n                        project.tests.length > 0\r\n                        && <List>\r\n                            {\r\n                                project.tests.map((aTest: Test) => (\r\n                                    <Fragment key={`fragment_${aTest.id}`}>\r\n                                        <ListItem\r\n                                            button\r\n                                            key={aTest.id}\r\n                                            alignItems='flex-start'\r\n                                            classes={{ container: classes.listItem }}\r\n                                        >\r\n                                            <Grid container>\r\n                                                <Grid item xs={6}>\r\n                                                    <ListItemText\r\n                                                        primary={\r\n                                                            aTest.name\r\n                                                        }\r\n                                                        secondary={\r\n                                                            <Typography\r\n                                                                component='span'\r\n                                                                variant='body2'\r\n                                                                className={classes.inline}\r\n                                                                color='textPrimary'\r\n                                                            >\r\n                                                                {aTest.description}\r\n                                                            </Typography>\r\n                                                        }\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={2}>\r\n                                                    <ListItemText\r\n                                                        secondary={`${aTest.challenges.length} pregunta${aTest.challenges.length !== 1 ? 's' : ''}`}\r\n                                                    />                                        \r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <ListItemSecondaryAction className={classes.listItemSecondaryAction}>\r\n                                                <Grid container>\r\n                                                    <Grid item>\r\n                                                        {\r\n                                                            isValidTest(aTest) ? (\r\n                                                                <IconButton title='Jugar!' component={Link} to={`/play/${project.id}/${aTest.id}`}>\r\n                                                                    <Icon className={classes.play}>play_circle_filled</Icon>\r\n                                                                </IconButton>\r\n                                                            ) : (\r\n                                                                <IconButton title='Errores en el cuestionario'>\r\n                                                                    <Icon color='error'>error</Icon>\r\n                                                                </IconButton>\r\n                                                            )\r\n                                                        }\r\n                                                    </Grid>\r\n                                                    <Grid item>\r\n                                                        <IconButton title='Editar' onClick={(evt: React.MouseEvent<HTMLButtonElement>) => {\r\n                                                            evt.stopPropagation();\r\n                                                            handleEditClick(evt, aTest);\r\n                                                        }}>\r\n                                                            <Icon color='primary'>edit</Icon>\r\n                                                        </IconButton>\r\n                                                    </Grid>\r\n                                                    <Grid item>\r\n                                                        <IconButton title='Eliminar' onClick={(evt) => {\r\n                                                            evt.stopPropagation();\r\n                                                            handleRemoveTestClick(aTest);\r\n                                                        }}>\r\n                                                            <Icon>delete</Icon>\r\n                                                        </IconButton>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </ListItemSecondaryAction>                                        \r\n                                        </ListItem>\r\n                                        <Divider variant='inset' component='li' />\r\n                                    </Fragment>\r\n                                ))\r\n                            }\r\n                        </List>\r\n                    }\r\n                    <Grid item xs={12} className={classes.bottomContainer}>\r\n                        <Grid container justify='flex-end'>\r\n                            <Button\r\n                                variant='contained'\r\n                                color='primary'\r\n                                onClick={handleCreateTestClick}\r\n                            >\r\n                                Nuevo cuestionario\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { Fragment, useRef } from 'react';\r\nimport { Button, makeStyles } from '@material-ui/core';\r\nimport { colors } from '../../theme';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    uploadInput: {\r\n        display: 'none'\r\n    }\r\n}));\r\n\r\ninterface HTMLInputEvent extends Event {\r\n    target: HTMLInputElement & EventTarget;\r\n}\r\n\r\ninterface JsonLoaderProps {\r\n    onDataLoaded: (data: unknown) => void\r\n    onError?: () => void\r\n}\r\n\r\nexport const JsonLoader: React.FC<JsonLoaderProps> = (props: JsonLoaderProps) => {\r\n    const { onDataLoaded, onError } = props;\r\n\r\n    const inputImport = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleInput = (event: unknown) => {\r\n        try {\r\n            const evt = event as HTMLInputEvent;\r\n            if (evt?.target?.files != null) {\r\n                const file = evt.target.files[0];\r\n                const reader = new FileReader();\r\n                reader.readAsText(file);\r\n                reader.onloadend = (e) => {\r\n                    try {\r\n                        const newProject = JSON.parse(reader.result as string);\r\n                        onDataLoaded(newProject);\r\n                    } catch (err) {\r\n                        if (onError) {\r\n                            onError();\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n        } catch (err) {\r\n            if (onError) {\r\n                onError();\r\n            }\r\n        }\r\n        inputImport.current.value = '';\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <input\r\n                ref={inputImport}\r\n                accept='text'\r\n                className={classes.uploadInput}\r\n                id='contained-button-file'\r\n                multiple\r\n                type='file'\r\n                onInput={handleInput}\r\n            />\r\n            <Button style={{ color: colors.primary.dark }}>\r\n                <label htmlFor='contained-button-file'>\r\n                    Importar proyecto\r\n                </label>\r\n            </Button>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useRef, useState } from 'react';\r\nimport { Button, Grid, TextField } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Project } from '../../types/Project';\r\n\r\ninterface FormState {\r\n    name: string,\r\n    description: string\r\n}\r\n\r\nconst initialState = (project?: Project): FormState => {\r\n    if (project != null) {\r\n        return {\r\n            name: project.name,\r\n            description: project.description || '' \r\n        };\r\n    }\r\n    return {\r\n        name: '',\r\n        description: ''\r\n    };\r\n};\r\n\r\ninterface ProjectFormProps {\r\n    project?: Project,\r\n    onAccept: (newProject: Project) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const ProjectForm: React.FC<ProjectFormProps> = (props: ProjectFormProps) => {\r\n    const { project, onAccept, onCancel } = props;\r\n\r\n    const [formState, setFormState] = useState<FormState>(initialState(project));\r\n\r\n    const inputName = useRef({} as HTMLInputElement);\r\n    const inputDescription = useRef({} as HTMLInputElement);\r\n\r\n    const handleNameChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            name: inputName.current.value\r\n        });\r\n    };\r\n\r\n    const handleDescriptionChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            description: inputDescription.current.value\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        const newProject: Project = project ?\r\n            {\r\n                ...project,\r\n                name: inputName.current.value,\r\n                description: inputDescription.current.value\r\n            }\r\n            : {\r\n                id: uuidv4(),\r\n                name: inputName.current.value,\r\n                description: inputDescription.current.value,\r\n                tests: []\r\n            };\r\n\r\n        onAccept(newProject);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            direction='column'\r\n            spacing={2}\r\n        >\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputName}\r\n                    label='Nombre'\r\n                    fullWidth\r\n                    value={formState.name}\r\n                    onInput={handleNameChange} \r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputDescription}\r\n                    label='Descripción'\r\n                    fullWidth\r\n                    value={formState.description}\r\n                    onInput={handleDescriptionChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid container justify='flex-end' spacing={1}>\r\n                    <Grid item>\r\n                        <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { ChangeEvent, Fragment, useState } from 'react';\r\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Button, Dialog, DialogTitle, Divider, Grid, Icon, IconButton, makeStyles, Snackbar, SnackbarContent, Typography } from '@material-ui/core';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Project } from '../../types/Project';\r\nimport { colors } from '../../theme';\r\nimport { TestList } from '../TestList';\r\nimport { DialogConfirm } from '../DialogConfirm';\r\nimport { JsonLoader } from '../JsonLoader';\r\nimport { isValidProject } from '../../utils/utilValidationTypes';\r\nimport { ProjectForm } from '../ProjectForm';\r\nimport { Test } from '../../types/Test';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15)\r\n    },\r\n    secondaryHeading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        color: colors.secondary.main\r\n    },\r\n    gridContainer: {\r\n        padding: '0px 10px'\r\n    },\r\n    gridItems: {\r\n        flexGrow: 1,\r\n    },\r\n    messageControl: {\r\n        backgroundColor: colors.error,\r\n        color: colors.font.errorContrast\r\n    },\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    }\r\n}));\r\n\r\ninterface ProjectListProps {\r\n    projects: Project[],\r\n    setProjects: (newProjects: Project[]) => void\r\n}\r\n\r\nexport const ProjectList: React.FC<ProjectListProps> = (props: ProjectListProps) => {\r\n    const { projects, setProjects } = props;\r\n\r\n    const history = useHistory();\r\n\r\n    const [expandedProject, setExpandedProject] = React.useState<string | false>(false);\r\n    const [openProjectForm, setOpenProjectForm] = useState<boolean>(false);\r\n    const [openRemoveProjectConfirm, setOpenRemoveProjectConfirm] = useState<boolean>(false);\r\n    const [selectedProject, setSelectedProject] = useState<Project>();\r\n    const [openMessage, setOpenMessage] = useState<boolean>(false);\r\n    const [messageText, setMessageText] = useState<string>('');\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleExpandChange = (project: Project, isExpanded: boolean) => {\r\n        setExpandedProject(isExpanded ? project.id : false);\r\n    };\r\n\r\n    const handleNewProjectClick = () => {\r\n        setOpenProjectForm(true);\r\n    };\r\n\r\n    const handleEditProjectClick = (project: Project) => {\r\n        setSelectedProject(project);\r\n        setOpenProjectForm(true);\r\n    };\r\n\r\n    const handleRemoveProjectClick = (project: Project) => {\r\n        setSelectedProject(project);\r\n        setOpenRemoveProjectConfirm(true);\r\n    };\r\n\r\n    const handleExportProjectClick = (project: Project) => {\r\n        const element = document.createElement('a');\r\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(project)));\r\n        element.setAttribute('download', project.name.replace(/ /g, '_'));\r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n        element.click();\r\n        document.body.removeChild(element);\r\n    };\r\n\r\n    const handleProjectFormAccept = (newProject: Project) => {\r\n        if (selectedProject != null) {\r\n            setProjects(projects.map((aProject: Project) => aProject.id === newProject.id ? newProject : aProject));\r\n        } else {\r\n            setProjects([\r\n                ...projects,\r\n                {\r\n                    ...newProject\r\n                }\r\n            ]);\r\n        }\r\n        setSelectedProject(undefined);\r\n        setOpenProjectForm(false);\r\n    };\r\n\r\n    const handleProjectFormCancel = () => {\r\n        setSelectedProject(undefined);\r\n        setOpenProjectForm(false);\r\n    };\r\n\r\n    const handleImportProject = (project: unknown) => {\r\n        const newProject = project as Project;\r\n        if (!isValidProject(newProject)) {\r\n            setMessageText('El proyecto es inválido');\r\n            setOpenMessage(true);\r\n        }\r\n        const exist = projects.find((aProject: Project) => aProject.id === newProject.id) != null;\r\n        if (!exist) {\r\n            setProjects([\r\n                ...projects,\r\n                {\r\n                    ...newProject\r\n                }\r\n            ]);\r\n        } else {\r\n            setMessageText('El proyecto ya existe');\r\n            setOpenMessage(true);\r\n        }\r\n    };\r\n\r\n    const handleImportProjectError = () => {\r\n        setMessageText('Se produjo un error en la importación');\r\n        setOpenMessage(true);\r\n    };\r\n\r\n    const handleConfirmRemoveProject = () => {\r\n        if (selectedProject != null) {\r\n            setProjects(projects.filter((aProject: Project) => aProject.id !== selectedProject.id));\r\n        }\r\n        setOpenRemoveProjectConfirm(false);\r\n    };\r\n\r\n    const handleRefuseRemoveProject = () => {\r\n        setOpenRemoveProjectConfirm(false);\r\n    };\r\n\r\n    const handleCreateTest = (projectId: string, test: Test) => {\r\n        const theProject = projects.find((aProject: Project) => aProject.id === projectId);\r\n        const updating = theProject != null && theProject.tests.some((aTest: Test) => aTest.id === test.id);\r\n\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return {...aProject};\r\n            }\r\n            if (updating) {\r\n                const updatedTests = aProject.tests.map((aTest: Test) => aTest.id === test.id ? {...test} : {...aTest});\r\n                return {\r\n                    ...aProject,\r\n                    tests: [...updatedTests]\r\n                };\r\n            } \r\n            return {\r\n                ...aProject,\r\n                tests: [...aProject.tests, test]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        if (!updating) {\r\n            history.push(`/designer/${projectId}/${test.id}`);\r\n        }\r\n    };\r\n\r\n    const handleDeleteTest = (projectId: string, test: Test) => {\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return {...aProject};\r\n            }\r\n            const updatedTests = aProject.tests.filter((aTest: Test) => aTest.id !== test.id);\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n    };\r\n\r\n    const handleMessageClose = () => {\r\n        setOpenMessage(false);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Dialog\r\n                open={openProjectForm}\r\n                fullWidth\r\n                maxWidth='sm'\r\n            >\r\n                <DialogTitle>Proyecto</DialogTitle>\r\n                <Box className={classes.dialogContainer}>\r\n                    <ProjectForm\r\n                        project={selectedProject}\r\n                        onAccept={handleProjectFormAccept}\r\n                        onCancel={handleProjectFormCancel}\r\n                    />\r\n                </Box>\r\n            </Dialog>\r\n            <DialogConfirm\r\n                open={openRemoveProjectConfirm}\r\n                text='¿Seguro que deseas eliminar el proyecto?'\r\n                width='xs'\r\n                onConfirm={handleConfirmRemoveProject}\r\n                onRefuse={handleRefuseRemoveProject}\r\n            />\r\n            <Snackbar\r\n                open={openMessage}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                autoHideDuration={3000}\r\n                onClose={handleMessageClose}\r\n            >\r\n                <SnackbarContent\r\n                    message={\r\n                        <Grid container spacing={4}>\r\n                            <Grid item xs={1}>\r\n                                <Icon>error</Icon>\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <Typography>{messageText}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    }\r\n                    className={classes.messageControl}\r\n                />\r\n            </Snackbar>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <Grid container direction='row' justify='center' alignItems='center' spacing={2} className={classes.gridContainer}>\r\n                        <Grid item className={classes.gridItems}>\r\n                            <Typography variant='h6'>\r\n                                Proyectos\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button\r\n                                style={{ color: colors.primary.dark }}\r\n                                onClick={handleNewProjectClick}\r\n                            >\r\n                                Nuevo proyecto\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <JsonLoader\r\n                                onDataLoaded={handleImportProject}\r\n                                onError={handleImportProjectError}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    {\r\n                        projects.map((aProject: Project) => (\r\n                            <Accordion\r\n                                key={aProject.id}\r\n                                expanded={expandedProject === aProject.id}\r\n                                onChange={ (event: ChangeEvent<unknown>, isExpanded: boolean) => {\r\n                                    handleExpandChange(aProject, isExpanded);\r\n                                }}\r\n                            >\r\n                                <AccordionSummary title={aProject.description}>\r\n                                    <Grid container justify='space-between' alignItems='center'>\r\n                                        <Grid item xs={3}>\r\n                                            <Typography className={classes.heading}>{aProject.name}</Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={7}>\r\n                                            <Typography className={classes.secondaryHeading}>\r\n                                                {`${aProject.tests.length} cuestionario${aProject.tests.length !== 1 ? 's' : ''}`}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <IconButton\r\n                                                title='Descargar'\r\n                                                color='primary'\r\n                                                onClick={(evt) => {\r\n                                                    evt.stopPropagation();\r\n                                                    handleExportProjectClick(aProject);\r\n                                                }}\r\n                                            >\r\n                                                <Icon>download</Icon>\r\n                                            </IconButton>\r\n                                            {\r\n                                                <IconButton\r\n                                                    title='Editar'\r\n                                                    color='primary'\r\n                                                    onClick={(evt) => {\r\n                                                        evt.stopPropagation();\r\n                                                        handleEditProjectClick(aProject);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon>edit</Icon>\r\n                                                </IconButton>\r\n                                            }\r\n                                            {\r\n                                                <IconButton\r\n                                                    title='Eliminar'\r\n                                                    onClick={(evt) => {\r\n                                                        evt.stopPropagation();\r\n                                                        handleRemoveProjectClick(aProject);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon>delete</Icon>\r\n                                                </IconButton>\r\n                                            }\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </AccordionSummary>\r\n                                <AccordionDetails>\r\n                                    <TestList\r\n                                        project={aProject}\r\n                                        onCreateTest={handleCreateTest}\r\n                                        onDeleteTest={handleDeleteTest}\r\n                                    />\r\n                                </AccordionDetails>\r\n                            </Accordion>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { useProjects } from '../../hooks/useProjects';\r\nimport { ProjectList } from '../../components/ProjectList';\r\n\r\nexport const Home = () => {\r\n    const { projects, setProjects } = useProjects();\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n        >\r\n            <Grid item xs={7}>\r\n                <ProjectList\r\n                    projects={projects}\r\n                    setProjects={setProjects}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Icon } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { ChallengeType } from \"../enums/ChallengeType\";\r\nimport { Language } from \"../enums/Language\";\r\nimport { Challenge, ChallengeConfig } from \"../types/Challenge\";\r\nimport { CSSProperties } from '@material-ui/styles';\r\nimport { PictureType } from '../enums/PictureType';\r\nimport { SelectAnswerChallenge, SelectAnswerChallengeConfig } from '../types/SelectAnswerChallenge';\r\nimport { TrueOrFalseChallenge, TrueOrFalseChallengeConfig } from '../types/TrueOrFalseChallenge';\r\nimport { ClassifyChallenge, ClassifyChallengeConfig } from '../types/ClassifyChallenge';\r\nimport { SortChallenge, SortChallengeConfig } from '../types/SortChallenge';\r\n\r\nexport const getChallengeTypeDescription = (type: ChallengeType, language: Language = Language.Es): string => {\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer:\r\n            return language === Language.Es ? \"Selecciona la respuesta correcta\" : \"Choose the correct answer\";\r\n        case ChallengeType.TrueOrFalse:\r\n            return language === Language.Es ? \"Verdadero o falso\" : \"True or false\";\r\n        case ChallengeType.Match:\r\n            return language === Language.Es ? \"Une las opciones\" : \"Match the options\";\r\n        case ChallengeType.FillGaps:\r\n            return language === Language.Es ? \"Rellena los huecos\" : \"Fill in the gaps\";\r\n        case ChallengeType.Sort:\r\n            return language === Language.Es ? \"Ordena los elementos\" : \"Order the elements\";\r\n        case ChallengeType.Classify:\r\n            return language === Language.Es ? \"Clasifica los elementos\" : \"Classify the elements\";\r\n        case ChallengeType.FillTable:\r\n            return language === Language.Es ? \"Completa la tabla\" : \"Complete the table\";\r\n        case ChallengeType.Crossword:\r\n            return language === Language.Es ? \"Crucigrama\" : \"Crossword\";\r\n        default:\r\n            return language === Language.Es ? \"Sin definir\" : \"Undefined\";\r\n    }\r\n};\r\n\r\nexport const getChallengeTypeIcon = (type: ChallengeType, size: 'large' | 'default' | 'small' = 'default', style: CSSProperties = {}): JSX.Element => {\r\n    return (\r\n        <Icon fontSize={size} style={style}>\r\n            {\r\n                type === ChallengeType.SelectAnswer ? 'widgets'\r\n                    : type === ChallengeType.TrueOrFalse ? 'check'\r\n                        : type === ChallengeType.FillGaps ? 'space_bar'\r\n                            : type === ChallengeType.Match ? 'shuffle'\r\n                                : type === ChallengeType.Sort ? 'swap_vert'\r\n                                    : type === ChallengeType.Classify ? 'category'\r\n                                        : type === ChallengeType.FillTable ? 'grid_on'\r\n                                            : type === ChallengeType.Crossword ? 'font_download' : ''\r\n            }\r\n        </Icon>\r\n    );\r\n};\r\n\r\nconst getDefaultChallengeConfig = (type: ChallengeType): ChallengeConfig => {\r\n    const defaultChallengeConfig: ChallengeConfig = {\r\n        timeLimit: 30,\r\n        questionFontSize: 28\r\n    };\r\n\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                answerFontSize: 22,\r\n                pictureCount: 1,\r\n                pictureLabel: false,\r\n                multiselect: false\r\n            } as SelectAnswerChallengeConfig;\r\n        case ChallengeType.TrueOrFalse:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                pictureCount: 1,\r\n                pictureLabel: false\r\n            } as TrueOrFalseChallengeConfig;\r\n        case ChallengeType.Match:\r\n            return defaultChallengeConfig;\r\n        case ChallengeType.FillGaps:\r\n            return defaultChallengeConfig;\r\n        case ChallengeType.Sort:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                itemsFontSize: 18,\r\n                itemCount: 5\r\n            } as SortChallengeConfig;\r\n        case ChallengeType.Classify:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                itemsFontSize: 18,\r\n                groupCount: 3\r\n            } as ClassifyChallengeConfig;\r\n        default:\r\n            return defaultChallengeConfig;\r\n    }\r\n};\r\n\r\nexport const getDefaultChallenge = (type: ChallengeType): Challenge => {\r\n    const defaultChallenge: Challenge = {\r\n        id: uuidv4(),\r\n        type,\r\n        question: '',\r\n        config: getDefaultChallengeConfig(type)\r\n    };\r\n\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer:\r\n            return {\r\n                ...defaultChallenge,\r\n                pictures: [{\r\n                    type: PictureType.None,\r\n                    data: ''\r\n                }],\r\n                answers: [\r\n                    { text: '', valid: false },\r\n                    { text: '', valid: false },\r\n                    { text: '', valid: false },\r\n                    { text: '', valid: false }\r\n                ]\r\n            } as SelectAnswerChallenge;\r\n        case ChallengeType.TrueOrFalse:\r\n            return {\r\n                ...defaultChallenge,\r\n                pictures: [{\r\n                    type: PictureType.None,\r\n                    data: ''\r\n                }],\r\n                answer: true\r\n            } as TrueOrFalseChallenge;\r\n        case ChallengeType.Match:\r\n            return defaultChallenge;\r\n        case ChallengeType.FillGaps:\r\n            return defaultChallenge;\r\n        case ChallengeType.Sort:\r\n            return {\r\n                ...defaultChallenge,\r\n                items: ['', '', '', '', '']\r\n            } as SortChallenge;\r\n        case ChallengeType.Classify:\r\n            return {\r\n                ...defaultChallenge,\r\n                groups: [\r\n                    { name: '', items: ([] as string[]) },\r\n                    { name: '', items: ([] as string[]) },\r\n                    { name: '', items: ([] as string[]) }\r\n                ]\r\n            } as ClassifyChallenge;\r\n        default:\r\n            return defaultChallenge;\r\n    }\r\n};\r\n","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Card, CardActionArea, CardActions, CardContent, CardHeader, Chip, Grid, Icon, IconButton, makeStyles, Tooltip, Typography } from '@material-ui/core';\r\nimport { Challenge } from '../../types/Challenge';\r\nimport { getChallengeTypeDescription, getChallengeTypeIcon } from '../../utils/utilChallenges';\r\nimport { isValidChallenge, Validation } from '../../utils/utilValidationTypes';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    },\r\n    description: {\r\n        width: '100%',\r\n        whiteSpace: 'nowrap',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis'\r\n    },\r\n    tooltipRow: {\r\n        fontSize: '12px'\r\n    },\r\n    statusContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    }\r\n});\r\n\r\ninterface ChallengeThumbnailProps {\r\n    challenge: Challenge,\r\n    position: number,\r\n    selected?: boolean,\r\n    compact?: boolean,\r\n    onClick?: (selectedChallenge: Challenge) => void,\r\n    onDelete?: (deletedChallenge: Challenge) => void\r\n}\r\n\r\nexport const ChallengeThumbnail: React.FC<ChallengeThumbnailProps> = (props: ChallengeThumbnailProps) => {\r\n    const { challenge, position, selected, compact, onClick, onDelete } = props;\r\n\r\n    const [validation, setValidation] = useState<Validation>({ valid: true, errorMessage: [] });\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleClick = () => {\r\n        if (onClick) {\r\n            onClick(challenge);\r\n        }\r\n    };\r\n\r\n    const handleDeleteClick = () => {\r\n        if (onDelete) {\r\n            onDelete(challenge);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setValidation(isValidChallenge(challenge));\r\n    }, [challenge]);\r\n\r\n    return (\r\n        <Fragment>\r\n            {\r\n                <Card variant={selected ? 'elevation' : 'outlined'} elevation={10} className={classes.fullWidth}>\r\n                    <CardActionArea className={classes.fullWidth} onClick={handleClick}>\r\n                        <CardHeader\r\n                            avatar={\r\n                                compact ? getChallengeTypeIcon(challenge.type, 'small') : undefined\r\n                            }\r\n                            subheader={\r\n                                <Typography variant='subtitle2' color={selected ? 'secondary' : 'textPrimary'} className={classes.description}>\r\n                                    { compact ? challenge.question : `#${position} ${getChallengeTypeDescription(challenge.type)}` }\r\n                                </Typography>\r\n                            }\r\n                            action={\r\n                                compact ? (\r\n                                    <Grid container alignItems=\"center\">\r\n                                        {\r\n                                            validation.valid ? <Icon color=\"primary\" fontSize=\"small\">check</Icon>\r\n                                                : (\r\n                                                    <Tooltip arrow title={\r\n                                                        <>\r\n                                                            {\r\n                                                                validation.errorMessage.map((aMessage: string) => (\r\n                                                                    <li className={classes.tooltipRow}>\r\n                                                                        {aMessage}\r\n                                                                    </li>\r\n                                                                ))\r\n                                                            }\r\n                                                        </>\r\n                                                    }>\r\n                                                        <Icon color=\"secondary\" fontSize=\"small\">priority_high</Icon>\r\n                                                    </Tooltip>\r\n                                                )\r\n                                        }\r\n                                        {/* <IconButton onClick={handleDeleteClick}>\r\n                                            <Icon>delete</Icon>\r\n                                        </IconButton> */}\r\n                                    </Grid>\r\n                                ) : undefined\r\n                            }\r\n                        />\r\n                        {\r\n                            !compact && (\r\n                                <CardContent>\r\n                                    <Typography noWrap>{challenge.question}</Typography>\r\n                                </CardContent>\r\n                            )\r\n                        }\r\n                    </CardActionArea>\r\n                    {\r\n                        !compact && (\r\n                            <CardActions className={classes.statusContainer}>\r\n                                {\r\n                                    validation.valid ? <Chip label=\"completo\" color=\"primary\" size=\"small\" icon={<Icon fontSize=\"small\">check</Icon>} />\r\n                                        : (\r\n                                            <Tooltip arrow title={\r\n                                                <>\r\n                                                    {\r\n                                                        validation.errorMessage.map((aMessage: string) => (\r\n                                                            <li className={classes.tooltipRow}>\r\n                                                                {aMessage}\r\n                                                            </li>\r\n                                                        ))\r\n                                                    }\r\n                                                </>\r\n                                            }>\r\n                                                <Chip label=\"error\" color=\"secondary\" size=\"small\" style={{ color: '#ffffff' }} icon={<Icon fontSize=\"small\">priority_high</Icon>} />\r\n                                            </Tooltip>\r\n                                        )\r\n                                }\r\n                                <IconButton onClick={handleDeleteClick}>\r\n                                    <Icon>delete</Icon>\r\n                                </IconButton>\r\n                            </CardActions>\r\n                        )\r\n                    }\r\n                </Card>\r\n            }\r\n            {/* {\r\n                compact && (\r\n                    <Card variant={selected ? 'elevation' : 'outlined'} elevation={10} className={classes.fullWidth}>\r\n                        <CardActionArea onClick={handleClick}>\r\n                            <CardHeader\r\n                                subheader={\r\n                                    <Grid container alignItems=\"center\" spacing={1}>\r\n                                        <Grid item>\r\n                                            { getChallengeTypeIcon(challenge.type) }\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography variant='subtitle2' color={selected ? 'secondary' : 'textPrimary'} className={classes.description}>\r\n                                                { challenge.question }\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                }\r\n                                action={\r\n                                    <Grid container alignItems=\"center\">\r\n                                        {\r\n                                            validation.valid ? <Icon color=\"primary\" fontSize=\"small\">check</Icon>\r\n                                                : (\r\n                                                    <Tooltip arrow title={\r\n                                                        <>\r\n                                                            {\r\n                                                                validation.errorMessage.map((aMessage: string) => (\r\n                                                                    <li className={classes.tooltipRow}>\r\n                                                                        {aMessage}\r\n                                                                    </li>\r\n                                                                ))\r\n                                                            }\r\n                                                        </>\r\n                                                    }>\r\n                                                        <Icon color=\"secondary\" fontSize=\"small\">priority_high</Icon>\r\n                                                    </Tooltip>\r\n                                                )\r\n                                        }\r\n                                        <IconButton onClick={handleDeleteClick}>\r\n                                            <Icon>delete</Icon>\r\n                                        </IconButton>                                        \r\n                                    </Grid>\r\n                                }\r\n                            />\r\n                        </CardActionArea>\r\n                    </Card>\r\n                )\r\n            } */}\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { Challenge } from '../../types/Challenge';\r\nimport { ChallengeThumbnail } from '../ChallengeThumbnail';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        overflowY: 'auto'\r\n    },\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface ChallengeSelectorProps {\r\n    challenges: Challenge[],\r\n    compactList?: boolean,\r\n    selected?: Challenge,\r\n    onSelect?: (challenge: Challenge) => void,\r\n    onDelete?: (challenge: Challenge) => void\r\n}\r\n\r\nexport const ChallengeSelector: React.FC<ChallengeSelectorProps> = (props: ChallengeSelectorProps) => {\r\n    const { challenges, compactList, selected, onSelect, onDelete } = props;\r\n\r\n    const [selectedChallenge, setSelectedChallenge] = useState<Challenge | undefined>(selected || undefined);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleThumbnailClick = (challenge: Challenge) => {\r\n        setSelectedChallenge(challenge);\r\n        if (onSelect) {\r\n            onSelect(challenge);\r\n        }\r\n    };\r\n\r\n    const handleThumbnailDelete = (challenge: Challenge) => {\r\n        if (onDelete) {\r\n            onDelete(challenge);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' alignItems='center' spacing={2} className={classes.root}>\r\n            {\r\n                challenges.map((aChallenge: Challenge, idx: number) => (\r\n                    <Grid item key={idx} className={classes.fullWidth}>\r\n                        <ChallengeThumbnail\r\n                            challenge={aChallenge}\r\n                            position={idx + 1}\r\n                            selected={selectedChallenge?.id === aChallenge.id}\r\n                            compact={compactList}\r\n                            onClick={handleThumbnailClick}\r\n                            onDelete={handleThumbnailDelete}\r\n                        />\r\n                    </Grid>\r\n                ))\r\n            }\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, makeStyles, TextField } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    inputContainer: {\r\n        width: '90%',\r\n        height: '80%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    input: {\r\n        width: '90%'\r\n    }\r\n});\r\n\r\ninterface ChallengeQuestionProps {\r\n    mode: ComponentMode\r\n    question: string\r\n    fontSize?: number\r\n    onChange?: (newTitle: string) => void\r\n}\r\n\r\nexport const ChallengeQuestion: React.FC<ChallengeQuestionProps> = (props: ChallengeQuestionProps) => {\r\n    const { mode, question, fontSize, onChange } = props;\r\n\r\n    const [questionText, setQuestionText] = useState<string>(question);\r\n    const inputQuestion = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setQuestionText(question);\r\n    },[question]);\r\n\r\n    const handleInputChange = () => {\r\n        setQuestionText(inputQuestion.current.value);\r\n        if (onChange) {\r\n            onChange(inputQuestion.current.value);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Card className={classes.inputContainer}>\r\n                <TextField\r\n                    inputRef={inputQuestion}\r\n                    variant='standard'\r\n                    className={classes.input}\r\n                    inputProps = {{\r\n                        style: {\r\n                            textAlign: 'center',\r\n                            fontSize: `${fontSize != null ? fontSize : 28}px`,\r\n                            lineHeight: '32px'\r\n                        }\r\n                    }}\r\n                    InputProps={{\r\n                        readOnly: mode === ComponentMode.Play,\r\n                        disableUnderline: mode === ComponentMode.Play\r\n                    }}\r\n                    placeholder='Escribe aquí el enunciado o pregunta'\r\n                    multiline\r\n                    rowsMax={2}\r\n                    value={questionText}\r\n                    onInput={handleInputChange}\r\n                />\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n    CardActionArea,\r\n    Checkbox,\r\n    Grid,\r\n    Icon,\r\n    InputAdornment,\r\n    makeStyles,\r\n    Radio,\r\n    TextField\r\n} from '@material-ui/core';\r\nimport Card from '@material-ui/core/Card';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { colors } from '../../theme';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    option: {\r\n        width: '100%',\r\n        height: '100%'\r\n    },\r\n    optionActionArea: {\r\n        height: '100%',\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionInput: {\r\n        width: '90%',\r\n        color: '#ffffff'\r\n    },\r\n    optionInnerInput: {\r\n        cursor: 'pointer'\r\n    },\r\n    optionIcon: {\r\n        color: '#ffffff'\r\n    },\r\n    selector: {\r\n        color: '#ffffff',\r\n        '&$checked': {\r\n            color: '#ffffff'\r\n        }\r\n    },\r\n    checked: {}\r\n}));\r\n\r\ninterface OptionState {\r\n    text: string,\r\n    valid: boolean\r\n}\r\n\r\ninterface SelectableOptionProps {\r\n    mode: ComponentMode\r\n    text: string,\r\n    icon: string,\r\n    valid?: boolean,\r\n    selected?: boolean,\r\n    color?: string,\r\n    fontSize?: number,\r\n    multiselect?: boolean\r\n    showResults?: boolean\r\n    onClick?: () => void\r\n    onTextChange?: (newText: string) => void\r\n    onValidChange?(newValid: boolean): void\r\n}\r\n\r\nexport const SelectableOption: React.FC<SelectableOptionProps> = (props: SelectableOptionProps) => {\r\n    const {\r\n        mode,\r\n        text,\r\n        icon,\r\n        valid,\r\n        selected,\r\n        color,\r\n        fontSize,\r\n        multiselect,\r\n        showResults,\r\n        onClick,\r\n        onTextChange,\r\n        onValidChange\r\n    } = props;\r\n\r\n    const [optionState, setOptionState] = useState<OptionState>({ text: text || '', valid: valid || false });\r\n    const inputTextOption = useRef({} as HTMLInputElement);\r\n    const radioOption = useRef({} as HTMLInputElement);\r\n    const checkOption = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setOptionState({ text: text || '', valid: valid || false });\r\n    }, [text, valid]);\r\n\r\n    const handleOptionTextChange = () => {\r\n        const newState = {\r\n            ...optionState,\r\n            text: inputTextOption.current.value\r\n        };\r\n        setOptionState(newState);\r\n        if (onTextChange) {\r\n            onTextChange(inputTextOption.current.value);\r\n        }\r\n    };\r\n\r\n    const handleRadioChange = () => {\r\n        const newState = {\r\n            ...optionState,\r\n            selected: radioOption.current.checked\r\n        };\r\n        setOptionState(newState);\r\n        if (onValidChange) {\r\n            onValidChange(radioOption.current.checked);\r\n        }\r\n    };\r\n\r\n    const handleCheckboxChange = () => {\r\n        const newState = {\r\n            ...optionState,\r\n            selected: checkOption.current.checked\r\n        };\r\n        setOptionState(newState);\r\n        if (onValidChange) {\r\n            onValidChange(checkOption.current.checked);\r\n        }\r\n    };\r\n\r\n    const handlerOptionClick = () => {\r\n        if (onClick) {\r\n            onClick();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            className={classes.option}\r\n            style={{\r\n                backgroundColor: color || colors.primary.main,\r\n                borderStyle: 'solid',\r\n                borderWidth: (showResults && valid) || selected ? '3px' : '0px',\r\n                borderColor: showResults ? (\r\n                    valid ? '#00ff00' : '#ff0000'\r\n                ) : '#323232'\r\n            }}>\r\n            {\r\n                mode === ComponentMode.Design ? (\r\n                    <div className={classes.optionActionArea}>\r\n                        <TextField\r\n                            inputRef={inputTextOption}\r\n                            value={optionState.text}\r\n                            placeholder=\"Escribe aquí una respuesta\"\r\n                            className={classes.optionInput}\r\n                            InputProps={{\r\n                                style: {\r\n                                    color: '#ffffff',\r\n                                    fontSize: `${fontSize || 22}px`,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <Icon className={classes.optionIcon}>{icon}</Icon>\r\n                                    </InputAdornment>\r\n                                ),\r\n                                endAdornment: (\r\n                                    multiselect ? (\r\n                                        <Checkbox\r\n                                            inputRef={checkOption}\r\n                                            checked={optionState.valid}\r\n                                            classes={{ root: classes.selector, checked: classes.checked }}\r\n                                            onChange={handleCheckboxChange}\r\n                                        />\r\n                                    ) : (\r\n                                        <Radio\r\n                                            inputRef={radioOption}\r\n                                            checked={optionState.valid}\r\n                                            classes={{ root: classes.selector, checked: classes.checked }}\r\n                                            onChange={handleRadioChange}\r\n                                        />\r\n                                    )\r\n                                ),\r\n                            }}\r\n                            onInput={handleOptionTextChange}\r\n                            onClick={(ev) => { ev.preventDefault(); }}\r\n                        />\r\n                    </div>\r\n                ): (\r\n                    <CardActionArea\r\n                        className={classes.optionActionArea}\r\n                        onClick={handlerOptionClick}\r\n                    >\r\n                        <Grid container className={classes.optionInput} spacing={2} alignItems=\"center\">\r\n                            <Grid item>\r\n                                <Icon className={classes.optionIcon}>{icon}</Icon>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <label style={{color: '#ffffff', fontSize: `${fontSize || 22}px`, justifySelf: 'left'}}>\r\n                                    {optionState.text}\r\n                                </label>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardActionArea>\r\n                )\r\n            }\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Box, Button, Dialog, DialogTitle, Grid, makeStyles, TextField } from '@material-ui/core';\r\nimport { ChallengePicture } from '../../types/Challenge';\r\nimport { PictureType } from '../../enums/PictureType';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n}));\r\n\r\ninterface DialogPictureFormProps {\r\n    open: boolean,\r\n    picture: ChallengePicture\r\n    onAccept: (picture: ChallengePicture) => void\r\n    onCancel: () => void\r\n}\r\n\r\nexport const DialogPictureForm: React.FC<DialogPictureFormProps> = (props: DialogPictureFormProps) => {\r\n    const {open, picture, onAccept, onCancel} = props;\r\n\r\n    const [formState, setFormState] = useState<ChallengePicture>(picture);\r\n\r\n    const inputUrl = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (picture != null) {\r\n            setFormState(picture);\r\n        }\r\n    }, [picture]);\r\n\r\n    const handleUrlChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            data: inputUrl.current.value\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        const newPicture = {\r\n            type: PictureType.Url,\r\n            data: inputUrl.current.value\r\n        };\r\n\r\n        onAccept(newPicture);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth='sm'\r\n        >\r\n            <DialogTitle>Imagen</DialogTitle>\r\n            <Box className={classes.dialogContainer}>\r\n                <Grid\r\n                    container\r\n                    direction='column'\r\n                    spacing={2}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            inputRef={inputUrl}\r\n                            label='URL de la imagen'\r\n                            fullWidth\r\n                            value={formState.data}\r\n                            onInput={handleUrlChange} \r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container justify='flex-end' spacing={1}>\r\n                            <Grid item>\r\n                                <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Fab, Grid, GridSize, Icon, makeStyles } from '@material-ui/core';\r\nimport { ChallengePicture } from '../../types/Challenge';\r\nimport { PictureType } from '../../enums/PictureType';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { DialogPictureForm } from '../DialogPictureSelector';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '99%',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    pic: {\r\n        maxWidth: '100%',\r\n        maxHeight: '100%'\r\n    }\r\n}));\r\n\r\ninterface PictureDialogState {\r\n    selectedPicture: ChallengePicture,\r\n    selectedPictureIdx: number,\r\n    openDialog: boolean\r\n}\r\n\r\ninterface ItemGridSize {\r\n    height: string,\r\n    width: GridSize\r\n}\r\n\r\ninterface PictureGridProps {\r\n    mode: ComponentMode,\r\n    pictures: ChallengePicture[],\r\n    onPicturesChange?: (newPictures: ChallengePicture[]) => void\r\n}\r\n\r\nexport const PictureGrid: React.FC<PictureGridProps> = (props: PictureGridProps) => {\r\n    const { mode, pictures, onPicturesChange } = props;\r\n\r\n    const [pictureDialogState, setPictureDialogState] = useState<PictureDialogState>();\r\n\r\n    const classes = useStyles();\r\n\r\n    const [pictureItemSize, setPictureItemSize] = useState<ItemGridSize>({ height: '100%', width: 8 });\r\n\r\n    useEffect(() => {\r\n        switch (pictures.length) {\r\n            case 9:\r\n            case 8:\r\n            case 7:\r\n                setPictureItemSize({ height: '33.3%', width: 4 });\r\n                break;\r\n            case 6:\r\n            case 5:\r\n                setPictureItemSize({ height: '50%', width: 4 });\r\n                break;\r\n            case 4:\r\n            case 3:\r\n                setPictureItemSize({ height: '50%', width: 6 });\r\n                break;\r\n            case 2:\r\n                setPictureItemSize({ height: '100%', width: 6 });\r\n                break;\r\n            default:\r\n                setPictureItemSize({ height: '100%', width: 12 });\r\n                break;\r\n        }\r\n    }, [pictures]);\r\n\r\n    const handleAddPictureClick = (picture: ChallengePicture, pictureIdx: number) => {\r\n        setPictureDialogState({\r\n            openDialog: true,\r\n            selectedPicture: picture,\r\n            selectedPictureIdx: pictureIdx\r\n        });\r\n    };\r\n\r\n    const handleAcceptPicture = (picture: ChallengePicture, pictureIdx: number) => {\r\n        if (onPicturesChange) {\r\n            onPicturesChange(\r\n                pictures.map((aPicture: ChallengePicture, idx: number) => idx !== pictureIdx ? {...aPicture} : {...picture})\r\n            );\r\n        }\r\n        setPictureDialogState({\r\n            openDialog: false,\r\n            selectedPicture: {\r\n                type: PictureType.None,\r\n                data: ''\r\n            },\r\n            selectedPictureIdx: -1\r\n        });\r\n    };\r\n\r\n    const handleCancelPicture = () => {\r\n        setPictureDialogState({\r\n            openDialog: false,\r\n            selectedPicture: {\r\n                type: PictureType.None,\r\n                data: ''\r\n            },\r\n            selectedPictureIdx: -1\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            {\r\n                pictureDialogState && (\r\n                    <DialogPictureForm\r\n                        open={pictureDialogState.openDialog}\r\n                        picture={pictureDialogState.selectedPicture}\r\n                        onAccept={(newPic: ChallengePicture) => handleAcceptPicture(\r\n                            newPic, pictureDialogState.selectedPictureIdx\r\n                        )}\r\n                        onCancel={handleCancelPicture}\r\n                    />\r\n                )\r\n            }\r\n            <Grid container className={classes.root}>\r\n                {\r\n                    pictures.map((aPicture: ChallengePicture, pictureIdx: number) => (\r\n                        <Grid item\r\n                            key={`pic${pictureIdx.toString()}`}\r\n                            xs={pictureItemSize.width}\r\n                            style={{ height: pictureItemSize.height, border: mode === ComponentMode.Design ? 'solid 1px' : '0px' }}\r\n                        >\r\n                            <Grid container justify=\"center\" alignItems=\"center\" className={classes.fullHeight}>\r\n                                {\r\n                                    aPicture.type !== PictureType.None && (\r\n                                        <img className={classes.pic} src={aPicture.data} alt=\"\"/>\r\n                                    )\r\n                                }\r\n                                {\r\n                                    mode === ComponentMode.Design && (\r\n                                        <Fab\r\n                                            size=\"medium\"\r\n                                            color=\"primary\"\r\n                                            style={{position: 'absolute', color: '#ffffff'}}\r\n                                            onClick={() => { handleAddPictureClick(aPicture, pictureIdx); }}\r\n                                        >\r\n                                            <Icon>add_a_photo</Icon>\r\n                                        </Fab>\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                        </Grid>\r\n                    ))\r\n                }\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Box, CircularProgress, Grid, Typography } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\ninterface CountdownProps {\r\n    mode: ComponentMode\r\n    time: number,\r\n    stopTimer?: boolean,\r\n    onTimeUp?: () => void\r\n}\r\n\r\n\r\nexport const Countdown: React.FC<CountdownProps> = (props: CountdownProps) => {\r\n    const { mode, time, stopTimer, onTimeUp } = props;\r\n\r\n    const [timeRemaining, setTimeRemaining] = useState<number>(time);\r\n    const [stop, setStop] = useState<boolean>(stopTimer || false);\r\n\r\n\r\n    useEffect(() => {\r\n        setTimeRemaining(time);\r\n    }, [time]);\r\n\r\n    useEffect(() => {\r\n        setStop(stopTimer || false);\r\n    }, [stopTimer]);\r\n\r\n    useEffect(() => {\r\n        let timeoutId: NodeJS.Timeout;\r\n        if (mode === ComponentMode.Play && !stop) {\r\n            timeoutId = setTimeout(() => {\r\n                if (timeRemaining === 0) {\r\n                    if (onTimeUp) {\r\n                        onTimeUp();\r\n                    }\r\n                } else {\r\n                    setTimeRemaining(timeRemaining - 1);\r\n                }\r\n            }, 1000);\r\n        }\r\n        return () => {\r\n            if (timeoutId != null) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n        };\r\n    }, [timeRemaining, onTimeUp]);\r\n\r\n    return (\r\n        <Grid container justify=\"center\" alignItems=\"center\" style={{height: '100%'}}>\r\n            <Grid item>\r\n                <Box position=\"relative\" display=\"inline-flex\">\r\n                    <CircularProgress\r\n                        variant=\"determinate\"\r\n                        color={timeRemaining > 5 ? 'primary': 'secondary'}\r\n                        size=\"75px\"\r\n                        value={Math.round((timeRemaining * 100.0) / (time * 1.0))} />\r\n                    <Box\r\n                        top={0}\r\n                        left={0}\r\n                        bottom={0}\r\n                        right={0}\r\n                        position=\"absolute\"\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                    >\r\n                        <Typography variant=\"h5\" component=\"div\" color=\"textSecondary\">{timeRemaining}</Typography>\r\n                    </Box>\r\n                </Box>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/correct.6415db46.wav\";","export default __webpack_public_path__ + \"static/media/incorrect.70fff5c7.wav\";","import React, { useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../ChallengeQuestion';\r\nimport { SelectableOption } from '../SelectableOption';\r\nimport { SelectAnswerChallenge, SelectAnswerChallengeAnswer } from '../../types/SelectAnswerChallenge';\r\nimport { PictureGrid } from '../PictureGrid';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../Countdown';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { ChallengePicture } from '../../types/Challenge';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    pictureContainer: {\r\n        height: '50%'\r\n    },\r\n    answerContainer: {\r\n        height: '30%',\r\n        paddingTop: '10px'\r\n    },\r\n    optionContainer: {\r\n        height: '50%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\ninterface SelectAnswerChallengerProps {\r\n    mode: ComponentMode\r\n    challenge: SelectAnswerChallenge\r\n    onChallengeChange?: (updatedChallenge: SelectAnswerChallenge) => void\r\n    onSuccess?: () => void\r\n    onError?: () => void\r\n}\r\n\r\nexport const SelectAnswerChallenger: React.FC<SelectAnswerChallengerProps> = (props: SelectAnswerChallengerProps) => {\r\n    const { mode, challenge, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [selectedAnswers, setSelectedAnswers] = useState<number[]>([]);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlePicturesChange = (newPictures: ChallengePicture[]) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                pictures: [...newPictures]\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleAnswerChange = (position: number, updatedAnswer: SelectAnswerChallengeAnswer) => {\r\n        const updatedAnswers = challenge.answers.map((anAnswer: SelectAnswerChallengeAnswer, idx: number) => {\r\n            if (idx !== position) {\r\n                if (!challenge.config.multiselect) {\r\n                    return {\r\n                        ...anAnswer,\r\n                        valid: false\r\n                    };\r\n                }\r\n                return { ...anAnswer };\r\n            }\r\n            return { ...updatedAnswer };\r\n        });\r\n\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                answers: updatedAnswers\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handlerOptionClick = (answerIdx: number) => {\r\n        if (mode === ComponentMode.Play) {\r\n            if (challenge.config.multiselect) {\r\n                const theIndex = selectedAnswers.findIndex((anAnswerIdx: number) => anAnswerIdx === answerIdx);\r\n                if (theIndex === -1) {\r\n                    setSelectedAnswers([...selectedAnswers, answerIdx]);\r\n                } else {\r\n                    setSelectedAnswers(selectedAnswers.filter((anAnswerIdx: number) => anAnswerIdx !== answerIdx));\r\n                }\r\n            } else {\r\n                if (challenge.answers[answerIdx].valid) {\r\n                    showResult(true);\r\n                } else {\r\n                    showResult(false);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const wrongsSelected = selectedAnswers\r\n            .map((anAnswerIdx: number) => challenge.answers[anAnswerIdx])\r\n            .filter((anAnswer: SelectAnswerChallengeAnswer) => !anAnswer.valid);\r\n        if (wrongsSelected.length === 0) {\r\n            const validsNotSelected = challenge.answers\r\n                .filter((anAnswer: SelectAnswerChallengeAnswer, answerIdx: number) =>\r\n                    anAnswer.valid && selectedAnswers.indexOf(answerIdx) === -1\r\n                );\r\n            if (validsNotSelected.length === 0) {\r\n                showResult(true);\r\n                return;\r\n            }\r\n        }\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.pictureContainer}>\r\n                <Grid container justify='center' style={{ height: '100%' }}>\r\n                    <Grid item xs={2} style={{ height: '100%' }}>\r\n                        <Countdown\r\n                            mode={mode}\r\n                            time={challenge.config.timeLimit}\r\n                            stopTimer={stopTimer}\r\n                            onTimeUp={handlerTimeUp}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={8} style={{ height: '100%' }}>\r\n                        <PictureGrid\r\n                            mode={mode}\r\n                            pictures={challenge.pictures}\r\n                            onPicturesChange={handlePicturesChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            challenge.config.multiselect && (\r\n                                <Fab\r\n                                    variant=\"extended\"\r\n                                    size=\"large\"\r\n                                    color=\"primary\"\r\n                                    disabled={mode === ComponentMode.Design || selectedAnswers.length === 0}\r\n                                    onClick={() => { handleCheckClick(); }}\r\n                                >\r\n                                    <Icon>check</Icon>&nbsp;Corregir\r\n                                </Fab>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='space-evenly' spacing={2} style={{ height: '100%' }}>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={challenge.answers[0].text}\r\n                            icon=\"wb_sunny\"\r\n                            valid={challenge.answers[0].valid}\r\n                            selected={\r\n                                mode === ComponentMode.Play\r\n                                && selectedAnswers.indexOf(0) >= 0\r\n                            }\r\n                            color='#f44336'\r\n                            fontSize={challenge.config.answerFontSize}\r\n                            multiselect={challenge.config.multiselect}\r\n                            showResults={highlightResults}\r\n                            onTextChange={(newText: string) => {\r\n                                handleAnswerChange(0, { ...challenge.answers[0], text: newText });\r\n                            }}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(0, { ...challenge.answers[0], valid });\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(0); }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={challenge.answers[1].text}\r\n                            icon=\"brightness_2\"\r\n                            valid={challenge.answers[1].valid}\r\n                            selected={\r\n                                mode === ComponentMode.Play\r\n                                && selectedAnswers.indexOf(1) >= 0\r\n                            }\r\n                            color='#03a9f4'\r\n                            fontSize={challenge.config.answerFontSize}\r\n                            multiselect={challenge.config.multiselect}\r\n                            showResults={highlightResults}\r\n                            onTextChange={(newText: string) => {\r\n                                handleAnswerChange(1, { ...challenge.answers[1], text: newText });\r\n                            }}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(1, { ...challenge.answers[1], valid });\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(1); }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={challenge.answers[2].text}\r\n                            icon=\"flash_on\"\r\n                            valid={challenge.answers[2].valid}\r\n                            selected={\r\n                                mode === ComponentMode.Play\r\n                                && selectedAnswers.indexOf(2) >= 0\r\n                            }\r\n                            color='#ffc107'\r\n                            fontSize={challenge.config.answerFontSize}\r\n                            multiselect={challenge.config.multiselect}\r\n                            showResults={highlightResults}\r\n                            onTextChange={(newText: string) => {\r\n                                handleAnswerChange(2, { ...challenge.answers[2], text: newText });\r\n                            }}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(2, { ...challenge.answers[2], valid });\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(2); }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={challenge.answers[3].text}\r\n                            icon=\"cloud\"\r\n                            valid={challenge.answers[3].valid}\r\n                            selected={\r\n                                mode === ComponentMode.Play\r\n                                && selectedAnswers.indexOf(3) >= 0\r\n                            }\r\n                            color='#4caf50'\r\n                            fontSize={challenge.config.answerFontSize}\r\n                            multiselect={challenge.config.multiselect}\r\n                            showResults={highlightResults}\r\n                            onTextChange={(newText: string) => {\r\n                                handleAnswerChange(3, { ...challenge.answers[3], text: newText });\r\n                            }}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(3, { ...challenge.answers[3], valid });\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(3); }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControlLabel, Grid, makeStyles, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { SelectAnswerChallengeConfig } from '../../types/SelectAnswerChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface SelectAnswerConfiguratorProps {\r\n    config: SelectAnswerChallengeConfig,\r\n    onConfigChange?: (config: SelectAnswerChallengeConfig) => void\r\n}\r\n\r\nexport const SelectAnswerConfigurator: React.FC<SelectAnswerConfiguratorProps> = (props: SelectAnswerConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<SelectAnswerChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputPictureCount = useRef({} as HTMLInputElement);\r\n    const checkPictureLabel = useRef({} as HTMLInputElement);\r\n    const inputAnswerFontSize = useRef({} as HTMLInputElement);\r\n    const checkMultiselect = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputPictureCount}\r\n                    type='number'\r\n                    label='Número de imágenes'\r\n                    inputProps={{ min: 1, max: 9 }}\r\n                    value={formData.pictureCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('pictureCount', parseInt(inputPictureCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkPictureLabel}\r\n                            name='checkPictureLabel'\r\n                            checked={formData.pictureLabel}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('pictureLabel', checkPictureLabel.current.checked); }}\r\n                        />}\r\n                    label='Numerar imágenes'\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputAnswerFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de las respuestas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.answerFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('answerFontSize', parseInt(inputAnswerFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkMultiselect}\r\n                            name='checkMultiselect'\r\n                            checked={formData.multiselect}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('multiselect', checkMultiselect.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Respuesta múltiple'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { SelectAnswerChallenge, SelectAnswerChallengeAnswer, SelectAnswerChallengeConfig } from '../../types/SelectAnswerChallenge';\r\nimport { SelectAnswerChallenger } from '../SelectAnswerChallenger';\r\nimport { SelectAnswerConfigurator } from '../SelectAnswerConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { ChallengePicture } from '../../types/Challenge';\r\nimport { PictureType } from '../../enums/PictureType';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface SelectAnswerChallengeDesignerProps {\r\n    challenge: SelectAnswerChallenge,\r\n    onChallengeChange: (challenge: SelectAnswerChallenge) => void\r\n}\r\n\r\nexport const SelectAnswerChallengeDesigner: React.FC<SelectAnswerChallengeDesignerProps> = (\r\n    props: SelectAnswerChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustPictures = (pictureCount: number): ChallengePicture[] => {\r\n        let pictures = [...challenge.pictures];\r\n        if (pictureCount > pictures.length) {\r\n            const newPictures = Array.from(Array(pictureCount - pictures.length))\r\n                .map(() => ({ type: PictureType.None, data: ''}));\r\n            pictures = [...pictures, ...newPictures];\r\n        } else if (pictureCount < pictures.length) {\r\n            pictures = pictures.slice(0, pictureCount);\r\n        }\r\n        return pictures;\r\n    };\r\n\r\n    const readjustValidAnswers = (multiselect: boolean): SelectAnswerChallengeAnswer[] => {\r\n        let validPresent = false;\r\n        const answers: SelectAnswerChallengeAnswer[] = challenge.answers.map((anAnswer: SelectAnswerChallengeAnswer) => {\r\n            if (!multiselect) {\r\n                if (anAnswer.valid && !validPresent) {\r\n                    validPresent = true;\r\n                    return { ...anAnswer };\r\n                }\r\n                return { ...anAnswer, valid: false };\r\n            }\r\n            return { ...anAnswer };\r\n        });\r\n        return answers;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: SelectAnswerChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: SelectAnswerChallengeConfig) => {\r\n        const pictures = readjustPictures(config.pictureCount);\r\n        const answers = readjustValidAnswers(config.multiselect);\r\n        const updatedChallenge: SelectAnswerChallenge = {\r\n            ...challenge,\r\n            pictures: [...pictures],\r\n            answers: [...answers],\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <SelectAnswerChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <SelectAnswerConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Card, Grid, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../ChallengeQuestion';\r\nimport { SelectableOption } from '../SelectableOption';\r\nimport { TrueOrFalseChallenge } from '../../types/TrueOrFalseChallenge';\r\nimport { PictureGrid } from '../PictureGrid';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../Countdown';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { ChallengePicture } from '../../types/Challenge';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    pictureContainer: {\r\n        height: '60%'\r\n    },\r\n    answerContainer: {\r\n        height: '20%',\r\n        paddingTop: '10px'\r\n    },\r\n    optionContainer: {\r\n        height: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\ninterface TrueOrFalseChallengerProps {\r\n    mode: ComponentMode\r\n    challenge: TrueOrFalseChallenge\r\n    onChallengeChange?: (updatedChallenge: TrueOrFalseChallenge) => void\r\n    onSuccess?: () => void\r\n    onError?: () => void\r\n}\r\n\r\nexport const TrueOrFalseChallenger: React.FC<TrueOrFalseChallengerProps> = (props: TrueOrFalseChallengerProps) => {\r\n    const { mode, challenge, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlePicturesChange = (newPictures: ChallengePicture[]) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                pictures: [...newPictures]\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleAnswerChange = (updatedAnswer: boolean) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                answer: updatedAnswer\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handlerOptionClick = (answer: boolean) => {\r\n        if (mode === ComponentMode.Play) {\r\n            if (challenge.answer === answer) {\r\n                showResult(true);\r\n            } else {\r\n                showResult(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.pictureContainer}>\r\n                <Grid container justify='center' style={{ height: '100%' }}>\r\n                    <Grid item xs={2} style={{ height: '100%' }}>\r\n                        <Countdown\r\n                            mode={mode}\r\n                            time={challenge.config.timeLimit}\r\n                            stopTimer={stopTimer}\r\n                            onTimeUp={handlerTimeUp}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={8} style={{ height: '100%' }}>\r\n                        <PictureGrid\r\n                            mode={mode}\r\n                            pictures={challenge.pictures}\r\n                            onPicturesChange={handlePicturesChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll} />\r\n                </Grid>\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='space-evenly' spacing={2} style={{ height: '100%' }}>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text=\"Verdadero\"\r\n                            icon=\"wb_sunny\"\r\n                            valid={challenge.answer}\r\n                            color='#4caf50'\r\n                            fontSize={42}\r\n                            showResults={highlightResults}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(true);\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(true); }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text=\"Falso\"\r\n                            icon=\"brightness_2\"\r\n                            valid={!challenge.answer}\r\n                            color='#f44336'\r\n                            fontSize={42}\r\n                            showResults={highlightResults}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(false);\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(false); }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControlLabel, Grid, makeStyles, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { TrueOrFalseChallengeConfig } from '../../types/TrueOrFalseChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface TrueOrFalseConfiguratorProps {\r\n    config: TrueOrFalseChallengeConfig,\r\n    onConfigChange?: (config: TrueOrFalseChallengeConfig) => void\r\n}\r\n\r\nexport const TrueOrFalseConfigurator: React.FC<TrueOrFalseConfiguratorProps> = (props: TrueOrFalseConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<TrueOrFalseChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputPictureCount = useRef({} as HTMLInputElement);\r\n    const checkPictureLabel = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputPictureCount}\r\n                    type='number'\r\n                    label='Número de imágenes'\r\n                    inputProps={{ min: 1, max: 9 }}\r\n                    value={formData.pictureCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('pictureCount', parseInt(inputPictureCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkPictureLabel}\r\n                            name='checkPictureLabel'\r\n                            checked={formData.pictureLabel}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('pictureLabel', checkPictureLabel.current.checked); }}\r\n                        />}\r\n                    label='Numerar imágenes'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { TrueOrFalseChallenge, TrueOrFalseChallengeConfig } from '../../types/TrueOrFalseChallenge';\r\nimport { TrueOrFalseChallenger } from '../TrueOrFalseChallenger';\r\nimport { TrueOrFalseConfigurator } from '../TrueOrFalseConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { ChallengePicture } from '../../types/Challenge';\r\nimport { PictureType } from '../../enums/PictureType';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface TrueOrFalseChallengeDesignerProps {\r\n    challenge: TrueOrFalseChallenge,\r\n    onChallengeChange: (challenge: TrueOrFalseChallenge) => void\r\n}\r\n\r\nexport const TrueOrFalseChallengeDesigner: React.FC<TrueOrFalseChallengeDesignerProps> = (\r\n    props: TrueOrFalseChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustPictures = (pictureCount: number): ChallengePicture[] => {\r\n        let pictures = [...challenge.pictures];\r\n        if (pictureCount > pictures.length) {\r\n            const newPictures = Array.from(Array(pictureCount - pictures.length))\r\n                .map(() => ({ type: PictureType.None, data: ''}));\r\n            pictures = [...pictures, ...newPictures];\r\n        } else if (pictureCount < pictures.length) {\r\n            pictures = pictures.slice(0, pictureCount);\r\n        }\r\n        return pictures;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: TrueOrFalseChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: TrueOrFalseChallengeConfig) => {\r\n        const pictures = readjustPictures(config.pictureCount);\r\n        const updatedChallenge: TrueOrFalseChallenge = {\r\n            ...challenge,\r\n            pictures: [...pictures],\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <TrueOrFalseChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <TrueOrFalseConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import { makeStyles } from '@material-ui/core';\r\nimport React, { CSSProperties } from 'react';\r\nimport { useDrag } from 'react-dnd';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    item: {\r\n        borderRadius: '10em',\r\n        backgroundColor: theme.palette.secondary.main,\r\n        color: theme.palette.primary.contrastText,\r\n        padding: '0.5rem 1rem',\r\n        cursor: 'move',\r\n    }\r\n}));\r\n\r\ninterface DragableItemProps {\r\n    name: string\r\n    type: string\r\n    style?: CSSProperties\r\n}\r\n\r\nexport const DragableItem: React.FC<DragableItemProps> = (props: DragableItemProps) => {\r\n    const  { name, type, style } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [{ opacity }, drag] = useDrag(\r\n        () => ({\r\n            type,\r\n            item: { name },\r\n            collect: (monitor) => ({\r\n                opacity: monitor.isDragging() ? 0.4 : 1,\r\n            }),\r\n        }),\r\n        [name, type],\r\n    );\r\n\r\n    return (\r\n        <div\r\n            ref={drag}\r\n            className={classes.item}\r\n            style={{\r\n                opacity,\r\n                ...style\r\n            }}>\r\n            {name}\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, Chip, Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { useDrop } from 'react-dnd';\r\nimport { DragableItem } from '../DragableItem';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        width: '100%',\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    titleContainer: {\r\n        width: '100%',\r\n        padding: '5px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.primary.contrastText\r\n    },\r\n    itemsContainer: {\r\n        padding: '5px',\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\ninterface GroupState {\r\n    title: string,\r\n    validItems: string[],\r\n    droppedItems: string[]\r\n}\r\n\r\ninterface DropGroupProps {\r\n    mode: ComponentMode,\r\n    title: string,\r\n    validItems: string[],\r\n    showResults: boolean,\r\n    fontSize?: number,\r\n    onTitleChange?: (newTitle: string) => void,\r\n    onItemsChange?: (newTitle: string[]) => void,\r\n    acceptTypes?: string[],\r\n    droppedItems?: string[]\r\n    onDrop?: (item: unknown) => void\r\n}\r\n\r\nexport const DropGroup: React.FC<DropGroupProps> = (props: DropGroupProps) => {\r\n    const {\r\n        mode,\r\n        title,\r\n        validItems,\r\n        showResults,\r\n        fontSize,\r\n        onTitleChange,\r\n        onItemsChange,\r\n        acceptTypes,\r\n        droppedItems,\r\n        onDrop\r\n    } = props;\r\n\r\n    const handleDrop = (item: unknown) => {\r\n        console.log('Drop!');\r\n        console.log(item);\r\n        if(onDrop) {\r\n            onDrop(item);\r\n        }\r\n    };\r\n\r\n    const [{ isOver, canDrop }, drop] = useDrop({\r\n        accept: acceptTypes || '',\r\n        drop: handleDrop,\r\n        collect: (monitor: { isOver: () => boolean, canDrop: () => boolean }) => ({\r\n            isOver: monitor.isOver(),\r\n            canDrop: monitor.canDrop(),\r\n        })\r\n    });\r\n\r\n    const [groupState, setGroupState] = useState<GroupState>({\r\n        title: title || '',\r\n        validItems: validItems || [],\r\n        droppedItems: droppedItems || []\r\n    });\r\n\r\n    const inputTitle = useRef({} as HTMLInputElement);\r\n    const inputItem = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (droppedItems != null) {\r\n            setGroupState({\r\n                ...groupState,\r\n                droppedItems: [...droppedItems]\r\n            });\r\n        }\r\n    }, [droppedItems]);\r\n\r\n\r\n    const handleTitleChange = () => {\r\n        const newState = {\r\n            ...groupState,\r\n            title: inputTitle.current.value\r\n        };\r\n        setGroupState(newState);\r\n        if (onTitleChange) {\r\n            onTitleChange(inputTitle.current.value);\r\n        }\r\n    };\r\n\r\n    const handleValidItemKeyPress = (evt: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (evt.code === 'Enter' && inputItem.current.value !== '') {\r\n            addValidItem();\r\n        }\r\n    };\r\n\r\n    const addValidItem = () => {\r\n        const updatedItems = [...(groupState.validItems), inputItem.current.value];\r\n        const newState: GroupState = {\r\n            ...groupState,\r\n            validItems: updatedItems\r\n        };\r\n        setGroupState(newState);\r\n        if (onItemsChange) {\r\n            onItemsChange(updatedItems);\r\n        }\r\n        inputItem.current.value = '';\r\n    };\r\n\r\n    const handleRemoveValidItem = (itemIdx: number) => {\r\n        const updatedItems = groupState.validItems.filter((anItem: string, idx: number) => itemIdx !== idx);\r\n        const newState: GroupState = {\r\n            ...groupState,\r\n            validItems: updatedItems\r\n        };\r\n        setGroupState(newState);\r\n        if (onItemsChange) {\r\n            onItemsChange(updatedItems);\r\n        }\r\n    };\r\n\r\n    const getDragableItemStyle = (item: string) => showResults ? (\r\n        validItems.indexOf(item) >= 0 ? {\r\n            fontSize: `${fontSize}px`,\r\n            backgroundColor: '#4caf50'\r\n        } : {\r\n            fontSize: `${fontSize}px`,\r\n            backgroundColor: '#f44336'\r\n        }\r\n    ) : {fontSize: `${fontSize}px`};\r\n\r\n    return (\r\n        <Card\r\n            elevation={4}\r\n            className={classes.root}\r\n            style={{\r\n                backgroundColor: (isOver && canDrop) ? '#efefef' : '#ffffff'\r\n            }}\r\n        >\r\n            <Grid container direction=\"column\" className={`${classes.fullHeight} ${classes.fullWidth}`}>\r\n                <Grid item className={classes.titleContainer}>\r\n                    {\r\n                        mode === ComponentMode.Play ? (\r\n                            <Typography style={{ fontSize }}>\r\n                                { title}\r\n                            </Typography>\r\n                        ) : (\r\n                            <TextField\r\n                                inputRef={inputTitle}\r\n                                value={groupState.title}\r\n                                style={{\r\n                                    width: '100%'\r\n                                }}\r\n                                inputProps={\r\n                                    {\r\n                                        style: {\r\n                                            fontSize,\r\n                                            textAlign: 'center',\r\n                                            color: '#ffffff'\r\n\r\n                                        }\r\n                                    }\r\n                                }\r\n                                onInput={handleTitleChange}\r\n                            />\r\n                        )\r\n                    }\r\n                </Grid>\r\n                <Grid item xs>\r\n                    <Grid container direction=\"column\" alignItems=\"center\" className={classes.itemsContainer} spacing={2}>\r\n                        {\r\n                            mode === ComponentMode.Design\r\n                            && groupState.validItems.map((anItem: string, itemIdx: number) => (\r\n                                <Grid item key={`item_${itemIdx}`}>\r\n                                    <Chip\r\n                                        label={anItem}\r\n                                        color=\"secondary\"\r\n                                        size=\"medium\"\r\n                                        style={{ fontSize, color: '#ffffff' }}\r\n                                        onDelete={() => handleRemoveValidItem(itemIdx)}\r\n                                    />\r\n                                </Grid>\r\n                            ))\r\n                        }\r\n                        {\r\n                            mode === ComponentMode.Design && (\r\n                                <Grid item key=\"newItem\">\r\n                                    <TextField\r\n                                        inputRef={inputItem}\r\n                                        variant=\"outlined\"\r\n                                        InputProps={\r\n                                            {\r\n                                                style: {\r\n                                                    fontSize,\r\n                                                    color: '#000000'\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        label=\"Nuevo elemento\"\r\n                                        onKeyPress={handleValidItemKeyPress}\r\n                                    />\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                        {\r\n                            mode === ComponentMode.Play && (\r\n                                <Grid item key=\"dropItem\" xs className={`${classes.fullWidth} ${classes.fullHeight}`}>\r\n                                    <div\r\n                                        ref={drop}\r\n                                        className={`${classes.fullWidth} ${classes.fullHeight}`}\r\n                                    >\r\n                                        <Grid container direction=\"column\" alignItems=\"center\" spacing={1} className={classes.fullHeight}>\r\n                                            {\r\n                                                groupState.droppedItems.map((aDroppedItem: string) => (\r\n                                                    <Grid\r\n                                                        item\r\n                                                        key={`gridItem_${aDroppedItem}`}\r\n                                                    >\r\n                                                        <DragableItem\r\n                                                            key={aDroppedItem}\r\n                                                            name={aDroppedItem}\r\n                                                            type=\"classifyElement\"\r\n                                                            style={getDragableItemStyle(aDroppedItem)}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                ))\r\n                                            }\r\n                                        </Grid>\r\n                                    </div>\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../ChallengeQuestion';\r\nimport { ClassifyChallenge, ClassifyChallengeGroup } from '../../types/ClassifyChallenge';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../Countdown';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { DropGroup } from '../DropGroup';\r\nimport { DragableItem } from '../DragableItem';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    classifyContainer: {\r\n        height: '80%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionsContainer: {\r\n        height: '20%',\r\n        border: 'solid 1px gray',\r\n        backgroundColor: '#ffffff'\r\n    },\r\n    groupsContainer: {\r\n        height: '80%'\r\n    },\r\n}));\r\n\r\ninterface dropState {\r\n    groupName: string,\r\n    items: string[]\r\n}\r\n\r\nconst initialClassifyState = (challenge: ClassifyChallenge): dropState[] => {\r\n    return challenge.groups.map((aGroup: ClassifyChallengeGroup) => (\r\n        {\r\n            groupName: aGroup.name,\r\n            items: []\r\n        }\r\n    ));\r\n};\r\n\r\ninterface ClassifyChallengerProps {\r\n    mode: ComponentMode\r\n    challenge: ClassifyChallenge\r\n    onChallengeChange?: (updatedChallenge: ClassifyChallenge) => void\r\n    onSuccess?: () => void\r\n    onError?: () => void\r\n}\r\n\r\nexport const ClassifyChallenger: React.FC<ClassifyChallengerProps> = (props: ClassifyChallengerProps) => {\r\n    const { mode, challenge, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [classifyState, setClassifyState] =useState<dropState[]>(initialClassifyState(challenge));\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleNameChange = (groupIdx: number, updatedName: string) => {\r\n        const updatedGroups = challenge.groups.map((aGroup: ClassifyChallengeGroup, idx: number) => {\r\n            return {\r\n                ...aGroup,\r\n                name: idx !== groupIdx ? aGroup.name : updatedName\r\n            };\r\n        });\r\n\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                groups: updatedGroups\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleItemsChange = (groupIdx: number, updatedItems: string[]) => {\r\n        const updatedGroups = challenge.groups.map((aGroup: ClassifyChallengeGroup, idx: number) => {\r\n            if (idx !== groupIdx) {\r\n                return { ...aGroup };\r\n            }\r\n            return {\r\n                ...aGroup,\r\n                items: [...updatedItems]\r\n            };\r\n        });\r\n\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                groups: updatedGroups\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const correct = challenge.groups.reduce(\r\n            (accGroups: boolean, currentGroup: ClassifyChallengeGroup) => {\r\n                const correctItems = currentGroup.items.reduce(\r\n                    (accItems: boolean, currentItem: string) => {\r\n                        const theGroup = classifyState.find((aGroup: dropState) => aGroup.groupName === currentGroup.name);\r\n                        if (theGroup != null) {\r\n                            return accItems && theGroup.items.indexOf(currentItem) >= 0;\r\n                        }\r\n                        return false;\r\n                    },\r\n                    true\r\n                );\r\n                return accGroups && correctItems;\r\n            },\r\n            true\r\n        );\r\n        showResult(correct);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    \r\n    const isDropped = (itemName: string) => classifyState.reduce(\r\n        (acc: boolean, current: dropState) => acc || current.items.indexOf(itemName) >= 0,\r\n        false\r\n    );\r\n\r\n    const completed = () => {\r\n        const optionCount = challenge.groups.reduce(\r\n            (acc: number, current: ClassifyChallengeGroup) => acc + current.items.length,\r\n            0\r\n        );\r\n        const dropCount = classifyState.reduce(\r\n            (acc: number, current: dropState) => acc + current.items.length,\r\n            0\r\n        );\r\n        return optionCount === dropCount;\r\n    };\r\n\r\n    const handleDrop = (groupName: string, droppedItem: any) => {\r\n        const newDroppedItems: dropState[] = classifyState.map((aGroup: { groupName: string, items: string[]}) => {\r\n            if (aGroup.groupName !== groupName) {\r\n                return {\r\n                    ...aGroup,\r\n                    items: aGroup.items.filter((anItem: string) => anItem !== droppedItem.name)\r\n                };\r\n            }\r\n            \r\n            const idxItem = aGroup.items.findIndex((anItem: string) => anItem === droppedItem.name);\r\n            if (idxItem >= 0) {\r\n                return {...aGroup};\r\n            }\r\n            return {\r\n                ...aGroup,\r\n                items: [\r\n                    ...aGroup.items,\r\n                    droppedItem.name\r\n                ]\r\n            };\r\n        });\r\n        setClassifyState(newDroppedItems);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.classifyContainer}>\r\n                <Grid container justify='center' className={classes.fullHeight}>\r\n                    <Grid item xs={2} className={classes.fullHeight}>\r\n                        <Countdown\r\n                            mode={mode}\r\n                            time={challenge.config.timeLimit}\r\n                            stopTimer={stopTimer}\r\n                            onTimeUp={handlerTimeUp}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={8} className={classes.fullHeight}>\r\n                        <DndProvider backend={HTML5Backend}>\r\n                            <Grid container spacing={2} className={classes.fullHeight}>\r\n                                <Grid item xs={12} className={classes.optionsContainer}>\r\n                                    <Grid container spacing={2} justify=\"space-around\" alignItems=\"center\">\r\n                                        {\r\n                                            challenge.groups.map((aGroup: ClassifyChallengeGroup) => (\r\n                                                aGroup.items.map((anItem: string, idx: number) => (\r\n                                                    !isDropped(anItem) && (\r\n                                                        <Grid item key={`gridItem_${idx}`}>\r\n                                                            <DragableItem\r\n                                                                name={anItem}\r\n                                                                type=\"classifyElement\"\r\n                                                                key={`dragable_${idx}`}\r\n                                                                style={{fontSize: challenge.config.itemsFontSize}}\r\n                                                            />\r\n                                                        </Grid>\r\n                                                    )\r\n                                                ))\r\n                                            ))\r\n                                        }\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} className={classes.groupsContainer}>\r\n                                    <Grid container justify=\"space-evenly\" spacing={2} style={{ height: '100%' }}>\r\n                                        {\r\n                                            challenge.groups.map((aGroup: ClassifyChallengeGroup, idx: number) => (\r\n                                                <Grid\r\n                                                    item\r\n                                                    xs={4}\r\n                                                    key={`group_${idx}`}\r\n                                                >\r\n                                                    <DropGroup\r\n                                                        mode={mode}\r\n                                                        title={aGroup.name}\r\n                                                        validItems={aGroup.items}\r\n                                                        showResults={highlightResults}\r\n                                                        fontSize={challenge.config.itemsFontSize}\r\n                                                        onTitleChange={(newName: string) => handleNameChange(idx, newName)}\r\n                                                        onItemsChange={(newItems: string[]) => handleItemsChange(idx, newItems)}\r\n                                                        acceptTypes={['classifyElement']}\r\n                                                        droppedItems={\r\n                                                            classifyState\r\n                                                                .find((auxGroup: dropState) => auxGroup.groupName === aGroup.name)\r\n                                                                ?.items\r\n                                                        }\r\n                                                        onDrop={(droppedItem: unknown) => handleDrop(aGroup.name, droppedItem)}\r\n                                                    />\r\n                                                </Grid>\r\n                                            ))\r\n                                        }\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </DndProvider>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || !completed()}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;Corregir\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ClassifyChallengeConfig } from '../../types/ClassifyChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface ClassifyConfiguratorProps {\r\n    config: ClassifyChallengeConfig,\r\n    onConfigChange?: (config: ClassifyChallengeConfig) => void\r\n}\r\n\r\nexport const ClassifyConfigurator: React.FC<ClassifyConfiguratorProps> = (props: ClassifyConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<ClassifyChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputItemsFontSize = useRef({} as HTMLInputElement);\r\n    const inputGroupCount = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemsFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemsFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('itemsFontSize', parseInt(inputItemsFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputGroupCount}\r\n                    type='number'\r\n                    label='Número de grupos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.groupCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('groupCount', parseInt(inputGroupCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { ClassifyChallenge, ClassifyChallengeConfig, ClassifyChallengeGroup } from '../../types/ClassifyChallenge';\r\nimport { ClassifyChallenger } from '../ClassifyChallenger';\r\nimport { ClassifyConfigurator } from '../ClassifyConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface ClassifyChallengeDesignerProps {\r\n    challenge: ClassifyChallenge,\r\n    onChallengeChange: (challenge: ClassifyChallenge) => void\r\n}\r\n\r\nexport const ClassifyChallengeDesigner: React.FC<ClassifyChallengeDesignerProps> = (\r\n    props: ClassifyChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustGroups = (groupCount: number): ClassifyChallengeGroup[] => {\r\n        let groups = [...challenge.groups];\r\n        if (groupCount > groups.length) {\r\n            const newGroups = Array.from(Array(groupCount - groups.length))\r\n                .map(() => ({ name: '', items: []}));\r\n            groups = [...groups, ...newGroups];\r\n        } else if (groupCount < groups.length) {\r\n            groups = groups.slice(0, groupCount);\r\n        }\r\n        return groups;        \r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: ClassifyChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: ClassifyChallengeConfig) => {\r\n        const groups = readjustGroups(config.groupCount);\r\n        const updatedChallenge: ClassifyChallenge = {\r\n            ...challenge,\r\n            groups,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <ClassifyChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <ClassifyConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../ChallengeQuestion';\r\nimport { SortChallenge } from '../../types/SortChallenge';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../Countdown';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    pictureContainer: {\r\n        height: '80%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionsContainer: {\r\n        height: '20%',\r\n        border: 'solid 1px'\r\n    },\r\n    item: {\r\n        padding: '5px 10px',\r\n        backgroundColor: theme.palette.secondary.main,\r\n        color: theme.palette.primary.contrastText,\r\n        borderRadius: '20px'\r\n    },\r\n    groupsContainer: {\r\n        height: '80%'\r\n    },\r\n}));\r\n\r\ninterface SortChallengerProps {\r\n    mode: ComponentMode\r\n    challenge: SortChallenge\r\n    onChallengeChange?: (updatedChallenge: SortChallenge) => void\r\n    onSuccess?: () => void\r\n    onError?: () => void\r\n}\r\n\r\nexport const SortChallenger: React.FC<SortChallengerProps> = (props: SortChallengerProps) => {\r\n    const { mode, challenge, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [selectedAnswers /* , setSelectedAnswers */] = useState<number[]>([]);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n    //     const wrongsSelected = selectedAnswers\r\n    //         .map((anAnswerIdx: number) => challenge.answers[anAnswerIdx])\r\n    //         .filter((anAnswer: SelectAnswerChallengeAnswer) => !anAnswer.valid);\r\n    //     if (wrongsSelected.length === 0) {\r\n    //         const validsNotSelected = challenge.answers\r\n    //             .filter((anAnswer: SelectAnswerChallengeAnswer, answerIdx: number) =>\r\n    //                 anAnswer.valid && selectedAnswers.indexOf(answerIdx) === -1\r\n    //             );\r\n    //         if (validsNotSelected.length === 0) {\r\n    //             showResult(true);\r\n    //             return;\r\n    //         }\r\n    //     }\r\n    //     showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.pictureContainer}>\r\n                <Grid container justify='center' className={classes.fullHeight}>\r\n                    <Grid item xs={2} className={classes.fullHeight}>\r\n                        <Countdown\r\n                            mode={mode}\r\n                            time={challenge.config.timeLimit}\r\n                            stopTimer={stopTimer}\r\n                            onTimeUp={handlerTimeUp}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={8} className={classes.fullHeight}>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || selectedAnswers.length === 0}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;Corregir\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { SortChallengeConfig } from '../../types/SortChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface SortConfiguratorProps {\r\n    config: SortChallengeConfig,\r\n    onConfigChange?: (config: SortChallengeConfig) => void\r\n}\r\n\r\nexport const SortConfigurator: React.FC<SortConfiguratorProps> = (props: SortConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<SortChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputItemsFontSize = useRef({} as HTMLInputElement);\r\n    const inputItemCount = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemsFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemsFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('itemsFontSize', parseInt(inputItemsFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemCount}\r\n                    type='number'\r\n                    label='Número de elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('groupCount', parseInt(inputItemCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { SortChallenge, SortChallengeConfig } from '../../types/SortChallenge';\r\nimport { SortChallenger } from '../SortChallenger';\r\nimport { SortConfigurator } from '../SortConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface SortChallengeDesignerProps {\r\n    challenge: SortChallenge,\r\n    onChallengeChange: (challenge: SortChallenge) => void\r\n}\r\n\r\nexport const SortChallengeDesigner: React.FC<SortChallengeDesignerProps> = (\r\n    props: SortChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustItems = (itemCount: number): string[] => {\r\n        let items = [...challenge.items];\r\n        if (itemCount > items.length) {\r\n            const newItems = Array.from(Array(itemCount - items.length))\r\n                .map(() => (''));\r\n            items = [...items, ...newItems];\r\n        } else if (itemCount < items.length) {\r\n            items = items.slice(0, itemCount);\r\n        }\r\n        return items;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: SortChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: SortChallengeConfig) => {\r\n        const items = readjustItems(config.itemCount);\r\n        const updatedChallenge: SortChallenge = {\r\n            ...challenge,\r\n            items,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <SortChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <SortConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { Challenge } from '../../types/Challenge';\r\nimport { ChallengeType } from '../../enums/ChallengeType';\r\nimport { SelectAnswerChallengeDesigner } from '../SelectAnswerChallengeDesigner';\r\nimport { SelectAnswerChallenge } from '../../types/SelectAnswerChallenge';\r\nimport { TrueOrFalseChallengeDesigner } from '../TrueOrFalseChallengeDesigner';\r\nimport { TrueOrFalseChallenge } from '../../types/TrueOrFalseChallenge';\r\nimport { ClassifyChallengeDesigner } from '../ClassifyChallengeDesigner';\r\nimport { ClassifyChallenge } from '../../types/ClassifyChallenge';\r\nimport { SortChallenge } from '../../types/SortChallenge';\r\nimport { SortChallengeDesigner } from '../SortChallengeDesigner';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\ninterface ChallengeDesignerProps {\r\n    challenge: Challenge;\r\n    onChallengeChange: (challenge: Challenge) => void\r\n}\r\n\r\nexport const ChallengeDesigner: React.FC<ChallengeDesignerProps> = (props: ChallengeDesignerProps) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        console.log('ChallengeDesigner.useEffect');\r\n        console.log(challenge);\r\n    }, [challenge]);\r\n\r\n    const handleChallengeChange = (updatedChallenge: Challenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight}>\r\n            <Grid item xs={12}>\r\n                {\r\n                    challenge?.type === ChallengeType.SelectAnswer\r\n                    && (\r\n                        <SelectAnswerChallengeDesigner\r\n                            challenge={challenge as SelectAnswerChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.TrueOrFalse\r\n                    && (\r\n                        <TrueOrFalseChallengeDesigner\r\n                            challenge={challenge as TrueOrFalseChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Sort\r\n                    && (\r\n                        <SortChallengeDesigner\r\n                            challenge={challenge as SortChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Classify\r\n                    && (\r\n                        <ClassifyChallengeDesigner\r\n                            challenge={challenge as ClassifyChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Grid, Icon, IconButton, ListItemIcon, makeStyles, Menu, MenuItem, Typography } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useProjects } from '../../hooks/useProjects';\r\nimport { Project } from '../../types/Project';\r\nimport { Test } from '../../types/Test';\r\nimport { ChallengeSelector } from '../ChallengeSelector';\r\nimport { ChallengeDesigner } from '../ChallengeDesigner';\r\nimport { Challenge } from '../../types/Challenge';\r\nimport { ChallengeType } from '../../enums/ChallengeType';\r\nimport { getChallengeTypeDescription, getChallengeTypeIcon, getDefaultChallenge } from '../../utils/utilChallenges';\r\nimport { colors } from '../../theme';\r\nimport { DialogConfirm } from '../DialogConfirm';\r\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },    \r\n    listContainer: {\r\n        paddingRight: '10px',\r\n        height: '100%',\r\n        width: '100%',\r\n        overflow: 'hidden'\r\n    },\r\n    challengesContainer: {\r\n        height: 'calc(100% - 50px)',\r\n        width: '100%',\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        listStyle: 'none',\r\n        '&::-webkit-scrollbar': {\r\n            width: '0.2em'\r\n        },\r\n        '&::-webkit-scrollbar-track': {\r\n            boxShadow: 'inset 0 0 6px rgba(255,0,0,0.00)',\r\n            webkitBoxShadow: 'inset 0 0 6px rgba(255,0,0,0.00)'\r\n        },\r\n        '&::-webkit-scrollbar-thumb': {\r\n            backgroundColor: colors.primary.light,\r\n            outline: '1px solid slategrey'\r\n        }\r\n    },\r\n    challengeSelector: {\r\n        flexGrow: 1\r\n    }\r\n}));\r\n\r\ninterface TestDesignerProps {\r\n    projectId: string,\r\n    testId: string\r\n}\r\n\r\nexport const TestDesigner: React.FC<TestDesignerProps> = (props: TestDesignerProps) => {\r\n    const { projectId, testId } = props;\r\n\r\n    const { projects, setProjects } = useProjects();\r\n\r\n    const [test, setTest] = useState<Test>({\r\n        id: uuidv4(),\r\n        name: 'Nuevo cuestionario',\r\n        description: '',\r\n        language: Language.Es,\r\n        challenges: []\r\n    });\r\n\r\n    const [compactList, setCompactList] = useState<boolean>(false);\r\n    const [selectedChallenge, setSelectedChallenge] = useState<Challenge>();\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n    const [deletedChallenge, setDeletedChallenge] = useState<Challenge>();\r\n    const [openRemoveChallengeConfirm, setOpenRemoveChallengeConfirm] = useState<boolean>(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        const project = projects.find((aProject: Project) => aProject.id === projectId);\r\n        if (project != null) {\r\n            const test = project.tests.find((aTest: Test) => aTest.id === testId);\r\n            if (test != null) {\r\n                setTest(test);\r\n                if (test.challenges.length > 0) {\r\n                    if (selectedChallenge == null) {\r\n                        setSelectedChallenge(test.challenges[0]);\r\n                    } else {\r\n                        setSelectedChallenge({ ...selectedChallenge });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, [projects, projectId, testId]);\r\n\r\n    const handleSelectChallenge = (challenge: Challenge) => {\r\n        setSelectedChallenge(challenge);\r\n    };\r\n\r\n    const handleDeleteChallenge = (challenge: Challenge) => {\r\n        setDeletedChallenge(challenge);\r\n        setOpenRemoveChallengeConfirm(true);\r\n    };\r\n\r\n    const handleClickNewChallengeMenu = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleNewChallengeOptionClick = (type: ChallengeType) => {\r\n        const newChallenge: Challenge = getDefaultChallenge(type);\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return { ...aProject };\r\n            }\r\n            const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                if (aTest.id !== testId) {\r\n                    return { ...aTest };\r\n                }\r\n                return {\r\n                    ...aTest,\r\n                    challenges: [...aTest.challenges, newChallenge]\r\n                };\r\n            });\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        setSelectedChallenge(newChallenge);\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleCloseNewChallengeMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleChallengeChange = (updatedChallenge: Challenge) => {\r\n        console.log('handleChallengeChange');\r\n        console.log({ ...updatedChallenge });\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return aProject;\r\n            }\r\n            const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                if (aTest.id !== testId) {\r\n                    return { ...aTest };\r\n                }\r\n                const updatedChallenges = aTest.challenges.map((aChallenge: Challenge) => {\r\n                    if (aChallenge.id !== updatedChallenge.id) {\r\n                        return { ...aChallenge };\r\n                    }\r\n                    return { ...updatedChallenge };\r\n                });\r\n                return {\r\n                    ...aTest,\r\n                    challenges: [...updatedChallenges]\r\n                };\r\n            });\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        setSelectedChallenge({ ...updatedChallenge });\r\n    };\r\n\r\n    const handleConfirmRemoveChallenge = () => {\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return aProject;\r\n            }\r\n            const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                if (aTest.id !== testId) {\r\n                    return aTest;\r\n                }\r\n                const updatedChallenges = aTest.challenges.filter((\r\n                    aChallenge: Challenge\r\n                ) => aChallenge.id !== deletedChallenge?.id);\r\n                return {\r\n                    ...aTest,\r\n                    challenges: [...updatedChallenges]\r\n                };\r\n            });\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        setOpenRemoveChallengeConfirm(false);\r\n    };\r\n\r\n    const handleRefuseRemoveChallenge = () => {\r\n        setOpenRemoveChallengeConfirm(false);\r\n    };\r\n\r\n    const handleListModeChange = (event: React.MouseEvent<HTMLElement>, newListMode: boolean) => {\r\n        setCompactList(newListMode);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <DialogConfirm\r\n                open={openRemoveChallengeConfirm}\r\n                text='¿Seguro que deseas eliminar la pregunta?'\r\n                width='xs'\r\n                onConfirm={handleConfirmRemoveChallenge}\r\n                onRefuse={handleRefuseRemoveChallenge}\r\n            />\r\n            <Grid container className={classes.fullHeight} spacing={2}>\r\n                <Grid item xs={2} className={classes.listContainer}>\r\n                    <Grid container direction='column' className={classes.fullHeight}>\r\n                        <Grid item className={classes.fullWidth}>\r\n                            <Grid container justify='space-between' alignItems='center'>\r\n                                <Grid item>\r\n                                    <Typography variant='h5'>Preguntas</Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Grid container justify='flex-end' alignItems='center'>\r\n                                        <Grid item>\r\n                                            <ToggleButtonGroup size=\"small\" value={compactList} exclusive onChange={handleListModeChange}>\r\n                                                <ToggleButton value={false}>\r\n                                                    <Icon>crop_din</Icon>\r\n                                                </ToggleButton>\r\n                                                <ToggleButton value={true}>\r\n                                                    <Icon>reorder</Icon>\r\n                                                </ToggleButton>\r\n                                            </ToggleButtonGroup>                                            \r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <IconButton onClick={handleClickNewChallengeMenu}>\r\n                                                <Icon color='primary'>add_circle</Icon>\r\n                                            </IconButton>\r\n                                            <Menu\r\n                                                id='new-challenge-menu'\r\n                                                anchorEl={anchorEl}\r\n                                                keepMounted\r\n                                                open={Boolean(anchorEl)}\r\n                                                onClose={handleCloseNewChallengeMenu}\r\n                                            >\r\n                                                <MenuItem onClick={() => {\r\n                                                    handleNewChallengeOptionClick(ChallengeType.SelectAnswer);\r\n                                                }}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.SelectAnswer, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.SelectAnswer)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => {\r\n                                                    handleNewChallengeOptionClick(ChallengeType.TrueOrFalse);\r\n                                                }}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.TrueOrFalse, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.TrueOrFalse)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem disabled onClick={handleCloseNewChallengeMenu}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.FillGaps, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.FillGaps)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem disabled onClick={handleCloseNewChallengeMenu}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.Match, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.Match)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem disabled onClick={handleCloseNewChallengeMenu}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.Sort, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.Sort)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => {\r\n                                                    handleNewChallengeOptionClick(ChallengeType.Classify);\r\n                                                }}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.Classify, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.Classify)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem disabled onClick={handleCloseNewChallengeMenu}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.FillTable, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.FillTable)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem disabled onClick={handleCloseNewChallengeMenu}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.Crossword, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.Crossword)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                            </Menu>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item className={classes.challengesContainer}>\r\n                            <ChallengeSelector\r\n                                challenges={test.challenges}\r\n                                compactList={compactList}\r\n                                selected={selectedChallenge}\r\n                                onSelect={handleSelectChallenge}\r\n                                onDelete={handleDeleteChallenge}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>                        \r\n                </Grid>\r\n                <Grid item xs={10}>\r\n                    {\r\n                        selectedChallenge && (\r\n                            <ChallengeDesigner\r\n                                challenge={selectedChallenge}\r\n                                onChallengeChange={handleChallengeChange}\r\n                            />\r\n                        )\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { useParams } from \"react-router\";\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { TestDesigner } from '../../components/TestDesigner';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\nexport const Designer = () => {\r\n    const { projectId, testId } = useParams() as any;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n            className={classes.fullHeight}\r\n        >\r\n            <Grid item xs={12} className={classes.fullHeight}>\r\n                <TestDesigner\r\n                    projectId={projectId}\r\n                    testId={testId}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { Challenge } from '../../types/Challenge';\r\nimport { ChallengeType } from '../../enums/ChallengeType';\r\nimport { SelectAnswerChallenger } from '../SelectAnswerChallenger';\r\nimport { SelectAnswerChallenge } from '../../types/SelectAnswerChallenge';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { TrueOrFalseChallenge } from '../../types/TrueOrFalseChallenge';\r\nimport { TrueOrFalseChallenger } from '../TrueOrFalseChallenger';\r\nimport { ClassifyChallenger } from '../ClassifyChallenger';\r\nimport { ClassifyChallenge } from '../../types/ClassifyChallenge';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\ninterface ChallengeEvaluatorProps {\r\n    challenge: Challenge;\r\n    onSuccess?: () => void\r\n    onError?: () => void\r\n}\r\n\r\nexport const ChallengeEvaluator: React.FC<ChallengeEvaluatorProps> = (props: ChallengeEvaluatorProps) => {\r\n    const { challenge, onSuccess, onError } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handlerSucessChallenge = () => {\r\n        if (onSuccess) {\r\n            onSuccess();\r\n        }\r\n    };\r\n\r\n    const handlerErrorChallenge = () => {\r\n        if (onError) {\r\n            onError();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight}>\r\n            <Grid item xs={12}>\r\n                {\r\n                    challenge?.type === ChallengeType.SelectAnswer\r\n                    && (\r\n                        <SelectAnswerChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as SelectAnswerChallenge}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.TrueOrFalse\r\n                    && (\r\n                        <TrueOrFalseChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as TrueOrFalseChallenge}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Classify\r\n                    && (\r\n                        <ClassifyChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as ClassifyChallenge}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }                \r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import { makeStyles } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { ChallengeType } from '../../enums/ChallengeType';\r\nimport { getChallengeTypeDescription } from '../../utils/utilChallenges';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: 'solid 1px',\r\n        backgroundColor: '#81d4fa',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        fontSize: '32px'\r\n    }\r\n}));\r\n\r\ninterface ChallengeLauncherProps {\r\n    challengeType: ChallengeType,\r\n    delay: number,\r\n    onEnd: () => void\r\n}\r\n\r\nexport const ChallengeLauncher: React.FC<ChallengeLauncherProps> = (props: ChallengeLauncherProps) => {\r\n    const { challengeType, delay, onEnd } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => { onEnd(); }, delay * 1000);\r\n    }, []);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {\r\n                getChallengeTypeDescription(challengeType)\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, Icon, makeStyles, Typography } from '@material-ui/core';\r\nimport { Test } from '../../types/Test';\r\nimport { Timeline, TimelineConnector, TimelineContent, TimelineItem, TimelineSeparator } from '@material-ui/lab';\r\nimport { Challenge } from '../../types/Challenge';\r\nimport { getChallengeTypeIcon } from '../../utils/utilChallenges';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        border: 'solid 1px'\r\n    },\r\n    timeline: {\r\n        transform: 'rotate(-90deg)'\r\n    },\r\n    timelineContentContainer: {\r\n        textAlign: 'left',\r\n        padding: '0px'\r\n    },\r\n    timelineContent: {\r\n        transform: 'rotate(90deg)',\r\n        padding: '0px 5px'\r\n    },\r\n    timelineIcon: {\r\n        transform: 'rotate(90deg)'\r\n    }\r\n}));\r\n\r\ninterface TestResultProps {\r\n    test: Test,\r\n    results: boolean[]\r\n}\r\n\r\nexport const TestResult: React.FC<TestResultProps> = (props: TestResultProps) => {\r\n    const { test, results } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container\r\n            direction=\"column\"\r\n            className={classes.root}\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={4}\r\n        >\r\n            <Grid item>\r\n                <Typography variant=\"h2\">\r\n                    {test.name}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant=\"h3\">\r\n                    {test.description}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant=\"h4\">\r\n                    {\r\n                        `Aciertos: ${results.filter((aResult: boolean) => aResult).length}/${results.length}`\r\n                    }\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Timeline className={classes.timeline}>\r\n                    {\r\n                        test.challenges.map((aChallenge: Challenge, challengeIdx: number) => (\r\n                            <TimelineItem>\r\n                                <TimelineSeparator>\r\n                                    {getChallengeTypeIcon(aChallenge.type, 'large', {transform: 'rotate(90deg)'})}\r\n                                    {\r\n                                        challengeIdx < test.challenges.length - 1 && (\r\n                                            <TimelineConnector />\r\n                                        )                                        \r\n                                    }\r\n                                </TimelineSeparator>\r\n                                <TimelineContent className={classes.timelineContentContainer}>\r\n                                    <Icon className={classes.timelineContent} fontSize=\"large\" color={results[challengeIdx] ? 'primary' : 'error'}>\r\n                                        { results[challengeIdx] ? 'check_circle' : 'cancel' }\r\n                                    </Icon>\r\n                                </TimelineContent>\r\n                            </TimelineItem>\r\n                        ))\r\n                    }\r\n                </Timeline>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams } from \"react-router\";\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { Test } from '../../types/Test';\r\nimport { useProjects } from '../../hooks/useProjects';\r\nimport { Project } from '../../types/Project';\r\nimport { ChallengeEvaluator } from '../../components/ChallengeEvaluator';\r\nimport { ChallengeLauncher } from '../../components/ChallengeLauncher';\r\nimport { TestResult } from '../../components/TestResult';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\ninterface IParams {\r\n    projectId: string,\r\n    testId: string\r\n}\r\n\r\ninterface ChallengeState {\r\n    idx: number,\r\n    launching: boolean\r\n}\r\n\r\nexport const Evaluator: React.FC = () => {\r\n    const { projectId, testId } = useParams() as IParams;\r\n\r\n    const { projects } = useProjects();\r\n    const [test, setTest] = useState<Test>();\r\n    const [currentChallengeState, setCurrentChallengeState] = useState<ChallengeState>({idx: -1, launching: false});\r\n    const [results, setResults] = useState<boolean[]>([]);\r\n    const [showResult, setShowResult] = useState<boolean>(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (projectId != null && testId != null) {\r\n            const theProject: Project = projects.find((aProject: Project) => aProject.id === projectId);\r\n            if (theProject != null) {\r\n                const theTest: Test | undefined = theProject.tests.find((aTest: Test) => aTest.id === testId);\r\n                if (theTest != null) {\r\n                    setTest(theTest);\r\n                    setCurrentChallengeState({idx: 0, launching: true});\r\n                }\r\n            }\r\n        }\r\n    }, [projectId, testId]);\r\n\r\n    const next = () => {\r\n        if (test != null) {\r\n            if (currentChallengeState.launching) {\r\n                setCurrentChallengeState({\r\n                    ...currentChallengeState,\r\n                    launching: false\r\n                });\r\n            } else {\r\n                if (currentChallengeState.idx < test.challenges.length - 1) {\r\n                    setCurrentChallengeState({\r\n                        idx: currentChallengeState.idx + 1,\r\n                        launching: true\r\n                    });\r\n                } else {\r\n                    setCurrentChallengeState({\r\n                        idx: -1,\r\n                        launching: false\r\n                    });\r\n                    setShowResult(true);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleResponse = (success: boolean) => {\r\n        setResults([...results, success]);\r\n        next();\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n            className={classes.fullHeight}\r\n        >\r\n            <Grid item xs={2}></Grid>\r\n            <Grid item xs={8} className={classes.fullHeight}>\r\n                {\r\n                    test != null && currentChallengeState.launching && currentChallengeState.idx >= 0 && (\r\n                        <ChallengeLauncher\r\n                            challengeType={test.challenges[currentChallengeState.idx].type}\r\n                            delay={3}\r\n                            onEnd={next}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    test != null && !currentChallengeState.launching && currentChallengeState.idx >= 0 && (\r\n                        <ChallengeEvaluator\r\n                            challenge={test.challenges[currentChallengeState.idx]}\r\n                            onSuccess={() => { handleResponse(true); }}\r\n                            onError={() => { handleResponse(false); }}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    test != null && showResult && (\r\n                        <TestResult test={test} results={results} />\r\n                    )\r\n                }\r\n            </Grid>\r\n            <Grid item xs={2}></Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\r\nimport { ProjectContextProvider } from './context/ProjectContext';\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route\r\n} from \"react-router-dom\";\r\nimport { theme } from \"./theme\";\r\nimport { MainHeader } from \"./components/MainHeader\";\r\nimport { Home } from \"./views/Home\";\r\nimport { Designer } from \"./views/Designer\";\r\nimport { Evaluator } from \"./views/Evaluator\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    mainContainer: {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    headerContainer: {\r\n        width: '100%',\r\n        height: '75px'\r\n    },\r\n    content: {\r\n        margin: '30px',\r\n        height: 'calc(100% - 135px)'\r\n    }\r\n}));\r\n\r\nexport default function App() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Router>\r\n            <ThemeProvider theme={theme}>\r\n                <ProjectContextProvider>\r\n                    <div className={classes.mainContainer}>\r\n                        <div className={classes.headerContainer}>\r\n                            <MainHeader></MainHeader>\r\n                        </div>\r\n                        <div className={classes.content}>\r\n                            <Switch>\r\n                                <Route exact path=\"/\">\r\n                                    <Home />\r\n                                </Route>\r\n                                <Route path=\"/designer/:projectId/:testId\">\r\n                                    <Designer />\r\n                                </Route>\r\n                                <Route path=\"/play/:projectId/:testId\">\r\n                                    <Evaluator />\r\n                                </Route>\r\n                            </Switch>\r\n                        </div>\r\n                    </div>\r\n                </ProjectContextProvider>\r\n            </ThemeProvider>\r\n        </Router >\r\n    );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}