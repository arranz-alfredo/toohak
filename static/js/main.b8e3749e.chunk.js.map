{"version":3,"sources":["enums/ChallengeType.ts","enums/PictureType.ts","context/ProjectContext.tsx","theme/index.ts","components/common/MainHeader.tsx","hooks/useProjects.ts","utils/utilValidationTypes.ts","enums/Language.ts","components/Home/TestForm.tsx","enums/FillMethod.ts","components/common/DialogConfirm.tsx","components/Home/DialogTestOptions.tsx","components/common/JsonLoader.tsx","components/Home/TestList.tsx","components/Home/ProjectForm.tsx","components/Home/ProjectList.tsx","views/Home/index.tsx","utils/utilChallenges.tsx","enums/ComponentMode.ts","components/Designer/ChallengeThumbnail.tsx","components/Designer/ChallengeSelector.tsx","components/common/ChallengeQuestion.tsx","enums/MatchElement.ts","components/common/SelectableOption.tsx","components/common/DialogPictureSelector.tsx","components/common/PictureGrid.tsx","components/common/Countdown.tsx","assets/sounds/correct.wav","assets/sounds/incorrect.wav","components/SelectAnswerChallenge/SelectAnswerChallenger.tsx","components/SelectAnswerChallenge/SelectAnswerConfigurator.tsx","components/SelectAnswerChallenge/SelectAnswerChallengeDesigner.tsx","components/TrueOrFalseChallenge/TrueOrFalseChallenger.tsx","components/TrueOrFalseChallenge/TrueOrFalseConfigurator.tsx","components/TrueOrFalseChallenge/TrueOrFalseChallengeDesigner.tsx","components/common/DragableItem.tsx","components/ClassifyChallenge/DropGroup.tsx","components/ClassifyChallenge/ClassifyChallenger.tsx","components/ClassifyChallenge/ClassifyConfigurator.tsx","components/ClassifyChallenge/ClassifyChallengeDesigner.tsx","components/SortChallenge/SortChallenger.tsx","components/SortChallenge/SortConfigurator.tsx","components/SortChallenge/SortChallengeDesigner.tsx","components/FillTableChallenge/TableCell.tsx","components/FillTableChallenge/FillTableChallenger.tsx","components/FillTableChallenge/FillTableConfigurator.tsx","components/FillTableChallenge/FillTableChallengeDesigner.tsx","utils/utilStrings.ts","components/FillGapsChallenge/DropGap.tsx","components/FillGapsChallenge/FillGapsSentence.tsx","components/FillGapsChallenge/DialogFillGapsCandidates.tsx","components/FillGapsChallenge/FillGapsChallenger.tsx","components/FillGapsChallenge/FillGapsConfigurator.tsx","components/FillGapsChallenge/FillGapsChallengeDesigner.tsx","components/MatchChallenge/MatchSource.tsx","components/MatchChallenge/MatchDestination.tsx","components/MatchChallenge/MatchChallenger.tsx","components/MatchChallenge/MatchConfigurator.tsx","components/MatchChallenge/MatchChallengeDesigner.tsx","components/Designer/ChallengeDesigner.tsx","components/Designer/TestDesigner.tsx","views/Designer/index.tsx","components/Evaluator/ChallengeEvaluator.tsx","components/Evaluator/ChallengeLauncher.tsx","components/Evaluator/TestResult.tsx","views/Evaluator/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChallengeType","PictureType","ProjectContext","React","createContext","ProjectContextProvider","children","useState","projects","setProjects","Provider","value","colors","main","light","dark","mainContrast","contrast","errorContrast","theme","createMuiTheme","palette","primary","contrastText","secondary","background","default","paper","error","text","typography","fontSize","MainHeader","AppBar","position","Toolbar","to","style","color","textDecoration","fontWeight","LOCALSTORAGE_KEY","useProjects","useContext","saveProjects","useEffect","length","strProjects","localStorage","getItem","JSON","parse","newProjects","setItem","stringify","Language","isValidChallenge","challenge","errorMessage","id","type","push","configValidation","config","timeLimit","questionFontSize","SelectAnswer","customConfig","pictureCount","pictureLabel","multiselect","TrueOrFalse","FillGaps","Match","Sort","Classify","FillTable","Crossword","valid","isValidConfig","question","customChallenge","pictures","some","aPicture","None","answers","reduce","acc","current","anAnswer","sentences","hiddenExpressions","pairs","source","destination","items","groups","name","accRow","currentRow","rowIdx","accColumn","currentColumn","columnIdx","firstRowFixed","firstColumnFixed","isValidTest","test","challenges","FillMethod","TestForm","props","onAccept","onCancel","description","language","Es","initialState","formState","setFormState","inputName","useRef","inputDescription","Grid","container","direction","spacing","item","xs","TextField","inputRef","label","fullWidth","onInput","InputLabel","shrink","Select","labelId","toString","onChange","evt","updatedLanguage","target","En","MenuItem","justify","Button","variant","onClick","newTest","uuidv4","DialogConfirm","open","acceptButtonText","cancelButtonText","width","onConfirm","onRefuse","Dialog","maxWidth","DialogContent","Typography","DialogActions","autoFocus","useStyles","makeStyles","dialogContainer","padding","DialogTestOptions","ignoreTimeLimit","autoNext","checkIgnoreTimeLimit","checkAutoNextChallenge","classes","handleAttributeChange","attribute","DialogTitle","Box","className","FormControlLabel","control","Switch","checked","uploadInput","display","JsonLoader","onDataLoaded","onError","inputImport","ref","accept","multiple","event","files","file","reader","FileReader","readAsText","onloadend","e","newProject","result","err","htmlFor","inline","listItemSecondaryAction","visibility","listItem","bottomContainer","marginTop","play","messageControl","backgroundColor","TestList","project","onCreateTest","onDeleteTest","history","useHistory","selectedTest","setSelectedTest","anchorElEdit","setAnchorElEdit","openTestForm","setOpenTestForm","openRemoveTestConfirm","setOpenRemoveTestConfirm","playOptionsState","setPlayOptionsState","openMessage","setOpenMessage","messageText","setMessageText","Menu","anchorEl","keepMounted","Boolean","onClose","component","Link","undefined","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","SnackbarContent","message","Icon","tests","List","map","aTest","ListItem","button","alignItems","ListItemText","ListItemSecondaryAction","IconButton","title","projectId","testId","openOptions","stopPropagation","currentTarget","handleEditClick","element","document","createElement","setAttribute","encodeURIComponent","replace","body","appendChild","click","removeChild","handleExportTestClick","Divider","find","testOptions","ProjectForm","heading","pxToRem","secondaryHeading","gridContainer","gridItems","flexGrow","ProjectList","expandedProject","setExpandedProject","openProjectForm","setOpenProjectForm","openRemoveProjectConfirm","setOpenRemoveProjectConfirm","selectedProject","setSelectedProject","handleCreateTest","openDesign","theProject","aProject","updating","updatedProjects","updatedTests","handleDeleteTest","filter","isValidProject","Accordion","expanded","isExpanded","handleExpandChange","AccordionSummary","handleExportProjectClick","AccordionDetails","Home","ComponentMode","getChallengeTypeDescription","TheOddOne","getChallengeTypeIcon","size","getDefaultChallengeConfig","defaultChallengeConfig","answerFontSize","pairsCount","textFontSize","fillMethod","Writing","itemsFontSize","itemCount","groupCount","rowCount","columnCount","fullHeight","height","headerContainer","overflow","contentContainer","actionContainer","descriptionContainer","whiteSpace","textOverflow","tooltipRow","statusContainer","justifyContent","ChallengeThumbnail","index","selected","compact","onChallengeMove","onDelete","validation","setValidation","useDrop","hover","monitor","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","useDrag","collect","isDragging","drag","preview","getEmptyImage","captureDraggingState","opacity","Card","elevation","CardActionArea","onMouseDown","CardHeader","root","content","avatar","subheader","action","Tooltip","arrow","aMessage","messageIdx","CardContent","noWrap","CardActions","Chip","icon","overflowY","ChallengeSelector","compactList","onChallengeReorder","onSelect","localChallenges","setLocalChallenges","selectedChallenge","setSelectedChallenge","console","log","handleThumbnailClick","handleThumbnailDelete","handleChallengeMove","filteredCards","aChallenge","idx","newChallenges","slice","MatchElement","inputContainer","input","ChallengeQuestion","mode","questionText","setQuestionText","inputQuestion","inputProps","textAlign","lineHeight","InputProps","readOnly","Play","disableUnderline","placeholder","multiline","rowsMax","option","optionActionArea","optionInput","optionInnerInput","cursor","optionIcon","selector","SelectableOption","showResults","onTextChange","onValidChange","optionState","setOptionState","inputTextOption","radioOption","checkOption","borderStyle","borderWidth","borderColor","Design","startAdornment","InputAdornment","endAdornment","Checkbox","newState","Radio","ev","preventDefault","justifySelf","DialogPictureForm","picture","inputUrl","data","newPicture","Url","pic","maxHeight","PictureGrid","onPicturesChange","pictureDialogState","setPictureDialogState","pictureItemSize","setPictureItemSize","openDialog","selectedPicture","newPic","pictureIdx","selectedPictureIdx","border","src","alt","Fab","handleAddPictureClick","Countdown","time","stopTimer","onTimeUp","timeRemaining","setTimeRemaining","stop","setStop","timeoutId","setTimeout","clearTimeout","CircularProgress","Math","round","left","right","titleContainer","pictureContainer","answerContainer","paddingTop","optionContainer","centerAll","SelectAnswerChallenger","options","onChallengeChange","onSuccess","setStopTimer","selectedAnswers","setSelectedAnswers","highlightResults","setHighlightResults","useSound","correct","playCorrect","incorrect","playIncorrect","handleAnswerChange","updatedAnswer","updatedAnswers","handlerOptionClick","answerIdx","theIndex","findIndex","anAnswerIdx","showResult","success","newTitle","newPictures","disabled","indexOf","handleCheckClick","newText","SelectAnswerConfigurator","onConfigChange","formData","setFormData","inputTimeLimit","inputQuestionFontSize","inputPictureCount","checkPictureLabel","inputAnswerFontSize","checkMultiselect","handleConfigParameterChange","parameter","newConfig","min","parseInt","max","SelectAnswerChallengeDesigner","updatedChallenge","Array","from","readjustPictures","validPresent","readjustValidAnswers","TrueOrFalseChallenger","answer","TrueOrFalseConfigurator","TrueOrFalseChallengeDesigner","borderRadius","DragableItem","iconButton","itemsContainer","DropGroup","validItems","onTitleChange","onItemsChange","droppedItems","onDrop","isOver","canDrop","groupState","setGroupState","inputTitle","inputItem","addValidItem","updatedItems","anItem","itemIdx","handleRemoveValidItem","onKeyPress","code","aDroppedItem","classifyContainer","optionsContainer","groupsContainer","reorderItems","list","sort","random","ClassifyChallenger","aGroup","groupName","initialClassifyState","classifyState","setClassifyState","draggableItems","setDragabbleItems","isDropped","itemName","DndProvider","backend","HTML5Backend","newName","groupIdx","updatedName","updatedGroups","handleNameChange","newItems","handleItemsChange","auxGroup","droppedItem","newDroppedItems","handleDrop","accGroups","currentGroup","correctItems","accItems","currentItem","theGroup","ClassifyConfigurator","inputItemsFontSize","inputGroupCount","ClassifyChallengeDesigner","newGroups","readjustGroups","SortChallenger","SortConfigurator","inputItemCount","SortChallengeDesigner","readjustItems","fixed","invalid","TableCell","cell","onCellChange","inputText","hidden","marginLeft","FillTableChallenger","aRow","aColumn","initialFillTableState","fillTableState","setFillTableState","newCell","auxRowIdx","auxColumnIdx","handleCellChange","FillTableConfigurator","inputRowCount","checkFirstRowFixed","inputColumnCount","checkFirstColumnFixed","FillTableChallengeDesigner","auxColumn","newRows","newColumns","readjustTable","splitSentence","split","joinSentence","textParts","join","checkEqual","stringA","stringB","checkCapitalLetters","checkAccentMarks","strA","strB","toLowerCase","DropGap","borderBottom","word","FillGapsSentence","sentence","onSentenceChange","onSentenceRemove","onAnswersChange","currentIdx","words","forEach","anExp","initPosition","hiddenIdx","wordCount","sentenceParts","parts","setParts","handlePartChange","partIdx","updatedParts","aPart","getPartStyle","validValues","aValidValue","aWord","wordIdx","anExpression","updatedHiddenExpressions","alternatives","completeArrayFrom","handleWordClick","droppedText","DialogFillGapsCandidates","candidates","inputCandidate","aCandidate","candidateIdx","edge","handleDeleteCandidate","minHeight","sentencesContainer","paddingLeft","aSentence","sentenceIdx","aHiddenExpression","hiddenExpressionIdx","sentenceText","hiddenExpression","FillGapsChallenger","inputSentence","initialFillGapsState","fillGapsState","setFillGapsState","openCandidatesDialog","setOpenCandidatesDialog","selectedExpression","setSelectedExpression","expressionInSentence","expression","newCandidates","updatedSentences","hiddenExpresionIdx","Dragging","sentencesAnswer","aSentenceAnswer","hiddenExpIdx","updatedSentence","handleSentenceChange","aFillGapsState","handleSentenceRemove","updatedState","handleSentenceAnswer","newSentence","addSentence","every","el","accSentences","currentSentence","correctExpressions","accExpressions","currentExpression","expressionIdx","hiddenAnswer","anAlternative","FillGapsConfigurator","inputTextFontSize","inputFillMethod","FormControl","FillGapsChallengeDesigner","MatchSource","arrowNode","textValue","setTextValue","MatchDestination","texts","MatchChallenger","aPair","sourceItems","setSourceItems","destinationItems","setDestinationItems","matchState","setMatchState","handleTextChange","pairIdx","pairAttribute","Source","newChallenge","aSource","sourceIdx","aDestination","destinationIdx","Destination","start","end","curveness","accPairs","currentPair","idxAnswer","MatchConfigurator","inputPairsCount","MatchChallengeDesigner","newPairs","readjustPairs","ChallengeDesigner","handleChallengeChange","listContainer","paddingRight","challengesContainer","overflowX","listStyle","boxShadow","webkitBoxShadow","outline","challengeSelector","TestDesigner","setTest","setCompactList","setAnchorEl","deletedChallenge","setDeletedChallenge","openRemoveChallengeConfirm","setOpenRemoveChallengeConfirm","handleReorderChallenges","useCallback","reorderedChallenges","handleNewChallengeOptionClick","defaultChallenge","getDefaultChallenge","selectedPosition","handleCloseNewChallengeMenu","updatedChallenges","ToggleButtonGroup","exclusive","newListMode","ToggleButton","ListItemIcon","Designer","useParams","ChallengeEvaluator","handlerSucessChallenge","handlerErrorChallenge","ChallengeLauncher","challengeType","challengeNumber","challengeTotalCount","delay","onEnd","LinearProgress","timeline","transform","timelineContentContainer","timelineContent","timelineIcon","TestResult","results","onBackHome","onRepeatTest","aResult","Evaluator","qs","qsAux","aParam","paramParts","parseQueryString","location","search","launching","currentChallengeState","setCurrentChallengeState","setResults","setShowResult","theTest","next","handleResponse","mainContainer","flexDirection","margin","App","ThemeProvider","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b8e3749e.chunk.js","sourcesContent":["export enum ChallengeType {\r\n    SelectAnswer = 'SA',\r\n    TrueOrFalse = 'TF',\r\n    FillGaps = 'FG',\r\n    Match = 'MT',\r\n    Sort = 'SO',\r\n    Classify = 'CL',\r\n    FillTable = 'FT',\r\n    TheOddOne = 'OO',\r\n    Crossword = 'CW'\r\n}","export enum PictureType {\r\n    None = 'NONE',\r\n    Url = 'URL',\r\n    Base64 = 'BASE64'\r\n}","import React, { useState } from 'react';\r\n\r\n/**\r\n * Contexto para almacenar los proyectos importados\r\n */\r\nexport const ProjectContext = React.createContext<any | React.Dispatch<any>>([]);\r\n\r\ntype Props = {\r\n    children: React.ReactNode\r\n}\r\n\r\n/** Proveedor del contexto de proyectos */\r\nexport const ProjectContextProvider = ({ children }: Props) => {\r\n    // Hook para mantener el estado del contexto\r\n    const [projects, setProjects] = useState<any | React.Dispatch<any>>([]);\r\n\r\n    return (\r\n        <ProjectContext.Provider value={{ projects, setProjects }}>\r\n            {children}\r\n        </ProjectContext.Provider>\r\n    );\r\n};\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nexport const colors = {\r\n    primary: {\r\n        main: '#2196f3',\r\n        light: '#6ec6ff',\r\n        dark: '#0069c0'\r\n    },\r\n    secondary: {\r\n        main: '#e91e63',\r\n        light: '#ff6090',\r\n        dark: '#b0003a'\r\n    },\r\n    error: '#f44336',\r\n    background: {\r\n        main: '#2196f3',\r\n        light: '#ffffff',\r\n        dark: '#0069c0'\r\n    },\r\n    font: {\r\n        main: '#000000',\r\n        mainContrast: \"#ffffff\",\r\n        light: '#000000',\r\n        dark: '#888888',\r\n        contrast: '#6ec6ff',\r\n        errorContrast: \"#ffffff\"\r\n    },\r\n    action: \"#4caf50\"\r\n};\r\n\r\nexport const fontSize = {\r\n    s: 10,\r\n    m: 12,\r\n    l: 16\r\n};\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: colors.primary.main,\r\n            contrastText: colors.font.mainContrast,\r\n            light: colors.primary.light\r\n        },\r\n        secondary: {\r\n            main: colors.secondary.main,\r\n            contrastText: colors.font.main,\r\n            light: colors.secondary.light\r\n        },\r\n        background: {\r\n            default: colors.background.main,\r\n            paper: colors.background.light\r\n        },\r\n        error: {\r\n            main: colors.error,\r\n        },\r\n        text: {\r\n            primary: colors.font.main,\r\n            secondary: colors.font.dark\r\n        }\r\n    },\r\n    typography: {\r\n        fontSize: fontSize.m,\r\n    }\r\n});","import React from 'react';\r\nimport { AppBar, Toolbar } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const MainHeader: React.FC = () => (\r\n    <AppBar position='static'>\r\n        <Toolbar>\r\n            <Link to=\"/\" style={{color: '#ffffff', textDecoration: 'none', fontWeight: 'bold'}}>!toohaK</Link>\r\n        </Toolbar>\r\n    </AppBar>\r\n);\r\n","import { useContext, useEffect } from 'react';\r\nimport { ProjectContext } from '../context/ProjectContext';\r\nimport { Project } from '../types/Project';\r\n\r\nconst LOCALSTORAGE_KEY = 'projects';\r\n\r\n/**\r\n * Hook para la gestión del mapa\r\n */\r\nexport const useProjects = (): any => {\r\n    // Contexto del mapa\r\n    const { projects, setProjects: saveProjects } = useContext(ProjectContext);\r\n\r\n    useEffect(() => {\r\n        if (projects == null || projects.length === 0) {\r\n            const strProjects = localStorage.getItem(LOCALSTORAGE_KEY);\r\n            if (strProjects != null && strProjects !== '') {\r\n                saveProjects(JSON.parse(strProjects));\r\n            } else {\r\n                saveProjects([]);\r\n            }\r\n        }\r\n    });\r\n\r\n    const setProjects = (newProjects: Project[]) => {\r\n        localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(newProjects));\r\n        saveProjects(newProjects);\r\n    };\r\n\r\n    return { projects, setProjects };\r\n};\r\n","import { ChallengeType } from '../enums/ChallengeType';\r\nimport { PictureType } from '../enums/PictureType';\r\nimport { Challenge, ChallengeConfig, ChallengePicture } from '../types/Challenge';\r\nimport { ClassifyChallenge, ClassifyChallengeGroup } from '../types/ClassifyChallenge';\r\nimport { FillGapsChallenge, FillGapsChallengeSentence } from '../types/FillGapsChallenge';\r\nimport { FillTableChallenge, FillTableChallengeCell } from '../types/FillTableChallenge';\r\nimport { MatchChallenge, MatchChallengePair } from '../types/MatchChallenge';\r\nimport { Project } from '../types/Project';\r\nimport { SelectAnswerChallenge, SelectAnswerChallengeAnswer, SelectAnswerChallengeConfig } from '../types/SelectAnswerChallenge';\r\nimport { SortChallenge } from '../types/SortChallenge';\r\nimport { Test } from '../types/Test';\r\n\r\nexport interface Validation {\r\n    valid: boolean,\r\n    errorMessage: string[]\r\n}\r\n\r\nexport const isValidConfig = (type: ChallengeType, config: ChallengeConfig): Validation => {\r\n    const errorMessage: string[] = [];\r\n\r\n    if (config?.timeLimit == null || config?.timeLimit <= 0) { errorMessage.push('El tiempo límite debe ser mayor de 0') ;}\r\n    if (config?.questionFontSize == null || config?.questionFontSize <= 0) { errorMessage.push('El tamaño de fuente del titulo debe ser mayor de 0'); }\r\n\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer: {\r\n            const customConfig = config as SelectAnswerChallengeConfig;\r\n            if (customConfig?.pictureCount == null || customConfig?.pictureCount <= 0) { errorMessage.push('El número de imágenes debe ser mayor de 0'); }\r\n            if (customConfig?.pictureLabel == null) { errorMessage.push('Error en indicador de etiquetado de imágenes'); }\r\n            if (customConfig?.multiselect == null) { errorMessage.push('Error en indicador de seleccion múltiple'); }\r\n            break;\r\n        }\r\n        case ChallengeType.TrueOrFalse:\r\n            break;\r\n        case ChallengeType.FillGaps:\r\n            break;\r\n        case ChallengeType.Match:\r\n            break;\r\n        case ChallengeType.Sort:\r\n            break;\r\n        case ChallengeType.Classify:\r\n            break;\r\n        case ChallengeType.FillTable:\r\n            break;\r\n        case ChallengeType.Crossword:\r\n            break;\r\n    }\r\n    return {\r\n        valid: errorMessage.length === 0,\r\n        errorMessage\r\n    };\r\n};\r\n\r\nexport const isValidChallenge = (challenge: Challenge): Validation => {\r\n    let errorMessage: string[] = [];\r\n\r\n    if (challenge?.id == null || challenge?.type == null) { errorMessage.push('Datos internos incorrectos'); }\r\n    const configValidation = isValidConfig(challenge?.type, challenge?.config);\r\n    if (!configValidation.valid) { errorMessage = [...errorMessage, ...configValidation.errorMessage]; }\r\n    if (challenge?.question == null || challenge?.question === '') { errorMessage.push('Se debe rellenar el enunciado / pregunta'); }\r\n\r\n    switch (challenge.type) {\r\n        case ChallengeType.SelectAnswer: {\r\n            const customChallenge = challenge as SelectAnswerChallenge;\r\n            if (customChallenge.config.pictureCount > 1\r\n                && customChallenge.pictures.some((aPicture: ChallengePicture) => aPicture.type === PictureType.None)\r\n            ) {\r\n                errorMessage.push('Hay imágenes vacías');\r\n            }\r\n            if(!customChallenge.answers.reduce(\r\n                (acc: boolean, current: SelectAnswerChallengeAnswer) => acc && current.text != null && current.text !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay alguna respuesta vacía');\r\n            }\r\n            if(!customChallenge.answers.some((anAnswer: SelectAnswerChallengeAnswer) => anAnswer.valid)) {\r\n                errorMessage.push('Debe marcarse al menos una respuesta como válida');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.TrueOrFalse:\r\n            break;\r\n        case ChallengeType.FillGaps:{\r\n            const customChallenge = challenge as FillGapsChallenge;\r\n            if(!customChallenge.sentences.reduce(\r\n                (acc: boolean, current: FillGapsChallengeSentence) => acc && current != null && current.text !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay elementos sin texto');\r\n            }\r\n            if (customChallenge.sentences.length === 0) {\r\n                errorMessage.push('Debe haber al menos una frase');\r\n            }\r\n            if(!customChallenge.sentences.reduce(\r\n                (acc: boolean, current: FillGapsChallengeSentence) => (\r\n                    acc\r\n                    && current != null\r\n                    && current.hiddenExpressions.length > 0\r\n                ),\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay frases sin palabras ocultas');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.Match: {\r\n            const customChallenge = challenge as MatchChallenge;\r\n            if(!customChallenge.pairs.reduce(\r\n                (acc: boolean, current: MatchChallengePair) => (\r\n                    acc\r\n                    && current.source != null && current.source !== ''\r\n                    && current.destination != null && current.destination !== ''\r\n                ),\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay elementos sin texto');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.Sort: {\r\n            const customChallenge = challenge as SortChallenge;\r\n            if(!customChallenge.items.reduce(\r\n                (acc: boolean, current: string) => acc && current != null && current !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay elementos sin texto');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.Classify: {\r\n            const customChallenge = challenge as ClassifyChallenge;\r\n            if(!customChallenge.groups.reduce(\r\n                (acc: boolean, current: ClassifyChallengeGroup) => acc && current.name != null && current.name !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Todos los grupos deben tener un título');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.FillTable: {\r\n            const customChallenge = challenge as FillTableChallenge;\r\n            if(!customChallenge.items.reduce(\r\n                (accRow: boolean, currentRow: FillTableChallengeCell[], rowIdx: number) => (\r\n                    accRow\r\n                    && currentRow.reduce(\r\n                        (accColumn: boolean, currentColumn: FillTableChallengeCell, columnIdx: number) => (\r\n                            accColumn\r\n                            && (\r\n                                (\r\n                                    customChallenge.config.firstRowFixed\r\n                                    && rowIdx === 0\r\n                                    && customChallenge.config.firstColumnFixed\r\n                                    && columnIdx === 0\r\n                                )\r\n                                || currentColumn.text !== ''\r\n                            )\r\n                        ),\r\n                        true\r\n                    )\r\n                ),\r\n                true\r\n            )) {\r\n                errorMessage.push('Todas las celdas deben estar rellenas');\r\n            }\r\n            break;\r\n            break;\r\n        }\r\n        case ChallengeType.Crossword:\r\n            break;\r\n    }\r\n    return {\r\n        valid: errorMessage.length === 0,\r\n        errorMessage\r\n    };\r\n};\r\n\r\nexport const isValidTest = (test: Test): boolean => {\r\n    return test != null\r\n        && test.id != null\r\n        && test.name != null\r\n        && test.challenges != null\r\n        && test.challenges.reduce(\r\n            (acc: boolean, current: Challenge) => acc && isValidChallenge(current).valid,\r\n            true\r\n        );\r\n};\r\n\r\nexport const isValidProject = (project: Project): boolean => {\r\n    return project != null\r\n        && project.id != null\r\n        && project.name != null\r\n        && project.tests != null\r\n        && project.tests.reduce(\r\n            (acc: boolean, current: Test) => acc && isValidTest(current),\r\n            true\r\n        );\r\n};","export enum Language {\r\n    Es = 'ES',\r\n    En = 'EN'\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport { Button, Grid, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Language } from '../../enums/Language';\r\nimport { Test } from '../../types/Test';\r\n\r\ninterface TestState {\r\n    name: string,\r\n    description: string,\r\n    language: Language\r\n}\r\n\r\nconst initialState = (test?: Test): TestState => {\r\n    if (test != null) {\r\n        return {\r\n            name: test.name,\r\n            description: test.description || '',\r\n            language: test.language || Language.Es\r\n        };\r\n    }\r\n    return {\r\n        name: '',\r\n        description: '',\r\n        language: Language.Es\r\n    };\r\n};\r\n\r\ninterface TestFormProps {\r\n    test?: Test,\r\n    onAccept: (newTest: Test) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const TestForm: React.FC<TestFormProps> = (props: TestFormProps) => {\r\n    const { test, onAccept, onCancel } = props;\r\n\r\n    const [formState, setFormState] = useState<TestState>(initialState(test));\r\n\r\n    const inputName = useRef({} as HTMLInputElement);\r\n    const inputDescription = useRef({} as HTMLInputElement);\r\n\r\n    const handleNameChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            name: inputName.current.value\r\n        });\r\n    };\r\n\r\n    const handleDescriptionChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            description: inputDescription.current.value\r\n        });\r\n    };\r\n\r\n    const handleLanguageChange = (evt: React.ChangeEvent<{ name?: string | undefined, value: unknown}>) => {\r\n        const updatedLanguage = evt.target.value === Language.Es.toString() ? Language.Es : Language.En;\r\n        setFormState({\r\n            ...formState,\r\n            language: updatedLanguage\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        const newTest: Test = test ?\r\n            {\r\n                ...test,\r\n                name: formState.name,\r\n                description: formState.description,\r\n                language: formState.language\r\n            }\r\n            : {\r\n                id: uuidv4(),\r\n                name: formState.name,\r\n                description: formState.description,\r\n                language: formState.language,\r\n                challenges: []\r\n            };\r\n\r\n        onAccept(newTest);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            direction='column'\r\n            spacing={4}\r\n        >\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputName}\r\n                    id='newTestNameInput'\r\n                    label='Nombre'\r\n                    fullWidth\r\n                    value={formState.name}\r\n                    onInput={handleNameChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputDescription}\r\n                    id='newTestNameInput'\r\n                    label='Descripción'\r\n                    fullWidth\r\n                    value={formState.description}\r\n                    onInput={handleDescriptionChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <InputLabel shrink id=\"label-language\">\r\n                    Idioma\r\n                </InputLabel>\r\n                <Select\r\n                    labelId=\"label-language\"\r\n                    id='newTestLanguageInput'\r\n                    label='Idioma'\r\n                    fullWidth\r\n                    value={formState.language.toString()}\r\n                    onChange={handleLanguageChange}\r\n                >\r\n                    <MenuItem value={Language.Es.toString()}>Español</MenuItem>\r\n                    <MenuItem value={Language.En.toString()}>Inglés</MenuItem>\r\n                </Select>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid container justify='flex-end' spacing={1}>\r\n                    <Grid item>\r\n                        <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","export enum FillMethod {\r\n    Writing = 'W',\r\n    Dragging = 'D'\r\n}","import React from 'react';\r\nimport { Button, Dialog, DialogActions, DialogContent, Grid, Typography } from '@material-ui/core';\r\n\r\ninterface DialogConfirmProps {\r\n    open: boolean,\r\n    text: string,\r\n    acceptButtonText?: string,\r\n    cancelButtonText?: string,\r\n    width?: 'xs' | 'sm' | 'md' | 'lg' | 'xl',\r\n    onConfirm: () => void,\r\n    onRefuse: () => void\r\n}\r\n\r\nexport const DialogConfirm: React.FC<DialogConfirmProps> = (props: DialogConfirmProps) => {\r\n    const {open, text, acceptButtonText, cancelButtonText, width, onConfirm, onRefuse} = props;\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth={ width ? width : 'sm' }\r\n        >\r\n            <DialogContent>\r\n                <Grid container justify='center'>\r\n                    <Grid item>\r\n                        <Typography variant='button'>{text}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button autoFocus onClick={onConfirm} color='primary' variant='contained'>\r\n                    { acceptButtonText ? acceptButtonText : 'Aceptar' }\r\n                </Button>\r\n                <Button onClick={onRefuse} color='primary'>\r\n                    { cancelButtonText ? cancelButtonText : 'Cancelar' }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { useRef, useState } from 'react';\r\nimport { Box, Button, Dialog, DialogTitle, FormControlLabel, Grid, makeStyles, Switch } from '@material-ui/core';\r\nimport { TestOptions } from '../../types/Test';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n}));\r\n\r\ninterface DialogTestOptionsProps {\r\n    open: boolean,\r\n    onAccept: (options: TestOptions) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const DialogTestOptions: React.FC<DialogTestOptionsProps> = (props: DialogTestOptionsProps) => {\r\n    const {open, onAccept, onCancel} = props;\r\n\r\n    const [formState, setFormState] = useState<TestOptions>({ ignoreTimeLimit: false, autoNext: true });\r\n\r\n    const checkIgnoreTimeLimit = useRef({} as HTMLInputElement);\r\n    const checkAutoNextChallenge = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleAttributeChange = (attribute: string, value: boolean) => {\r\n        setFormState({\r\n            ...formState,\r\n            [attribute]: value\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        onAccept(formState);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth='sm'\r\n        >\r\n            <DialogTitle>Opciones del cuestionario</DialogTitle>\r\n            <Box className={classes.dialogContainer}>\r\n                <Grid\r\n                    container\r\n                    direction='column'\r\n                    spacing={2}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    inputRef={checkIgnoreTimeLimit}\r\n                                    name='checkMultiselect'\r\n                                    checked={formState.ignoreTimeLimit}\r\n                                    color='secondary'\r\n                                    onChange={() => { handleAttributeChange('ignoreTimeLimit', checkIgnoreTimeLimit.current.checked); }}\r\n                                />\r\n                            }\r\n                            label='Desactivar tiempo límite de las preguntas'\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    inputRef={checkAutoNextChallenge}\r\n                                    name='checkMultiselect'\r\n                                    checked={formState.autoNext}\r\n                                    color='secondary'\r\n                                    onChange={() => { handleAttributeChange('autoNext', checkAutoNextChallenge.current.checked); }}\r\n                                />\r\n                            }\r\n                            label='Avanzar automáticamente a la siguiente pregunta'\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container justify='flex-end' spacing={1}>\r\n                            <Grid item>\r\n                                <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { Fragment, useRef } from 'react';\r\nimport { Button, makeStyles } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { colors } from '../../theme';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    uploadInput: {\r\n        display: 'none'\r\n    }\r\n}));\r\n\r\ninterface HTMLInputEvent extends Event {\r\n    target: HTMLInputElement & EventTarget\r\n}\r\n\r\ninterface JsonLoaderProps {\r\n    label: string,\r\n    onDataLoaded: (data: unknown) => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const JsonLoader: React.FC<JsonLoaderProps> = (props: JsonLoaderProps) => {\r\n    const { label, onDataLoaded, onError } = props;\r\n\r\n    const inputImport = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    const id = uuidv4();\r\n\r\n    const handleInput = (event: unknown) => {\r\n        try {\r\n            const evt = event as HTMLInputEvent;\r\n            if (evt?.target?.files != null) {\r\n                const file = evt.target.files[0];\r\n                const reader = new FileReader();\r\n                reader.readAsText(file);\r\n                reader.onloadend = (e) => {\r\n                    try {\r\n                        const newProject = JSON.parse(reader.result as string);\r\n                        onDataLoaded(newProject);\r\n                    } catch (err) {\r\n                        if (onError) {\r\n                            onError();\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n        } catch (err) {\r\n            if (onError) {\r\n                onError();\r\n            }\r\n        }\r\n        inputImport.current.value = '';\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <input\r\n                ref={inputImport}\r\n                accept='text'\r\n                className={classes.uploadInput}\r\n                id={id}\r\n                multiple\r\n                type='file'\r\n                onInput={handleInput}\r\n            />\r\n            <Button style={{ color: colors.primary.dark }}>\r\n                <label htmlFor={id}>\r\n                    {label}\r\n                </label>\r\n            </Button>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { Fragment, useState } from 'react';\r\nimport { Box, Button, Dialog, DialogTitle, Divider, Grid, Icon, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText, makeStyles, Menu, MenuItem, Snackbar, SnackbarContent, Typography } from '@material-ui/core';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Test, TestOptions } from '../../types/Test';\r\nimport { colors } from '../../theme';\r\nimport { Project } from '../../types/Project';\r\nimport { isValidTest } from '../../utils/utilValidationTypes';\r\nimport { TestForm } from './TestForm';\r\nimport { DialogConfirm } from '../common/DialogConfirm';\r\nimport { DialogTestOptions } from './DialogTestOptions';\r\nimport { JsonLoader } from '../common/JsonLoader';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    listItemSecondaryAction: {\r\n        visibility: 'hidden'\r\n    },\r\n    listItem: {\r\n        '&:hover $listItemSecondaryAction': {\r\n            visibility: 'inherit'\r\n        }\r\n    },\r\n    bottomContainer: {\r\n        marginTop: '10px'\r\n    },\r\n    play: {\r\n        color: colors.action\r\n    },\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n    messageControl: {\r\n        backgroundColor: colors.error,\r\n        color: colors.font.errorContrast\r\n    }\r\n}));\r\n\r\ninterface PlayOptionsState {\r\n    projectId?: string,\r\n    testId?: string,\r\n    openOptions: boolean\r\n}\r\ninterface TestListProps {\r\n    project: Project,\r\n    onCreateTest: (projectId: string, test: Test, openDesign: boolean) => void,\r\n    onDeleteTest: (projectId: string, test: Test) => void\r\n}\r\n\r\nexport const TestList: React.FC<TestListProps> = (props: TestListProps) => {\r\n    const { project, onCreateTest, onDeleteTest } = props;\r\n\r\n    const history = useHistory();\r\n\r\n    const [selectedTest, setSelectedTest] = React.useState<Test | undefined>();\r\n    const [anchorElEdit, setAnchorElEdit] = React.useState<Element | null>(null);\r\n    const [openTestForm, setOpenTestForm] = useState<boolean>(false);\r\n    const [openRemoveTestConfirm, setOpenRemoveTestConfirm] = useState<boolean>(false);\r\n    const [playOptionsState, setPlayOptionsState] = useState<PlayOptionsState>();\r\n    const [openMessage, setOpenMessage] = useState<boolean>(false);\r\n    const [messageText, setMessageText] = useState<string>('');\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleCreateTestClick = () => {\r\n        setOpenTestForm(true);\r\n    };\r\n\r\n    const handleImportTest = (test: unknown) => {\r\n        const newTest = test as Test;\r\n        if (!isValidTest(newTest)) {\r\n            setMessageText('El proyecto es inválido');\r\n            setOpenMessage(true);\r\n        }\r\n        const exist = project.tests.find((aTest: Test) => aTest.id === newTest.id) != null;\r\n        if (!exist) {\r\n            onCreateTest(project.id, newTest, false);\r\n        } else {\r\n            setMessageText('El proyecto ya existe');\r\n            setOpenMessage(true);\r\n        }\r\n    };\r\n\r\n    const handleImportTestError = () => {\r\n        setMessageText('Se produjo un error en la importación');\r\n        setOpenMessage(true);\r\n    };\r\n\r\n    const handleTestFormAccept = (newTest: Test) => {\r\n        onCreateTest(project.id, newTest, true);\r\n        setSelectedTest(undefined);\r\n        setOpenTestForm(false);\r\n    };\r\n\r\n    const handleTestFormCancel = () => {\r\n        setSelectedTest(undefined);\r\n        setOpenTestForm(false);\r\n    };\r\n\r\n    const handleEditClick = (evt: React.MouseEvent<HTMLButtonElement>, test: Test) => {\r\n        setSelectedTest(test);\r\n        setAnchorElEdit(evt.currentTarget);\r\n    };\r\n\r\n    const handleCloseEditMenu = () => {\r\n        setAnchorElEdit(null);\r\n    };\r\n\r\n    const handleEditDataClick = () => {\r\n        setAnchorElEdit(null);\r\n        setOpenTestForm(true);\r\n    };\r\n\r\n    const handleExportTestClick = (test: Test) => {\r\n        const element = document.createElement('a');\r\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(test)));\r\n        element.setAttribute('download', test.name.replace(/ /g, '_'));\r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n        element.click();\r\n        document.body.removeChild(element);\r\n    };\r\n\r\n    const handleRemoveTestClick = (test: Test) => {\r\n        setSelectedTest(test);\r\n        setOpenRemoveTestConfirm(true);\r\n    };\r\n\r\n    const handleConfirmRemoveTest = () => {\r\n        if (selectedTest != null) {\r\n            onDeleteTest(project.id, selectedTest);\r\n        }\r\n        setSelectedTest(undefined);\r\n        setOpenRemoveTestConfirm(false);\r\n    };\r\n\r\n    const handleRefuseRemoveTest = () => {\r\n        setSelectedTest(undefined);\r\n        setOpenRemoveTestConfirm(false);\r\n    };\r\n\r\n    const handlePlayClick = (projectId: string, testId: string) => {\r\n        setPlayOptionsState({\r\n            projectId,\r\n            testId,\r\n            openOptions: true\r\n        });\r\n    };\r\n\r\n    const handleAcceptPlayOptions = (testOptions: TestOptions) => {\r\n        history.push(`/play/${playOptionsState?.projectId}/${playOptionsState?.testId}?ignoreTimeLimit=${testOptions.ignoreTimeLimit}&autoNext=${testOptions.autoNext}`, playOptionsState);\r\n        setPlayOptionsState({\r\n            openOptions: false\r\n        });\r\n    };\r\n\r\n    const handleCancelPlayOptions = () => {\r\n        setPlayOptionsState({\r\n            openOptions: false\r\n        });\r\n    };\r\n\r\n    const handleMessageClose = () => {\r\n        setOpenMessage(false);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Menu\r\n                id=\"addNewMenu\"\r\n                anchorEl={anchorElEdit}\r\n                keepMounted\r\n                open={Boolean(anchorElEdit)}\r\n                onClose={handleCloseEditMenu}\r\n            >\r\n                <MenuItem onClick={handleEditDataClick}>\r\n                    <Typography variant=\"subtitle2\">\r\n                        Editar datos generales\r\n                    </Typography>\r\n                </MenuItem>\r\n                <MenuItem component={Link} to={`/designer/${project.id}/${selectedTest?.id}`}>\r\n                    <Typography variant=\"subtitle2\">\r\n                        Editar preguntas\r\n                    </Typography>\r\n                </MenuItem>\r\n            </Menu>\r\n            <Dialog\r\n                open={openTestForm}\r\n                fullWidth\r\n                maxWidth='sm'\r\n            >\r\n                <DialogTitle>Cuestionario</DialogTitle>\r\n                <Box className={classes.dialogContainer}>\r\n                    <TestForm\r\n                        test={selectedTest}\r\n                        onAccept={handleTestFormAccept}\r\n                        onCancel={handleTestFormCancel}\r\n                    />\r\n                </Box>\r\n            </Dialog>\r\n            <DialogConfirm\r\n                open={openRemoveTestConfirm}\r\n                text='¿Seguro que deseas eliminar el proyecto?'\r\n                width='xs'\r\n                onConfirm={handleConfirmRemoveTest}\r\n                onRefuse={handleRefuseRemoveTest}\r\n            />\r\n            <Snackbar\r\n                open={openMessage}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                autoHideDuration={3000}\r\n                onClose={handleMessageClose}\r\n            >\r\n                <SnackbarContent\r\n                    message={\r\n                        <Grid container spacing={4}>\r\n                            <Grid item xs={1}>\r\n                                <Icon>error</Icon>\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <Typography>{messageText}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    }\r\n                    className={classes.messageControl}\r\n                />\r\n            </Snackbar>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    {\r\n                        project.tests.length === 0\r\n                        && <Typography>No hay cuestionarios</Typography>\r\n                    }\r\n                    {\r\n                        project.tests.length > 0\r\n                        && <List>\r\n                            {\r\n                                project.tests.map((aTest: Test) => (\r\n                                    <Fragment key={`fragment_${aTest.id}`}>\r\n                                        <ListItem\r\n                                            button\r\n                                            key={aTest.id}\r\n                                            alignItems='flex-start'\r\n                                            classes={{ container: classes.listItem }}\r\n                                        >\r\n                                            <Grid container>\r\n                                                <Grid item xs={6}>\r\n                                                    <ListItemText\r\n                                                        primary={\r\n                                                            aTest.name\r\n                                                        }\r\n                                                        secondary={\r\n                                                            <Typography\r\n                                                                component='span'\r\n                                                                variant='body2'\r\n                                                                className={classes.inline}\r\n                                                                color='textPrimary'\r\n                                                            >\r\n                                                                {aTest.description}\r\n                                                            </Typography>\r\n                                                        }\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={2}>\r\n                                                    <ListItemText\r\n                                                        secondary={`${aTest.challenges.length} pregunta${aTest.challenges.length !== 1 ? 's' : ''}`}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <ListItemSecondaryAction className={classes.listItemSecondaryAction}>\r\n                                                <Grid container>\r\n                                                    <Grid item>\r\n                                                        {\r\n                                                            isValidTest(aTest) ? (\r\n                                                                <IconButton title='Jugar!' onClick={() => { handlePlayClick(project.id, aTest.id); }}>\r\n                                                                    <Icon className={classes.play}>play_circle_filled</Icon>\r\n                                                                </IconButton>\r\n                                                            ) : (\r\n                                                                <IconButton title='Errores en el cuestionario'>\r\n                                                                    <Icon color='error'>error</Icon>\r\n                                                                </IconButton>\r\n                                                            )\r\n                                                        }\r\n                                                    </Grid>\r\n                                                    <Grid item>\r\n                                                        <IconButton title='Editar cuestionario' onClick={(evt: React.MouseEvent<HTMLButtonElement>) => {\r\n                                                            evt.stopPropagation();\r\n                                                            handleEditClick(evt, aTest);\r\n                                                        }}>\r\n                                                            <Icon color='primary'>edit</Icon>\r\n                                                        </IconButton>\r\n                                                    </Grid>\r\n                                                    <Grid item>\r\n                                                        <IconButton title='Descargar cuestionario' onClick={(evt) => {\r\n                                                            evt.stopPropagation();\r\n                                                            handleExportTestClick(aTest);\r\n                                                        }}>\r\n                                                            <Icon>download</Icon>\r\n                                                        </IconButton>\r\n                                                    </Grid>\r\n                                                    <Grid item>\r\n                                                        <IconButton title='Eliminar cuestionario' onClick={(evt) => {\r\n                                                            evt.stopPropagation();\r\n                                                            handleRemoveTestClick(aTest);\r\n                                                        }}>\r\n                                                            <Icon>delete</Icon>\r\n                                                        </IconButton>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </ListItemSecondaryAction>\r\n                                        </ListItem>\r\n                                        <Divider variant='inset' component='li' />\r\n                                    </Fragment>\r\n                                ))\r\n                            }\r\n                        </List>\r\n                    }\r\n                    <Grid item xs={12} className={classes.bottomContainer}>\r\n                        <Grid container justify='flex-end' spacing={1}>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant='contained'\r\n                                    color='primary'\r\n                                    onClick={handleCreateTestClick}\r\n                                >\r\n                                    Nuevo cuestionario\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <JsonLoader\r\n                                    label=\"Importar cuestionario\"\r\n                                    onDataLoaded={handleImportTest}\r\n                                    onError={handleImportTestError}\r\n                                />\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            {\r\n                playOptionsState && (\r\n                    <DialogTestOptions\r\n                        open={playOptionsState.openOptions}\r\n                        onAccept={handleAcceptPlayOptions}\r\n                        onCancel={handleCancelPlayOptions}\r\n                    />\r\n                )\r\n            }\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useRef, useState } from 'react';\r\nimport { Button, Grid, TextField } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Project } from '../../types/Project';\r\n\r\ninterface FormState {\r\n    name: string,\r\n    description: string\r\n}\r\n\r\nconst initialState = (project?: Project): FormState => {\r\n    if (project != null) {\r\n        return {\r\n            name: project.name,\r\n            description: project.description || ''\r\n        };\r\n    }\r\n    return {\r\n        name: '',\r\n        description: ''\r\n    };\r\n};\r\n\r\ninterface ProjectFormProps {\r\n    project?: Project,\r\n    onAccept: (newProject: Project) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const ProjectForm: React.FC<ProjectFormProps> = (props: ProjectFormProps) => {\r\n    const { project, onAccept, onCancel } = props;\r\n\r\n    const [formState, setFormState] = useState<FormState>(initialState(project));\r\n\r\n    const inputName = useRef({} as HTMLInputElement);\r\n    const inputDescription = useRef({} as HTMLInputElement);\r\n\r\n    const handleNameChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            name: inputName.current.value\r\n        });\r\n    };\r\n\r\n    const handleDescriptionChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            description: inputDescription.current.value\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        const newProject: Project = project ?\r\n            {\r\n                ...project,\r\n                name: inputName.current.value,\r\n                description: inputDescription.current.value\r\n            }\r\n            : {\r\n                id: uuidv4(),\r\n                name: inputName.current.value,\r\n                description: inputDescription.current.value,\r\n                tests: []\r\n            };\r\n\r\n        onAccept(newProject);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            direction='column'\r\n            spacing={2}\r\n        >\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputName}\r\n                    label='Nombre'\r\n                    fullWidth\r\n                    value={formState.name}\r\n                    onInput={handleNameChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputDescription}\r\n                    label='Descripción'\r\n                    fullWidth\r\n                    value={formState.description}\r\n                    onInput={handleDescriptionChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid container justify='flex-end' spacing={1}>\r\n                    <Grid item>\r\n                        <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { ChangeEvent, Fragment, useState } from 'react';\r\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Button, Dialog, DialogTitle, Divider, Grid, Icon, IconButton, makeStyles, Snackbar, SnackbarContent, Typography } from '@material-ui/core';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Project } from '../../types/Project';\r\nimport { colors } from '../../theme';\r\nimport { TestList } from './TestList';\r\nimport { DialogConfirm } from '../common/DialogConfirm';\r\nimport { JsonLoader } from '../common/JsonLoader';\r\nimport { isValidProject } from '../../utils/utilValidationTypes';\r\nimport { ProjectForm } from './ProjectForm';\r\nimport { Test } from '../../types/Test';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15)\r\n    },\r\n    secondaryHeading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        color: colors.secondary.main\r\n    },\r\n    gridContainer: {\r\n        padding: '0px 10px'\r\n    },\r\n    gridItems: {\r\n        flexGrow: 1,\r\n    },\r\n    messageControl: {\r\n        backgroundColor: colors.error,\r\n        color: colors.font.errorContrast\r\n    },\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    }\r\n}));\r\n\r\ninterface ProjectListProps {\r\n    projects: Project[],\r\n    setProjects: (newProjects: Project[]) => void\r\n}\r\n\r\nexport const ProjectList: React.FC<ProjectListProps> = (props: ProjectListProps) => {\r\n    const { projects, setProjects } = props;\r\n\r\n    const history = useHistory();\r\n\r\n    const [expandedProject, setExpandedProject] = React.useState<string | false>(false);\r\n    const [openProjectForm, setOpenProjectForm] = useState<boolean>(false);\r\n    const [openRemoveProjectConfirm, setOpenRemoveProjectConfirm] = useState<boolean>(false);\r\n    const [selectedProject, setSelectedProject] = useState<Project>();\r\n    const [openMessage, setOpenMessage] = useState<boolean>(false);\r\n    const [messageText, setMessageText] = useState<string>('');\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleExpandChange = (project: Project, isExpanded: boolean) => {\r\n        setExpandedProject(isExpanded ? project.id : false);\r\n    };\r\n\r\n    const handleNewProjectClick = () => {\r\n        setOpenProjectForm(true);\r\n    };\r\n\r\n    const handleEditProjectClick = (project: Project) => {\r\n        setSelectedProject(project);\r\n        setOpenProjectForm(true);\r\n    };\r\n\r\n    const handleRemoveProjectClick = (project: Project) => {\r\n        setSelectedProject(project);\r\n        setOpenRemoveProjectConfirm(true);\r\n    };\r\n\r\n    const handleExportProjectClick = (project: Project) => {\r\n        const element = document.createElement('a');\r\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(project)));\r\n        element.setAttribute('download', project.name.replace(/ /g, '_'));\r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n        element.click();\r\n        document.body.removeChild(element);\r\n    };\r\n\r\n    const handleProjectFormAccept = (newProject: Project) => {\r\n        if (selectedProject != null) {\r\n            setProjects(projects.map((aProject: Project) => aProject.id === newProject.id ? newProject : aProject));\r\n        } else {\r\n            setProjects([\r\n                ...projects,\r\n                {\r\n                    ...newProject\r\n                }\r\n            ]);\r\n        }\r\n        setSelectedProject(undefined);\r\n        setOpenProjectForm(false);\r\n    };\r\n\r\n    const handleProjectFormCancel = () => {\r\n        setSelectedProject(undefined);\r\n        setOpenProjectForm(false);\r\n    };\r\n\r\n    const handleImportProject = (project: unknown) => {\r\n        const newProject = project as Project;\r\n        if (!isValidProject(newProject)) {\r\n            setMessageText('El proyecto es inválido');\r\n            setOpenMessage(true);\r\n        }\r\n        const exist = projects.find((aProject: Project) => aProject.id === newProject.id) != null;\r\n        if (!exist) {\r\n            setProjects([\r\n                ...projects,\r\n                {\r\n                    ...newProject\r\n                }\r\n            ]);\r\n        } else {\r\n            setMessageText('El proyecto ya existe');\r\n            setOpenMessage(true);\r\n        }\r\n    };\r\n\r\n    const handleImportProjectError = () => {\r\n        setMessageText('Se produjo un error en la importación');\r\n        setOpenMessage(true);\r\n    };\r\n\r\n    const handleConfirmRemoveProject = () => {\r\n        if (selectedProject != null) {\r\n            setProjects(projects.filter((aProject: Project) => aProject.id !== selectedProject.id));\r\n        }\r\n        setOpenRemoveProjectConfirm(false);\r\n    };\r\n\r\n    const handleRefuseRemoveProject = () => {\r\n        setOpenRemoveProjectConfirm(false);\r\n    };\r\n\r\n    const handleCreateTest = (projectId: string, test: Test, openDesign: boolean) => {\r\n        const theProject = projects.find((aProject: Project) => aProject.id === projectId);\r\n        const updating = theProject != null && theProject.tests.some((aTest: Test) => aTest.id === test.id);\r\n\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return {...aProject};\r\n            }\r\n            if (updating) {\r\n                const updatedTests = aProject.tests.map((aTest: Test) => aTest.id === test.id ? {...test} : {...aTest});\r\n                return {\r\n                    ...aProject,\r\n                    tests: [...updatedTests]\r\n                };\r\n            }\r\n            return {\r\n                ...aProject,\r\n                tests: [...aProject.tests, test]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        if (!updating && openDesign) {\r\n            history.push(`/designer/${projectId}/${test.id}`);\r\n        }\r\n    };\r\n\r\n    const handleDeleteTest = (projectId: string, test: Test) => {\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return {...aProject};\r\n            }\r\n            const updatedTests = aProject.tests.filter((aTest: Test) => aTest.id !== test.id);\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n    };\r\n\r\n    const handleMessageClose = () => {\r\n        setOpenMessage(false);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Dialog\r\n                open={openProjectForm}\r\n                fullWidth\r\n                maxWidth='sm'\r\n            >\r\n                <DialogTitle>Proyecto</DialogTitle>\r\n                <Box className={classes.dialogContainer}>\r\n                    <ProjectForm\r\n                        project={selectedProject}\r\n                        onAccept={handleProjectFormAccept}\r\n                        onCancel={handleProjectFormCancel}\r\n                    />\r\n                </Box>\r\n            </Dialog>\r\n            <DialogConfirm\r\n                open={openRemoveProjectConfirm}\r\n                text='¿Seguro que deseas eliminar el proyecto?'\r\n                width='xs'\r\n                onConfirm={handleConfirmRemoveProject}\r\n                onRefuse={handleRefuseRemoveProject}\r\n            />\r\n            <Snackbar\r\n                open={openMessage}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                autoHideDuration={3000}\r\n                onClose={handleMessageClose}\r\n            >\r\n                <SnackbarContent\r\n                    message={\r\n                        <Grid container spacing={4}>\r\n                            <Grid item xs={1}>\r\n                                <Icon>error</Icon>\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <Typography>{messageText}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    }\r\n                    className={classes.messageControl}\r\n                />\r\n            </Snackbar>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <Grid container direction='row' justify='center' alignItems='center' spacing={2} className={classes.gridContainer}>\r\n                        <Grid item className={classes.gridItems}>\r\n                            <Typography variant='h6'>\r\n                                Proyectos\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button\r\n                                style={{ color: colors.primary.dark }}\r\n                                onClick={handleNewProjectClick}\r\n                            >\r\n                                Nuevo proyecto\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <JsonLoader\r\n                                label=\"Importar proyecto\"\r\n                                onDataLoaded={handleImportProject}\r\n                                onError={handleImportProjectError}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    {\r\n                        projects.map((aProject: Project) => (\r\n                            <Accordion\r\n                                key={aProject.id}\r\n                                expanded={expandedProject === aProject.id}\r\n                                onChange={ (event: ChangeEvent<unknown>, isExpanded: boolean) => {\r\n                                    handleExpandChange(aProject, isExpanded);\r\n                                }}\r\n                            >\r\n                                <AccordionSummary title={aProject.description}>\r\n                                    <Grid container justify='space-between' alignItems='center'>\r\n                                        <Grid item xs={3}>\r\n                                            <Typography className={classes.heading}>{aProject.name}</Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={7}>\r\n                                            <Typography className={classes.secondaryHeading}>\r\n                                                {`${aProject.tests.length} cuestionario${aProject.tests.length !== 1 ? 's' : ''}`}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <IconButton\r\n                                                title='Descargar proyecto'\r\n                                                color='primary'\r\n                                                onClick={(evt) => {\r\n                                                    evt.stopPropagation();\r\n                                                    handleExportProjectClick(aProject);\r\n                                                }}\r\n                                            >\r\n                                                <Icon>download</Icon>\r\n                                            </IconButton>\r\n                                            {\r\n                                                <IconButton\r\n                                                    title='Editar proyecto'\r\n                                                    color='primary'\r\n                                                    onClick={(evt) => {\r\n                                                        evt.stopPropagation();\r\n                                                        handleEditProjectClick(aProject);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon>edit</Icon>\r\n                                                </IconButton>\r\n                                            }\r\n                                            {\r\n                                                <IconButton\r\n                                                    title='Eliminar proyecto'\r\n                                                    onClick={(evt) => {\r\n                                                        evt.stopPropagation();\r\n                                                        handleRemoveProjectClick(aProject);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon>delete</Icon>\r\n                                                </IconButton>\r\n                                            }\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </AccordionSummary>\r\n                                <AccordionDetails>\r\n                                    <TestList\r\n                                        project={aProject}\r\n                                        onCreateTest={handleCreateTest}\r\n                                        onDeleteTest={handleDeleteTest}\r\n                                    />\r\n                                </AccordionDetails>\r\n                            </Accordion>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { useProjects } from '../../hooks/useProjects';\r\nimport { ProjectList } from '../../components/Home/ProjectList';\r\n\r\nexport const Home: React.FC = () => {\r\n    const { projects, setProjects } = useProjects();\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n        >\r\n            <Grid item xs={7}>\r\n                <ProjectList\r\n                    projects={projects}\r\n                    setProjects={setProjects}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Icon } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { ChallengeType } from \"../enums/ChallengeType\";\r\nimport { Language } from \"../enums/Language\";\r\nimport { Challenge, ChallengeConfig } from \"../types/Challenge\";\r\nimport { CSSProperties } from '@material-ui/styles';\r\nimport { PictureType } from '../enums/PictureType';\r\nimport { SelectAnswerChallenge, SelectAnswerChallengeConfig } from '../types/SelectAnswerChallenge';\r\nimport { TrueOrFalseChallenge, TrueOrFalseChallengeConfig } from '../types/TrueOrFalseChallenge';\r\nimport { ClassifyChallenge, ClassifyChallengeConfig } from '../types/ClassifyChallenge';\r\nimport { SortChallenge, SortChallengeConfig } from '../types/SortChallenge';\r\nimport { FillTableChallenge, FillTableChallengeConfig } from '../types/FillTableChallenge';\r\nimport { FillGapsChallenge, FillGapsChallengeConfig, FillGapsChallengeSentence } from '../types/FillGapsChallenge';\r\nimport { FillMethod } from '../enums/FillMethod';\r\nimport { MatchChallenge, MatchChallengeConfig } from '../types/MatchChallenge';\r\n\r\nexport const getChallengeTypeDescription = (type: ChallengeType, language: Language = Language.Es): string => {\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer:\r\n            return language === Language.Es ? \"Selecciona la respuesta correcta\" : \"Choose the correct answer\";\r\n        case ChallengeType.TrueOrFalse:\r\n            return language === Language.Es ? \"Verdadero o falso\" : \"True or false\";\r\n        case ChallengeType.Match:\r\n            return language === Language.Es ? \"Une las opciones\" : \"Match the options\";\r\n        case ChallengeType.FillGaps:\r\n            return language === Language.Es ? \"Rellena los huecos\" : \"Fill in the gaps\";\r\n        case ChallengeType.Sort:\r\n            return language === Language.Es ? \"Ordena los elementos\" : \"Order the elements\";\r\n        case ChallengeType.Classify:\r\n            return language === Language.Es ? \"Clasifica los elementos\" : \"Classify the elements\";\r\n        case ChallengeType.FillTable:\r\n            return language === Language.Es ? \"Completa la tabla\" : \"Complete the table\";\r\n        case ChallengeType.TheOddOne:\r\n            return language === Language.Es ? \"Busca el que sobra\" : \"Find the odd one\";\r\n        case ChallengeType.Crossword:\r\n            return language === Language.Es ? \"Crucigrama\" : \"Crossword\";\r\n        default:\r\n            return language === Language.Es ? \"Sin definir\" : \"Undefined\";\r\n    }\r\n};\r\n\r\nexport const getChallengeTypeIcon = (type: ChallengeType, size: 'large' | 'default' | 'small' = 'default', style: CSSProperties = {}): JSX.Element => {\r\n    return (\r\n        <Icon fontSize={size} style={style}>\r\n            {\r\n                type === ChallengeType.SelectAnswer ? 'widgets'\r\n                    : type === ChallengeType.TrueOrFalse ? 'check'\r\n                        : type === ChallengeType.FillGaps ? 'space_bar'\r\n                            : type === ChallengeType.Match ? 'shuffle'\r\n                                : type === ChallengeType.Sort ? 'swap_vert'\r\n                                    : type === ChallengeType.Classify ? 'category'\r\n                                        : type === ChallengeType.FillTable ? 'grid_on'\r\n                                            : type === ChallengeType.TheOddOne ? 'touch_app'\r\n                                                : type === ChallengeType.Crossword ? 'font_download' : ''\r\n            }\r\n        </Icon>\r\n    );\r\n};\r\n\r\nconst getDefaultChallengeConfig = (type: ChallengeType): ChallengeConfig => {\r\n    const defaultChallengeConfig: ChallengeConfig = {\r\n        timeLimit: 30,\r\n        questionFontSize: 28\r\n    };\r\n\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                answerFontSize: 22,\r\n                pictureCount: 1,\r\n                pictureLabel: false,\r\n                multiselect: false\r\n            } as SelectAnswerChallengeConfig;\r\n        case ChallengeType.TrueOrFalse:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                pictureCount: 1,\r\n                pictureLabel: false\r\n            } as TrueOrFalseChallengeConfig;\r\n        case ChallengeType.Match:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                answerFontSize: 22,\r\n                pairsCount: 4\r\n            } as MatchChallengeConfig;\r\n        case ChallengeType.FillGaps:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                textFontSize: 18,\r\n                fillMethod: FillMethod.Writing\r\n            } as FillGapsChallengeConfig;\r\n        case ChallengeType.Sort:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                itemsFontSize: 18,\r\n                itemCount: 5\r\n            } as SortChallengeConfig;\r\n        case ChallengeType.Classify:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                itemsFontSize: 18,\r\n                groupCount: 3\r\n            } as ClassifyChallengeConfig;\r\n        case ChallengeType.FillTable:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                itemsFontSize: 18,\r\n                rowCount: 3,\r\n                columnCount: 3,\r\n                firstRowFixed: false,\r\n                firstColumnFixed: false\r\n            } as FillTableChallengeConfig;\r\n        default:\r\n            return defaultChallengeConfig;\r\n    }\r\n};\r\n\r\nexport const getDefaultChallenge = (type: ChallengeType): Challenge => {\r\n    const defaultChallenge: Challenge = {\r\n        id: uuidv4(),\r\n        type,\r\n        question: '',\r\n        config: getDefaultChallengeConfig(type)\r\n    };\r\n\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer:\r\n            return {\r\n                ...defaultChallenge,\r\n                pictures: [{\r\n                    type: PictureType.None,\r\n                    data: ''\r\n                }],\r\n                answers: [\r\n                    { text: '', valid: false },\r\n                    { text: '', valid: false },\r\n                    { text: '', valid: false },\r\n                    { text: '', valid: false }\r\n                ]\r\n            } as SelectAnswerChallenge;\r\n        case ChallengeType.TrueOrFalse:\r\n            return {\r\n                ...defaultChallenge,\r\n                pictures: [{\r\n                    type: PictureType.None,\r\n                    data: ''\r\n                }],\r\n                answer: true\r\n            } as TrueOrFalseChallenge;\r\n        case ChallengeType.Match:\r\n            return {\r\n                ...defaultChallenge,\r\n                pairs: [\r\n                    { source: '', destination: '' },\r\n                    { source: '', destination: '' },\r\n                    { source: '', destination: '' },\r\n                    { source: '', destination: '' }\r\n                ]\r\n            } as MatchChallenge;\r\n        case ChallengeType.FillGaps:\r\n            return {\r\n                ...defaultChallenge,\r\n                sentences: [] as FillGapsChallengeSentence[]\r\n            } as FillGapsChallenge;\r\n        case ChallengeType.Sort:\r\n            return {\r\n                ...defaultChallenge,\r\n                items: ['', '', '', '', '']\r\n            } as SortChallenge;\r\n        case ChallengeType.Classify:\r\n            return {\r\n                ...defaultChallenge,\r\n                groups: [\r\n                    { name: '', items: ([] as string[]) },\r\n                    { name: '', items: ([] as string[]) },\r\n                    { name: '', items: ([] as string[]) }\r\n                ]\r\n            } as ClassifyChallenge;\r\n        case ChallengeType.FillTable:\r\n            return {\r\n                ...defaultChallenge,\r\n                items: [\r\n                    [{ text: '', hidden: false },{ text: '', hidden: false },{ text: '', hidden: false }],\r\n                    [{ text: '', hidden: false },{ text: '', hidden: false },{ text: '', hidden: false }],\r\n                    [{ text: '', hidden: false },{ text: '', hidden: false },{ text: '', hidden: false }]\r\n                ]\r\n            } as FillTableChallenge;\r\n        default:\r\n            return defaultChallenge;\r\n    }\r\n};\r\n","export enum ComponentMode {\r\n    Design,\r\n    Play\r\n}","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, CardActionArea, CardActions, CardContent, CardHeader, Chip, Grid, Icon, IconButton, makeStyles, Tooltip, Typography } from '@material-ui/core';\r\nimport { Challenge } from '../../types/Challenge';\r\nimport { getChallengeTypeDescription, getChallengeTypeIcon } from '../../utils/utilChallenges';\r\nimport { isValidChallenge, Validation } from '../../utils/utilValidationTypes';\r\nimport { DropTargetMonitor, useDrag, useDrop, XYCoord } from 'react-dnd';\r\nimport { getEmptyImage } from 'react-dnd-html5-backend';\r\nimport { colors } from '../../theme';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    },\r\n    fullHeight: {\r\n        height: '100%',\r\n    },\r\n    headerContainer: {\r\n        overflow: \"hidden\"\r\n    },\r\n    contentContainer: {\r\n        overflow: \"hidden\"\r\n    },\r\n    actionContainer: {\r\n        marginTop: '8px'\r\n    },\r\n    descriptionContainer: {\r\n        width: '100%',\r\n    },\r\n    description: {\r\n        whiteSpace: 'nowrap',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis'\r\n    },\r\n    tooltipRow: {\r\n        fontSize: '12px'\r\n    },\r\n    statusContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    }\r\n});\r\n\r\ninterface DragItem {\r\n    index: number,\r\n    challenge: Challenge,\r\n    type: string\r\n}\r\n\r\ninterface ChallengeThumbnailProps {\r\n    challenge: Challenge,\r\n    index: number,\r\n    selected?: boolean,\r\n    compact?: boolean,\r\n    onChallengeMove: (dragIndex: number, hoverIndex: number) => void,\r\n    onClick?: (selectedChallenge: Challenge) => void,\r\n    onDelete?: (deletedChallenge: Challenge) => void\r\n}\r\n\r\nexport const ChallengeThumbnail: React.FC<ChallengeThumbnailProps> = (props: ChallengeThumbnailProps) => {\r\n    const { challenge, index, selected, compact, onChallengeMove, onClick, onDelete } = props;\r\n\r\n    const ref = useRef(null);\r\n\r\n    const [validation, setValidation] = useState<Validation>({ valid: true, errorMessage: [] });\r\n\r\n    const classes = useStyles();\r\n\r\n    const [, drop] = useDrop({\r\n        accept: 'challengeThumbnail',\r\n        hover(item: DragItem, monitor: DropTargetMonitor) {\r\n            if (!ref.current) {\r\n                return;\r\n            }\r\n            const dragIndex = item.index;\r\n            const hoverIndex = index;\r\n\r\n            if (dragIndex === hoverIndex) {\r\n                return;\r\n            }\r\n\r\n            const hoverBoundingRect = (ref.current as any).getBoundingClientRect();\r\n            const hoverMiddleY =\r\n                (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n            const clientOffset = monitor.getClientOffset();\r\n            const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\r\n\r\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n                return;\r\n            }\r\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n                return;\r\n            }\r\n            onChallengeMove(dragIndex, hoverIndex);\r\n            item.index = hoverIndex;\r\n        },\r\n    });\r\n\r\n    const [{ isDragging }, drag, preview] = useDrag({\r\n        type: 'challengeThumbnail',\r\n        item: { type: 'challengeThumbnail', challenge, index },\r\n        collect: (monitor: any) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n    });\r\n\r\n    useEffect(() => {\r\n        preview(getEmptyImage(), { captureDraggingState: true });\r\n    }, []);\r\n\r\n    const style = isDragging ? ({\r\n        opacity: 5,\r\n        backgroundColor: colors.primary.light\r\n    }) : ({\r\n        opacity: 1\r\n    });\r\n    drag(drop(ref));\r\n\r\n\r\n    const handleClick = () => {\r\n        if (onClick) {\r\n            onClick(challenge);\r\n        }\r\n    };\r\n\r\n    const handleDeleteClick = () => {\r\n        if (onDelete) {\r\n            onDelete(challenge);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setValidation(isValidChallenge(challenge));\r\n    }, [challenge]);\r\n\r\n    return (\r\n        <Grid item className={classes.fullWidth}>\r\n            <Card\r\n                ref={ref}\r\n                style={{ ...style }}\r\n                variant={selected ? 'elevation' : 'outlined'}\r\n                elevation={10}\r\n                className={classes.fullWidth}\r\n            >\r\n                <CardActionArea className={classes.fullWidth} onMouseDown={handleClick}>\r\n                    <CardHeader\r\n                        classes={{\r\n                            root: classes.headerContainer,\r\n                            content: classes.contentContainer,\r\n                        }}\r\n                        avatar={\r\n                            compact ? getChallengeTypeIcon(challenge.type, 'small') : undefined\r\n                        }\r\n                        subheader={\r\n                            <Typography variant='subtitle2' color={selected ? 'secondary' : 'textPrimary'} className={classes.description}>\r\n                                {compact ? challenge.question : `#${index + 1} ${getChallengeTypeDescription(challenge.type)}`}\r\n                            </Typography>\r\n                        }\r\n                        action={\r\n                            compact ? (\r\n                                <Grid container alignItems=\"center\" className={classes.actionContainer}>\r\n                                    {\r\n                                        validation.valid ? <Icon color=\"primary\" fontSize=\"small\">check</Icon>\r\n                                            : (\r\n                                                <Tooltip arrow title={\r\n                                                    <>\r\n                                                        {\r\n                                                            validation.errorMessage.map((\r\n                                                                aMessage: string,\r\n                                                                messageIdx: number\r\n                                                            ) => (\r\n                                                                <li\r\n                                                                    key={`li_${messageIdx}`}\r\n                                                                    className={classes.tooltipRow}\r\n                                                                >\r\n                                                                    {aMessage}\r\n                                                                </li>\r\n                                                            ))\r\n                                                        }\r\n                                                    </>\r\n                                                }>\r\n                                                    <Icon color=\"secondary\" fontSize=\"small\">priority_high</Icon>\r\n                                                </Tooltip>\r\n                                            )\r\n                                    }\r\n                                </Grid>\r\n                            ) : undefined\r\n                        }\r\n                    />\r\n                    {\r\n                        !compact && (\r\n                            <CardContent>\r\n                                <Typography noWrap>{challenge.question}</Typography>\r\n                            </CardContent>\r\n                        )\r\n                    }\r\n                </CardActionArea>\r\n                {\r\n                    !compact && (\r\n                        <CardActions className={classes.statusContainer}>\r\n                            {\r\n                                validation.valid ? <Chip label=\"completo\" color=\"primary\" size=\"small\" icon={<Icon fontSize=\"small\">check</Icon>} />\r\n                                    : (\r\n                                        <Tooltip arrow title={\r\n                                            <>\r\n                                                {\r\n                                                    validation.errorMessage.map((aMessage: string, messageIdx) => (\r\n                                                        <li\r\n                                                            key={`li_${messageIdx}`}\r\n                                                            className={classes.tooltipRow}>\r\n                                                            {aMessage}\r\n                                                        </li>\r\n                                                    ))\r\n                                                }\r\n                                            </>\r\n                                        }>\r\n                                            <Chip label=\"error\" color=\"secondary\" size=\"small\" style={{ color: '#ffffff' }} icon={<Icon fontSize=\"small\">priority_high</Icon>} />\r\n                                        </Tooltip>\r\n                                    )\r\n                            }\r\n                            <IconButton onClick={handleDeleteClick}>\r\n                                <Icon>delete</Icon>\r\n                            </IconButton>\r\n                        </CardActions>\r\n                    )\r\n                }\r\n            </Card>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { Challenge } from '../../types/Challenge';\r\nimport { ChallengeThumbnail } from './ChallengeThumbnail';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        overflowY: 'auto'\r\n    },\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface ChallengeSelectorProps {\r\n    challenges: Challenge[],\r\n    compactList?: boolean,\r\n    selected?: Challenge,\r\n    onChallengeReorder?: (orderedChallenges: Challenge[]) => void,\r\n    onSelect?: (challenge: Challenge) => void,\r\n    onDelete?: (challenge: Challenge) => void\r\n}\r\n\r\nexport const ChallengeSelector: React.FC<ChallengeSelectorProps> = (props: ChallengeSelectorProps) => {\r\n    const { challenges, compactList, selected, onChallengeReorder, onSelect, onDelete } = props;\r\n\r\n    const [localChallenges, setLocalChallenges] = useState<Challenge[]>(challenges);\r\n    const [selectedChallenge, setSelectedChallenge] = useState<Challenge | undefined>(selected || undefined);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        console.log(challenges);\r\n        setLocalChallenges(challenges);\r\n    }, [challenges]);\r\n\r\n    useEffect(() => {\r\n        setSelectedChallenge(selected);\r\n    }, [selected]);\r\n\r\n    const handleThumbnailClick = (challenge: Challenge) => {\r\n        setSelectedChallenge(challenge);\r\n        if (onSelect) {\r\n            onSelect(challenge);\r\n        }\r\n    };\r\n\r\n    const handleThumbnailDelete = (challenge: Challenge) => {\r\n        if (onDelete) {\r\n            onDelete(challenge);\r\n        }\r\n    };\r\n\r\n    const handleChallengeMove = (dragIndex: number, hoverIndex: number) => {\r\n        if (onChallengeReorder) {\r\n            const filteredCards = challenges.filter(\r\n                (aChallenge: Challenge, idx: number) => idx !== dragIndex\r\n            );\r\n            const newChallenges = [\r\n                ...filteredCards.slice(0, hoverIndex),\r\n                challenges[dragIndex],\r\n                ...filteredCards.slice(hoverIndex)\r\n            ];\r\n            setLocalChallenges(newChallenges);\r\n            onChallengeReorder(newChallenges);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' alignItems='center' spacing={2} className={classes.root}>\r\n            {\r\n                localChallenges.map((aChallenge: Challenge, idx: number) => (\r\n                    <ChallengeThumbnail\r\n                        key={aChallenge.id}\r\n                        challenge={aChallenge}\r\n                        index={idx}\r\n                        selected={selectedChallenge?.id === aChallenge.id}\r\n                        compact={compactList}\r\n                        onChallengeMove={handleChallengeMove}\r\n                        onClick={handleThumbnailClick}\r\n                        onDelete={handleThumbnailDelete}\r\n                    />\r\n                ))\r\n            }\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, makeStyles, TextField } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    inputContainer: {\r\n        width: '90%',\r\n        height: '80%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    input: {\r\n        width: '90%'\r\n    }\r\n});\r\n\r\ninterface ChallengeQuestionProps {\r\n    mode: ComponentMode,\r\n    question: string,\r\n    fontSize?: number,\r\n    onChange?: (newTitle: string) => void\r\n}\r\n\r\nexport const ChallengeQuestion: React.FC<ChallengeQuestionProps> = (props: ChallengeQuestionProps) => {\r\n    const { mode, question, fontSize, onChange } = props;\r\n\r\n    const [questionText, setQuestionText] = useState<string>(question);\r\n    const inputQuestion = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setQuestionText(question);\r\n    },[question]);\r\n\r\n    const handleInputChange = () => {\r\n        setQuestionText(inputQuestion.current.value);\r\n        if (onChange) {\r\n            onChange(inputQuestion.current.value);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Card className={classes.inputContainer}>\r\n                <TextField\r\n                    inputRef={inputQuestion}\r\n                    variant='standard'\r\n                    className={classes.input}\r\n                    inputProps = {{\r\n                        style: {\r\n                            textAlign: 'center',\r\n                            fontSize: `${fontSize != null ? fontSize : 28}px`,\r\n                            lineHeight: '32px'\r\n                        }\r\n                    }}\r\n                    InputProps={{\r\n                        readOnly: mode === ComponentMode.Play,\r\n                        disableUnderline: mode === ComponentMode.Play\r\n                    }}\r\n                    placeholder='Escribe aquí el enunciado o pregunta'\r\n                    multiline\r\n                    rowsMax={2}\r\n                    value={questionText}\r\n                    onInput={handleInputChange}\r\n                />\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n","export enum MatchElement {\r\n    Source,\r\n    Destination\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n    CardActionArea,\r\n    Checkbox,\r\n    Grid,\r\n    Icon,\r\n    InputAdornment,\r\n    makeStyles,\r\n    Radio,\r\n    TextField\r\n} from '@material-ui/core';\r\nimport Card from '@material-ui/core/Card';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { colors } from '../../theme';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    option: {\r\n        width: '100%',\r\n        height: '100%'\r\n    },\r\n    optionActionArea: {\r\n        height: '100%',\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionInput: {\r\n        width: '90%',\r\n        color: '#ffffff'\r\n    },\r\n    optionInnerInput: {\r\n        cursor: 'pointer'\r\n    },\r\n    optionIcon: {\r\n        color: '#ffffff'\r\n    },\r\n    selector: {\r\n        color: '#ffffff',\r\n        '&$checked': {\r\n            color: '#ffffff'\r\n        }\r\n    },\r\n    checked: {}\r\n}));\r\n\r\ninterface OptionState {\r\n    text: string,\r\n    valid: boolean\r\n}\r\n\r\ninterface SelectableOptionProps {\r\n    mode: ComponentMode,\r\n    text: string,\r\n    icon: string,\r\n    valid?: boolean,\r\n    selected?: boolean,\r\n    color?: string,\r\n    fontSize?: number,\r\n    multiselect?: boolean,\r\n    showResults?: boolean,\r\n    onClick?: () => void,\r\n    onTextChange?: (newText: string) => void,\r\n    onValidChange?(newValid: boolean): void\r\n}\r\n\r\nexport const SelectableOption: React.FC<SelectableOptionProps> = (props: SelectableOptionProps) => {\r\n    const {\r\n        mode,\r\n        text,\r\n        icon,\r\n        valid,\r\n        selected,\r\n        color,\r\n        fontSize,\r\n        multiselect,\r\n        showResults,\r\n        onClick,\r\n        onTextChange,\r\n        onValidChange\r\n    } = props;\r\n\r\n    const [optionState, setOptionState] = useState<OptionState>({ text: text || '', valid: valid || false });\r\n    const inputTextOption = useRef({} as HTMLInputElement);\r\n    const radioOption = useRef({} as HTMLInputElement);\r\n    const checkOption = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setOptionState({ text: text || '', valid: valid || false });\r\n    }, [text, valid]);\r\n\r\n    const handleOptionTextChange = () => {\r\n        const newState = {\r\n            ...optionState,\r\n            text: inputTextOption.current.value\r\n        };\r\n        setOptionState(newState);\r\n        if (onTextChange) {\r\n            onTextChange(inputTextOption.current.value);\r\n        }\r\n    };\r\n\r\n    const handleRadioChange = () => {\r\n        const newState = {\r\n            ...optionState,\r\n            selected: radioOption.current.checked\r\n        };\r\n        setOptionState(newState);\r\n        if (onValidChange) {\r\n            onValidChange(radioOption.current.checked);\r\n        }\r\n    };\r\n\r\n    const handleCheckboxChange = () => {\r\n        const newState = {\r\n            ...optionState,\r\n            selected: checkOption.current.checked\r\n        };\r\n        setOptionState(newState);\r\n        if (onValidChange) {\r\n            onValidChange(checkOption.current.checked);\r\n        }\r\n    };\r\n\r\n    const handlerOptionClick = () => {\r\n        if (onClick) {\r\n            onClick();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            className={classes.option}\r\n            style={{\r\n                backgroundColor: color || colors.primary.main,\r\n                borderStyle: 'solid',\r\n                borderWidth: (showResults && valid) || selected ? '3px' : '0px',\r\n                borderColor: showResults ? (\r\n                    valid ? '#00ff00' : '#ff0000'\r\n                ) : '#323232'\r\n            }}>\r\n            {\r\n                mode === ComponentMode.Design ? (\r\n                    <div className={classes.optionActionArea}>\r\n                        <TextField\r\n                            inputRef={inputTextOption}\r\n                            value={optionState.text}\r\n                            placeholder=\"Escribe aquí una respuesta\"\r\n                            className={classes.optionInput}\r\n                            InputProps={{\r\n                                style: {\r\n                                    color: '#ffffff',\r\n                                    fontSize: `${fontSize || 22}px`,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <Icon className={classes.optionIcon}>{icon}</Icon>\r\n                                    </InputAdornment>\r\n                                ),\r\n                                endAdornment: (\r\n                                    multiselect ? (\r\n                                        <Checkbox\r\n                                            inputRef={checkOption}\r\n                                            checked={optionState.valid}\r\n                                            classes={{ root: classes.selector, checked: classes.checked }}\r\n                                            onChange={handleCheckboxChange}\r\n                                        />\r\n                                    ) : (\r\n                                        <Radio\r\n                                            inputRef={radioOption}\r\n                                            checked={optionState.valid}\r\n                                            classes={{ root: classes.selector, checked: classes.checked }}\r\n                                            onChange={handleRadioChange}\r\n                                        />\r\n                                    )\r\n                                ),\r\n                            }}\r\n                            onInput={handleOptionTextChange}\r\n                            onClick={(ev) => { ev.preventDefault(); }}\r\n                        />\r\n                    </div>\r\n                ): (\r\n                    <CardActionArea\r\n                        className={classes.optionActionArea}\r\n                        onClick={handlerOptionClick}\r\n                    >\r\n                        <Grid container className={classes.optionInput} spacing={2} alignItems=\"center\">\r\n                            <Grid item>\r\n                                <Icon className={classes.optionIcon}>{icon}</Icon>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <label style={{color: '#ffffff', fontSize: `${fontSize || 22}px`, justifySelf: 'left'}}>\r\n                                    {optionState.text}\r\n                                </label>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardActionArea>\r\n                )\r\n            }\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Box, Button, Dialog, DialogTitle, Grid, makeStyles, TextField } from '@material-ui/core';\r\nimport { ChallengePicture } from '../../types/Challenge';\r\nimport { PictureType } from '../../enums/PictureType';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n}));\r\n\r\ninterface DialogPictureFormProps {\r\n    open: boolean,\r\n    picture: ChallengePicture,\r\n    onAccept: (picture: ChallengePicture) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const DialogPictureForm: React.FC<DialogPictureFormProps> = (props: DialogPictureFormProps) => {\r\n    const {open, picture, onAccept, onCancel} = props;\r\n\r\n    const [formState, setFormState] = useState<ChallengePicture>(picture);\r\n\r\n    const inputUrl = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (picture != null) {\r\n            setFormState(picture);\r\n        }\r\n    }, [picture]);\r\n\r\n    const handleUrlChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            data: inputUrl.current.value\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        const newPicture = {\r\n            type: PictureType.Url,\r\n            data: inputUrl.current.value\r\n        };\r\n\r\n        onAccept(newPicture);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth='sm'\r\n        >\r\n            <DialogTitle>Imagen</DialogTitle>\r\n            <Box className={classes.dialogContainer}>\r\n                <Grid\r\n                    container\r\n                    direction='column'\r\n                    spacing={2}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            inputRef={inputUrl}\r\n                            label='URL de la imagen'\r\n                            fullWidth\r\n                            value={formState.data}\r\n                            onInput={handleUrlChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container justify='flex-end' spacing={1}>\r\n                            <Grid item>\r\n                                <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Fab, Grid, GridSize, Icon, makeStyles } from '@material-ui/core';\r\nimport { ChallengePicture } from '../../types/Challenge';\r\nimport { PictureType } from '../../enums/PictureType';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { DialogPictureForm } from './DialogPictureSelector';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '99%',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    pic: {\r\n        maxWidth: '100%',\r\n        maxHeight: '100%'\r\n    }\r\n}));\r\n\r\ninterface PictureDialogState {\r\n    selectedPicture: ChallengePicture,\r\n    selectedPictureIdx: number,\r\n    openDialog: boolean\r\n}\r\n\r\ninterface ItemGridSize {\r\n    height: string,\r\n    width: GridSize\r\n}\r\n\r\ninterface PictureGridProps {\r\n    mode: ComponentMode,\r\n    pictures: ChallengePicture[],\r\n    onPicturesChange?: (newPictures: ChallengePicture[]) => void\r\n}\r\n\r\nexport const PictureGrid: React.FC<PictureGridProps> = (props: PictureGridProps) => {\r\n    const { mode, pictures, onPicturesChange } = props;\r\n\r\n    const [pictureDialogState, setPictureDialogState] = useState<PictureDialogState>();\r\n\r\n    const classes = useStyles();\r\n\r\n    const [pictureItemSize, setPictureItemSize] = useState<ItemGridSize>({ height: '100%', width: 8 });\r\n\r\n    useEffect(() => {\r\n        switch (pictures.length) {\r\n            case 9:\r\n            case 8:\r\n            case 7:\r\n                setPictureItemSize({ height: '33.3%', width: 4 });\r\n                break;\r\n            case 6:\r\n            case 5:\r\n                setPictureItemSize({ height: '50%', width: 4 });\r\n                break;\r\n            case 4:\r\n            case 3:\r\n                setPictureItemSize({ height: '50%', width: 6 });\r\n                break;\r\n            case 2:\r\n                setPictureItemSize({ height: '100%', width: 6 });\r\n                break;\r\n            default:\r\n                setPictureItemSize({ height: '100%', width: 12 });\r\n                break;\r\n        }\r\n    }, [pictures]);\r\n\r\n    const handleAddPictureClick = (picture: ChallengePicture, pictureIdx: number) => {\r\n        setPictureDialogState({\r\n            openDialog: true,\r\n            selectedPicture: picture,\r\n            selectedPictureIdx: pictureIdx\r\n        });\r\n    };\r\n\r\n    const handleAcceptPicture = (picture: ChallengePicture, pictureIdx: number) => {\r\n        if (onPicturesChange) {\r\n            onPicturesChange(\r\n                pictures.map((aPicture: ChallengePicture, idx: number) => idx !== pictureIdx ? {...aPicture} : {...picture})\r\n            );\r\n        }\r\n        setPictureDialogState({\r\n            openDialog: false,\r\n            selectedPicture: {\r\n                type: PictureType.None,\r\n                data: ''\r\n            },\r\n            selectedPictureIdx: -1\r\n        });\r\n    };\r\n\r\n    const handleCancelPicture = () => {\r\n        setPictureDialogState({\r\n            openDialog: false,\r\n            selectedPicture: {\r\n                type: PictureType.None,\r\n                data: ''\r\n            },\r\n            selectedPictureIdx: -1\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            {\r\n                pictureDialogState && (\r\n                    <DialogPictureForm\r\n                        open={pictureDialogState.openDialog}\r\n                        picture={pictureDialogState.selectedPicture}\r\n                        onAccept={(newPic: ChallengePicture) => handleAcceptPicture(\r\n                            newPic, pictureDialogState.selectedPictureIdx\r\n                        )}\r\n                        onCancel={handleCancelPicture}\r\n                    />\r\n                )\r\n            }\r\n            <Grid container className={classes.root}>\r\n                {\r\n                    pictures.map((aPicture: ChallengePicture, pictureIdx: number) => (\r\n                        <Grid item\r\n                            key={`pic${pictureIdx.toString()}`}\r\n                            xs={pictureItemSize.width}\r\n                            style={{ height: pictureItemSize.height, border: mode === ComponentMode.Design ? 'solid 1px' : '0px' }}\r\n                        >\r\n                            <Grid container justify=\"center\" alignItems=\"center\" className={classes.fullHeight}>\r\n                                {\r\n                                    aPicture.type !== PictureType.None && (\r\n                                        <img className={classes.pic} src={aPicture.data} alt=\"\"/>\r\n                                    )\r\n                                }\r\n                                {\r\n                                    mode === ComponentMode.Design && (\r\n                                        <Fab\r\n                                            size=\"medium\"\r\n                                            color=\"primary\"\r\n                                            style={{position: 'absolute', color: '#ffffff'}}\r\n                                            onClick={() => { handleAddPictureClick(aPicture, pictureIdx); }}\r\n                                        >\r\n                                            <Icon>add_a_photo</Icon>\r\n                                        </Fab>\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                        </Grid>\r\n                    ))\r\n                }\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Box, CircularProgress, Grid, Typography } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\ninterface CountdownProps {\r\n    mode: ComponentMode,\r\n    time: number,\r\n    stopTimer?: boolean,\r\n    onTimeUp?: () => void\r\n}\r\n\r\n\r\nexport const Countdown: React.FC<CountdownProps> = (props: CountdownProps) => {\r\n    const { mode, time, stopTimer, onTimeUp } = props;\r\n\r\n    const [timeRemaining, setTimeRemaining] = useState<number>(time);\r\n    const [stop, setStop] = useState<boolean>(stopTimer || false);\r\n\r\n\r\n    useEffect(() => {\r\n        setTimeRemaining(time);\r\n    }, [time]);\r\n\r\n    useEffect(() => {\r\n        setStop(stopTimer || false);\r\n    }, [stopTimer]);\r\n\r\n    useEffect(() => {\r\n        let timeoutId: NodeJS.Timeout;\r\n        if (mode === ComponentMode.Play && !stop) {\r\n            timeoutId = setTimeout(() => {\r\n                if (timeRemaining === 0) {\r\n                    if (onTimeUp) {\r\n                        onTimeUp();\r\n                    }\r\n                } else {\r\n                    setTimeRemaining(timeRemaining - 1);\r\n                }\r\n            }, 1000);\r\n        }\r\n        return () => {\r\n            if (timeoutId != null) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n        };\r\n    }, [timeRemaining, onTimeUp]);\r\n\r\n    return (\r\n        <Grid container justify=\"center\" alignItems=\"center\" style={{height: '100%'}}>\r\n            <Grid item>\r\n                <Box position=\"relative\" display=\"inline-flex\">\r\n                    <CircularProgress\r\n                        variant=\"determinate\"\r\n                        color={timeRemaining > 5 ? 'primary': 'secondary'}\r\n                        size=\"75px\"\r\n                        value={Math.round((timeRemaining * 100.0) / (time * 1.0))} />\r\n                    <Box\r\n                        top={0}\r\n                        left={0}\r\n                        bottom={0}\r\n                        right={0}\r\n                        position=\"absolute\"\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                    >\r\n                        <Typography variant=\"h5\" component=\"div\" color=\"textSecondary\">{timeRemaining}</Typography>\r\n                    </Box>\r\n                </Box>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/correct.6415db46.wav\";","export default __webpack_public_path__ + \"static/media/incorrect.70fff5c7.wav\";","import React, { useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../common/ChallengeQuestion';\r\nimport { SelectableOption } from '../common/SelectableOption';\r\nimport { SelectAnswerChallenge, SelectAnswerChallengeAnswer } from '../../types/SelectAnswerChallenge';\r\nimport { PictureGrid } from '../common/PictureGrid';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../common/Countdown';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { ChallengeOptions, ChallengePicture } from '../../types/Challenge';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    pictureContainer: {\r\n        height: '50%'\r\n    },\r\n    answerContainer: {\r\n        height: '30%',\r\n        paddingTop: '10px'\r\n    },\r\n    optionContainer: {\r\n        height: '50%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\ninterface SelectAnswerChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: SelectAnswerChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: SelectAnswerChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const SelectAnswerChallenger: React.FC<SelectAnswerChallengerProps> = (props: SelectAnswerChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [selectedAnswers, setSelectedAnswers] = useState<number[]>([]);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlePicturesChange = (newPictures: ChallengePicture[]) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                pictures: [...newPictures]\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleAnswerChange = (position: number, updatedAnswer: SelectAnswerChallengeAnswer) => {\r\n        const updatedAnswers = challenge.answers.map((anAnswer: SelectAnswerChallengeAnswer, idx: number) => {\r\n            if (idx !== position) {\r\n                if (!challenge.config.multiselect) {\r\n                    return {\r\n                        ...anAnswer,\r\n                        valid: false\r\n                    };\r\n                }\r\n                return { ...anAnswer };\r\n            }\r\n            return { ...updatedAnswer };\r\n        });\r\n\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                answers: updatedAnswers\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handlerOptionClick = (answerIdx: number) => {\r\n        if (mode === ComponentMode.Play) {\r\n            if (challenge.config.multiselect) {\r\n                const theIndex = selectedAnswers.findIndex((anAnswerIdx: number) => anAnswerIdx === answerIdx);\r\n                if (theIndex === -1) {\r\n                    setSelectedAnswers([...selectedAnswers, answerIdx]);\r\n                } else {\r\n                    setSelectedAnswers(selectedAnswers.filter((anAnswerIdx: number) => anAnswerIdx !== answerIdx));\r\n                }\r\n            } else {\r\n                if (challenge.answers[answerIdx].valid) {\r\n                    showResult(true);\r\n                } else {\r\n                    showResult(false);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const wrongsSelected = selectedAnswers\r\n            .map((anAnswerIdx: number) => challenge.answers[anAnswerIdx])\r\n            .filter((anAnswer: SelectAnswerChallengeAnswer) => !anAnswer.valid);\r\n        if (wrongsSelected.length === 0) {\r\n            const validsNotSelected = challenge.answers\r\n                .filter((anAnswer: SelectAnswerChallengeAnswer, answerIdx: number) =>\r\n                    anAnswer.valid && selectedAnswers.indexOf(answerIdx) === -1\r\n                );\r\n            if (validsNotSelected.length === 0) {\r\n                showResult(true);\r\n                return;\r\n            }\r\n        }\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.pictureContainer}>\r\n                <Grid container justify='center' style={{ height: '100%' }}>\r\n                    <Grid item xs={2} style={{ height: '100%' }}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} style={{ height: '100%' }}>\r\n                        <PictureGrid\r\n                            mode={mode}\r\n                            pictures={challenge.pictures}\r\n                            onPicturesChange={handlePicturesChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            challenge.config.multiselect && (\r\n                                <Fab\r\n                                    variant=\"extended\"\r\n                                    size=\"large\"\r\n                                    color=\"primary\"\r\n                                    disabled={mode === ComponentMode.Design || selectedAnswers.length === 0}\r\n                                    onClick={() => { handleCheckClick(); }}\r\n                                >\r\n                                    <Icon>check</Icon>&nbsp;{options?.language === Language.En ? 'Check' : 'Corregir'}\r\n                                </Fab>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='space-evenly' spacing={2} style={{ height: '100%' }}>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={challenge.answers[0].text}\r\n                            icon=\"wb_sunny\"\r\n                            valid={challenge.answers[0].valid}\r\n                            selected={\r\n                                mode === ComponentMode.Play\r\n                                && selectedAnswers.indexOf(0) >= 0\r\n                            }\r\n                            color='#f44336'\r\n                            fontSize={challenge.config.answerFontSize}\r\n                            multiselect={challenge.config.multiselect}\r\n                            showResults={highlightResults}\r\n                            onTextChange={(newText: string) => {\r\n                                handleAnswerChange(0, { ...challenge.answers[0], text: newText });\r\n                            }}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(0, { ...challenge.answers[0], valid });\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(0); }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={challenge.answers[1].text}\r\n                            icon=\"brightness_2\"\r\n                            valid={challenge.answers[1].valid}\r\n                            selected={\r\n                                mode === ComponentMode.Play\r\n                                && selectedAnswers.indexOf(1) >= 0\r\n                            }\r\n                            color='#03a9f4'\r\n                            fontSize={challenge.config.answerFontSize}\r\n                            multiselect={challenge.config.multiselect}\r\n                            showResults={highlightResults}\r\n                            onTextChange={(newText: string) => {\r\n                                handleAnswerChange(1, { ...challenge.answers[1], text: newText });\r\n                            }}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(1, { ...challenge.answers[1], valid });\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(1); }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={challenge.answers[2].text}\r\n                            icon=\"flash_on\"\r\n                            valid={challenge.answers[2].valid}\r\n                            selected={\r\n                                mode === ComponentMode.Play\r\n                                && selectedAnswers.indexOf(2) >= 0\r\n                            }\r\n                            color='#ffc107'\r\n                            fontSize={challenge.config.answerFontSize}\r\n                            multiselect={challenge.config.multiselect}\r\n                            showResults={highlightResults}\r\n                            onTextChange={(newText: string) => {\r\n                                handleAnswerChange(2, { ...challenge.answers[2], text: newText });\r\n                            }}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(2, { ...challenge.answers[2], valid });\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(2); }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={challenge.answers[3].text}\r\n                            icon=\"cloud\"\r\n                            valid={challenge.answers[3].valid}\r\n                            selected={\r\n                                mode === ComponentMode.Play\r\n                                && selectedAnswers.indexOf(3) >= 0\r\n                            }\r\n                            color='#4caf50'\r\n                            fontSize={challenge.config.answerFontSize}\r\n                            multiselect={challenge.config.multiselect}\r\n                            showResults={highlightResults}\r\n                            onTextChange={(newText: string) => {\r\n                                handleAnswerChange(3, { ...challenge.answers[3], text: newText });\r\n                            }}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(3, { ...challenge.answers[3], valid });\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(3); }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControlLabel, Grid, makeStyles, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { SelectAnswerChallengeConfig } from '../../types/SelectAnswerChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface SelectAnswerConfiguratorProps {\r\n    config: SelectAnswerChallengeConfig,\r\n    onConfigChange?: (config: SelectAnswerChallengeConfig) => void\r\n}\r\n\r\nexport const SelectAnswerConfigurator: React.FC<SelectAnswerConfiguratorProps> = (props: SelectAnswerConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<SelectAnswerChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputPictureCount = useRef({} as HTMLInputElement);\r\n    const checkPictureLabel = useRef({} as HTMLInputElement);\r\n    const inputAnswerFontSize = useRef({} as HTMLInputElement);\r\n    const checkMultiselect = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputPictureCount}\r\n                    type='number'\r\n                    label='Número de imágenes'\r\n                    inputProps={{ min: 1, max: 9 }}\r\n                    value={formData.pictureCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('pictureCount', parseInt(inputPictureCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkPictureLabel}\r\n                            name='checkPictureLabel'\r\n                            checked={formData.pictureLabel}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('pictureLabel', checkPictureLabel.current.checked); }}\r\n                        />}\r\n                    label='Numerar imágenes'\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputAnswerFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de las respuestas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.answerFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('answerFontSize', parseInt(inputAnswerFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkMultiselect}\r\n                            name='checkMultiselect'\r\n                            checked={formData.multiselect}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('multiselect', checkMultiselect.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Respuesta múltiple'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { SelectAnswerChallenge, SelectAnswerChallengeAnswer, SelectAnswerChallengeConfig } from '../../types/SelectAnswerChallenge';\r\nimport { SelectAnswerChallenger } from './SelectAnswerChallenger';\r\nimport { SelectAnswerConfigurator } from './SelectAnswerConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { ChallengePicture } from '../../types/Challenge';\r\nimport { PictureType } from '../../enums/PictureType';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface SelectAnswerChallengeDesignerProps {\r\n    challenge: SelectAnswerChallenge,\r\n    onChallengeChange: (challenge: SelectAnswerChallenge) => void\r\n}\r\n\r\nexport const SelectAnswerChallengeDesigner: React.FC<SelectAnswerChallengeDesignerProps> = (\r\n    props: SelectAnswerChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustPictures = (pictureCount: number): ChallengePicture[] => {\r\n        let pictures = [...challenge.pictures];\r\n        if (pictureCount > pictures.length) {\r\n            const newPictures = Array.from(Array(pictureCount - pictures.length))\r\n                .map(() => ({ type: PictureType.None, data: ''}));\r\n            pictures = [...pictures, ...newPictures];\r\n        } else if (pictureCount < pictures.length) {\r\n            pictures = pictures.slice(0, pictureCount);\r\n        }\r\n        return pictures;\r\n    };\r\n\r\n    const readjustValidAnswers = (multiselect: boolean): SelectAnswerChallengeAnswer[] => {\r\n        let validPresent = false;\r\n        const answers: SelectAnswerChallengeAnswer[] = challenge.answers.map((anAnswer: SelectAnswerChallengeAnswer) => {\r\n            if (!multiselect) {\r\n                if (anAnswer.valid && !validPresent) {\r\n                    validPresent = true;\r\n                    return { ...anAnswer };\r\n                }\r\n                return { ...anAnswer, valid: false };\r\n            }\r\n            return { ...anAnswer };\r\n        });\r\n        return answers;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: SelectAnswerChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: SelectAnswerChallengeConfig) => {\r\n        const pictures = readjustPictures(config.pictureCount);\r\n        const answers = readjustValidAnswers(config.multiselect);\r\n        const updatedChallenge: SelectAnswerChallenge = {\r\n            ...challenge,\r\n            pictures: [...pictures],\r\n            answers: [...answers],\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <SelectAnswerChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <SelectAnswerConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Card, Grid, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../common/ChallengeQuestion';\r\nimport { SelectableOption } from '../common/SelectableOption';\r\nimport { TrueOrFalseChallenge } from '../../types/TrueOrFalseChallenge';\r\nimport { PictureGrid } from '../common/PictureGrid';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../common/Countdown';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { ChallengeOptions, ChallengePicture } from '../../types/Challenge';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    pictureContainer: {\r\n        height: '60%'\r\n    },\r\n    answerContainer: {\r\n        height: '20%',\r\n        paddingTop: '10px'\r\n    },\r\n    optionContainer: {\r\n        height: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\ninterface TrueOrFalseChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: TrueOrFalseChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: TrueOrFalseChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const TrueOrFalseChallenger: React.FC<TrueOrFalseChallengerProps> = (props: TrueOrFalseChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlePicturesChange = (newPictures: ChallengePicture[]) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                pictures: [...newPictures]\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleAnswerChange = (updatedAnswer: boolean) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                answer: updatedAnswer\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handlerOptionClick = (answer: boolean) => {\r\n        if (mode === ComponentMode.Play) {\r\n            if (challenge.answer === answer) {\r\n                showResult(true);\r\n            } else {\r\n                showResult(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.pictureContainer}>\r\n                <Grid container justify='center' style={{ height: '100%' }}>\r\n                    <Grid item xs={2} style={{ height: '100%' }}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} style={{ height: '100%' }}>\r\n                        <PictureGrid\r\n                            mode={mode}\r\n                            pictures={challenge.pictures}\r\n                            onPicturesChange={handlePicturesChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll} />\r\n                </Grid>\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='space-evenly' spacing={2} style={{ height: '100%' }}>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={options?.language === Language.En ? 'True' : 'Verdadero'}\r\n                            icon=\"wb_sunny\"\r\n                            valid={challenge.answer}\r\n                            color='#4caf50'\r\n                            fontSize={42}\r\n                            showResults={highlightResults}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(true);\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(true); }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={options?.language === Language.En ? 'False' : 'Falso'}\r\n                            icon=\"brightness_2\"\r\n                            valid={!challenge.answer}\r\n                            color='#f44336'\r\n                            fontSize={42}\r\n                            showResults={highlightResults}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(false);\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(false); }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControlLabel, Grid, makeStyles, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { TrueOrFalseChallengeConfig } from '../../types/TrueOrFalseChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface TrueOrFalseConfiguratorProps {\r\n    config: TrueOrFalseChallengeConfig,\r\n    onConfigChange?: (config: TrueOrFalseChallengeConfig) => void\r\n}\r\n\r\nexport const TrueOrFalseConfigurator: React.FC<TrueOrFalseConfiguratorProps> = (props: TrueOrFalseConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<TrueOrFalseChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputPictureCount = useRef({} as HTMLInputElement);\r\n    const checkPictureLabel = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputPictureCount}\r\n                    type='number'\r\n                    label='Número de imágenes'\r\n                    inputProps={{ min: 1, max: 9 }}\r\n                    value={formData.pictureCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('pictureCount', parseInt(inputPictureCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkPictureLabel}\r\n                            name='checkPictureLabel'\r\n                            checked={formData.pictureLabel}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('pictureLabel', checkPictureLabel.current.checked); }}\r\n                        />}\r\n                    label='Numerar imágenes'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { TrueOrFalseChallenge, TrueOrFalseChallengeConfig } from '../../types/TrueOrFalseChallenge';\r\nimport { TrueOrFalseChallenger } from './TrueOrFalseChallenger';\r\nimport { TrueOrFalseConfigurator } from './TrueOrFalseConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { ChallengePicture } from '../../types/Challenge';\r\nimport { PictureType } from '../../enums/PictureType';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface TrueOrFalseChallengeDesignerProps {\r\n    challenge: TrueOrFalseChallenge,\r\n    onChallengeChange: (challenge: TrueOrFalseChallenge) => void\r\n}\r\n\r\nexport const TrueOrFalseChallengeDesigner: React.FC<TrueOrFalseChallengeDesignerProps> = (\r\n    props: TrueOrFalseChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustPictures = (pictureCount: number): ChallengePicture[] => {\r\n        let pictures = [...challenge.pictures];\r\n        if (pictureCount > pictures.length) {\r\n            const newPictures = Array.from(Array(pictureCount - pictures.length))\r\n                .map(() => ({ type: PictureType.None, data: ''}));\r\n            pictures = [...pictures, ...newPictures];\r\n        } else if (pictureCount < pictures.length) {\r\n            pictures = pictures.slice(0, pictureCount);\r\n        }\r\n        return pictures;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: TrueOrFalseChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: TrueOrFalseChallengeConfig) => {\r\n        const pictures = readjustPictures(config.pictureCount);\r\n        const updatedChallenge: TrueOrFalseChallenge = {\r\n            ...challenge,\r\n            pictures: [...pictures],\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <TrueOrFalseChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <TrueOrFalseConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import { makeStyles } from '@material-ui/core';\r\nimport React, { CSSProperties } from 'react';\r\nimport { useDrag } from 'react-dnd';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    item: {\r\n        borderRadius: '10em',\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.primary.contrastText,\r\n        padding: '0.5rem 1rem',\r\n        cursor: 'move',\r\n    }\r\n}));\r\n\r\ninterface DragableItemProps {\r\n    name: string,\r\n    style?: CSSProperties,\r\n    iconButton?: React.ReactNode\r\n}\r\n\r\nexport const DragableItem: React.FC<DragableItemProps> = (props: DragableItemProps) => {\r\n    const  { name, style, iconButton } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [{ opacity }, drag] = useDrag(\r\n        () => ({\r\n            type: 'dnd',\r\n            item: { name },\r\n            collect: (monitor) => ({\r\n                opacity: monitor.isDragging() ? 0.4 : 1,\r\n            }),\r\n        }),\r\n        [name],\r\n    );\r\n\r\n    return (\r\n        <div\r\n            ref={drag}\r\n            className={classes.item}\r\n            style={{\r\n                opacity,\r\n                ...style\r\n            }}\r\n        >\r\n            {name}\r\n            {\r\n                iconButton\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, Chip, Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { useDrop } from 'react-dnd';\r\nimport { DragableItem } from '../common/DragableItem';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        width: '100%',\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    titleContainer: {\r\n        width: '100%',\r\n        padding: '5px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.primary.contrastText\r\n    },\r\n    itemsContainer: {\r\n        padding: '5px',\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\ninterface GroupState {\r\n    title: string,\r\n    validItems: string[],\r\n    droppedItems: string[]\r\n}\r\n\r\ninterface DropGroupProps {\r\n    mode: ComponentMode,\r\n    title: string,\r\n    validItems: string[],\r\n    showResults: boolean,\r\n    fontSize?: number,\r\n    onTitleChange?: (newTitle: string) => void,\r\n    onItemsChange?: (newTitle: string[]) => void,\r\n    droppedItems?: string[],\r\n    onDrop?: (item: unknown) => void\r\n}\r\n\r\nexport const DropGroup: React.FC<DropGroupProps> = (props: DropGroupProps) => {\r\n    const {\r\n        mode,\r\n        title,\r\n        validItems,\r\n        showResults,\r\n        fontSize,\r\n        onTitleChange,\r\n        onItemsChange,\r\n        droppedItems,\r\n        onDrop\r\n    } = props;\r\n\r\n    const handleDrop = (item: unknown) => {\r\n        if(onDrop) {\r\n            onDrop(item);\r\n        }\r\n    };\r\n\r\n    const [{ isOver, canDrop }, drop] = useDrop({\r\n        accept: 'dnd',\r\n        drop: handleDrop,\r\n        collect: (monitor: { isOver: () => boolean, canDrop: () => boolean }) => ({\r\n            isOver: monitor.isOver(),\r\n            canDrop: monitor.canDrop(),\r\n        })\r\n    });\r\n\r\n    const [groupState, setGroupState] = useState<GroupState>({\r\n        title: title || '',\r\n        validItems: validItems || [],\r\n        droppedItems: droppedItems || []\r\n    });\r\n\r\n    const inputTitle = useRef({} as HTMLInputElement);\r\n    const inputItem = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (droppedItems != null) {\r\n            setGroupState({\r\n                ...groupState,\r\n                droppedItems: [...droppedItems]\r\n            });\r\n        }\r\n    }, [droppedItems]);\r\n\r\n\r\n    const handleTitleChange = () => {\r\n        const newState = {\r\n            ...groupState,\r\n            title: inputTitle.current.value\r\n        };\r\n        setGroupState(newState);\r\n        if (onTitleChange) {\r\n            onTitleChange(inputTitle.current.value);\r\n        }\r\n    };\r\n\r\n    const handleValidItemKeyPress = (evt: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (evt.code === 'Enter' && inputItem.current.value !== '') {\r\n            addValidItem();\r\n        }\r\n    };\r\n\r\n    const addValidItem = () => {\r\n        const updatedItems = [...(groupState.validItems), inputItem.current.value];\r\n        const newState: GroupState = {\r\n            ...groupState,\r\n            validItems: updatedItems\r\n        };\r\n        setGroupState(newState);\r\n        if (onItemsChange) {\r\n            onItemsChange(updatedItems);\r\n        }\r\n        inputItem.current.value = '';\r\n    };\r\n\r\n    const handleRemoveValidItem = (itemIdx: number) => {\r\n        const updatedItems = groupState.validItems.filter((anItem: string, idx: number) => itemIdx !== idx);\r\n        const newState: GroupState = {\r\n            ...groupState,\r\n            validItems: updatedItems\r\n        };\r\n        setGroupState(newState);\r\n        if (onItemsChange) {\r\n            onItemsChange(updatedItems);\r\n        }\r\n    };\r\n\r\n    const getDragableItemStyle = (item: string) => showResults ? (\r\n        validItems.indexOf(item) >= 0 ? {\r\n            fontSize: `${fontSize}px`,\r\n            backgroundColor: '#4caf50'\r\n        } : {\r\n            fontSize: `${fontSize}px`,\r\n            backgroundColor: '#f44336'\r\n        }\r\n    ) : {fontSize: `${fontSize}px`};\r\n\r\n    return (\r\n        <Card\r\n            elevation={4}\r\n            className={classes.root}\r\n            style={{\r\n                backgroundColor: (isOver && canDrop) ? '#efefef' : '#ffffff'\r\n            }}\r\n        >\r\n            <Grid container direction=\"column\" className={`${classes.fullHeight} ${classes.fullWidth}`}>\r\n                <Grid item className={classes.titleContainer}>\r\n                    {\r\n                        mode === ComponentMode.Play ? (\r\n                            <Typography style={{ fontSize }}>\r\n                                { title}\r\n                            </Typography>\r\n                        ) : (\r\n                            <TextField\r\n                                inputRef={inputTitle}\r\n                                value={groupState.title}\r\n                                style={{\r\n                                    width: '100%'\r\n                                }}\r\n                                inputProps={\r\n                                    {\r\n                                        style: {\r\n                                            fontSize,\r\n                                            textAlign: 'center',\r\n                                            color: '#ffffff'\r\n\r\n                                        }\r\n                                    }\r\n                                }\r\n                                onInput={handleTitleChange}\r\n                            />\r\n                        )\r\n                    }\r\n                </Grid>\r\n                <Grid item xs>\r\n                    <Grid container direction=\"column\" alignItems=\"center\" className={classes.itemsContainer} spacing={2}>\r\n                        {\r\n                            mode === ComponentMode.Design\r\n                            && groupState.validItems.map((anItem: string, itemIdx: number) => (\r\n                                <Grid item key={`item_${itemIdx}`}>\r\n                                    <Chip\r\n                                        label={anItem}\r\n                                        color=\"secondary\"\r\n                                        size=\"medium\"\r\n                                        style={{ fontSize, color: '#ffffff' }}\r\n                                        onDelete={() => handleRemoveValidItem(itemIdx)}\r\n                                    />\r\n                                </Grid>\r\n                            ))\r\n                        }\r\n                        {\r\n                            mode === ComponentMode.Design && (\r\n                                <Grid item key=\"newItem\">\r\n                                    <TextField\r\n                                        inputRef={inputItem}\r\n                                        variant=\"outlined\"\r\n                                        InputProps={\r\n                                            {\r\n                                                style: {\r\n                                                    fontSize,\r\n                                                    color: '#000000'\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        label=\"Nuevo elemento\"\r\n                                        onKeyPress={handleValidItemKeyPress}\r\n                                    />\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                        {\r\n                            mode === ComponentMode.Play && (\r\n                                <Grid item key=\"dropItem\" xs className={`${classes.fullWidth} ${classes.fullHeight}`}>\r\n                                    <div\r\n                                        ref={drop}\r\n                                        className={`${classes.fullWidth} ${classes.fullHeight}`}\r\n                                    >\r\n                                        <Grid container direction=\"column\" alignItems=\"center\" spacing={1} className={classes.fullHeight}>\r\n                                            {\r\n                                                groupState.droppedItems.map((aDroppedItem: string) => (\r\n                                                    <Grid\r\n                                                        item\r\n                                                        key={`gridItem_${aDroppedItem}`}\r\n                                                    >\r\n                                                        <DragableItem\r\n                                                            key={aDroppedItem}\r\n                                                            name={aDroppedItem}\r\n                                                            style={getDragableItemStyle(aDroppedItem)}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                ))\r\n                                            }\r\n                                        </Grid>\r\n                                    </div>\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../common/ChallengeQuestion';\r\nimport { ClassifyChallenge, ClassifyChallengeGroup } from '../../types/ClassifyChallenge';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../common/Countdown';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { DropGroup } from './DropGroup';\r\nimport { DragableItem } from '../common/DragableItem';\r\nimport { ChallengeOptions } from '../../types/Challenge';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    classifyContainer: {\r\n        height: '80%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionsContainer: {\r\n        height: '20%',\r\n        border: 'solid 1px gray',\r\n        backgroundColor: '#ffffff'\r\n    },\r\n    groupsContainer: {\r\n        height: '80%'\r\n    },\r\n}));\r\n\r\ninterface dropState {\r\n    groupName: string,\r\n    items: string[]\r\n}\r\n\r\nconst initialClassifyState = (challenge: ClassifyChallenge): dropState[] => {\r\n    return challenge.groups.map((aGroup: ClassifyChallengeGroup) => (\r\n        {\r\n            groupName: aGroup.name,\r\n            items: []\r\n        }\r\n    ));\r\n};\r\n\r\nconst reorderItems = (groups: ClassifyChallengeGroup[], mode: ComponentMode): string[] => {\r\n    let list: string[] = groups.reduce((acc: string[], current: ClassifyChallengeGroup) => [...acc, ...current.items], []);\r\n    if (mode === ComponentMode.Play) {\r\n        list = list.sort(() => Math.random() - 0.5);\r\n    }\r\n    return list;\r\n};\r\n\r\ninterface ClassifyChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: ClassifyChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: ClassifyChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const ClassifyChallenger: React.FC<ClassifyChallengerProps> = (props: ClassifyChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [classifyState, setClassifyState] =useState<dropState[]>(initialClassifyState(challenge));\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [draggableItems, setDragabbleItems] = useState<string[]>(reorderItems(challenge.groups, mode));\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setDragabbleItems(reorderItems(challenge.groups, mode));\r\n    }, [challenge.groups]);\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleNameChange = (groupIdx: number, updatedName: string) => {\r\n        const updatedGroups = challenge.groups.map((aGroup: ClassifyChallengeGroup, idx: number) => {\r\n            return {\r\n                ...aGroup,\r\n                name: idx !== groupIdx ? aGroup.name : updatedName\r\n            };\r\n        });\r\n\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                groups: updatedGroups\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleItemsChange = (groupIdx: number, updatedItems: string[]) => {\r\n        const updatedGroups = challenge.groups.map((aGroup: ClassifyChallengeGroup, idx: number) => {\r\n            if (idx !== groupIdx) {\r\n                return { ...aGroup };\r\n            }\r\n            return {\r\n                ...aGroup,\r\n                items: [...updatedItems]\r\n            };\r\n        });\r\n\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                groups: updatedGroups\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const correct = challenge.groups.reduce(\r\n            (accGroups: boolean, currentGroup: ClassifyChallengeGroup) => {\r\n                const correctItems = currentGroup.items.reduce(\r\n                    (accItems: boolean, currentItem: string) => {\r\n                        const theGroup = classifyState.find((aGroup: dropState) => aGroup.groupName === currentGroup.name);\r\n                        if (theGroup != null) {\r\n                            return accItems && theGroup.items.indexOf(currentItem) >= 0;\r\n                        }\r\n                        return false;\r\n                    },\r\n                    true\r\n                );\r\n                return accGroups && correctItems;\r\n            },\r\n            true\r\n        );\r\n        showResult(correct);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const isDropped = (itemName: string) => classifyState.reduce(\r\n        (acc: boolean, current: dropState) => acc || current.items.indexOf(itemName) >= 0,\r\n        false\r\n    );\r\n\r\n    const completed = () => {\r\n        const optionCount = challenge.groups.reduce(\r\n            (acc: number, current: ClassifyChallengeGroup) => acc + current.items.length,\r\n            0\r\n        );\r\n        const dropCount = classifyState.reduce(\r\n            (acc: number, current: dropState) => acc + current.items.length,\r\n            0\r\n        );\r\n        return optionCount === dropCount;\r\n    };\r\n\r\n    const handleDrop = (groupName: string, droppedItem: any) => {\r\n        const newDroppedItems: dropState[] = classifyState.map((aGroup: { groupName: string, items: string[]}) => {\r\n            if (aGroup.groupName !== groupName) {\r\n                return {\r\n                    ...aGroup,\r\n                    items: aGroup.items.filter((anItem: string) => anItem !== droppedItem.name)\r\n                };\r\n            }\r\n\r\n            const idxItem = aGroup.items.findIndex((anItem: string) => anItem === droppedItem.name);\r\n            if (idxItem >= 0) {\r\n                return {...aGroup};\r\n            }\r\n            return {\r\n                ...aGroup,\r\n                items: [\r\n                    ...aGroup.items,\r\n                    droppedItem.name\r\n                ]\r\n            };\r\n        });\r\n        setClassifyState(newDroppedItems);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.classifyContainer}>\r\n                <Grid container justify='center' className={classes.fullHeight}>\r\n                    <Grid item xs={2} className={classes.fullHeight}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} className={classes.fullHeight}>\r\n                        <DndProvider backend={HTML5Backend}>\r\n                            <Grid container spacing={2} className={classes.fullHeight}>\r\n                                <Grid item xs={12} className={classes.optionsContainer}>\r\n                                    <Grid container spacing={2} justify=\"space-around\" alignItems=\"center\">\r\n                                        {\r\n                                            draggableItems.map((anItem: string, idx: number) => !isDropped(anItem) && (\r\n                                                !isDropped(anItem) && (\r\n                                                    <Grid item key={`gridItem_${idx}`}>\r\n                                                        <DragableItem\r\n                                                            name={anItem}\r\n                                                            key={`dragable_${idx}`}\r\n                                                            style={{fontSize: challenge.config.itemsFontSize}}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                )\r\n                                            ))\r\n                                        }\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} className={classes.groupsContainer}>\r\n                                    <Grid container justify=\"space-evenly\" spacing={2} style={{ height: '100%' }}>\r\n                                        {\r\n                                            challenge.groups.map((aGroup: ClassifyChallengeGroup, idx: number) => (\r\n                                                <Grid\r\n                                                    item\r\n                                                    xs={4}\r\n                                                    key={`group_${idx}`}\r\n                                                >\r\n                                                    <DropGroup\r\n                                                        mode={mode}\r\n                                                        title={aGroup.name}\r\n                                                        validItems={aGroup.items}\r\n                                                        showResults={highlightResults}\r\n                                                        fontSize={challenge.config.itemsFontSize}\r\n                                                        onTitleChange={(newName: string) => handleNameChange(idx, newName)}\r\n                                                        onItemsChange={(newItems: string[]) => handleItemsChange(idx, newItems)}\r\n                                                        droppedItems={\r\n                                                            classifyState\r\n                                                                .find((auxGroup: dropState) => auxGroup.groupName === aGroup.name)\r\n                                                                ?.items\r\n                                                        }\r\n                                                        onDrop={(droppedItem: unknown) => handleDrop(aGroup.name, droppedItem)}\r\n                                                    />\r\n                                                </Grid>\r\n                                            ))\r\n                                        }\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </DndProvider>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || !completed()}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;{options?.language === Language.En ? 'Check' : 'Corregir'}\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ClassifyChallengeConfig } from '../../types/ClassifyChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface ClassifyConfiguratorProps {\r\n    config: ClassifyChallengeConfig,\r\n    onConfigChange?: (config: ClassifyChallengeConfig) => void\r\n}\r\n\r\nexport const ClassifyConfigurator: React.FC<ClassifyConfiguratorProps> = (props: ClassifyConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<ClassifyChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputItemsFontSize = useRef({} as HTMLInputElement);\r\n    const inputGroupCount = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemsFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemsFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('itemsFontSize', parseInt(inputItemsFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputGroupCount}\r\n                    type='number'\r\n                    label='Número de grupos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.groupCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('groupCount', parseInt(inputGroupCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { ClassifyChallenge, ClassifyChallengeConfig, ClassifyChallengeGroup } from '../../types/ClassifyChallenge';\r\nimport { ClassifyChallenger } from './ClassifyChallenger';\r\nimport { ClassifyConfigurator } from './ClassifyConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface ClassifyChallengeDesignerProps {\r\n    challenge: ClassifyChallenge,\r\n    onChallengeChange: (challenge: ClassifyChallenge) => void\r\n}\r\n\r\nexport const ClassifyChallengeDesigner: React.FC<ClassifyChallengeDesignerProps> = (\r\n    props: ClassifyChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustGroups = (groupCount: number): ClassifyChallengeGroup[] => {\r\n        let groups = [...challenge.groups];\r\n        if (groupCount > groups.length) {\r\n            const newGroups = Array.from(Array(groupCount - groups.length))\r\n                .map(() => ({ name: '', items: []}));\r\n            groups = [...groups, ...newGroups];\r\n        } else if (groupCount < groups.length) {\r\n            groups = groups.slice(0, groupCount);\r\n        }\r\n        return groups;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: ClassifyChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: ClassifyChallengeConfig) => {\r\n        const groups = readjustGroups(config.groupCount);\r\n        const updatedChallenge: ClassifyChallenge = {\r\n            ...challenge,\r\n            groups,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <ClassifyChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <ClassifyConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../common/ChallengeQuestion';\r\nimport { SortChallenge } from '../../types/SortChallenge';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../common/Countdown';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    pictureContainer: {\r\n        height: '80%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionsContainer: {\r\n        height: '20%',\r\n        border: 'solid 1px'\r\n    },\r\n    item: {\r\n        padding: '5px 10px',\r\n        backgroundColor: theme.palette.secondary.main,\r\n        color: theme.palette.primary.contrastText,\r\n        borderRadius: '20px'\r\n    },\r\n    groupsContainer: {\r\n        height: '80%'\r\n    },\r\n}));\r\n\r\ninterface SortChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: SortChallenge,\r\n    onChallengeChange?: (updatedChallenge: SortChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const SortChallenger: React.FC<SortChallengerProps> = (props: SortChallengerProps) => {\r\n    const { mode, challenge, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [selectedAnswers /* , setSelectedAnswers */] = useState<number[]>([]);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n    //     const wrongsSelected = selectedAnswers\r\n    //         .map((anAnswerIdx: number) => challenge.answers[anAnswerIdx])\r\n    //         .filter((anAnswer: SelectAnswerChallengeAnswer) => !anAnswer.valid);\r\n    //     if (wrongsSelected.length === 0) {\r\n    //         const validsNotSelected = challenge.answers\r\n    //             .filter((anAnswer: SelectAnswerChallengeAnswer, answerIdx: number) =>\r\n    //                 anAnswer.valid && selectedAnswers.indexOf(answerIdx) === -1\r\n    //             );\r\n    //         if (validsNotSelected.length === 0) {\r\n    //             showResult(true);\r\n    //             return;\r\n    //         }\r\n    //     }\r\n    //     showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.pictureContainer}>\r\n                <Grid container justify='center' className={classes.fullHeight}>\r\n                    <Grid item xs={2} className={classes.fullHeight}>\r\n                        <Countdown\r\n                            mode={mode}\r\n                            time={challenge.config.timeLimit}\r\n                            stopTimer={stopTimer}\r\n                            onTimeUp={handlerTimeUp}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={8} className={classes.fullHeight}>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || selectedAnswers.length === 0}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;Corregir\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { SortChallengeConfig } from '../../types/SortChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface SortConfiguratorProps {\r\n    config: SortChallengeConfig,\r\n    onConfigChange?: (config: SortChallengeConfig) => void\r\n}\r\n\r\nexport const SortConfigurator: React.FC<SortConfiguratorProps> = (props: SortConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<SortChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputItemsFontSize = useRef({} as HTMLInputElement);\r\n    const inputItemCount = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemsFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemsFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('itemsFontSize', parseInt(inputItemsFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemCount}\r\n                    type='number'\r\n                    label='Número de elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('groupCount', parseInt(inputItemCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { SortChallenge, SortChallengeConfig } from '../../types/SortChallenge';\r\nimport { SortChallenger } from './SortChallenger';\r\nimport { SortConfigurator } from './SortConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface SortChallengeDesignerProps {\r\n    challenge: SortChallenge,\r\n    onChallengeChange: (challenge: SortChallenge) => void\r\n}\r\n\r\nexport const SortChallengeDesigner: React.FC<SortChallengeDesignerProps> = (\r\n    props: SortChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustItems = (itemCount: number): string[] => {\r\n        let items = [...challenge.items];\r\n        if (itemCount > items.length) {\r\n            const newItems = Array.from(Array(itemCount - items.length))\r\n                .map(() => (''));\r\n            items = [...items, ...newItems];\r\n        } else if (itemCount < items.length) {\r\n            items = items.slice(0, itemCount);\r\n        }\r\n        return items;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: SortChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: SortChallengeConfig) => {\r\n        const items = readjustItems(config.itemCount);\r\n        const updatedChallenge: SortChallenge = {\r\n            ...challenge,\r\n            items,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <SortChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <SortConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useRef, useState } from 'react';\r\nimport { Button, Grid, Icon, makeStyles, TextField } from '@material-ui/core';\r\nimport { FillTableChallengeCell } from '../../types/FillTableChallenge';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: 'solid 1px gray'\r\n    },\r\n    fixed: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: '#ffffff'\r\n    },\r\n    valid: {\r\n        backgroundColor: '#4caf50',\r\n    },\r\n    invalid: {\r\n        backgroundColor: '#f44336',\r\n    }\r\n}));\r\n\r\ninterface TableCellProps {\r\n    mode: ComponentMode,\r\n    cell: FillTableChallengeCell,\r\n    fixed?: boolean,\r\n    fontSize?: number,\r\n    showResults?: boolean,\r\n    success?: boolean,\r\n    onCellChange: (newCell: FillTableChallengeCell) => void\r\n}\r\n\r\nexport const TableCell: React.FC<TableCellProps> = (props: TableCellProps) => {\r\n    const { mode, cell, fixed, fontSize, showResults, success, onCellChange } = props;\r\n\r\n    const [formData, setFormData] = useState<FillTableChallengeCell>(cell);\r\n    const inputText = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTextChange = () => {\r\n        const newState = {\r\n            ...formData,\r\n            text: inputText.current.value\r\n        };\r\n        setFormData(newState);\r\n        onCellChange(newState);\r\n    };\r\n\r\n    const handleVisibilityChange = () => {\r\n        const newState ={\r\n            ...formData,\r\n            hidden: !formData.hidden\r\n        };\r\n        setFormData(newState);\r\n        onCellChange(newState);\r\n    };\r\n\r\n    return (\r\n        <Grid container alignItems=\"center\" className={`${classes.root} ${fixed ? classes.fixed : (showResults ? (success ? classes.valid : classes.invalid ) : '')}`}>\r\n            {\r\n                mode === ComponentMode.Design && !fixed && (\r\n                    <Grid item>\r\n                        <Button value=\"hidden\" onClick={handleVisibilityChange}>\r\n                            <Icon color={formData.hidden ? 'secondary' : 'primary'}>\r\n                                {\r\n                                    formData.hidden ? 'visibility_off' : 'visibility'\r\n                                }\r\n                            </Icon>\r\n                        </Button>\r\n                    </Grid>\r\n                )\r\n            }\r\n            <Grid item xs>\r\n                {\r\n                    (mode === ComponentMode.Design || formData.hidden) ? (\r\n                        <TextField\r\n                            inputRef={inputText}\r\n                            value={formData.text}\r\n                            color='secondary'\r\n                            style={{ marginLeft: '10px', width: 'calc(100% - 20px)' }}\r\n                            inputProps = {{\r\n                                style: {\r\n                                    textAlign: 'center',\r\n                                    fontSize: `${fontSize != null ? fontSize : 28}px`,\r\n                                    color: fixed || showResults ? '#ffffff': '#000000',\r\n                                    width: '100%'\r\n                                }\r\n                            }}\r\n                            onInput={handleTextChange}\r\n                        />\r\n                    ) : (\r\n                        <div\r\n                            style={{\r\n                                textAlign: 'center',\r\n                                fontSize: `${fontSize != null ? fontSize : 28}px`,\r\n                                color: fixed || showResults ? '#ffffff': '#000000'\r\n                            }}\r\n                        >\r\n                            {formData.text}\r\n                        </div>\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../common/ChallengeQuestion';\r\nimport { FillTableChallenge, FillTableChallengeCell } from '../../types/FillTableChallenge';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../common/Countdown';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { TableCell } from './TableCell';\r\nimport { ChallengeOptions } from '../../types/Challenge';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    answerContainer: {\r\n        height: '80%'\r\n    },\r\n    optionContainer: {\r\n        height: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    cell: {\r\n        // border: 'solid 1px gray',\r\n        height: '60px'\r\n    }\r\n}));\r\n\r\nconst initialFillTableState = (challenge: FillTableChallenge): FillTableChallengeCell[][] => {\r\n    return challenge.items.map((aRow: FillTableChallengeCell[]) => {\r\n        const updatedColumns = aRow.map((aColumn: FillTableChallengeCell) => {\r\n            return aColumn.hidden ? {...aColumn, text: ''} : {...aColumn};\r\n        });\r\n        return updatedColumns;\r\n    });\r\n};\r\n\r\ninterface FillTableChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: FillTableChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: FillTableChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const FillTableChallenger: React.FC<FillTableChallengerProps> = (props: FillTableChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [fillTableState, setFillTableState] =useState<FillTableChallengeCell[][]>(initialFillTableState(challenge));\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const handleCellChange = (newCell: FillTableChallengeCell, rowIdx: number, columnIdx: number) => {\r\n        const updatedItems = (mode === ComponentMode.Design ? challenge.items : fillTableState)\r\n            .map((aRow: FillTableChallengeCell[], auxRowIdx: number) => {\r\n                if (auxRowIdx !== rowIdx) {\r\n                    return [...aRow];\r\n                }\r\n                const updatedColumns = aRow.map((aColumn: FillTableChallengeCell, auxColumnIdx: number) => {\r\n                    return auxColumnIdx === columnIdx ? {...newCell} : {...aColumn};\r\n                });\r\n                return updatedColumns;\r\n            });\r\n        if (mode === ComponentMode.Play) {\r\n            setFillTableState(updatedItems);\r\n        } else if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                items: updatedItems\r\n            });\r\n        }\r\n    };\r\n\r\n    const completed = () => {\r\n        return fillTableState.reduce(\r\n            (accRow: boolean, currentRow: FillTableChallengeCell[], rowIdx: number) => (\r\n                accRow\r\n                && currentRow.reduce(\r\n                    (accColumn: boolean, currentColumn: FillTableChallengeCell, columnIdx: number) => (\r\n                        accColumn\r\n                        && (\r\n                            (\r\n                                challenge.config.firstRowFixed\r\n                                && rowIdx === 0\r\n                                && challenge.config.firstColumnFixed\r\n                                && columnIdx === 0\r\n                            )\r\n                            || currentColumn.text !== ''\r\n                        )\r\n                    ),\r\n                    true\r\n                )\r\n            ),\r\n            true\r\n        );\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const result = fillTableState.reduce(\r\n            (accRow: boolean, currentRow: FillTableChallengeCell[], rowIdx: number) => (\r\n                accRow\r\n                && currentRow.reduce(\r\n                    (accColumn: boolean, currentColumn: FillTableChallengeCell, columnIdx: number) => (\r\n                        accColumn\r\n                        && (\r\n                            (\r\n                                challenge.config.firstRowFixed\r\n                                && rowIdx === 0\r\n                                && challenge.config.firstColumnFixed\r\n                                && columnIdx === 0\r\n                            )\r\n                            || currentColumn.text === challenge.items[rowIdx][columnIdx].text\r\n                        )\r\n                    ),\r\n                    true\r\n                )\r\n            ),\r\n            true\r\n        );\r\n\r\n        showResult(result);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='center' style={{ height: '100%' }}>\r\n                    <Grid item xs={2} style={{ height: '100%' }}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} style={{ height: '100%' }}>\r\n                        <Grid container alignItems=\"center\" style={{ height: '100%' }}>\r\n                            <Grid item xs>\r\n                                <Grid container direction=\"column\">\r\n                                    {\r\n                                        (mode === ComponentMode.Design ? challenge.items : fillTableState)\r\n                                            .map((aRow: FillTableChallengeCell[], rowIdx: number) => (\r\n                                                <Grid item xs key={`row_${rowIdx}`}>\r\n                                                    <Grid container>\r\n                                                        {\r\n                                                            aRow.map((aColumn: FillTableChallengeCell, columnIdx: number) => (\r\n                                                                <Grid item xs key={`column_${columnIdx}`} className={classes.cell}>\r\n                                                                    {\r\n                                                                        // mode === ComponentMode.Design\r\n                                                                        // &&\r\n                                                                        !(\r\n                                                                            challenge.config.firstRowFixed\r\n                                                                            && challenge.config.firstColumnFixed\r\n                                                                            && rowIdx === 0\r\n                                                                            && columnIdx === 0\r\n                                                                        ) && (\r\n                                                                            <TableCell\r\n                                                                                mode={mode}\r\n                                                                                cell={aColumn}\r\n                                                                                fixed={\r\n                                                                                    (\r\n                                                                                        challenge.config.firstRowFixed\r\n                                                                                        && rowIdx === 0\r\n                                                                                    ) || (\r\n                                                                                        challenge.config.firstColumnFixed\r\n                                                                                        && columnIdx === 0\r\n                                                                                    )\r\n                                                                                }\r\n                                                                                fontSize={challenge.config.itemsFontSize}\r\n                                                                                showResults={highlightResults}\r\n                                                                                success={\r\n                                                                                    (\r\n                                                                                        !challenge.config.firstRowFixed\r\n                                                                                        || rowIdx !== 0\r\n                                                                                    ) && (\r\n                                                                                        !challenge.config.firstColumnFixed\r\n                                                                                        || columnIdx !== 0\r\n                                                                                    ) && (\r\n                                                                                        challenge.items[rowIdx][columnIdx].text === fillTableState[rowIdx][columnIdx].text\r\n                                                                                    )\r\n                                                                                }\r\n                                                                                onCellChange={(cell)=>{\r\n                                                                                    handleCellChange(cell, rowIdx, columnIdx);\r\n                                                                                }}\r\n                                                                            />\r\n                                                                        )\r\n                                                                    }\r\n                                                                </Grid>\r\n                                                            ))\r\n                                                        }\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            ))\r\n                                    }\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || !completed()}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;{options?.language === Language.En ? 'Check' : 'Corregir'}\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControlLabel, Grid, makeStyles, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { FillTableChallengeConfig } from '../../types/FillTableChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface FillTableConfiguratorProps {\r\n    config: FillTableChallengeConfig,\r\n    onConfigChange?: (config: FillTableChallengeConfig) => void\r\n}\r\n\r\nexport const FillTableConfigurator: React.FC<FillTableConfiguratorProps> = (props: FillTableConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<FillTableChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputItemsFontSize = useRef({} as HTMLInputElement);\r\n    const inputRowCount = useRef({} as HTMLInputElement);\r\n    const checkFirstRowFixed = useRef({} as HTMLInputElement);\r\n    const inputColumnCount = useRef({} as HTMLInputElement);\r\n    const checkFirstColumnFixed = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemsFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemsFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('itemsFontSize', parseInt(inputItemsFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputRowCount}\r\n                    type='number'\r\n                    label='Número de filas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.rowCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('rowCount', parseInt(inputRowCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkFirstRowFixed}\r\n                            name='checkMultiselect'\r\n                            checked={formData.firstRowFixed}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('firstRowFixed', checkFirstRowFixed.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Primera fila fija'\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputColumnCount}\r\n                    type='number'\r\n                    label='Número de columnas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.columnCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('columnCount', parseInt(inputColumnCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkFirstColumnFixed}\r\n                            name='checkFirstColumnFixed'\r\n                            checked={formData.firstColumnFixed}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('firstColumnFixed', checkFirstColumnFixed.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Primera columna fija'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { FillTableChallenge, FillTableChallengeCell, FillTableChallengeConfig } from '../../types/FillTableChallenge';\r\nimport { FillTableChallenger } from './FillTableChallenger';\r\nimport { FillTableConfigurator } from './FillTableConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface FillTableChallengeDesignerProps {\r\n    challenge: FillTableChallenge,\r\n    onChallengeChange: (challenge: FillTableChallenge) => void\r\n}\r\n\r\nexport const FillTableChallengeDesigner: React.FC<FillTableChallengeDesignerProps> = (\r\n    props: FillTableChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustTable = (rowCount: number, columnCount: number): FillTableChallengeCell[][] => {\r\n        let items = [...challenge.items];\r\n        if (rowCount > items.length) {\r\n            const auxColumn = Array.from(Array(items[0].length)).map(() => ({ text: '', hidden: false}));\r\n            const newRows = Array.from(Array(rowCount - items.length))\r\n                .map(() => [...auxColumn]);\r\n            items = [...items, ...newRows];\r\n        } else if (rowCount < items.length) {\r\n            items = items.slice(0, rowCount);\r\n        }\r\n\r\n        if (columnCount > items[0].length) {\r\n            const newColumns = Array.from(Array(columnCount - items[0].length))\r\n                .map(() => ({ text: '', hidden: false}));\r\n            items = items.map((anItem: FillTableChallengeCell[]) => [...anItem, ...newColumns]);\r\n        } else if (columnCount < items[0].length) {\r\n            items = items.map((anItem: FillTableChallengeCell[]) => anItem.slice(0, columnCount));\r\n        }\r\n\r\n        return items;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: FillTableChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: FillTableChallengeConfig) => {\r\n        const items = readjustTable(config.rowCount, config.columnCount);\r\n        const updatedChallenge: FillTableChallenge = {\r\n            ...challenge,\r\n            items,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <FillTableChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <FillTableConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","export const splitSentence = (text: string): string[] => {\r\n    return text\r\n        .replace(/\\./g, ' .')\r\n        .replace(/,/g, ' ,')\r\n        .replace(/;/g, ' ;')\r\n        .replace(/:/g, ' :')\r\n        .split( ' ');\r\n};\r\n\r\nexport const joinSentence = (textParts: string[]): string => {\r\n    return textParts\r\n        .join(' ')\r\n        .replace(/ \\./g, '.')\r\n        .replace(/ ,/g, ',')\r\n        .replace(/ ;/g, ';')\r\n        .replace(/ :/g, ':');\r\n};\r\n\r\nexport const createQueryString = (params: Record<string, unknown>): string => (\r\n    Object.keys(params).reduce(\r\n        (acc: string, current: string, idx: number) => (\r\n            `${acc}${idx > 0 ? '&' : ''}${current}=${params[current]}`\r\n        ),\r\n        '?'\r\n    )\r\n);\r\n\r\nexport const parseQueryString = (qs: string): any => {\r\n    const qsAux = qs[0] === '?' ? qs.slice(1) : qs;\r\n    const result: any = {};\r\n    qsAux.split(/&/g).forEach((aParam: string) => {\r\n        const paramParts = aParam.split('=');\r\n        result[paramParts[0]] = (\r\n            paramParts[1] === 'true' || paramParts[1] === 'false' ? paramParts[1] === 'true' : paramParts[1]\r\n        );\r\n    });\r\n    return result;\r\n};\r\n\r\nexport const checkEqual = (\r\n    stringA: string,\r\n    stringB: string,\r\n    checkCapitalLetters: boolean,\r\n    checkAccentMarks: boolean\r\n): boolean => {\r\n    let strA = stringA;\r\n    let strB = stringB;\r\n\r\n    if (!checkCapitalLetters) {\r\n        strA = strA.toLowerCase();\r\n        strB = strB.toLowerCase();\r\n    }\r\n\r\n    if (!checkAccentMarks) {\r\n        strA = strA\r\n            .replace(/Á/g, 'A')\r\n            .replace(/É/g, 'E')\r\n            .replace(/Í/g, 'I')\r\n            .replace(/Ó/g, 'O')\r\n            .replace(/Ú/g, 'U')\r\n            .replace(/á/g, 'a')\r\n            .replace(/é/g, 'e')\r\n            .replace(/í/g, 'i')\r\n            .replace(/ó/g, 'o')\r\n            .replace(/ú/g, 'u');\r\n        strB = strB\r\n            .replace(/Á/g, 'A')\r\n            .replace(/É/g, 'E')\r\n            .replace(/Í/g, 'I')\r\n            .replace(/Ó/g, 'O')\r\n            .replace(/Ú/g, 'U')\r\n            .replace(/á/g, 'a')\r\n            .replace(/é/g, 'e')\r\n            .replace(/í/g, 'i')\r\n            .replace(/ó/g, 'o')\r\n            .replace(/ú/g, 'u');\r\n    }\r\n\r\n    return strA === strB;\r\n};\r\n","import { CSSProperties } from '@material-ui/styles';\r\nimport React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport { colors } from '../../theme';\r\n\r\ninterface DropGapProps {\r\n    value: string,\r\n    style?: CSSProperties,\r\n    fontSize: number,\r\n    onDrop: (text: string) => void\r\n}\r\n\r\nexport const DropGap: React.FC<DropGapProps> = (props: DropGapProps) => {\r\n    const { value, style, fontSize, onDrop } = props;\r\n\r\n    const handleDrop = (item: any) => {\r\n        onDrop(item.name);\r\n    };\r\n\r\n    const [{ isOver, canDrop }, drop] = useDrop({\r\n        accept: 'dnd',\r\n        drop: handleDrop,\r\n        collect: (monitor: { isOver: () => boolean, canDrop: () => boolean }) => {\r\n            return ({\r\n                isOver: monitor.isOver(),\r\n                canDrop: monitor.canDrop()\r\n            });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div\r\n            ref={drop}\r\n            style={{\r\n                width: '150px',\r\n                height: '50px',\r\n                lineHeight: '50px',\r\n                textAlign: 'center',\r\n                borderBottom: `solid 1px ${colors.primary.main}`,\r\n                color: colors.primary.main,\r\n                fontSize: `${fontSize ? fontSize : 50}px`,\r\n                ...style\r\n            }}\r\n\r\n        >\r\n            {value}\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Grid, Icon, IconButton, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { FillMethod } from '../../enums/FillMethod';\r\nimport { FillGapsChallengeExpression, FillGapsChallengeSentence } from '../../types/FillGapsChallenge';\r\nimport { checkEqual, joinSentence, splitSentence } from '../../utils/utilStrings';\r\nimport { colors } from '../../theme';\r\nimport { DropGap } from './DropGap';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    word: {\r\n        padding: '2px',\r\n        // backgroundColor: '#f0f0f0',\r\n        '& :hover': {\r\n            backgroundColor: theme.palette.primary.light,\r\n            color:'#ffffff',\r\n            cursor: 'pointer',\r\n            borderRadius: '10px'\r\n        }\r\n    },\r\n    selected: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        borderRadius: '10px',\r\n        color:'#ffffff',\r\n    }\r\n}));\r\n\r\ninterface SentencePart {\r\n    type: 'text' | 'hidden',\r\n    hiddenIdx: number,\r\n    value: string,\r\n    answer: string\r\n}\r\n\r\nexport interface FillGapsSentenceAnswer {\r\n    hiddenIdx: number,\r\n    value: string\r\n}\r\n\r\nconst sentenceParts = (sentence: FillGapsChallengeSentence): SentencePart[] => {\r\n    const result: SentencePart[] = [];\r\n    let currentIdx = 0;\r\n    const words = splitSentence(sentence.text);\r\n    sentence.hiddenExpressions.forEach((anExp: FillGapsChallengeExpression, idx: number) => {\r\n        if (anExp.initPosition > currentIdx) {\r\n            result.push({\r\n                type: 'text',\r\n                hiddenIdx: -1,\r\n                value: joinSentence(words.slice(currentIdx, anExp.initPosition)),\r\n                answer: ''\r\n            });\r\n        }\r\n        result.push({\r\n            type: 'hidden',\r\n            hiddenIdx: idx,\r\n            value: joinSentence(words.slice(anExp.initPosition, anExp.initPosition + anExp.wordCount)),\r\n            answer: ''\r\n        });\r\n        currentIdx = anExp.initPosition + anExp.wordCount;\r\n    });\r\n    if (currentIdx < words.length - 1) {\r\n        result.push({\r\n            type: 'text',\r\n            hiddenIdx: -1,\r\n            value: joinSentence(words.slice(currentIdx)),\r\n            answer: ''\r\n        });\r\n    }\r\n    return result;\r\n};\r\n\r\ninterface FillGapsSentenceProps {\r\n    mode: ComponentMode,\r\n    sentence: FillGapsChallengeSentence,\r\n    fillMethod: FillMethod,\r\n    checkCapitalLetters: boolean,\r\n    checkAccentMarks: boolean,\r\n    showResults: boolean,\r\n    fontSize: number,\r\n    onSentenceChange: (newSentence: FillGapsChallengeSentence) => void,\r\n    onSentenceRemove: () => void,\r\n    onAnswersChange: (answers: FillGapsSentenceAnswer[]) => void\r\n}\r\n\r\nexport const FillGapsSentence: React.FC<FillGapsSentenceProps> = (props: FillGapsSentenceProps) => {\r\n    const {mode,\r\n        sentence,\r\n        fillMethod,\r\n        checkCapitalLetters,\r\n        checkAccentMarks,\r\n        showResults,\r\n        fontSize,\r\n        onSentenceChange,\r\n        onSentenceRemove,\r\n        onAnswersChange\r\n    } = props;\r\n\r\n    const [parts, setParts] = useState<SentencePart[]>(sentenceParts(sentence));\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleWordClick = (wordIdx: number) => {\r\n        let updatedHiddenExpressions: FillGapsChallengeExpression[] = [];\r\n\r\n        if (sentence.hiddenExpressions.length === 0) {\r\n            //Primera expresion\r\n            console.log('');\r\n            updatedHiddenExpressions.push({\r\n                initPosition: wordIdx,\r\n                wordCount: 1,\r\n                alternatives: []\r\n            });\r\n        }\r\n\r\n        sentence.hiddenExpressions.some((anExp: FillGapsChallengeExpression, idx: number) => {\r\n            let completeArrayFrom = -1;\r\n            if (idx === 0 && wordIdx < anExp.initPosition - 1) {\r\n                //Antes de la primera expresion y no contigua\r\n                // console.log('Antes de la primera expresion y no contigua');\r\n                updatedHiddenExpressions = [\r\n                    { initPosition: wordIdx, wordCount: 1, alternatives:[] },\r\n                    ...sentence.hiddenExpressions\r\n                ];\r\n                return true;\r\n            } else if (wordIdx === anExp.initPosition - 1) {\r\n                //Contigua a la expresion por delante\r\n                // console.log('Contigua a la expresion por delante');\r\n                updatedHiddenExpressions.push(\r\n                    { initPosition: wordIdx, wordCount: anExp.wordCount + 1, alternatives: [...anExp.alternatives] }\r\n                );\r\n                completeArrayFrom = idx;\r\n            } else if (wordIdx === anExp.initPosition) {\r\n                //Sobre la primera palabra de la expresion\r\n                // console.log('Sobre la primera palabra de la expresion');\r\n                if (anExp.wordCount === 1) {\r\n                    //Si la expresion solo tiene una palabra\r\n                    // console.log('Si la expresion solo tiene una palabra');\r\n                } else {\r\n                    //Si la expresion tiene más de una palabra\r\n                    // console.log('Si la expresion tiene más de una palabra');\r\n                    updatedHiddenExpressions.push(\r\n                        { initPosition: wordIdx + 1, wordCount: anExp.wordCount - 1, alternatives: [...anExp.alternatives] }\r\n                    );\r\n                }\r\n                completeArrayFrom = idx;\r\n            } else if (wordIdx > anExp.initPosition && wordIdx < anExp.initPosition + anExp.wordCount - 1) {\r\n                //Sobre una palabra interior de la expresion\r\n                // console.log('Sobre una palabra interior de la expresion');\r\n                updatedHiddenExpressions = [\r\n                    ...updatedHiddenExpressions,\r\n                    {\r\n                        initPosition: anExp.initPosition,\r\n                        wordCount: wordIdx - anExp.initPosition,\r\n                        alternatives: []\r\n                    },\r\n                    {\r\n                        initPosition: wordIdx + 1,\r\n                        wordCount: anExp.initPosition + anExp.wordCount - wordIdx - 1,\r\n                        alternatives: []\r\n                    }\r\n                ];\r\n                completeArrayFrom = idx;\r\n            } else if (wordIdx === anExp.initPosition + anExp.wordCount - 1) {\r\n                //Sobre la ultima palabra de la expresion\r\n                // console.log('Sobre la ultima palabra de la expresion');\r\n                if (anExp.wordCount === 1) {\r\n                    //Si la expresion solo tiene una palabra\r\n                    // console.log('Si la expresion solo tiene una palabra');\r\n                } else {\r\n                    //Si la expresion tiene más de una palabra\r\n                    // console.log('Si la expresion tiene más de una palabra');\r\n                    updatedHiddenExpressions.push(\r\n                        {\r\n                            initPosition: anExp.initPosition,\r\n                            wordCount: anExp.wordCount - 1,\r\n                            alternatives: [...anExp.alternatives]\r\n                        }\r\n                    );\r\n                }\r\n                completeArrayFrom = idx;\r\n            } else if (idx < sentence.hiddenExpressions.length - 1\r\n                && wordIdx > anExp.initPosition + anExp.wordCount\r\n                && wordIdx < sentence.hiddenExpressions[idx + 1].initPosition - 1) {\r\n                //Entre dos expresiones de manera no contigua\r\n                // console.log('Entre dos expresiones de manera no contigua');\r\n                updatedHiddenExpressions = [\r\n                    ...updatedHiddenExpressions,\r\n                    {...anExp},\r\n                    { initPosition: wordIdx, wordCount: 1, alternatives: [] }\r\n                ];\r\n                completeArrayFrom = idx;\r\n            } else if (idx < sentence.hiddenExpressions.length - 1\r\n                && wordIdx === anExp.initPosition + anExp.wordCount\r\n                && wordIdx === sentence.hiddenExpressions[idx + 1].initPosition - 1) {\r\n                //Entre dos expresiones de manera contigua a ambas\r\n                // console.log('Entre dos expresiones de manera contigua a ambas');\r\n                updatedHiddenExpressions.push({\r\n                    initPosition: anExp.initPosition,\r\n                    wordCount: anExp.wordCount + sentence.hiddenExpressions[idx + 1].wordCount + 1,\r\n                    alternatives: []\r\n                });\r\n                completeArrayFrom = idx + 1;\r\n            } else if (wordIdx === anExp.initPosition + anExp.wordCount) {\r\n                //Contigua a la expresion por detras\r\n                // console.log('Contigua a la expresion por detras');\r\n                updatedHiddenExpressions.push({\r\n                    initPosition: anExp.initPosition,\r\n                    wordCount: anExp.wordCount + 1,\r\n                    alternatives: [...anExp.alternatives]\r\n                });\r\n                completeArrayFrom = idx;\r\n            } else if (idx === sentence.hiddenExpressions.length - 1) {\r\n                //Despues de la ultima expresion y de manera no contigua\r\n                // console.log('Despues de la ultima expresion y de manera no contigua');\r\n                updatedHiddenExpressions = [\r\n                    ...updatedHiddenExpressions,\r\n                    {...anExp},\r\n                    { initPosition: wordIdx, wordCount: 1, alternatives: [] }\r\n                ];\r\n                return true;\r\n            }\r\n\r\n            if (completeArrayFrom !== -1) {\r\n                if (idx < sentence.hiddenExpressions.length - 1) {\r\n                    updatedHiddenExpressions = [\r\n                        ...updatedHiddenExpressions,\r\n                        ...sentence.hiddenExpressions.slice(completeArrayFrom + 1)\r\n                    ];\r\n                }\r\n                return true;\r\n            }\r\n\r\n            updatedHiddenExpressions.push({...anExp});\r\n            return false;\r\n        });\r\n\r\n        onSentenceChange({\r\n            ...sentence,\r\n            hiddenExpressions: updatedHiddenExpressions\r\n        });\r\n    };\r\n\r\n    const handleDeleteClick = () => {\r\n        if (onSentenceRemove) {\r\n            onSentenceRemove();\r\n        }\r\n    };\r\n\r\n    const selected = (wordIdx: number) => {\r\n        return sentence.hiddenExpressions.some(\r\n            (anExpression: FillGapsChallengeExpression) => (\r\n                wordIdx >= anExpression.initPosition\r\n                && wordIdx <= anExpression.initPosition + anExpression.wordCount - 1\r\n            )\r\n        );\r\n    };\r\n\r\n    const handlePartChange = (partIdx: number, text: string) => {\r\n        const updatedParts = parts.map((aPart: SentencePart, idx: number) => (\r\n            {\r\n                ...aPart,\r\n                answer: idx === partIdx ? text : aPart.answer\r\n            }\r\n        ));\r\n        setParts(updatedParts);\r\n        onAnswersChange(updatedParts.filter(\r\n            (aPart: SentencePart) => aPart.type === 'hidden'\r\n        ).map(\r\n            (aPart: SentencePart) => ({\r\n                hiddenIdx: aPart.hiddenIdx,\r\n                value: aPart.answer\r\n            }))\r\n        );\r\n    };\r\n\r\n    const getPartStyle = (validValues: string[], value: string) => showResults ? (\r\n        validValues.some(\r\n            (aValidValue: string) => checkEqual(\r\n                aValidValue,\r\n                value,\r\n                checkCapitalLetters,\r\n                checkAccentMarks\r\n            )\r\n        ) ? { color: '#4caf50' } : { color: '#f44336' }\r\n    ) : {};\r\n\r\n    return (\r\n        <Grid container alignItems=\"center\" spacing={1}>\r\n            <Grid item>\r\n                <Icon fontSize=\"small\" color=\"secondary\">navigate_next</Icon>\r\n            </Grid>\r\n            {\r\n                mode === ComponentMode.Design\r\n                && splitSentence(sentence.text).map((aWord: string, idx: number) => (\r\n                    <Grid\r\n                        item\r\n                        key={`word_${idx}`}\r\n                        className={`${classes.word} ${selected(idx) ? classes.selected : ''}`}\r\n                        onClick={() => { handleWordClick(idx); }}\r\n                    >\r\n                        <Typography style={{fontSize: `${fontSize ? fontSize: 50}px`}}>\r\n                            {aWord}\r\n                        </Typography>\r\n                    </Grid>\r\n                ))\r\n            }\r\n            {\r\n                mode === ComponentMode.Design && (\r\n                    <Grid item>\r\n                        <IconButton size=\"small\" onClick={handleDeleteClick}>\r\n                            <Icon>delete</Icon>\r\n                        </IconButton>\r\n                    </Grid>\r\n                )\r\n            }\r\n            {\r\n                mode === ComponentMode.Play && (\r\n                    parts.map((aPart: SentencePart, idx: number) => (\r\n                        aPart.type === 'text' ? (\r\n                            <Grid\r\n                                item\r\n                                key={`part_${idx}`}\r\n                                className={classes.word}\r\n                            >\r\n                                <Typography style={{fontSize: `${fontSize ? fontSize: 50}px`}}>\r\n                                    {aPart.value}\r\n                                </Typography>\r\n                            </Grid>\r\n                        ) : (\r\n                            <Grid\r\n                                item\r\n                                key={`part_${idx}`}\r\n                            >\r\n                                {\r\n                                    fillMethod === FillMethod.Writing ? (\r\n                                        <TextField\r\n                                            key={`input_${idx}`}\r\n                                            value={aPart.answer}\r\n                                            color=\"primary\"\r\n                                            inputProps={{\r\n                                                style: {\r\n                                                    fontSize: `${fontSize ? fontSize : 50}px`,\r\n                                                    textAlign: 'center',\r\n                                                    color: colors.primary.main,\r\n                                                    ...getPartStyle(\r\n                                                        [\r\n                                                            aPart.value,\r\n                                                            ...sentence.hiddenExpressions[aPart.hiddenIdx].alternatives\r\n                                                        ],\r\n                                                        aPart.answer\r\n                                                    )\r\n                                                }\r\n                                            }}\r\n                                            onInput={\r\n                                                (evt: React.FormEvent<HTMLInputElement>) => {\r\n                                                    handlePartChange(idx, (evt.target as any).value);\r\n                                                }\r\n                                            }\r\n                                        />\r\n                                    ) : (\r\n                                        <DropGap\r\n                                            key={`input_${idx}`}\r\n                                            value={aPart.answer}\r\n                                            style={getPartStyle(\r\n                                                [\r\n                                                    aPart.value,\r\n                                                    ...sentence.hiddenExpressions[aPart.hiddenIdx].alternatives\r\n                                                ],\r\n                                                aPart.answer\r\n                                            )}\r\n                                            fontSize={fontSize}\r\n                                            onDrop={(droppedText: string) => {\r\n                                                handlePartChange(idx, droppedText);\r\n                                            }}\r\n                                        />\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                        )\r\n                    ))\r\n                )\r\n            }\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Box, Button, Dialog, Grid, Icon, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText, makeStyles, TextField, Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n}));\r\n\r\ninterface DialogFillGapsCandidatesProps {\r\n    open: boolean,\r\n    text: string,\r\n    candidates: string[],\r\n    onAccept: (alternatives: string[]) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const DialogFillGapsCandidates: React.FC<DialogFillGapsCandidatesProps> = (props: DialogFillGapsCandidatesProps) => {\r\n    const { open, text, candidates, onAccept, onCancel } = props;\r\n\r\n    const [formState, setFormState] = useState<string[]>(candidates);\r\n\r\n    const inputCandidate = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (candidates != null) {\r\n            setFormState(candidates);\r\n        }\r\n    }, [candidates]);\r\n\r\n    const addCandidate = () => {\r\n        setFormState([\r\n            ...formState,\r\n            inputCandidate.current.value\r\n        ]);\r\n        inputCandidate.current.value = '';\r\n    };\r\n\r\n    const handleCandidateKeyPress = (evt: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (evt.code === 'Enter' && inputCandidate.current.value !== '') {\r\n            addCandidate();\r\n        }\r\n    };\r\n\r\n    const handleDeleteCandidate = (candidateIdx: number) => {\r\n        setFormState(\r\n            formState.filter((aCandidate: string, idx: number) => idx !== candidateIdx)\r\n        );\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        onAccept(formState);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth='sm'\r\n        >\r\n            <Box className={classes.dialogContainer}>\r\n                <Grid\r\n                    container\r\n                    direction='column'\r\n                    spacing={2}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h6\">\r\n                            {`Otros textos validos para \"${text}\"`}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <List>\r\n                            {\r\n                                formState.map((aCandidate: string, candidateIdx: number) => (\r\n                                    <ListItem>\r\n                                        <ListItemText primary={aCandidate} />\r\n                                        <ListItemSecondaryAction>\r\n                                            <IconButton edge=\"end\" onClick={() => { handleDeleteCandidate(candidateIdx); }}>\r\n                                                <Icon>delete</Icon>\r\n                                            </IconButton>\r\n                                        </ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                ))\r\n                            }\r\n                        </List>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            inputRef={inputCandidate}\r\n                            variant=\"outlined\"\r\n                            style={{ width: '100%' }}\r\n                            label=\"Nuevo candidato\"\r\n                            onKeyPress={handleCandidateKeyPress}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container justify='flex-end' spacing={1}>\r\n                            <Grid item>\r\n                                <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, IconButton, makeStyles, TextField } from '@material-ui/core';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../common/ChallengeQuestion';\r\nimport { FillGapsChallenge, FillGapsChallengeExpression, FillGapsChallengeSentence } from '../../types/FillGapsChallenge';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../common/Countdown';\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { FillMethod } from '../../enums/FillMethod';\r\nimport { FillGapsSentence, FillGapsSentenceAnswer } from './FillGapsSentence';\r\nimport { DragableItem } from '../common/DragableItem';\r\nimport { checkEqual, joinSentence, splitSentence } from '../../utils/utilStrings';\r\nimport { DialogFillGapsCandidates } from './DialogFillGapsCandidates';\r\nimport { ChallengeOptions } from '../../types/Challenge';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    answerContainer: {\r\n        height: '80%',\r\n        width: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionsContainer: {\r\n        border: 'solid 1px gray',\r\n        backgroundColor: '#ffffff',\r\n        minHeight: '60px'\r\n    },\r\n    sentencesContainer: {\r\n        paddingLeft: '10px'\r\n    },\r\n}));\r\n\r\nconst initialFillGapsState = (challenge: FillGapsChallenge): FillGapsSentenceAnswer[][] => {\r\n    return challenge.sentences.map((aSentence: FillGapsChallengeSentence) => ([]));\r\n};\r\n\r\nconst reorderItems = (sentences: FillGapsChallengeSentence[], mode: ComponentMode): Item[] => {\r\n    let list: Item[] = [];\r\n    sentences.forEach((aSentence: FillGapsChallengeSentence, sentenceIdx: number) => {\r\n        aSentence.hiddenExpressions.forEach((aHiddenExpression: FillGapsChallengeExpression, hiddenExpressionIdx: number) => {\r\n            list.push({\r\n                sentenceText: aSentence.text,\r\n                sentenceIdx,\r\n                hiddenExpression: aHiddenExpression,\r\n                hiddenExpressionIdx\r\n            });\r\n        });\r\n    });\r\n    if (mode === ComponentMode.Play) {\r\n        list = list.sort(() => Math.random() - 0.5);\r\n    }\r\n    return list;\r\n};\r\n\r\ninterface FillGapsChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: FillGapsChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: FillGapsChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\ninterface Item {\r\n    sentenceText: string,\r\n    sentenceIdx: number,\r\n    hiddenExpression: FillGapsChallengeExpression,\r\n    hiddenExpressionIdx: number\r\n}\r\n\r\nexport const FillGapsChallenger: React.FC<FillGapsChallengerProps> = (props: FillGapsChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const inputSentence = useRef({} as HTMLInputElement);\r\n\r\n    const [fillGapsState, setFillGapsState] = useState<FillGapsSentenceAnswer[][]>(initialFillGapsState(challenge));\r\n    const [openCandidatesDialog, setOpenCandidatesDialog] = useState<boolean>(false);\r\n    const [selectedExpression, setSelectedExpression] = useState<number[]>();\r\n    const [draggableItems, setDragabbleItems] = useState<Item[]>(reorderItems(challenge.sentences, mode));\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setDragabbleItems(reorderItems(challenge.sentences, mode));\r\n    }, [challenge.sentences]);\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const handleSentenceChange = (updatedSentence: FillGapsChallengeSentence, sentenceIdx: number) => {\r\n        if (onChallengeChange) {\r\n            const updatedSentences = challenge.sentences.map((\r\n                aSentence: FillGapsChallengeSentence,\r\n                idx: number\r\n            ) => idx === sentenceIdx ? updatedSentence : aSentence);\r\n            onChallengeChange({\r\n                ...challenge,\r\n                sentences: updatedSentences\r\n            });\r\n        }\r\n    };\r\n\r\n    const addSentence = () => {\r\n        if (onChallengeChange) {\r\n            const newSentence: FillGapsChallengeSentence = {\r\n                text: inputSentence.current.value,\r\n                hiddenExpressions: [] as FillGapsChallengeExpression[]\r\n            };\r\n            onChallengeChange({\r\n                ...challenge,\r\n                sentences: [...challenge.sentences, newSentence]\r\n            });\r\n            setFillGapsState([\r\n                ...fillGapsState,\r\n                []\r\n            ]);\r\n        }\r\n        inputSentence.current.value = '';\r\n    };\r\n\r\n    const handleSentenceKeyPress = (evt: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (evt.code === 'Enter' && inputSentence.current.value !== '') {\r\n            addSentence();\r\n        }\r\n    };\r\n\r\n    const handleSentenceRemove = (sentenceIdx: number) => {\r\n        if (onChallengeChange) {\r\n            const updatedSentences = challenge.sentences\r\n                .filter((aSentence: FillGapsChallengeSentence, idx: number) => idx !== sentenceIdx);\r\n            onChallengeChange({\r\n                ...challenge,\r\n                sentences: updatedSentences\r\n            });\r\n            setFillGapsState(fillGapsState.filter(\r\n                (aFillGapsState: FillGapsSentenceAnswer[], idx: number) => idx !== sentenceIdx\r\n            ));\r\n        }\r\n    };\r\n\r\n    const handleAddCandidateClick = (sentenceIdx: number, hiddenExpIdx: number) => {\r\n        setSelectedExpression([sentenceIdx, hiddenExpIdx]);\r\n        setOpenCandidatesDialog(true);\r\n    };\r\n\r\n    const handleCandidateAccept = (newCandidates: string[]) => {\r\n        if (onChallengeChange && selectedExpression) {\r\n            const updatedSentences = challenge.sentences.map((\r\n                aSentence: FillGapsChallengeSentence,\r\n                sentenceIdx: number\r\n            ) => sentenceIdx !== selectedExpression[0] ? aSentence : (\r\n                {\r\n                    ...aSentence,\r\n                    hiddenExpressions: aSentence.hiddenExpressions.map((\r\n                        aHiddenExpression: FillGapsChallengeExpression,\r\n                        hiddenExpresionIdx: number\r\n                    ) => hiddenExpresionIdx !== selectedExpression[1] ? aHiddenExpression : (\r\n                        {\r\n                            ...aHiddenExpression,\r\n                            alternatives: [...newCandidates]\r\n                        }\r\n                    ))\r\n                }\r\n            ));\r\n            onChallengeChange({\r\n                ...challenge,\r\n                sentences: updatedSentences\r\n            });\r\n        }\r\n        setOpenCandidatesDialog(false);\r\n    };\r\n\r\n    const expressionInSentence = (sentence: string, expression: FillGapsChallengeExpression): string => {\r\n        return joinSentence(\r\n            splitSentence(sentence)\r\n                .slice(expression.initPosition, expression.initPosition + expression.wordCount)\r\n        );\r\n    };\r\n\r\n    const handleSentenceAnswer = (sentenceIdx: number, answer: FillGapsSentenceAnswer[]) => {\r\n        console.log(answer);\r\n        const updatedState = fillGapsState.map((aFillGapsState: FillGapsSentenceAnswer[], idx: number) => (\r\n            idx === sentenceIdx ? [...answer] : [...aFillGapsState]\r\n        ));\r\n        setFillGapsState(updatedState);\r\n    };\r\n\r\n    const completed = () => {\r\n        return challenge.sentences\r\n            .reduce((acc: boolean, current: FillGapsChallengeSentence, sentenceIdx: number) => (\r\n                acc\r\n                && current.hiddenExpressions.length === fillGapsState[sentenceIdx].length\r\n                && fillGapsState[sentenceIdx].every((el: FillGapsSentenceAnswer) => (\r\n                    el.value != null && el.value !== ''\r\n                ))\r\n            ), true);\r\n    };\r\n\r\n    const isDropped = (item: Item): boolean => {\r\n        const text = expressionInSentence(\r\n            item.sentenceText,\r\n            item.hiddenExpression\r\n        );\r\n\r\n        return fillGapsState.some((sentencesAnswer: FillGapsSentenceAnswer[]) => (\r\n            sentencesAnswer.some((aSentenceAnswer: FillGapsSentenceAnswer) => (\r\n                aSentenceAnswer.value === text\r\n            ))\r\n        ));\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const correct = challenge.sentences.reduce(\r\n            (accSentences: boolean, currentSentence: FillGapsChallengeSentence, sentenceIdx: number) => {\r\n                const words: string[] = splitSentence(currentSentence.text);\r\n                const correctExpressions = currentSentence.hiddenExpressions.reduce(\r\n                    (accExpressions: boolean, currentExpression: FillGapsChallengeExpression, expressionIdx: number) => {\r\n                        const hiddenAnswer = fillGapsState[sentenceIdx]\r\n                            .find((anAnswer: FillGapsSentenceAnswer) => anAnswer.hiddenIdx === expressionIdx);\r\n\r\n                        return hiddenAnswer != null && accExpressions && (\r\n                            checkEqual(\r\n                                joinSentence(words.slice(\r\n                                    currentExpression.initPosition,\r\n                                    currentExpression.initPosition + currentExpression.wordCount\r\n                                )),\r\n                                hiddenAnswer.value,\r\n                                challenge.config.checkCapitalLetters,\r\n                                challenge.config.checkAccentMarks\r\n                            )\r\n                            || currentExpression.alternatives.some(\r\n                                (anAlternative: string) => checkEqual(\r\n                                    anAlternative,\r\n                                    hiddenAnswer.value,\r\n                                    challenge.config.checkCapitalLetters,\r\n                                    challenge.config.checkAccentMarks\r\n                                )\r\n                            )\r\n                        );\r\n                    },\r\n                    true\r\n                );\r\n                return accSentences && correctExpressions;\r\n            },\r\n            true\r\n        );\r\n        showResult(correct);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='center' className={classes.fullHeight}>\r\n                    <Grid item xs={2} className={classes.fullHeight}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} className={classes.fullHeight}>\r\n                        {\r\n                            selectedExpression && (\r\n                                <DialogFillGapsCandidates\r\n                                    open={openCandidatesDialog}\r\n                                    text={\r\n                                        expressionInSentence(\r\n                                            challenge.sentences[selectedExpression[0]].text,\r\n                                            challenge.sentences[selectedExpression[0]].hiddenExpressions[selectedExpression[1]]\r\n                                        )\r\n                                    }\r\n                                    candidates={\r\n                                        challenge.sentences[selectedExpression[0]]\r\n                                            .hiddenExpressions[selectedExpression[1]].alternatives\r\n                                    }\r\n                                    onAccept={handleCandidateAccept}\r\n                                    onCancel={() => { setOpenCandidatesDialog(false); }}\r\n                                />\r\n                            )\r\n                        }\r\n                        <DndProvider backend={HTML5Backend}>\r\n                            <Grid\r\n                                container\r\n                                spacing={2}\r\n                                direction=\"column\"\r\n                                className={classes.fullHeight}\r\n                            >\r\n                                {\r\n                                    (\r\n                                        mode === ComponentMode.Design ||\r\n                                        challenge.config.fillMethod === FillMethod.Dragging\r\n                                    ) && (\r\n                                        <Grid\r\n                                            item\r\n                                            // xs={12}\r\n                                            className={classes.optionsContainer}\r\n                                        >\r\n                                            <Grid container spacing={2} justify=\"space-around\" alignItems=\"center\">\r\n                                                {\r\n                                                    draggableItems.map((anItem: Item) => !isDropped(anItem) && (\r\n                                                        <Grid item key={`gridItem_${anItem.sentenceIdx}_${anItem.hiddenExpression.initPosition}`}>\r\n                                                            <DragableItem\r\n                                                                name={expressionInSentence(\r\n                                                                    anItem.sentenceText,\r\n                                                                    anItem.hiddenExpression\r\n                                                                )}\r\n                                                                key={`dragable_${anItem.sentenceIdx}_${anItem.hiddenExpression.initPosition}`}\r\n                                                                style={{fontSize: challenge.config.textFontSize}}\r\n                                                                iconButton={\r\n                                                                    mode === ComponentMode.Design ? (\r\n                                                                        <IconButton\r\n                                                                            size=\"small\"\r\n                                                                            onClick={() => {\r\n                                                                                handleAddCandidateClick(\r\n                                                                                    anItem.sentenceIdx,\r\n                                                                                    anItem.hiddenExpressionIdx\r\n                                                                                );\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <Icon>add_circle</Icon>\r\n                                                                        </IconButton>\r\n                                                                    ) : undefined\r\n                                                                }\r\n                                                            />\r\n                                                        </Grid>\r\n                                                    ))\r\n                                                }\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    )\r\n                                }\r\n                                <Grid\r\n                                    item\r\n                                    xs\r\n                                >\r\n                                    <Grid container direction=\"column\" justify=\"space-around\" className={`${classes.fullWidth} ${classes.fullHeight}`}>\r\n                                        {\r\n                                            challenge.sentences.map((\r\n                                                aSentence: FillGapsChallengeSentence,\r\n                                                sentenceIdx: number\r\n                                            ) => (\r\n                                                <Grid\r\n                                                    item\r\n                                                    key={`sentence_${sentenceIdx}`}\r\n                                                >\r\n                                                    <FillGapsSentence\r\n                                                        mode={mode}\r\n                                                        sentence={aSentence}\r\n                                                        fillMethod={challenge.config.fillMethod}\r\n                                                        checkCapitalLetters={challenge.config.checkCapitalLetters}\r\n                                                        checkAccentMarks={challenge.config.checkAccentMarks}\r\n                                                        showResults={highlightResults}\r\n                                                        fontSize={challenge.config.textFontSize}\r\n                                                        onSentenceChange={(\r\n                                                            updatedSentence: FillGapsChallengeSentence\r\n                                                        ) => handleSentenceChange(updatedSentence, sentenceIdx)}\r\n                                                        onSentenceRemove={() => { handleSentenceRemove(sentenceIdx); }}\r\n                                                        onAnswersChange={(answer: FillGapsSentenceAnswer[]) => {\r\n                                                            handleSentenceAnswer(sentenceIdx, answer);\r\n                                                        }}\r\n                                                    />\r\n                                                </Grid>\r\n                                            ))\r\n                                        }\r\n                                    </Grid>\r\n                                </Grid>\r\n                                {\r\n                                    mode === ComponentMode.Design && (\r\n                                        <Grid item>\r\n                                            <TextField\r\n                                                inputRef={inputSentence}\r\n                                                variant=\"outlined\"\r\n                                                style={{width: '100%'}}\r\n                                                InputProps={\r\n                                                    {\r\n                                                        style: {\r\n                                                            fontSize: challenge.config.textFontSize,\r\n                                                            color: '#000000'\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                label=\"Nueva frase\"\r\n                                                onKeyPress={handleSentenceKeyPress}\r\n                                            />\r\n                                        </Grid>\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                        </DndProvider>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || !completed()}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;{options?.language === Language.En ? 'Check' : 'Corregir'}\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControl, FormControlLabel, Grid, InputLabel, makeStyles, MenuItem, Select, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { FillGapsChallengeConfig } from '../../types/FillGapsChallenge';\r\nimport { FillMethod } from '../../enums/FillMethod';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface FillGapsConfiguratorProps {\r\n    config: FillGapsChallengeConfig,\r\n    onConfigChange?: (config: FillGapsChallengeConfig) => void\r\n}\r\n\r\nexport const FillGapsConfigurator: React.FC<FillGapsConfiguratorProps> = (props: FillGapsConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<FillGapsChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputTextFontSize = useRef({} as HTMLInputElement);\r\n    const inputFillMethod = useRef({} as HTMLSelectElement);\r\n    const checkCapitalLetters = useRef({} as HTMLInputElement);\r\n    const checkAccentMarks = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean | string) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTextFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.textFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('textFontSize', parseInt(inputTextFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControl className={classes.fullWidth}>\r\n                    <InputLabel>Modo de rellenado</InputLabel>\r\n                    <Select\r\n                        inputRef={inputFillMethod}\r\n                        label=\"Modo de rellenado\"\r\n                        value={formData.fillMethod}\r\n                        color='secondary'\r\n                        className={classes.fullWidth}\r\n                        onChange={(evt: React.ChangeEvent<{name?: string | undefined, value: unknown}>) => {\r\n                            handleConfigParameterChange('fillMethod', evt.target.value as string);\r\n                        }}\r\n                    >\r\n                        <MenuItem value={FillMethod.Writing}>Escribiendo</MenuItem>\r\n                        <MenuItem value={FillMethod.Dragging}>Arrastrando</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkCapitalLetters}\r\n                            name='checkMultiselect'\r\n                            checked={formData.checkCapitalLetters}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('checkCapitalLetters', checkCapitalLetters.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Comprobar mayúsculas/minúsculas'\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkAccentMarks}\r\n                            name='checkAccentMarks'\r\n                            checked={formData.checkAccentMarks}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('checkAccentMarks', checkAccentMarks.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Comprobar tildes'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { FillGapsChallenge, FillGapsChallengeConfig } from '../../types/FillGapsChallenge';\r\nimport { FillGapsChallenger } from './FillGapsChallenger';\r\nimport { FillGapsConfigurator } from './FillGapsConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface FillGapsChallengeDesignerProps {\r\n    challenge: FillGapsChallenge,\r\n    onChallengeChange: (challenge: FillGapsChallenge) => void\r\n}\r\n\r\nexport const FillGapsChallengeDesigner: React.FC<FillGapsChallengeDesignerProps> = (\r\n    props: FillGapsChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handlerChallengeChange = (updatedChallenge: FillGapsChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: FillGapsChallengeConfig) => {\r\n        const updatedChallenge: FillGapsChallenge = {\r\n            ...challenge,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <FillGapsChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <FillGapsConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, CardContent, Grid, TextField, Typography } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { useDrag } from 'react-dnd';\r\nimport { MatchItem } from '../../types/MatchChallenge';\r\n\r\ninterface MatchSourceProps {\r\n    mode: ComponentMode,\r\n    item: MatchItem,\r\n    fontSize: number,\r\n    arrowNode: React.ReactNode,\r\n    onTextChange?: (newText: string) => void\r\n}\r\n\r\nexport const MatchSource: React.FC<MatchSourceProps> = (props: MatchSourceProps) => {\r\n    const { mode, item, fontSize, arrowNode, onTextChange } = props;\r\n\r\n    const [textValue, setTextValue] = useState<string>(item.text);\r\n\r\n    const inputText = useRef({} as HTMLInputElement);\r\n\r\n    useEffect(() => {\r\n        setTextValue(item.text);\r\n    }, [item]);\r\n\r\n    const handleTextChange = () => {\r\n        setTextValue(inputText.current.value);\r\n        if (onTextChange) {\r\n            onTextChange(inputText.current.value);\r\n        }\r\n    };\r\n\r\n    const [{ opacity }, drag] = useDrag(\r\n        () => ({\r\n            type: 'dnd',\r\n            item: { ...item },\r\n            collect: (monitor) => ({\r\n                opacity: monitor.isDragging() ? 0.4 : 1,\r\n            }),\r\n        }),\r\n        [item],\r\n    );\r\n\r\n    return (\r\n        <Card style={{width: '100%'}}>\r\n            <CardContent>\r\n                <Grid container alignItems=\"center\">\r\n                    <Grid item xs container justify=\"center\">\r\n                        {\r\n                            mode === ComponentMode.Design ? (\r\n                                <TextField\r\n                                    inputRef={inputText}\r\n                                    value={textValue}\r\n                                    onInput={handleTextChange}\r\n                                    style={{width: '95%'}}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            fontSize: `${fontSize ? fontSize : 22}px`,\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            ) : (\r\n                                <Typography>\r\n                                    {textValue}\r\n                                </Typography>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={1} container justify=\"center\">\r\n                        <div ref={drag}>\r\n                            {arrowNode}\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, CardContent, Grid, TextField, Typography } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { useDrop } from 'react-dnd';\r\nimport { MatchItem } from '../../types/MatchChallenge';\r\n\r\ninterface MatchDestinationProps {\r\n    mode: ComponentMode,\r\n    item: MatchItem,\r\n    fontSize: number,\r\n    arrowNode: React.ReactNode,\r\n    onTextChange?: (newText: string) => void,\r\n    onDrop?: (text: MatchItem) => void\r\n}\r\n\r\nexport const MatchDestination: React.FC<MatchDestinationProps> = (props: MatchDestinationProps) => {\r\n    const { mode, item, fontSize, arrowNode, onTextChange, onDrop } = props;\r\n\r\n    const [textValue, setTextValue] = useState<string>(item.text);\r\n\r\n    const inputText = useRef({} as HTMLInputElement);\r\n\r\n    useEffect(() => {\r\n        setTextValue(item.text);\r\n    }, [item.text]);\r\n\r\n    const handleTextChange = () => {\r\n        setTextValue(inputText.current.value);\r\n        if (onTextChange) {\r\n            onTextChange(inputText.current.value);\r\n        }\r\n    };\r\n\r\n    const handleDrop = (item: any) => {\r\n        if (onDrop) {\r\n            onDrop(item);\r\n        }\r\n    };\r\n\r\n    const [{ isOver, canDrop }, drop] = useDrop({\r\n        accept: 'dnd',\r\n        drop: handleDrop,\r\n        collect: (monitor: { isOver: () => boolean, canDrop: () => boolean }) => {\r\n            return ({\r\n                isOver: monitor.isOver(),\r\n                canDrop: monitor.canDrop()\r\n            });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <Card style={{width: '100%'}}>\r\n            <CardContent>\r\n                <Grid container alignItems=\"center\">\r\n                    <Grid item xs={1} container justify=\"center\">\r\n                        <div ref={drop}>\r\n                            {arrowNode}\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs container justify=\"center\">\r\n                        {\r\n                            mode === ComponentMode.Design ? (\r\n                                <TextField\r\n                                    inputRef={inputText}\r\n                                    value={textValue}\r\n                                    onInput={handleTextChange}\r\n                                    style={{width: '95%'}}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            fontSize: `${fontSize ? fontSize : 22}px`,\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            ) : (\r\n                                <Typography>\r\n                                    {textValue}\r\n                                </Typography>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../common/ChallengeQuestion';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../common/Countdown';\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { ChallengeOptions } from '../../types/Challenge';\r\nimport { Language } from '../../enums/Language';\r\nimport { MatchChallenge, MatchChallengePair, MatchItem } from '../../types/MatchChallenge';\r\nimport { MatchSource } from './MatchSource';\r\nimport { MatchElement } from '../../enums/MatchElement';\r\nimport { MatchDestination } from './MatchDestination';\r\nimport { colors } from '../../theme';\r\nimport Xarrow from 'react-xarrows/lib';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    answerContainer: {\r\n        height: '80%',\r\n        width: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionsContainer: {\r\n        border: 'solid 1px gray',\r\n        backgroundColor: '#ffffff',\r\n        minHeight: '60px'\r\n    },\r\n    sentencesContainer: {\r\n        paddingLeft: '10px'\r\n    }\r\n}));\r\n\r\ninterface MatchAnswer {\r\n    source: MatchItem,\r\n    destination: MatchItem\r\n}\r\n\r\nconst reorderItems = (texts: string[], mode: ComponentMode): string[] => {\r\n    let list: string[] = [...texts];\r\n    if (mode === ComponentMode.Play) {\r\n        list = list.sort(() => Math.random() - 0.5);\r\n    }\r\n    return list;\r\n};\r\n\r\ninterface MatchChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: MatchChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: MatchChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const MatchChallenger: React.FC<MatchChallengerProps> = (props: MatchChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [sourceItems, setSourceItems] = useState<string[]>(reorderItems(\r\n        challenge.pairs.map((aPair: MatchChallengePair) => aPair.source),\r\n        mode\r\n    ));\r\n    const [destinationItems, setDestinationItems] = useState<string[]>(reorderItems(\r\n        challenge.pairs.map((aPair: MatchChallengePair) => aPair.destination),\r\n        mode\r\n    ));\r\n\r\n    const [matchState, setMatchState] = useState<MatchAnswer[]>([]);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setSourceItems(reorderItems(\r\n            challenge.pairs.map((aPair: MatchChallengePair) => aPair.source),\r\n            mode\r\n        ));\r\n        setDestinationItems(reorderItems(\r\n            challenge.pairs.map((aPair: MatchChallengePair) => aPair.destination),\r\n            mode\r\n        ));\r\n    }, [challenge.pairs]);\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const handleTextChange = (newText: string, element: MatchElement, pairIdx: number) => {\r\n        if (onChallengeChange) {\r\n            const pairAttribute = element === MatchElement.Source ? 'source' : 'destination';\r\n            const newChallenge: MatchChallenge = {\r\n                ...challenge,\r\n                pairs: challenge.pairs.map((aPair: MatchChallengePair, idx: number) => (\r\n                    idx === pairIdx ? {\r\n                        ...aPair,\r\n                        [pairAttribute]: newText\r\n                    } : {...aPair}\r\n                ))\r\n            };\r\n            onChallengeChange(newChallenge);\r\n        }\r\n    };\r\n\r\n    const handleDrop = (source: MatchItem, destination: MatchItem) => {\r\n        const newState = matchState.filter((anAnswer: MatchAnswer) => (\r\n            anAnswer.source.index !== source.index\r\n            && anAnswer.destination.index !== destination.index\r\n        ));\r\n        newState.push({source, destination});\r\n        setMatchState(newState);\r\n    };\r\n\r\n    const completed = () => matchState.length === challenge.pairs.length;\r\n\r\n    const handleCheckClick = () => {\r\n        const correct = challenge.pairs.reduce(\r\n            (accPairs: boolean, currentPair: MatchChallengePair) => {\r\n                const idxAnswer = matchState.findIndex((anAnswer: MatchAnswer) => (\r\n                    anAnswer.source.text === currentPair.source\r\n                    && anAnswer.destination.text === currentPair.destination\r\n                ));\r\n                return accPairs && idxAnswer >= 0;\r\n            },\r\n            true\r\n        );\r\n        showResult(correct);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='center' className={classes.fullHeight}>\r\n                    <Grid item xs={2} className={classes.fullHeight}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} className={classes.fullHeight} container>\r\n                        <DndProvider backend={HTML5Backend}>\r\n                            <Grid item xs={5} container direction=\"column\" justify=\"space-around\" alignItems=\"center\">\r\n                                {\r\n                                    sourceItems.map((aSource: string, sourceIdx: number) => (\r\n                                        <MatchSource\r\n                                            key={`source_${sourceIdx}`}\r\n                                            mode={mode}\r\n                                            item={{text: aSource, index: sourceIdx}}\r\n                                            fontSize={challenge.config.answerFontSize}\r\n                                            arrowNode={(\r\n                                                <div\r\n                                                    id={`an_s_${sourceIdx}`}\r\n                                                    style={{\r\n                                                        width: '20px',\r\n                                                        height: '20px',\r\n                                                        border: `solid 1px ${colors.primary.main}`,\r\n                                                        borderRadius: '20px'\r\n                                                    }}\r\n                                                />\r\n                                            )}\r\n                                            onTextChange={\r\n                                                (newText: string) => handleTextChange(\r\n                                                    newText,\r\n                                                    MatchElement.Source,\r\n                                                    sourceIdx\r\n                                                )\r\n                                            }\r\n                                        />\r\n                                    ))\r\n                                }\r\n                            </Grid>\r\n                            <Grid item xs={2} />\r\n                            <Grid item xs={5} container direction=\"column\" justify=\"space-around\" alignItems=\"center\">\r\n                                {\r\n                                    destinationItems.map((aDestination: string, destinationIdx: number) => (\r\n                                        <MatchDestination\r\n                                            key={`destination_${destinationIdx}`}\r\n                                            mode={mode}\r\n                                            item={{text: aDestination, index: destinationIdx}}\r\n                                            fontSize={challenge.config.answerFontSize}\r\n                                            arrowNode={(\r\n                                                <div\r\n                                                    id={`an_d_${destinationIdx}`}\r\n                                                    style={{\r\n                                                        width: '20px',\r\n                                                        height: '20px',\r\n                                                        border: `solid 1px ${colors.primary.main}`,\r\n                                                        borderRadius: '20px'\r\n                                                    }}\r\n                                                />\r\n                                            )}\r\n                                            onTextChange={\r\n                                                (newText: string) => handleTextChange(\r\n                                                    newText,\r\n                                                    MatchElement.Destination,\r\n                                                    destinationIdx\r\n                                                )\r\n                                            }\r\n                                            onDrop={(source: MatchItem) => {\r\n                                                handleDrop(source, {text: aDestination, index: destinationIdx});\r\n                                            }}\r\n                                        />\r\n                                    ))\r\n                                }\r\n                                {\r\n                                    mode === ComponentMode.Design ? (\r\n                                        sourceItems.map((aSource: string, idx: number) => (\r\n                                            <Xarrow\r\n                                                key={`designArrow_${idx}`}\r\n                                                start={`an_s_${idx}`}\r\n                                                end={`an_d_${(idx)}`}\r\n                                                curveness={0}\r\n                                            />\r\n                                        ))\r\n                                        // challenge.pairs.map((aPair: MatchChallengePair, idx: number) => (\r\n                                        //     <Xarrow\r\n                                        //         key={`designArrow_${idx}`}\r\n                                        //         start={`an_s_${idx}`}\r\n                                        //         end={`an_d_${(idx)}`}\r\n                                        //         curveness={0}\r\n                                        //     />\r\n                                        // ))\r\n                                    ) : (\r\n                                        matchState.map((anAnswer: MatchAnswer, idx: number) => (\r\n                                            <Xarrow\r\n                                                key={`playArrow_${idx}`}\r\n                                                start={`an_s_${anAnswer.source.index}`}\r\n                                                end={`an_d_${(anAnswer.destination.index)}`}\r\n                                                curveness={0}\r\n                                                color={\r\n                                                    highlightResults ? (\r\n                                                        challenge.pairs.findIndex((aPair: MatchChallengePair) => (\r\n                                                            aPair.source === anAnswer.source.text\r\n                                                            && aPair.destination === anAnswer.destination.text\r\n                                                        )) >= 0 ? '#4caf50' : '#f44336'\r\n                                                    ) : undefined\r\n                                                }\r\n                                            />\r\n                                        ))\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                        </DndProvider>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || !completed()}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;{options?.language === Language.En ? 'Check' : 'Corregir'}\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControlLabel, Grid, makeStyles, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { MatchChallengeConfig } from '../../types/MatchChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface MatchConfiguratorProps {\r\n    config: MatchChallengeConfig,\r\n    onConfigChange?: (config: MatchChallengeConfig) => void\r\n}\r\n\r\nexport const MatchConfigurator: React.FC<MatchConfiguratorProps> = (props: MatchConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<MatchChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputAnswerFontSize = useRef({} as HTMLInputElement);\r\n    const inputPairsCount = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputAnswerFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de las respuestas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.answerFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('answerFontSize', parseInt(inputAnswerFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputPairsCount}\r\n                    type='number'\r\n                    label='Número de parejas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.pairsCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('pairsCount', parseInt(inputPairsCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { MatchChallenge, MatchChallengeConfig, MatchChallengePair } from '../../types/MatchChallenge';\r\nimport { MatchChallenger } from './MatchChallenger';\r\nimport { MatchConfigurator } from './MatchConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface MatchChallengeDesignerProps {\r\n    challenge: MatchChallenge,\r\n    onChallengeChange: (challenge: MatchChallenge) => void\r\n}\r\n\r\nexport const MatchChallengeDesigner: React.FC<MatchChallengeDesignerProps> = (\r\n    props: MatchChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustPairs = (pairsCount: number): MatchChallengePair[] => {\r\n        let pairs = [...challenge.pairs];\r\n        if (pairsCount > pairs.length) {\r\n            const newPairs = Array.from(Array(pairsCount - pairs.length))\r\n                .map(() => ({ source: '', destination: ''}));\r\n            pairs = [...pairs, ...newPairs];\r\n        } else if (pairsCount < pairs.length) {\r\n            pairs = pairs.slice(0, pairsCount);\r\n        }\r\n        return pairs;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: MatchChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: MatchChallengeConfig) => {\r\n        const pairs = readjustPairs(config.pairsCount);\r\n        const updatedChallenge: MatchChallenge = {\r\n            ...challenge,\r\n            pairs,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <MatchChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <MatchConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { Challenge } from '../../types/Challenge';\r\nimport { ChallengeType } from '../../enums/ChallengeType';\r\nimport { SelectAnswerChallengeDesigner } from '../SelectAnswerChallenge/SelectAnswerChallengeDesigner';\r\nimport { SelectAnswerChallenge } from '../../types/SelectAnswerChallenge';\r\nimport { TrueOrFalseChallengeDesigner } from '../TrueOrFalseChallenge/TrueOrFalseChallengeDesigner';\r\nimport { TrueOrFalseChallenge } from '../../types/TrueOrFalseChallenge';\r\nimport { ClassifyChallengeDesigner } from '../ClassifyChallenge/ClassifyChallengeDesigner';\r\nimport { ClassifyChallenge } from '../../types/ClassifyChallenge';\r\nimport { SortChallenge } from '../../types/SortChallenge';\r\nimport { SortChallengeDesigner } from '../SortChallenge/SortChallengeDesigner';\r\nimport { FillTableChallengeDesigner } from '../FillTableChallenge/FillTableChallengeDesigner';\r\nimport { FillTableChallenge } from '../../types/FillTableChallenge';\r\nimport { FillGapsChallengeDesigner } from '../FillGapsChallenge/FillGapsChallengeDesigner';\r\nimport { FillGapsChallenge } from '../../types/FillGapsChallenge';\r\nimport { MatchChallengeDesigner } from '../MatchChallenge/MatchChallengeDesigner';\r\nimport { MatchChallenge } from '../../types/MatchChallenge';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\ninterface ChallengeDesignerProps {\r\n    challenge: Challenge,\r\n    onChallengeChange: (challenge: Challenge) => void\r\n}\r\n\r\nexport const ChallengeDesigner: React.FC<ChallengeDesignerProps> = (props: ChallengeDesignerProps) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChallengeChange = (updatedChallenge: Challenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight}>\r\n            <Grid item xs={12}>\r\n                {\r\n                    challenge?.type === ChallengeType.SelectAnswer\r\n                    && (\r\n                        <SelectAnswerChallengeDesigner\r\n                            challenge={challenge as SelectAnswerChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.TrueOrFalse\r\n                    && (\r\n                        <TrueOrFalseChallengeDesigner\r\n                            challenge={challenge as TrueOrFalseChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.FillGaps\r\n                    && (\r\n                        <FillGapsChallengeDesigner\r\n                            challenge={challenge as FillGapsChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Match\r\n                    && (\r\n                        <MatchChallengeDesigner\r\n                            challenge={challenge as MatchChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Sort\r\n                    && (\r\n                        <SortChallengeDesigner\r\n                            challenge={challenge as SortChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Classify\r\n                    && (\r\n                        <ClassifyChallengeDesigner\r\n                            challenge={challenge as ClassifyChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.FillTable\r\n                    && (\r\n                        <FillTableChallengeDesigner\r\n                            challenge={challenge as FillTableChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { Fragment, useCallback, useEffect, useState } from 'react';\r\nimport { Grid, Icon, IconButton, ListItemIcon, makeStyles, Menu, MenuItem, Typography } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useProjects } from '../../hooks/useProjects';\r\nimport { Project } from '../../types/Project';\r\nimport { Test } from '../../types/Test';\r\nimport { ChallengeSelector } from './ChallengeSelector';\r\nimport { ChallengeDesigner } from './ChallengeDesigner';\r\nimport { Challenge } from '../../types/Challenge';\r\nimport { ChallengeType } from '../../enums/ChallengeType';\r\nimport { getChallengeTypeDescription, getChallengeTypeIcon, getDefaultChallenge } from '../../utils/utilChallenges';\r\nimport { colors } from '../../theme';\r\nimport { DialogConfirm } from '../common/DialogConfirm';\r\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\r\nimport { Language } from '../../enums/Language';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },\r\n    listContainer: {\r\n        paddingRight: '10px',\r\n        height: '100%',\r\n        width: '100%',\r\n        overflow: 'hidden'\r\n    },\r\n    challengesContainer: {\r\n        height: 'calc(100% - 50px)',\r\n        width: '100%',\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        listStyle: 'none',\r\n        '&::-webkit-scrollbar': {\r\n            width: '0.2em'\r\n        },\r\n        '&::-webkit-scrollbar-track': {\r\n            boxShadow: 'inset 0 0 6px rgba(255,0,0,0.00)',\r\n            webkitBoxShadow: 'inset 0 0 6px rgba(255,0,0,0.00)'\r\n        },\r\n        '&::-webkit-scrollbar-thumb': {\r\n            backgroundColor: colors.primary.light,\r\n            outline: '1px solid slategrey'\r\n        }\r\n    },\r\n    challengeSelector: {\r\n        flexGrow: 1\r\n    }\r\n}));\r\n\r\ninterface TestDesignerProps {\r\n    projectId: string,\r\n    testId: string\r\n}\r\n\r\nexport const TestDesigner: React.FC<TestDesignerProps> = (props: TestDesignerProps) => {\r\n    const { projectId, testId } = props;\r\n\r\n    const { projects, setProjects } = useProjects();\r\n\r\n    const [test, setTest] = useState<Test>({\r\n        id: uuidv4(),\r\n        name: 'Nuevo cuestionario',\r\n        description: '',\r\n        language: Language.Es,\r\n        challenges: []\r\n    });\r\n\r\n    const [compactList, setCompactList] = useState<boolean>(false);\r\n    const [selectedChallenge, setSelectedChallenge] = useState<Challenge>();\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n    const [deletedChallenge, setDeletedChallenge] = useState<Challenge>();\r\n    const [openRemoveChallengeConfirm, setOpenRemoveChallengeConfirm] = useState<boolean>(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        const project = projects.find((aProject: Project) => aProject.id === projectId);\r\n        if (project != null) {\r\n            const test = project.tests.find((aTest: Test) => aTest.id === testId);\r\n            if (test != null) {\r\n                setTest(test);\r\n                if (test.challenges.length > 0) {\r\n                    if (selectedChallenge == null) {\r\n                        setSelectedChallenge(test.challenges[0]);\r\n                    } else {\r\n                        setSelectedChallenge({ ...selectedChallenge });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, [projects, projectId, testId]);\r\n\r\n    const handleReorderChallenges = useCallback(\r\n        (reorderedChallenges: Challenge[]) => {\r\n            const updatedProjects = projects.map((aProject: Project) => {\r\n                if (aProject.id !== projectId) {\r\n                    return { ...aProject };\r\n                }\r\n                const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                    if (aTest.id !== testId) {\r\n                        return { ...aTest };\r\n                    }\r\n                    return {\r\n                        ...aTest,\r\n                        challenges: reorderedChallenges\r\n                    };\r\n                });\r\n                return {\r\n                    ...aProject,\r\n                    tests: [...updatedTests]\r\n                };\r\n            });\r\n            setProjects(updatedProjects);\r\n        },\r\n        [projects]\r\n    );\r\n\r\n    const handleSelectChallenge = (challenge: Challenge) => {\r\n        setSelectedChallenge(challenge);\r\n    };\r\n\r\n    const handleDeleteChallenge = (challenge: Challenge) => {\r\n        setDeletedChallenge(challenge);\r\n        setOpenRemoveChallengeConfirm(true);\r\n    };\r\n\r\n    const handleClickNewChallengeMenu = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleNewChallengeOptionClick = (type: ChallengeType) => {\r\n        const newChallenge: Challenge = getDefaultChallenge(type);\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return { ...aProject };\r\n            }\r\n            const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                if (aTest.id !== testId) {\r\n                    return { ...aTest };\r\n                }\r\n                const selectedPosition = selectedChallenge != null ? (\r\n                    test.challenges.findIndex(\r\n                        (aChallenge: Challenge) => aChallenge.id === selectedChallenge?.id\r\n                    )\r\n                ) : 0;\r\n                return {\r\n                    ...aTest,\r\n                    challenges: [\r\n                        ...aTest.challenges.slice(0, selectedPosition + 1),\r\n                        newChallenge,\r\n                        ...aTest.challenges.slice(selectedPosition + 1)\r\n                    ]\r\n                };\r\n            });\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        setSelectedChallenge(newChallenge);\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleCloseNewChallengeMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleChallengeChange = (updatedChallenge: Challenge) => {\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return aProject;\r\n            }\r\n            const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                if (aTest.id !== testId) {\r\n                    return { ...aTest };\r\n                }\r\n                const updatedChallenges = aTest.challenges.map((aChallenge: Challenge) => {\r\n                    if (aChallenge.id !== updatedChallenge.id) {\r\n                        return { ...aChallenge };\r\n                    }\r\n                    return { ...updatedChallenge };\r\n                });\r\n                return {\r\n                    ...aTest,\r\n                    challenges: [...updatedChallenges]\r\n                };\r\n            });\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        setSelectedChallenge({ ...updatedChallenge });\r\n    };\r\n\r\n    const handleConfirmRemoveChallenge = () => {\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return aProject;\r\n            }\r\n            const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                if (aTest.id !== testId) {\r\n                    return aTest;\r\n                }\r\n                if (deletedChallenge?.id === selectedChallenge?.id) {\r\n                    setSelectedChallenge(aTest.challenges.find(\r\n                        (aChallenge: Challenge) => aChallenge.id !== deletedChallenge?.id\r\n                    ));\r\n                }\r\n                const updatedChallenges = aTest.challenges.filter((\r\n                    aChallenge: Challenge\r\n                ) => aChallenge.id !== deletedChallenge?.id);\r\n                return {\r\n                    ...aTest,\r\n                    challenges: [...updatedChallenges]\r\n                };\r\n            });\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        setOpenRemoveChallengeConfirm(false);\r\n    };\r\n\r\n    const handleRefuseRemoveChallenge = () => {\r\n        setOpenRemoveChallengeConfirm(false);\r\n    };\r\n\r\n    const handleListModeChange = (event: React.MouseEvent<HTMLElement>, newListMode: boolean) => {\r\n        setCompactList(newListMode);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <DialogConfirm\r\n                open={openRemoveChallengeConfirm}\r\n                text='¿Seguro que deseas eliminar la pregunta?'\r\n                width='xs'\r\n                onConfirm={handleConfirmRemoveChallenge}\r\n                onRefuse={handleRefuseRemoveChallenge}\r\n            />\r\n            <Grid container className={classes.fullHeight} spacing={2}>\r\n                <Grid item xs={2} className={classes.listContainer}>\r\n                    <Grid container direction='column' className={classes.fullHeight}>\r\n                        <Grid item className={classes.fullWidth}>\r\n                            <Grid container justify='space-between' alignItems='center'>\r\n                                <Grid item>\r\n                                    <Typography variant='h5'>Preguntas</Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Grid container justify='flex-end' alignItems='center'>\r\n                                        <Grid item>\r\n                                            <ToggleButtonGroup size=\"small\" value={compactList} exclusive onChange={handleListModeChange}>\r\n                                                <ToggleButton value={false}>\r\n                                                    <Icon>crop_din</Icon>\r\n                                                </ToggleButton>\r\n                                                <ToggleButton value={true}>\r\n                                                    <Icon>reorder</Icon>\r\n                                                </ToggleButton>\r\n                                            </ToggleButtonGroup>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <IconButton onClick={handleClickNewChallengeMenu}>\r\n                                                <Icon color='primary'>add_circle</Icon>\r\n                                            </IconButton>\r\n                                            <Menu\r\n                                                id='new-challenge-menu'\r\n                                                anchorEl={anchorEl}\r\n                                                keepMounted\r\n                                                open={Boolean(anchorEl)}\r\n                                                onClose={handleCloseNewChallengeMenu}\r\n                                            >\r\n                                                <MenuItem onClick={() => {\r\n                                                    handleNewChallengeOptionClick(ChallengeType.SelectAnswer);\r\n                                                }}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.SelectAnswer, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.SelectAnswer)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => {\r\n                                                    handleNewChallengeOptionClick(ChallengeType.TrueOrFalse);\r\n                                                }}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.TrueOrFalse, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.TrueOrFalse)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => {\r\n                                                    handleNewChallengeOptionClick(ChallengeType.FillGaps);\r\n                                                }}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.FillGaps, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.FillGaps)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => {\r\n                                                    handleNewChallengeOptionClick(ChallengeType.Match);\r\n                                                }}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.Match, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.Match)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem disabled onClick={handleCloseNewChallengeMenu}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.Sort, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.Sort)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => {\r\n                                                    handleNewChallengeOptionClick(ChallengeType.Classify);\r\n                                                }}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.Classify, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.Classify)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => {\r\n                                                    handleNewChallengeOptionClick(ChallengeType.FillTable);\r\n                                                }}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.FillTable, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.FillTable)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem disabled onClick={handleCloseNewChallengeMenu}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.TheOddOne, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.TheOddOne)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem disabled onClick={handleCloseNewChallengeMenu}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.Crossword, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.Crossword)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                            </Menu>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item className={classes.challengesContainer}>\r\n                            <DndProvider backend={HTML5Backend}>\r\n                                <ChallengeSelector\r\n                                    challenges={test.challenges}\r\n                                    compactList={compactList}\r\n                                    selected={selectedChallenge}\r\n                                    onChallengeReorder={handleReorderChallenges}\r\n                                    onSelect={handleSelectChallenge}\r\n                                    onDelete={handleDeleteChallenge}\r\n                                />\r\n                            </DndProvider>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={10}>\r\n                    {\r\n                        selectedChallenge && (\r\n                            <ChallengeDesigner\r\n                                challenge={selectedChallenge}\r\n                                onChallengeChange={handleChallengeChange}\r\n                            />\r\n                        )\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { useParams } from \"react-router\";\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { TestDesigner } from '../../components/Designer/TestDesigner';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\nexport const Designer = () => {\r\n    const { projectId, testId } = useParams() as any;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n            className={classes.fullHeight}\r\n        >\r\n            <Grid item xs={12} className={classes.fullHeight}>\r\n                <TestDesigner\r\n                    projectId={projectId}\r\n                    testId={testId}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Challenge, ChallengeOptions } from '../../types/Challenge';\r\nimport { ChallengeType } from '../../enums/ChallengeType';\r\nimport { SelectAnswerChallenger } from '../SelectAnswerChallenge/SelectAnswerChallenger';\r\nimport { SelectAnswerChallenge } from '../../types/SelectAnswerChallenge';\r\nimport { TrueOrFalseChallenge } from '../../types/TrueOrFalseChallenge';\r\nimport { TrueOrFalseChallenger } from '../TrueOrFalseChallenge/TrueOrFalseChallenger';\r\nimport { ClassifyChallenger } from '../ClassifyChallenge/ClassifyChallenger';\r\nimport { ClassifyChallenge } from '../../types/ClassifyChallenge';\r\nimport { FillTableChallenger } from '../FillTableChallenge/FillTableChallenger';\r\nimport { FillTableChallenge } from '../../types/FillTableChallenge';\r\nimport { FillGapsChallenger } from '../FillGapsChallenge/FillGapsChallenger';\r\nimport { FillGapsChallenge } from '../../types/FillGapsChallenge';\r\nimport { MatchChallenger } from '../MatchChallenge/MatchChallenger';\r\nimport { MatchChallenge } from '../../types/MatchChallenge';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\ninterface ChallengeEvaluatorProps {\r\n    challenge: Challenge,\r\n    options: ChallengeOptions,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const ChallengeEvaluator: React.FC<ChallengeEvaluatorProps> = (props: ChallengeEvaluatorProps) => {\r\n    const { challenge, options, onSuccess, onError } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handlerSucessChallenge = () => {\r\n        if (onSuccess) {\r\n            onSuccess();\r\n        }\r\n    };\r\n\r\n    const handlerErrorChallenge = () => {\r\n        if (onError) {\r\n            onError();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight}>\r\n            <Grid item xs={12}>\r\n                {\r\n                    challenge?.type === ChallengeType.SelectAnswer\r\n                    && (\r\n                        <SelectAnswerChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as SelectAnswerChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.TrueOrFalse\r\n                    && (\r\n                        <TrueOrFalseChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as TrueOrFalseChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.FillGaps\r\n                    && (\r\n                        <FillGapsChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as FillGapsChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Match\r\n                    && (\r\n                        <MatchChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as MatchChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Classify\r\n                    && (\r\n                        <ClassifyChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as ClassifyChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.FillTable\r\n                    && (\r\n                        <FillTableChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as FillTableChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import { Divider, Grid, LinearProgress, makeStyles, Typography } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { ChallengeType } from '../../enums/ChallengeType';\r\nimport { Language } from '../../enums/Language';\r\nimport { getChallengeTypeDescription } from '../../utils/utilChallenges';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: 'solid 1px',\r\n        backgroundColor: theme.palette.primary.light,\r\n    }\r\n}));\r\n\r\ninterface ChallengeLauncherProps {\r\n    challengeType: ChallengeType,\r\n    challengeNumber: number,\r\n    challengeTotalCount: number,\r\n    language: Language,\r\n    delay: number,\r\n    onEnd: () => void\r\n}\r\n\r\nexport const ChallengeLauncher: React.FC<ChallengeLauncherProps> = (props: ChallengeLauncherProps) => {\r\n    const { challengeType, challengeNumber, challengeTotalCount, language, delay, onEnd } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => { onEnd(); }, delay * 1000);\r\n    }, []);\r\n\r\n    return (\r\n        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={2} className={classes.root}>\r\n            <Grid item>\r\n                <Typography variant=\"h2\">\r\n                    {\r\n                        getChallengeTypeDescription(challengeType, language)\r\n                    }\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item style={{width: '100%'}}>\r\n                <LinearProgress color=\"secondary\" />\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant=\"h4\">\r\n                    {\r\n                        language === Language.En ? (\r\n                            `Question ${challengeNumber.toString()} of ${challengeTotalCount.toString()}`\r\n                        ) : (\r\n                            `Pregunta ${challengeNumber.toString()} de ${challengeTotalCount.toString()}`\r\n                        )\r\n                    }\r\n                </Typography>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Button, Grid, Icon, makeStyles, Typography } from '@material-ui/core';\r\nimport { Test } from '../../types/Test';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        border: 'solid 1px'\r\n    },\r\n    timeline: {\r\n        transform: 'rotate(-90deg)'\r\n    },\r\n    timelineContentContainer: {\r\n        textAlign: 'left',\r\n        padding: '0px'\r\n    },\r\n    timelineContent: {\r\n        transform: 'rotate(90deg)',\r\n        padding: '0px 5px'\r\n    },\r\n    timelineIcon: {\r\n        transform: 'rotate(90deg)'\r\n    }\r\n}));\r\n\r\ninterface TestResultProps {\r\n    test: Test,\r\n    results: boolean[],\r\n    onBackHome: () => void,\r\n    onRepeatTest: () => void\r\n}\r\n\r\nexport const TestResult: React.FC<TestResultProps> = (props: TestResultProps) => {\r\n    const { test, results, onBackHome, onRepeatTest } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container\r\n            direction=\"column\"\r\n            className={classes.root}\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={4}\r\n        >\r\n            <Grid item>\r\n                <Typography variant=\"h2\">\r\n                    {test.name}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant=\"h3\">\r\n                    {test.description}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant=\"h4\">\r\n                    {\r\n                        `${test.language === Language.En ? 'Correct answers' : 'Respuestas correctas'}: ${results.filter((aResult: boolean) => aResult).length}/${results.length}`\r\n                    }\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item container justify=\"center\" alignItems=\"center\" spacing={4}>\r\n                <Grid item>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onBackHome}>\r\n                        <Icon>navigate_before</Icon>\r\n                        &nbsp;\r\n                        { test.language === Language.En ? 'Go back to home' : 'Volver a la pantalla principal' }\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onRepeatTest}>\r\n                        <Icon>replay</Icon>\r\n                        &nbsp;\r\n                        { test.language === Language.En ? 'repeat test' : 'Repetir cuestionario' }\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport { Test, TestOptions } from '../../types/Test';\r\nimport { useProjects } from '../../hooks/useProjects';\r\nimport { Project } from '../../types/Project';\r\nimport { ChallengeEvaluator } from '../../components/Evaluator/ChallengeEvaluator';\r\nimport { ChallengeLauncher } from '../../components/Evaluator/ChallengeLauncher';\r\nimport { TestResult } from '../../components/Evaluator/TestResult';\r\nimport { parseQueryString } from '../../utils/utilStrings';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\ninterface IParams {\r\n    projectId: string,\r\n    testId: string\r\n}\r\n\r\ninterface ChallengeState {\r\n    idx: number,\r\n    launching: boolean\r\n}\r\n\r\nexport const Evaluator: React.FC = () => {\r\n    const { projectId, testId } = useParams() as IParams;\r\n    const history = useHistory();\r\n\r\n    const { projects } = useProjects();\r\n    const [testOptions] = useState<TestOptions>(parseQueryString(history.location.search));\r\n    const [test, setTest] = useState<Test>();\r\n    const [currentChallengeState, setCurrentChallengeState] = useState<ChallengeState>({idx: -1, launching: false});\r\n    const [results, setResults] = useState<boolean[]>([]);\r\n    const [showResult, setShowResult] = useState<boolean>(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (projectId != null && testId != null) {\r\n            const theProject: Project = projects.find((aProject: Project) => aProject.id === projectId);\r\n            if (theProject != null) {\r\n                const theTest: Test | undefined = theProject.tests.find((aTest: Test) => aTest.id === testId);\r\n                if (theTest != null) {\r\n                    setTest(theTest);\r\n                    setCurrentChallengeState({idx: 0, launching: true});\r\n                }\r\n            }\r\n        }\r\n    }, [projectId, testId]);\r\n\r\n    const next = () => {\r\n        if (test != null) {\r\n            if (currentChallengeState.launching) {\r\n                setCurrentChallengeState({\r\n                    ...currentChallengeState,\r\n                    launching: false\r\n                });\r\n            } else {\r\n                if (currentChallengeState.idx < test.challenges.length - 1) {\r\n                    setCurrentChallengeState({\r\n                        idx: currentChallengeState.idx + 1,\r\n                        launching: true\r\n                    });\r\n                } else {\r\n                    setCurrentChallengeState({\r\n                        idx: -1,\r\n                        launching: false\r\n                    });\r\n                    setShowResult(true);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleResponse = (success: boolean) => {\r\n        setResults([...results, success]);\r\n        if (testOptions.autoNext) {\r\n            next();\r\n        }\r\n    };\r\n\r\n    const handleBackHome = () => {\r\n        history.push('/');\r\n    };\r\n\r\n    const handleRepeatTest = () => {\r\n        setCurrentChallengeState({idx: 0, launching: true});\r\n        setResults([]);\r\n        setShowResult(false);\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n            className={classes.fullHeight}\r\n        >\r\n            <Grid item xs={2}></Grid>\r\n            <Grid item xs={8} className={classes.fullHeight}>\r\n                {\r\n                    test != null && currentChallengeState.launching && currentChallengeState.idx >= 0 && (\r\n                        <ChallengeLauncher\r\n                            challengeType={test.challenges[currentChallengeState.idx].type}\r\n                            challengeNumber={currentChallengeState.idx + 1}\r\n                            challengeTotalCount={test.challenges.length}\r\n                            language={test.language}\r\n                            delay={3}\r\n                            onEnd={next}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    test != null && !currentChallengeState.launching && currentChallengeState.idx >= 0 && (\r\n                        <ChallengeEvaluator\r\n                            challenge={test.challenges[currentChallengeState.idx]}\r\n                            options={{\r\n                                language: test.language,\r\n                                ignoreTimeLimit: testOptions.ignoreTimeLimit\r\n                            }}\r\n                            onSuccess={() => { handleResponse(true); }}\r\n                            onError={() => { handleResponse(false); }}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    test != null && showResult && (\r\n                        <TestResult\r\n                            test={test}\r\n                            results={results}\r\n                            onBackHome={handleBackHome}\r\n                            onRepeatTest={handleRepeatTest}\r\n                        />\r\n                    )\r\n                }\r\n            </Grid>\r\n            <Grid item xs={2} className={`${classes.fullHeight} ${classes.centerAll}`}>\r\n                {\r\n                    !testOptions.autoNext\r\n                    && currentChallengeState.idx === results.length - 1\r\n                    && (\r\n                        <Fab\r\n                            variant=\"extended\"\r\n                            size=\"large\"\r\n                            color=\"primary\"\r\n                            onClick={next}\r\n                        >\r\n                            {test?.language === Language.En ? 'Next' : 'Siguiente'}&nbsp;<Icon>navigate_next</Icon>\r\n                        </Fab>\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\r\nimport { ProjectContextProvider } from './context/ProjectContext';\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route\r\n} from \"react-router-dom\";\r\nimport { theme } from \"./theme\";\r\nimport { MainHeader } from \"./components/common/MainHeader\";\r\nimport { Home } from \"./views/Home\";\r\nimport { Designer } from \"./views/Designer\";\r\nimport { Evaluator } from \"./views/Evaluator\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    mainContainer: {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    headerContainer: {\r\n        width: '100%',\r\n        height: '75px'\r\n    },\r\n    content: {\r\n        margin: '30px',\r\n        height: 'calc(100% - 135px)'\r\n    }\r\n}));\r\n\r\nexport default function App() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Router>\r\n            <ThemeProvider theme={theme}>\r\n                <ProjectContextProvider>\r\n                    <div className={classes.mainContainer}>\r\n                        <div className={classes.headerContainer}>\r\n                            <MainHeader></MainHeader>\r\n                        </div>\r\n                        <div className={classes.content}>\r\n                            <Switch>\r\n                                <Route exact path=\"/\">\r\n                                    <Home />\r\n                                </Route>\r\n                                <Route path=\"/designer/:projectId/:testId\">\r\n                                    <Designer />\r\n                                </Route>\r\n                                <Route path=\"/play/:projectId/:testId\">\r\n                                    <Evaluator />\r\n                                </Route>\r\n                            </Switch>\r\n                        </div>\r\n                    </div>\r\n                </ProjectContextProvider>\r\n            </ThemeProvider>\r\n        </Router >\r\n    );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}