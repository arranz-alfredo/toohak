{"version":3,"sources":["enums/ChallengeType.ts","enums/ComponentMode.ts","enums/FillMethod.ts","enums/Language.ts","enums/MatchElement.ts","enums/PictureType.ts","context/ProjectContext.tsx","theme/index.ts","components/Common/MainHeader.tsx","hooks/useProjects.ts","components/ClassifyChallenge/ClassifyChallengeDesigner.tsx","assets/sounds/correct.wav","assets/sounds/incorrect.wav","components/ClassifyChallenge/ClassifyChallenger.tsx","components/ClassifyChallenge/ClassifyConfigurator.tsx","components/ClassifyChallenge/DropGroup.tsx","components/Common/ChallengeConfigurator.tsx","components/Common/ChallengeQuestion.tsx","components/Common/Countdown.tsx","components/Common/DialogConfirm.tsx","components/Common/DialogPictureSelector.tsx","components/Common/DragableItem.tsx","components/Common/JsonLoader.tsx","components/Common/PictureGrid.tsx","components/Common/SelectableOption.tsx","components/Designer/ChallengeDesigner.tsx","components/Designer/ChallengeSelector.tsx","utils/utilChallenges.tsx","utils/utilStrings.ts","utils/utilValidationTypes.ts","components/Designer/ChallengeThumbnail.tsx","components/Designer/TestDesigner.tsx","components/Evaluator/ChallengeEvaluator.tsx","components/Evaluator/ChallengeLauncher.tsx","components/Evaluator/TestResult.tsx","components/FillGapsChallenge/DialogFillGapsCandidates.tsx","components/FillGapsChallenge/DropGap.tsx","components/FillGapsChallenge/FillGapsChallengeDesigner.tsx","components/FillGapsChallenge/FillGapsChallenger.tsx","components/FillGapsChallenge/FillGapsConfigurator.tsx","components/FillGapsChallenge/FillGapsSentence.tsx","components/FillTableChallenge/FillTableChallengeDesigner.tsx","components/FillTableChallenge/FillTableChallenger.tsx","components/FillTableChallenge/FillTableConfigurator.tsx","components/FillTableChallenge/TableCell.tsx","components/Home/DialogTestOptions.tsx","components/Home/DialogProjectForm.tsx","components/Home/ProjectForm.tsx","components/Home/ProjectList.tsx","components/Home/TestForm.tsx","components/Home/TestList.tsx","components/MatchChallenge/MatchChallengeDesigner.tsx","components/MatchChallenge/MatchChallenger.tsx","components/MatchChallenge/MatchConfigurator.tsx","components/MatchChallenge/MatchDestination.tsx","components/MatchChallenge/MatchSource.tsx","components/SelectAnswerChallenge/SelectAnswerChallengeDesigner.tsx","components/SelectAnswerChallenge/SelectAnswerChallenger.tsx","components/SelectAnswerChallenge/SelectAnswerConfigurator.tsx","components/SortChallenge/SortChallengeDesigner.tsx","components/SortChallenge/SortChallenger.tsx","components/SortChallenge/SortConfigurator.tsx","components/TrueOrFalseChallenge/TrueOrFalseChallengeDesigner.tsx","components/TrueOrFalseChallenge/TrueOrFalseChallenger.tsx","components/TrueOrFalseChallenge/TrueOrFalseConfigurator.tsx","views/Home/index.tsx","views/Designer/index.tsx","views/Evaluator/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChallengeType","ComponentMode","FillMethod","Language","MatchElement","PictureType","ProjectContext","React","createContext","ProjectContextProvider","children","useState","projects","setProjects","Provider","value","colors","main","light","dark","mainContrast","contrast","errorContrast","theme","createMuiTheme","palette","primary","contrastText","secondary","background","default","paper","error","text","typography","fontSize","MainHeader","useEffect","ReactGA","initialize","process","AppBar","position","Toolbar","to","style","color","textDecoration","fontWeight","LOCALSTORAGE_KEY","useProjects","useContext","saveProjects","length","strProjects","localStorage","getItem","JSON","parse","newProjects","setItem","stringify","useStyles","makeStyles","fullHeight","height","ClassifyChallengeDesigner","props","challenge","onChallengeChange","classes","Grid","container","className","spacing","item","xs","mode","Design","updatedChallenge","config","onConfigChange","groups","groupCount","newGroups","Array","from","map","name","items","slice","readjustGroups","root","backgroundColor","titleContainer","classifyContainer","centerAll","display","justifyContent","alignItems","optionsContainer","border","groupsContainer","reorderItems","list","reduce","acc","current","Play","sort","Math","random","ClassifyChallenger","options","onSuccess","onError","aGroup","groupName","initialClassifyState","classifyState","setClassifyState","stopTimer","setStopTimer","highlightResults","setHighlightResults","draggableItems","setDragabbleItems","useSound","correct","playCorrect","incorrect","playIncorrect","showResult","success","setTimeout","isDropped","itemName","indexOf","Card","variant","question","questionFontSize","onChange","newTitle","justify","ignoreTimeLimit","time","timeLimit","onTimeUp","DndProvider","backend","HTML5Backend","anItem","idx","itemsFontSize","title","validItems","showResults","onTitleChange","newName","groupIdx","updatedName","updatedGroups","handleNameChange","onItemsChange","newItems","updatedItems","handleItemsChange","droppedItems","find","auxGroup","onDrop","droppedItem","newDroppedItems","filter","findIndex","handleDrop","Fab","size","disabled","onClick","accGroups","currentGroup","correctItems","accItems","currentItem","theGroup","handleCheckClick","Icon","language","En","fullWidth","width","ClassifyConfigurator","formData","setFormData","inputItemsFontSize","useRef","inputGroupCount","handleConfigParameterChange","parameter","newConfig","direction","Typography","newBaseConfig","TextField","inputRef","type","label","inputProps","min","onInput","parseInt","padding","itemsContainer","DropGroup","useDrop","accept","drop","collect","monitor","isOver","canDrop","groupState","setGroupState","inputTitle","inputItem","addValidItem","newState","elevation","textAlign","itemIdx","Chip","onDelete","handleRemoveValidItem","InputProps","onKeyPress","evt","code","ref","aDroppedItem","ChallengeConfigurator","inputTimeLimit","inputQuestionFontSize","inputContainer","input","ChallengeQuestion","questionText","setQuestionText","inputQuestion","lineHeight","readOnly","disableUnderline","placeholder","multiline","rowsMax","Countdown","timeRemaining","setTimeRemaining","stop","setStop","timeoutId","clearTimeout","Box","CircularProgress","round","top","left","bottom","right","component","DialogConfirm","open","acceptButtonText","cancelButtonText","onConfirm","onRefuse","Dialog","maxWidth","DialogContent","DialogActions","Button","autoFocus","dialogContainer","DialogPictureForm","picture","onAccept","onCancel","formState","setFormState","inputUrl","DialogTitle","data","newPicture","Url","borderRadius","cursor","DragableItem","iconButton","useDrag","opacity","isDragging","drag","uploadInput","JsonLoader","onDataLoaded","inputImport","id","uuidv4","multiple","event","target","files","file","reader","FileReader","readAsText","onloadend","e","newProject","result","err","htmlFor","pic","maxHeight","PictureGrid","pictures","onPicturesChange","pictureDialogState","setPictureDialogState","pictureItemSize","setPictureItemSize","openDialog","selectedPicture","newPic","pictureIdx","selectedPictureIdx","aPicture","None","src","alt","handleAddPictureClick","toString","option","optionActionArea","optionInput","optionInnerInput","optionIcon","selector","checked","SelectableOption","icon","valid","selected","multiselect","onTextChange","onValidChange","optionState","setOptionState","inputTextOption","radioOption","checkOption","borderStyle","borderWidth","borderColor","startAdornment","InputAdornment","endAdornment","Checkbox","Radio","ev","preventDefault","CardActionArea","justifySelf","ChallengeDesigner","handleChallengeChange","SelectAnswer","TrueOrFalse","FillGaps","Match","Sort","Classify","FillTable","overflowY","ChallengeSelector","challenges","compactList","onChallengeReorder","onSelect","localChallenges","setLocalChallenges","undefined","selectedChallenge","setSelectedChallenge","console","log","handleThumbnailClick","handleThumbnailDelete","handleChallengeMove","dragIndex","hoverIndex","filteredCards","aChallenge","newChallenges","index","compact","onChallengeMove","getChallengeTypeDescription","Es","TheOddOne","Crossword","getChallengeTypeIcon","getDefaultChallengeConfig","defaultChallengeConfig","answerFontSize","pictureCount","pictureLabel","pairsCount","textFontSize","fillMethod","Writing","itemCount","rowCount","columnCount","firstRowFixed","firstColumnFixed","splitSentence","replace","split","joinSentence","textParts","join","checkEqual","stringA","stringB","checkCapitalLetters","checkAccentMarks","strA","strB","toLowerCase","isValidChallenge","errorMessage","push","configValidation","customConfig","isValidConfig","customChallenge","some","answers","anAnswer","sentences","hiddenExpressions","pairs","source","destination","accRow","currentRow","rowIdx","accColumn","currentColumn","columnIdx","isValidTest","test","headerContainer","overflow","contentContainer","actionContainer","marginTop","descriptionContainer","description","whiteSpace","textOverflow","tooltipRow","statusContainer","ChallengeThumbnail","validation","setValidation","hover","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","hoverClientY","getClientOffset","y","preview","getEmptyImage","captureDraggingState","onMouseDown","CardHeader","content","avatar","subheader","action","Tooltip","arrow","aMessage","messageIdx","CardContent","noWrap","CardActions","IconButton","listContainer","paddingRight","challengesContainer","overflowX","listStyle","boxShadow","webkitBoxShadow","outline","challengeSelector","flexGrow","addMenuItems","TestDesigner","projectId","testId","setTest","setCompactList","anchorEl","setAnchorEl","deletedChallenge","setDeletedChallenge","openRemoveChallengeConfirm","setOpenRemoveChallengeConfirm","project","aProject","tests","aTest","handleReorderChallenges","useCallback","reorderedChallenges","updatedProjects","updatedTests","handleNewChallengeOptionClick","newChallenge","defaultChallenge","answer","hidden","getDefaultChallenge","selectedPosition","updatedChallenges","ToggleButtonGroup","exclusive","newListMode","ToggleButton","currentTarget","Menu","keepMounted","Boolean","onClose","challengeType","MenuItem","ListItemIcon","ChallengeEvaluator","handlerSucessChallenge","handlerErrorChallenge","ChallengeLauncher","challengeNumber","challengeTotalCount","delay","onEnd","LinearProgress","timeline","transform","timelineContentContainer","timelineContent","timelineIcon","TestResult","results","onBackHome","onRepeatTest","aResult","DialogFillGapsCandidates","candidates","inputCandidate","List","aCandidate","candidateIdx","ListItem","ListItemText","ListItemSecondaryAction","edge","handleDeleteCandidate","DropGap","borderBottom","FillGapsChallengeDesigner","answerContainer","minHeight","sentencesContainer","paddingLeft","forEach","aSentence","sentenceIdx","aHiddenExpression","hiddenExpressionIdx","sentenceText","hiddenExpression","FillGapsChallenger","inputSentence","initialFillGapsState","fillGapsState","setFillGapsState","openCandidatesDialog","setOpenCandidatesDialog","selectedExpression","setSelectedExpression","expressionInSentence","sentence","expression","initPosition","wordCount","alternatives","newCandidates","updatedSentences","hiddenExpresionIdx","Dragging","sentencesAnswer","aSentenceAnswer","hiddenExpIdx","onSentenceChange","updatedSentence","handleSentenceChange","onSentenceRemove","aFillGapsState","handleSentenceRemove","onAnswersChange","updatedState","handleSentenceAnswer","newSentence","addSentence","every","el","accSentences","currentSentence","words","correctExpressions","accExpressions","currentExpression","expressionIdx","hiddenAnswer","hiddenIdx","anAlternative","FillGapsConfigurator","inputTextFontSize","inputFillMethod","FormControl","InputLabel","Select","FormControlLabel","control","Switch","word","FillGapsSentence","currentIdx","anExp","sentenceParts","parts","setParts","handlePartChange","partIdx","updatedParts","aPart","getPartStyle","validValues","aValidValue","aWord","wordIdx","anExpression","updatedHiddenExpressions","completeArrayFrom","handleWordClick","droppedText","FillTableChallengeDesigner","auxColumn","newRows","newColumns","readjustTable","optionContainer","cell","FillTableChallenger","aRow","aColumn","initialFillTableState","fillTableState","setFillTableState","fixed","onCellChange","newCell","auxRowIdx","auxColumnIdx","handleCellChange","FillTableConfigurator","inputRowCount","checkFirstRowFixed","inputColumnCount","checkFirstColumnFixed","invalid","TableCell","inputText","marginLeft","DialogTestOptions","autoNext","checkIgnoreTimeLimit","checkAutoNextChallenge","handleAttributeChange","attribute","ProjectForm","initialState","inputName","inputDescription","heading","pxToRem","secondaryHeading","gridContainer","gridItems","messageControl","ProjectList","history","useHistory","expandedProject","setExpandedProject","preimportedProject","setPreimportedProject","openOverwriteProject","setOpenOverwriteProject","openProjectForm","setOpenProjectForm","openRemoveProjectConfirm","setOpenRemoveProjectConfirm","selectedProject","setSelectedProject","openMessage","setOpenMessage","messageText","setMessageText","handleCreateTest","openDesign","theProject","updating","handleDeleteTest","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","SnackbarContent","message","isValidProject","Divider","Accordion","expanded","isExpanded","handleExpandChange","AccordionSummary","stopPropagation","element","document","createElement","setAttribute","encodeURIComponent","body","appendChild","click","removeChild","handleExportProjectClick","AccordionDetails","onCreateTest","onDeleteTest","TestForm","shrink","labelId","updatedLanguage","newTest","inline","listItemSecondaryAction","visibility","listItem","bottomContainer","play","TestList","selectedTest","setSelectedTest","preimportedTest","setPreimportedTest","anchorElEdit","setAnchorElEdit","openOverwriteTest","setOpenOverwriteTest","openTestForm","setOpenTestForm","openRemoveTestConfirm","setOpenRemoveTestConfirm","playOptionsState","setPlayOptionsState","Link","button","openOptions","handleEditClick","handleExportTestClick","testOptions","MatchChallengeDesigner","newPairs","readjustPairs","texts","MatchChallenger","aPair","sourceItems","setSourceItems","destinationItems","setDestinationItems","matchState","setMatchState","handleTextChange","newText","pairIdx","pairAttribute","Source","aSource","sourceIdx","arrowNode","aDestination","destinationIdx","Destination","start","end","curveness","accPairs","currentPair","idxAnswer","MatchConfigurator","inputAnswerFontSize","inputPairsCount","MatchDestination","textValue","setTextValue","MatchSource","SelectAnswerChallengeDesigner","newPictures","readjustPictures","validPresent","readjustValidAnswers","pictureContainer","paddingTop","SelectAnswerChallenger","selectedAnswers","setSelectedAnswers","handleAnswerChange","updatedAnswer","updatedAnswers","handlerOptionClick","answerIdx","theIndex","anAnswerIdx","SelectAnswerConfigurator","inputPictureCount","checkPictureLabel","checkMultiselect","max","SortChallengeDesigner","readjustItems","SortChallenger","SortConfigurator","inputItemCount","TrueOrFalseChallengeDesigner","TrueOrFalseChallenger","TrueOrFalseConfigurator","Home","lg","xl","Designer","useParams","Evaluator","qs","qsAux","aParam","paramParts","parseQueryString","location","search","launching","currentChallengeState","setCurrentChallengeState","setResults","setShowResult","theTest","next","handleResponse","mainContainer","flexDirection","margin","App","ThemeProvider","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c38f194c.chunk.js","sourcesContent":["export enum ChallengeType {\r\n    SelectAnswer = 'SA',\r\n    TrueOrFalse = 'TF',\r\n    FillGaps = 'FG',\r\n    Match = 'MT',\r\n    Sort = 'SO',\r\n    Classify = 'CL',\r\n    FillTable = 'FT',\r\n    TheOddOne = 'OO',\r\n    Crossword = 'CW'\r\n}\r\n","export enum ComponentMode {\r\n    Design,\r\n    Play\r\n}\r\n","export enum FillMethod {\r\n    Writing = 'W',\r\n    Dragging = 'D'\r\n}\r\n","export enum Language {\r\n    Es = 'ES',\r\n    En = 'EN'\r\n}\r\n","export enum MatchElement {\r\n    Source,\r\n    Destination\r\n}\r\n","export enum PictureType {\r\n    None = 'NONE',\r\n    Url = 'URL',\r\n    Base64 = 'BASE64'\r\n}\r\n","import React, { useState } from 'react';\r\n\r\n/**\r\n * Contexto para almacenar los proyectos importados\r\n */\r\nexport const ProjectContext = React.createContext<any | React.Dispatch<any>>([]);\r\n\r\ntype Props = {\r\n    children: React.ReactNode\r\n}\r\n\r\n/** Proveedor del contexto de proyectos */\r\nexport const ProjectContextProvider = ({ children }: Props) => {\r\n    // Hook para mantener el estado del contexto\r\n    const [projects, setProjects] = useState<any | React.Dispatch<any>>([]);\r\n\r\n    return (\r\n        <ProjectContext.Provider value={{ projects, setProjects }}>\r\n            {children}\r\n        </ProjectContext.Provider>\r\n    );\r\n};\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nexport const colors = {\r\n    primary: {\r\n        main: '#2196f3',\r\n        light: '#6ec6ff',\r\n        dark: '#0069c0'\r\n    },\r\n    secondary: {\r\n        main: '#e91e63',\r\n        light: '#ff6090',\r\n        dark: '#b0003a'\r\n    },\r\n    error: '#f44336',\r\n    background: {\r\n        main: '#2196f3',\r\n        light: '#ffffff',\r\n        dark: '#0069c0'\r\n    },\r\n    font: {\r\n        main: '#000000',\r\n        mainContrast: \"#ffffff\",\r\n        light: '#000000',\r\n        dark: '#888888',\r\n        contrast: '#6ec6ff',\r\n        errorContrast: \"#ffffff\"\r\n    },\r\n    action: \"#4caf50\"\r\n};\r\n\r\nexport const fontSize = {\r\n    s: 10,\r\n    m: 12,\r\n    l: 16\r\n};\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: colors.primary.main,\r\n            contrastText: colors.font.mainContrast,\r\n            light: colors.primary.light\r\n        },\r\n        secondary: {\r\n            main: colors.secondary.main,\r\n            contrastText: colors.font.main,\r\n            light: colors.secondary.light\r\n        },\r\n        background: {\r\n            default: colors.background.main,\r\n            paper: colors.background.light\r\n        },\r\n        error: {\r\n            main: colors.error,\r\n        },\r\n        text: {\r\n            primary: colors.font.main,\r\n            secondary: colors.font.dark\r\n        }\r\n    },\r\n    typography: {\r\n        fontSize: fontSize.m,\r\n    }\r\n});\r\n","import React, { useEffect } from 'react';\r\nimport { AppBar, Toolbar } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport ReactGA from 'react-ga';\r\n\r\nexport const MainHeader: React.FC = () => {\r\n\r\n    useEffect(() => {\r\n        if (process.env.NODE_ENV === 'production') {\r\n            ReactGA.initialize(process.env.REACT_APP_GA_TRACKID || '');\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <AppBar position='static'>\r\n            <Toolbar>\r\n                <Link to=\"/\" style={{color: '#ffffff', textDecoration: 'none', fontWeight: 'bold'}}>!toohaK</Link>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n","import { useContext, useEffect } from 'react';\r\nimport { ProjectContext } from 'context/ProjectContext';\r\nimport { Project } from 'types';\r\n\r\nconst LOCALSTORAGE_KEY = 'projects';\r\n\r\n/**\r\n * Hook para la gestión del mapa\r\n */\r\nexport const useProjects = (): any => {\r\n    // Contexto del mapa\r\n    const { projects, setProjects: saveProjects } = useContext(ProjectContext);\r\n\r\n    useEffect(() => {\r\n        if (projects == null || projects.length === 0) {\r\n            const strProjects = localStorage.getItem(LOCALSTORAGE_KEY);\r\n            if (strProjects != null && strProjects !== '') {\r\n                saveProjects(JSON.parse(strProjects));\r\n            } else {\r\n                saveProjects([]);\r\n            }\r\n        }\r\n    });\r\n\r\n    const setProjects = (newProjects: Project[]) => {\r\n        localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(newProjects));\r\n        saveProjects(newProjects);\r\n    };\r\n\r\n    return { projects, setProjects };\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { ClassifyChallenge, ClassifyChallengeConfig, ClassifyChallengeGroup } from 'types';\r\nimport { ComponentMode } from 'enums';\r\nimport { ClassifyChallenger, ClassifyConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface ClassifyChallengeDesignerProps {\r\n    challenge: ClassifyChallenge,\r\n    onChallengeChange: (challenge: ClassifyChallenge) => void\r\n}\r\n\r\nexport const ClassifyChallengeDesigner: React.FC<ClassifyChallengeDesignerProps> = (\r\n    props: ClassifyChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustGroups = (groupCount: number): ClassifyChallengeGroup[] => {\r\n        let groups = [...challenge.groups];\r\n        if (groupCount > groups.length) {\r\n            const newGroups = Array.from(Array(groupCount - groups.length))\r\n                .map(() => ({ name: '', items: []}));\r\n            groups = [...groups, ...newGroups];\r\n        } else if (groupCount < groups.length) {\r\n            groups = groups.slice(0, groupCount);\r\n        }\r\n        return groups;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: ClassifyChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: ClassifyChallengeConfig) => {\r\n        const groups = readjustGroups(config.groupCount);\r\n        const updatedChallenge: ClassifyChallenge = {\r\n            ...challenge,\r\n            groups,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <ClassifyChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <ClassifyConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/correct.6415db46.wav\";","export default __webpack_public_path__ + \"static/media/incorrect.70fff5c7.wav\";","import React, { useEffect, useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport useSound from 'use-sound';\r\nimport correct from 'assets/sounds/correct.wav';\r\nimport incorrect from 'assets/sounds/incorrect.wav';\r\nimport { ChallengeOptions, ClassifyChallenge, ClassifyChallengeGroup } from 'types';\r\nimport { ComponentMode, Language } from 'enums';\r\nimport { ChallengeQuestion, Countdown, DragableItem, DropGroup } from 'components';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    classifyContainer: {\r\n        height: '80%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionsContainer: {\r\n        height: '20%',\r\n        border: 'solid 1px gray',\r\n        backgroundColor: '#ffffff'\r\n    },\r\n    groupsContainer: {\r\n        height: '80%'\r\n    },\r\n}));\r\n\r\ninterface dropState {\r\n    groupName: string,\r\n    items: string[]\r\n}\r\n\r\nconst initialClassifyState = (challenge: ClassifyChallenge): dropState[] => {\r\n    return challenge.groups.map((aGroup: ClassifyChallengeGroup) => (\r\n        {\r\n            groupName: aGroup.name,\r\n            items: []\r\n        }\r\n    ));\r\n};\r\n\r\nconst reorderItems = (groups: ClassifyChallengeGroup[], mode: ComponentMode): string[] => {\r\n    let list: string[] = groups.reduce((acc: string[], current: ClassifyChallengeGroup) => [...acc, ...current.items], []);\r\n    if (mode === ComponentMode.Play) {\r\n        list = list.sort(() => Math.random() - 0.5);\r\n    }\r\n    return list;\r\n};\r\n\r\ninterface ClassifyChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: ClassifyChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: ClassifyChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const ClassifyChallenger: React.FC<ClassifyChallengerProps> = (props: ClassifyChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [classifyState, setClassifyState] =useState<dropState[]>(initialClassifyState(challenge));\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [draggableItems, setDragabbleItems] = useState<string[]>(reorderItems(challenge.groups, mode));\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setDragabbleItems(reorderItems(challenge.groups, mode));\r\n    }, [challenge.groups]);\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleNameChange = (groupIdx: number, updatedName: string) => {\r\n        const updatedGroups = challenge.groups.map((aGroup: ClassifyChallengeGroup, idx: number) => {\r\n            return {\r\n                ...aGroup,\r\n                name: idx !== groupIdx ? aGroup.name : updatedName\r\n            };\r\n        });\r\n\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                groups: updatedGroups\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleItemsChange = (groupIdx: number, updatedItems: string[]) => {\r\n        const updatedGroups = challenge.groups.map((aGroup: ClassifyChallengeGroup, idx: number) => {\r\n            if (idx !== groupIdx) {\r\n                return { ...aGroup };\r\n            }\r\n            return {\r\n                ...aGroup,\r\n                items: [...updatedItems]\r\n            };\r\n        });\r\n\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                groups: updatedGroups\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const correct = challenge.groups.reduce(\r\n            (accGroups: boolean, currentGroup: ClassifyChallengeGroup) => {\r\n                const correctItems = currentGroup.items.reduce(\r\n                    (accItems: boolean, currentItem: string) => {\r\n                        const theGroup = classifyState.find((aGroup: dropState) => aGroup.groupName === currentGroup.name);\r\n                        if (theGroup != null) {\r\n                            return accItems && theGroup.items.indexOf(currentItem) >= 0;\r\n                        }\r\n                        return false;\r\n                    },\r\n                    true\r\n                );\r\n                return accGroups && correctItems;\r\n            },\r\n            true\r\n        );\r\n        showResult(correct);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const isDropped = (itemName: string) => classifyState.reduce(\r\n        (acc: boolean, current: dropState) => acc || current.items.indexOf(itemName) >= 0,\r\n        false\r\n    );\r\n\r\n    const completed = () => {\r\n        const optionCount = challenge.groups.reduce(\r\n            (acc: number, current: ClassifyChallengeGroup) => acc + current.items.length,\r\n            0\r\n        );\r\n        const dropCount = classifyState.reduce(\r\n            (acc: number, current: dropState) => acc + current.items.length,\r\n            0\r\n        );\r\n        return optionCount === dropCount;\r\n    };\r\n\r\n    const handleDrop = (groupName: string, droppedItem: any) => {\r\n        const newDroppedItems: dropState[] = classifyState.map((aGroup: { groupName: string, items: string[]}) => {\r\n            if (aGroup.groupName !== groupName) {\r\n                return {\r\n                    ...aGroup,\r\n                    items: aGroup.items.filter((anItem: string) => anItem !== droppedItem.name)\r\n                };\r\n            }\r\n\r\n            const idxItem = aGroup.items.findIndex((anItem: string) => anItem === droppedItem.name);\r\n            if (idxItem >= 0) {\r\n                return {...aGroup};\r\n            }\r\n            return {\r\n                ...aGroup,\r\n                items: [\r\n                    ...aGroup.items,\r\n                    droppedItem.name\r\n                ]\r\n            };\r\n        });\r\n        setClassifyState(newDroppedItems);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.classifyContainer}>\r\n                <Grid container justify='center' className={classes.fullHeight}>\r\n                    <Grid item xs={2} className={classes.fullHeight}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} className={classes.fullHeight}>\r\n                        <DndProvider backend={HTML5Backend}>\r\n                            <Grid container spacing={2} className={classes.fullHeight}>\r\n                                <Grid item xs={12} className={classes.optionsContainer}>\r\n                                    <Grid container spacing={2} justify=\"space-around\" alignItems=\"center\">\r\n                                        {\r\n                                            draggableItems.map((anItem: string, idx: number) => !isDropped(anItem) && (\r\n                                                !isDropped(anItem) && (\r\n                                                    <Grid item key={`gridItem_${idx}`}>\r\n                                                        <DragableItem\r\n                                                            name={anItem}\r\n                                                            key={`dragable_${idx}`}\r\n                                                            style={{fontSize: challenge.config.itemsFontSize}}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                )\r\n                                            ))\r\n                                        }\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} className={classes.groupsContainer}>\r\n                                    <Grid container justify=\"space-evenly\" spacing={2} style={{ height: '100%' }}>\r\n                                        {\r\n                                            challenge.groups.map((aGroup: ClassifyChallengeGroup, idx: number) => (\r\n                                                <Grid\r\n                                                    item\r\n                                                    xs={4}\r\n                                                    key={`group_${idx}`}\r\n                                                >\r\n                                                    <DropGroup\r\n                                                        mode={mode}\r\n                                                        title={aGroup.name}\r\n                                                        validItems={aGroup.items}\r\n                                                        showResults={highlightResults}\r\n                                                        fontSize={challenge.config.itemsFontSize}\r\n                                                        onTitleChange={(newName: string) => handleNameChange(idx, newName)}\r\n                                                        onItemsChange={(newItems: string[]) => handleItemsChange(idx, newItems)}\r\n                                                        droppedItems={\r\n                                                            classifyState\r\n                                                                .find((auxGroup: dropState) => auxGroup.groupName === aGroup.name)\r\n                                                                ?.items\r\n                                                        }\r\n                                                        onDrop={(droppedItem: unknown) => handleDrop(aGroup.name, droppedItem)}\r\n                                                    />\r\n                                                </Grid>\r\n                                            ))\r\n                                        }\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </DndProvider>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || !completed()}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;{options?.language === Language.En ? 'Check' : 'Corregir'}\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ChallengeConfig, ClassifyChallengeConfig } from 'types';\r\nimport { ChallengeConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface ClassifyConfiguratorProps {\r\n    config: ClassifyChallengeConfig,\r\n    onConfigChange?: (config: ClassifyChallengeConfig) => void\r\n}\r\n\r\nexport const ClassifyConfigurator: React.FC<ClassifyConfiguratorProps> = (props: ClassifyConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<ClassifyChallengeConfig>(config);\r\n\r\n    const inputItemsFontSize = useRef({} as HTMLInputElement);\r\n    const inputGroupCount = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    const handleBaseConfigChange = (newBaseConfig: ChallengeConfig) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            ...newBaseConfig\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <ChallengeConfigurator\r\n                    config={config}\r\n                    onConfigChange={handleBaseConfigChange}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemsFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemsFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('itemsFontSize', parseInt(inputItemsFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputGroupCount}\r\n                    type='number'\r\n                    label='Número de grupos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.groupCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('groupCount', parseInt(inputGroupCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, Chip, Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { useDrop } from 'react-dnd';\r\nimport { ComponentMode } from 'enums';\r\nimport { DragableItem } from 'components';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        width: '100%',\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    titleContainer: {\r\n        width: '100%',\r\n        padding: '5px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.primary.contrastText\r\n    },\r\n    itemsContainer: {\r\n        padding: '5px',\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\ninterface GroupState {\r\n    title: string,\r\n    validItems: string[],\r\n    droppedItems: string[]\r\n}\r\n\r\ninterface DropGroupProps {\r\n    mode: ComponentMode,\r\n    title: string,\r\n    validItems: string[],\r\n    showResults: boolean,\r\n    fontSize?: number,\r\n    onTitleChange?: (newTitle: string) => void,\r\n    onItemsChange?: (newTitle: string[]) => void,\r\n    droppedItems?: string[],\r\n    onDrop?: (item: unknown) => void\r\n}\r\n\r\nexport const DropGroup: React.FC<DropGroupProps> = (props: DropGroupProps) => {\r\n    const {\r\n        mode,\r\n        title,\r\n        validItems,\r\n        showResults,\r\n        fontSize,\r\n        onTitleChange,\r\n        onItemsChange,\r\n        droppedItems,\r\n        onDrop\r\n    } = props;\r\n\r\n    const handleDrop = (item: unknown) => {\r\n        if(onDrop) {\r\n            onDrop(item);\r\n        }\r\n    };\r\n\r\n    const [{ isOver, canDrop }, drop] = useDrop({\r\n        accept: 'dnd',\r\n        drop: handleDrop,\r\n        collect: (monitor: { isOver: () => boolean, canDrop: () => boolean }) => ({\r\n            isOver: monitor.isOver(),\r\n            canDrop: monitor.canDrop(),\r\n        })\r\n    });\r\n\r\n    const [groupState, setGroupState] = useState<GroupState>({\r\n        title: title || '',\r\n        validItems: validItems || [],\r\n        droppedItems: droppedItems || []\r\n    });\r\n\r\n    const inputTitle = useRef({} as HTMLInputElement);\r\n    const inputItem = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (droppedItems != null) {\r\n            setGroupState({\r\n                ...groupState,\r\n                droppedItems: [...droppedItems]\r\n            });\r\n        }\r\n    }, [droppedItems]);\r\n\r\n\r\n    const handleTitleChange = () => {\r\n        const newState = {\r\n            ...groupState,\r\n            title: inputTitle.current.value\r\n        };\r\n        setGroupState(newState);\r\n        if (onTitleChange) {\r\n            onTitleChange(inputTitle.current.value);\r\n        }\r\n    };\r\n\r\n    const handleValidItemKeyPress = (evt: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (evt.code === 'Enter' && inputItem.current.value !== '') {\r\n            addValidItem();\r\n        }\r\n    };\r\n\r\n    const addValidItem = () => {\r\n        const updatedItems = [...(groupState.validItems), inputItem.current.value];\r\n        const newState: GroupState = {\r\n            ...groupState,\r\n            validItems: updatedItems\r\n        };\r\n        setGroupState(newState);\r\n        if (onItemsChange) {\r\n            onItemsChange(updatedItems);\r\n        }\r\n        inputItem.current.value = '';\r\n    };\r\n\r\n    const handleRemoveValidItem = (itemIdx: number) => {\r\n        const updatedItems = groupState.validItems.filter((anItem: string, idx: number) => itemIdx !== idx);\r\n        const newState: GroupState = {\r\n            ...groupState,\r\n            validItems: updatedItems\r\n        };\r\n        setGroupState(newState);\r\n        if (onItemsChange) {\r\n            onItemsChange(updatedItems);\r\n        }\r\n    };\r\n\r\n    const getDragableItemStyle = (item: string) => showResults ? (\r\n        validItems.indexOf(item) >= 0 ? {\r\n            fontSize: `${fontSize}px`,\r\n            backgroundColor: '#4caf50'\r\n        } : {\r\n            fontSize: `${fontSize}px`,\r\n            backgroundColor: '#f44336'\r\n        }\r\n    ) : {fontSize: `${fontSize}px`};\r\n\r\n    return (\r\n        <Card\r\n            elevation={4}\r\n            className={classes.root}\r\n            style={{\r\n                backgroundColor: (isOver && canDrop) ? '#efefef' : '#ffffff'\r\n            }}\r\n        >\r\n            <Grid container direction=\"column\" className={`${classes.fullHeight} ${classes.fullWidth}`}>\r\n                <Grid item className={classes.titleContainer}>\r\n                    {\r\n                        mode === ComponentMode.Play ? (\r\n                            <Typography style={{ fontSize }}>\r\n                                { title}\r\n                            </Typography>\r\n                        ) : (\r\n                            <TextField\r\n                                inputRef={inputTitle}\r\n                                value={groupState.title}\r\n                                style={{\r\n                                    width: '100%'\r\n                                }}\r\n                                inputProps={\r\n                                    {\r\n                                        style: {\r\n                                            fontSize,\r\n                                            textAlign: 'center',\r\n                                            color: '#ffffff'\r\n\r\n                                        }\r\n                                    }\r\n                                }\r\n                                onInput={handleTitleChange}\r\n                            />\r\n                        )\r\n                    }\r\n                </Grid>\r\n                <Grid item xs>\r\n                    <Grid container direction=\"column\" alignItems=\"center\" className={classes.itemsContainer} spacing={2}>\r\n                        {\r\n                            mode === ComponentMode.Design\r\n                            && groupState.validItems.map((anItem: string, itemIdx: number) => (\r\n                                <Grid item key={`item_${itemIdx}`}>\r\n                                    <Chip\r\n                                        label={anItem}\r\n                                        color=\"secondary\"\r\n                                        size=\"medium\"\r\n                                        style={{ fontSize, color: '#ffffff' }}\r\n                                        onDelete={() => handleRemoveValidItem(itemIdx)}\r\n                                    />\r\n                                </Grid>\r\n                            ))\r\n                        }\r\n                        {\r\n                            mode === ComponentMode.Design && (\r\n                                <Grid item key=\"newItem\">\r\n                                    <TextField\r\n                                        inputRef={inputItem}\r\n                                        variant=\"outlined\"\r\n                                        InputProps={\r\n                                            {\r\n                                                style: {\r\n                                                    fontSize,\r\n                                                    color: '#000000'\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        label=\"Nuevo elemento\"\r\n                                        onKeyPress={handleValidItemKeyPress}\r\n                                    />\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                        {\r\n                            mode === ComponentMode.Play && (\r\n                                <Grid item key=\"dropItem\" xs className={`${classes.fullWidth} ${classes.fullHeight}`}>\r\n                                    <div\r\n                                        ref={drop}\r\n                                        className={`${classes.fullWidth} ${classes.fullHeight}`}\r\n                                    >\r\n                                        <Grid container direction=\"column\" alignItems=\"center\" spacing={1} className={classes.fullHeight}>\r\n                                            {\r\n                                                groupState.droppedItems.map((aDroppedItem: string) => (\r\n                                                    <Grid\r\n                                                        item\r\n                                                        key={`gridItem_${aDroppedItem}`}\r\n                                                    >\r\n                                                        <DragableItem\r\n                                                            key={aDroppedItem}\r\n                                                            name={aDroppedItem}\r\n                                                            style={getDragableItemStyle(aDroppedItem)}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                ))\r\n                                            }\r\n                                        </Grid>\r\n                                    </div>\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ChallengeConfig } from 'types';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface ChallengeConfiguratorProps {\r\n    config: ChallengeConfig,\r\n    onConfigChange?: (config: ChallengeConfig) => void\r\n}\r\n\r\nexport const ChallengeConfigurator: React.FC<ChallengeConfiguratorProps> = (props: ChallengeConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<ChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, makeStyles, TextField } from '@material-ui/core';\r\nimport { ComponentMode } from 'enums';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    inputContainer: {\r\n        width: '90%',\r\n        height: '80%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    input: {\r\n        width: '90%'\r\n    }\r\n});\r\n\r\ninterface ChallengeQuestionProps {\r\n    mode: ComponentMode,\r\n    question: string,\r\n    fontSize?: number,\r\n    onChange?: (newTitle: string) => void\r\n}\r\n\r\nexport const ChallengeQuestion: React.FC<ChallengeQuestionProps> = (props: ChallengeQuestionProps) => {\r\n    const { mode, question, fontSize, onChange } = props;\r\n\r\n    const [questionText, setQuestionText] = useState<string>(question);\r\n    const inputQuestion = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setQuestionText(question);\r\n    },[question]);\r\n\r\n    const handleInputChange = () => {\r\n        setQuestionText(inputQuestion.current.value);\r\n        if (onChange) {\r\n            onChange(inputQuestion.current.value);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Card className={classes.inputContainer}>\r\n                <TextField\r\n                    inputRef={inputQuestion}\r\n                    variant='standard'\r\n                    className={classes.input}\r\n                    inputProps = {{\r\n                        style: {\r\n                            textAlign: 'center',\r\n                            fontSize: `${fontSize != null ? fontSize : 28}px`,\r\n                            lineHeight: '32px'\r\n                        }\r\n                    }}\r\n                    InputProps={{\r\n                        readOnly: mode === ComponentMode.Play,\r\n                        disableUnderline: mode === ComponentMode.Play\r\n                    }}\r\n                    placeholder='Escribe aquí el enunciado o pregunta'\r\n                    multiline\r\n                    rowsMax={2}\r\n                    value={questionText}\r\n                    onInput={handleInputChange}\r\n                />\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Box, CircularProgress, Grid, Typography } from '@material-ui/core';\r\nimport { ComponentMode } from 'enums';\r\n\r\ninterface CountdownProps {\r\n    mode: ComponentMode,\r\n    time: number,\r\n    stopTimer?: boolean,\r\n    onTimeUp?: () => void\r\n}\r\n\r\n\r\nexport const Countdown: React.FC<CountdownProps> = (props: CountdownProps) => {\r\n    const { mode, time, stopTimer, onTimeUp } = props;\r\n\r\n    const [timeRemaining, setTimeRemaining] = useState<number>(time);\r\n    const [stop, setStop] = useState<boolean>(stopTimer || false);\r\n\r\n\r\n    useEffect(() => {\r\n        setTimeRemaining(time);\r\n    }, [time]);\r\n\r\n    useEffect(() => {\r\n        setStop(stopTimer || false);\r\n    }, [stopTimer]);\r\n\r\n    useEffect(() => {\r\n        let timeoutId: NodeJS.Timeout;\r\n        if (mode === ComponentMode.Play && !stop) {\r\n            timeoutId = setTimeout(() => {\r\n                if (timeRemaining === 0) {\r\n                    if (onTimeUp) {\r\n                        onTimeUp();\r\n                    }\r\n                } else {\r\n                    setTimeRemaining(timeRemaining - 1);\r\n                }\r\n            }, 1000);\r\n        }\r\n        return () => {\r\n            if (timeoutId != null) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n        };\r\n    }, [timeRemaining, onTimeUp]);\r\n\r\n    return (\r\n        <Grid container justify=\"center\" alignItems=\"center\" style={{height: '100%'}}>\r\n            <Grid item>\r\n                <Box position=\"relative\" display=\"inline-flex\">\r\n                    <CircularProgress\r\n                        variant=\"determinate\"\r\n                        color={timeRemaining > 5 ? 'primary': 'secondary'}\r\n                        size=\"75px\"\r\n                        value={Math.round((timeRemaining * 100.0) / (time * 1.0))} />\r\n                    <Box\r\n                        top={0}\r\n                        left={0}\r\n                        bottom={0}\r\n                        right={0}\r\n                        position=\"absolute\"\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                    >\r\n                        <Typography variant=\"h5\" component=\"div\" color=\"textSecondary\">{timeRemaining}</Typography>\r\n                    </Box>\r\n                </Box>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Button, Dialog, DialogActions, DialogContent, Grid, Typography } from '@material-ui/core';\r\n\r\ninterface DialogConfirmProps {\r\n    open: boolean,\r\n    text: string,\r\n    acceptButtonText?: string,\r\n    cancelButtonText?: string,\r\n    width?: 'xs' | 'sm' | 'md' | 'lg' | 'xl',\r\n    onConfirm: () => void,\r\n    onRefuse: () => void\r\n}\r\n\r\nexport const DialogConfirm: React.FC<DialogConfirmProps> = (props: DialogConfirmProps) => {\r\n    const {open, text, acceptButtonText, cancelButtonText, width, onConfirm, onRefuse} = props;\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth={ width ? width : 'sm' }\r\n        >\r\n            <DialogContent>\r\n                <Grid container justify='center'>\r\n                    <Grid item>\r\n                        <Typography variant='button'>{text}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </DialogContent>\r\n            <DialogActions >\r\n                <Button autoFocus onClick={onConfirm} color='primary' variant='contained'>\r\n                    { acceptButtonText ? acceptButtonText : 'Aceptar' }\r\n                </Button>\r\n                <Button onClick={onRefuse} color='primary'>\r\n                    { cancelButtonText ? cancelButtonText : 'Cancelar' }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Box, Button, Dialog, DialogTitle, Grid, makeStyles, TextField } from '@material-ui/core';\r\nimport { ChallengePicture } from 'types';\r\nimport { PictureType } from 'enums';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n}));\r\n\r\ninterface DialogPictureFormProps {\r\n    open: boolean,\r\n    picture: ChallengePicture,\r\n    onAccept: (picture: ChallengePicture) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const DialogPictureForm: React.FC<DialogPictureFormProps> = (props: DialogPictureFormProps) => {\r\n    const {open, picture, onAccept, onCancel} = props;\r\n\r\n    const [formState, setFormState] = useState<ChallengePicture>(picture);\r\n\r\n    const inputUrl = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (picture != null) {\r\n            setFormState(picture);\r\n        }\r\n    }, [picture]);\r\n\r\n    const handleUrlChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            data: inputUrl.current.value\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        const newPicture = {\r\n            type: PictureType.Url,\r\n            data: inputUrl.current.value\r\n        };\r\n\r\n        onAccept(newPicture);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth='sm'\r\n        >\r\n            <DialogTitle>Imagen</DialogTitle>\r\n            <Box className={classes.dialogContainer}>\r\n                <Grid\r\n                    container\r\n                    direction='column'\r\n                    spacing={2}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            inputRef={inputUrl}\r\n                            label='URL de la imagen'\r\n                            fullWidth\r\n                            value={formState.data}\r\n                            onInput={handleUrlChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container justify='flex-end' spacing={1}>\r\n                            <Grid item>\r\n                                <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { CSSProperties } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { useDrag } from 'react-dnd';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    item: {\r\n        borderRadius: '10em',\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.primary.contrastText,\r\n        padding: '0.5rem 1rem',\r\n        cursor: 'move',\r\n    }\r\n}));\r\n\r\ninterface DragableItemProps {\r\n    name: string,\r\n    style?: CSSProperties,\r\n    iconButton?: React.ReactNode\r\n}\r\n\r\nexport const DragableItem: React.FC<DragableItemProps> = (props: DragableItemProps) => {\r\n    const  { name, style, iconButton } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [{ opacity }, drag] = useDrag(\r\n        () => ({\r\n            type: 'dnd',\r\n            item: { name },\r\n            collect: (monitor) => ({\r\n                opacity: monitor.isDragging() ? 0.4 : 1,\r\n            }),\r\n        }),\r\n        [name],\r\n    );\r\n\r\n    return (\r\n        <div\r\n            ref={drag}\r\n            className={classes.item}\r\n            style={{\r\n                opacity,\r\n                ...style\r\n            }}\r\n        >\r\n            {name}\r\n            {\r\n                iconButton\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import React, { Fragment, useRef } from 'react';\r\nimport { Button, makeStyles } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { colors } from 'theme';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    uploadInput: {\r\n        display: 'none'\r\n    }\r\n}));\r\n\r\ninterface HTMLInputEvent extends Event {\r\n    target: HTMLInputElement & EventTarget\r\n}\r\n\r\ninterface JsonLoaderProps {\r\n    label: string,\r\n    onDataLoaded: (data: unknown) => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const JsonLoader: React.FC<JsonLoaderProps> = (props: JsonLoaderProps) => {\r\n    const { label, onDataLoaded, onError } = props;\r\n\r\n    const inputImport = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    const id = uuidv4();\r\n\r\n    const handleInput = (event: unknown) => {\r\n        try {\r\n            const evt = event as HTMLInputEvent;\r\n            if (evt?.target?.files != null) {\r\n                const file = evt.target.files[0];\r\n                const reader = new FileReader();\r\n                reader.readAsText(file);\r\n                reader.onloadend = (e) => {\r\n                    try {\r\n                        const newProject = JSON.parse(reader.result as string);\r\n                        onDataLoaded(newProject);\r\n                    } catch (err) {\r\n                        if (onError) {\r\n                            onError();\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n        } catch (err) {\r\n            if (onError) {\r\n                onError();\r\n            }\r\n        }\r\n        inputImport.current.value = '';\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <input\r\n                ref={inputImport}\r\n                accept='text'\r\n                className={classes.uploadInput}\r\n                id={id}\r\n                multiple\r\n                type='file'\r\n                onInput={handleInput}\r\n            />\r\n            <Button style={{ color: colors.primary.dark }}>\r\n                <label htmlFor={id}>\r\n                    {label}\r\n                </label>\r\n            </Button>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Fab, Grid, GridSize, Icon, makeStyles } from '@material-ui/core';\r\nimport { ChallengePicture } from 'types';\r\nimport { ComponentMode, PictureType } from 'enums';\r\nimport { DialogPictureForm } from 'components';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '99%',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    pic: {\r\n        maxWidth: '100%',\r\n        maxHeight: '100%'\r\n    }\r\n}));\r\n\r\ninterface PictureDialogState {\r\n    selectedPicture: ChallengePicture,\r\n    selectedPictureIdx: number,\r\n    openDialog: boolean\r\n}\r\n\r\ninterface ItemGridSize {\r\n    height: string,\r\n    width: GridSize\r\n}\r\n\r\ninterface PictureGridProps {\r\n    mode: ComponentMode,\r\n    pictures: ChallengePicture[],\r\n    onPicturesChange?: (newPictures: ChallengePicture[]) => void\r\n}\r\n\r\nexport const PictureGrid: React.FC<PictureGridProps> = (props: PictureGridProps) => {\r\n    const { mode, pictures, onPicturesChange } = props;\r\n\r\n    const [pictureDialogState, setPictureDialogState] = useState<PictureDialogState>();\r\n\r\n    const classes = useStyles();\r\n\r\n    const [pictureItemSize, setPictureItemSize] = useState<ItemGridSize>({ height: '100%', width: 8 });\r\n\r\n    useEffect(() => {\r\n        switch (pictures.length) {\r\n            case 9:\r\n            case 8:\r\n            case 7:\r\n                setPictureItemSize({ height: '33.3%', width: 4 });\r\n                break;\r\n            case 6:\r\n            case 5:\r\n                setPictureItemSize({ height: '50%', width: 4 });\r\n                break;\r\n            case 4:\r\n            case 3:\r\n                setPictureItemSize({ height: '50%', width: 6 });\r\n                break;\r\n            case 2:\r\n                setPictureItemSize({ height: '100%', width: 6 });\r\n                break;\r\n            default:\r\n                setPictureItemSize({ height: '100%', width: 12 });\r\n                break;\r\n        }\r\n    }, [pictures]);\r\n\r\n    const handleAddPictureClick = (picture: ChallengePicture, pictureIdx: number) => {\r\n        setPictureDialogState({\r\n            openDialog: true,\r\n            selectedPicture: picture,\r\n            selectedPictureIdx: pictureIdx\r\n        });\r\n    };\r\n\r\n    const handleAcceptPicture = (picture: ChallengePicture, pictureIdx: number) => {\r\n        if (onPicturesChange) {\r\n            onPicturesChange(\r\n                pictures.map((aPicture: ChallengePicture, idx: number) => idx !== pictureIdx ? {...aPicture} : {...picture})\r\n            );\r\n        }\r\n        setPictureDialogState({\r\n            openDialog: false,\r\n            selectedPicture: {\r\n                type: PictureType.None,\r\n                data: ''\r\n            },\r\n            selectedPictureIdx: -1\r\n        });\r\n    };\r\n\r\n    const handleCancelPicture = () => {\r\n        setPictureDialogState({\r\n            openDialog: false,\r\n            selectedPicture: {\r\n                type: PictureType.None,\r\n                data: ''\r\n            },\r\n            selectedPictureIdx: -1\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            {\r\n                pictureDialogState && (\r\n                    <DialogPictureForm\r\n                        open={pictureDialogState.openDialog}\r\n                        picture={pictureDialogState.selectedPicture}\r\n                        onAccept={(newPic: ChallengePicture) => handleAcceptPicture(\r\n                            newPic, pictureDialogState.selectedPictureIdx\r\n                        )}\r\n                        onCancel={handleCancelPicture}\r\n                    />\r\n                )\r\n            }\r\n            <Grid container className={classes.root}>\r\n                {\r\n                    pictures.map((aPicture: ChallengePicture, pictureIdx: number) => (\r\n                        <Grid item\r\n                            key={`pic${pictureIdx.toString()}`}\r\n                            xs={pictureItemSize.width}\r\n                            style={{ height: pictureItemSize.height, border: mode === ComponentMode.Design ? 'solid 1px' : '0px' }}\r\n                        >\r\n                            <Grid container justify=\"center\" alignItems=\"center\" className={classes.fullHeight}>\r\n                                {\r\n                                    aPicture.type !== PictureType.None && (\r\n                                        <img className={classes.pic} src={aPicture.data} alt=\"\"/>\r\n                                    )\r\n                                }\r\n                                {\r\n                                    mode === ComponentMode.Design && (\r\n                                        <Fab\r\n                                            size=\"medium\"\r\n                                            color=\"primary\"\r\n                                            style={{position: 'absolute', color: '#ffffff'}}\r\n                                            onClick={() => { handleAddPictureClick(aPicture, pictureIdx); }}\r\n                                        >\r\n                                            <Icon>add_a_photo</Icon>\r\n                                        </Fab>\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                        </Grid>\r\n                    ))\r\n                }\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n    Card,\r\n    CardActionArea,\r\n    Checkbox,\r\n    Grid,\r\n    Icon,\r\n    InputAdornment,\r\n    makeStyles,\r\n    Radio,\r\n    TextField\r\n} from '@material-ui/core';\r\nimport { ComponentMode } from 'enums';\r\nimport { colors } from 'theme';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    option: {\r\n        width: '100%',\r\n        height: '100%'\r\n    },\r\n    optionActionArea: {\r\n        height: '100%',\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionInput: {\r\n        width: '90%',\r\n        color: '#ffffff'\r\n    },\r\n    optionInnerInput: {\r\n        cursor: 'pointer'\r\n    },\r\n    optionIcon: {\r\n        color: '#ffffff'\r\n    },\r\n    selector: {\r\n        color: '#ffffff',\r\n        '&$checked': {\r\n            color: '#ffffff'\r\n        }\r\n    },\r\n    checked: {}\r\n}));\r\n\r\ninterface OptionState {\r\n    text: string,\r\n    valid: boolean\r\n}\r\n\r\ninterface SelectableOptionProps {\r\n    mode: ComponentMode,\r\n    text: string,\r\n    icon: string,\r\n    valid?: boolean,\r\n    selected?: boolean,\r\n    color?: string,\r\n    fontSize?: number,\r\n    multiselect?: boolean,\r\n    showResults?: boolean,\r\n    onClick?: () => void,\r\n    onTextChange?: (newText: string) => void,\r\n    onValidChange?(newValid: boolean): void\r\n}\r\n\r\nexport const SelectableOption: React.FC<SelectableOptionProps> = (props: SelectableOptionProps) => {\r\n    const {\r\n        mode,\r\n        text,\r\n        icon,\r\n        valid,\r\n        selected,\r\n        color,\r\n        fontSize,\r\n        multiselect,\r\n        showResults,\r\n        onClick,\r\n        onTextChange,\r\n        onValidChange\r\n    } = props;\r\n\r\n    const [optionState, setOptionState] = useState<OptionState>({ text: text || '', valid: valid || false });\r\n    const inputTextOption = useRef({} as HTMLInputElement);\r\n    const radioOption = useRef({} as HTMLInputElement);\r\n    const checkOption = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setOptionState({ text: text || '', valid: valid || false });\r\n    }, [text, valid]);\r\n\r\n    const handleOptionTextChange = () => {\r\n        const newState = {\r\n            ...optionState,\r\n            text: inputTextOption.current.value\r\n        };\r\n        setOptionState(newState);\r\n        if (onTextChange) {\r\n            onTextChange(inputTextOption.current.value);\r\n        }\r\n    };\r\n\r\n    const handleRadioChange = () => {\r\n        const newState = {\r\n            ...optionState,\r\n            selected: radioOption.current.checked\r\n        };\r\n        setOptionState(newState);\r\n        if (onValidChange) {\r\n            onValidChange(radioOption.current.checked);\r\n        }\r\n    };\r\n\r\n    const handleCheckboxChange = () => {\r\n        const newState = {\r\n            ...optionState,\r\n            selected: checkOption.current.checked\r\n        };\r\n        setOptionState(newState);\r\n        if (onValidChange) {\r\n            onValidChange(checkOption.current.checked);\r\n        }\r\n    };\r\n\r\n    const handlerOptionClick = () => {\r\n        if (onClick) {\r\n            onClick();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            className={classes.option}\r\n            style={{\r\n                backgroundColor: color || colors.primary.main,\r\n                borderStyle: 'solid',\r\n                borderWidth: (showResults && valid) || selected ? '3px' : '0px',\r\n                borderColor: showResults ? (\r\n                    valid ? '#00ff00' : '#ff0000'\r\n                ) : '#323232'\r\n            }}>\r\n            {\r\n                mode === ComponentMode.Design ? (\r\n                    <div className={classes.optionActionArea}>\r\n                        <TextField\r\n                            inputRef={inputTextOption}\r\n                            value={optionState.text}\r\n                            placeholder=\"Escribe aquí una respuesta\"\r\n                            className={classes.optionInput}\r\n                            InputProps={{\r\n                                style: {\r\n                                    color: '#ffffff',\r\n                                    fontSize: `${fontSize || 22}px`,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <Icon className={classes.optionIcon}>{icon}</Icon>\r\n                                    </InputAdornment>\r\n                                ),\r\n                                endAdornment: (\r\n                                    multiselect ? (\r\n                                        <Checkbox\r\n                                            inputRef={checkOption}\r\n                                            checked={optionState.valid}\r\n                                            classes={{ root: classes.selector, checked: classes.checked }}\r\n                                            onChange={handleCheckboxChange}\r\n                                        />\r\n                                    ) : (\r\n                                        <Radio\r\n                                            inputRef={radioOption}\r\n                                            checked={optionState.valid}\r\n                                            classes={{ root: classes.selector, checked: classes.checked }}\r\n                                            onChange={handleRadioChange}\r\n                                        />\r\n                                    )\r\n                                ),\r\n                            }}\r\n                            onInput={handleOptionTextChange}\r\n                            onClick={(ev) => { ev.preventDefault(); }}\r\n                        />\r\n                    </div>\r\n                ): (\r\n                    <CardActionArea\r\n                        className={classes.optionActionArea}\r\n                        onClick={handlerOptionClick}\r\n                    >\r\n                        <Grid container className={classes.optionInput} spacing={2} alignItems=\"center\">\r\n                            <Grid item>\r\n                                <Icon className={classes.optionIcon}>{icon}</Icon>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <label style={{color: '#ffffff', fontSize: `${fontSize || 22}px`, justifySelf: 'left'}}>\r\n                                    {optionState.text}\r\n                                </label>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardActionArea>\r\n                )\r\n            }\r\n        </Card>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { ClassifyChallengeDesigner, FillGapsChallengeDesigner, FillTableChallengeDesigner, MatchChallengeDesigner, SelectAnswerChallengeDesigner, SortChallengeDesigner, TrueOrFalseChallengeDesigner } from 'components';\r\nimport { Challenge, ClassifyChallenge, FillGapsChallenge, FillTableChallenge, MatchChallenge, SelectAnswerChallenge, SortChallenge, TrueOrFalseChallenge } from 'types';\r\nimport { ChallengeType } from 'enums';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\ninterface ChallengeDesignerProps {\r\n    challenge: Challenge,\r\n    onChallengeChange: (challenge: Challenge) => void\r\n}\r\n\r\nexport const ChallengeDesigner: React.FC<ChallengeDesignerProps> = (props: ChallengeDesignerProps) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChallengeChange = (updatedChallenge: Challenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight}>\r\n            <Grid item xs={12}>\r\n                {\r\n                    challenge?.type === ChallengeType.SelectAnswer\r\n                    && (\r\n                        <SelectAnswerChallengeDesigner\r\n                            challenge={challenge as SelectAnswerChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.TrueOrFalse\r\n                    && (\r\n                        <TrueOrFalseChallengeDesigner\r\n                            challenge={challenge as TrueOrFalseChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.FillGaps\r\n                    && (\r\n                        <FillGapsChallengeDesigner\r\n                            challenge={challenge as FillGapsChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Match\r\n                    && (\r\n                        <MatchChallengeDesigner\r\n                            challenge={challenge as MatchChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Sort\r\n                    && (\r\n                        <SortChallengeDesigner\r\n                            challenge={challenge as SortChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Classify\r\n                    && (\r\n                        <ClassifyChallengeDesigner\r\n                            challenge={challenge as ClassifyChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.FillTable\r\n                    && (\r\n                        <FillTableChallengeDesigner\r\n                            challenge={challenge as FillTableChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { Challenge } from 'types';\r\nimport { ChallengeThumbnail } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        overflowY: 'auto'\r\n    },\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface ChallengeSelectorProps {\r\n    challenges: Challenge[],\r\n    compactList?: boolean,\r\n    selected?: Challenge,\r\n    onChallengeReorder?: (orderedChallenges: Challenge[]) => void,\r\n    onSelect?: (challenge: Challenge) => void,\r\n    onDelete?: (challenge: Challenge) => void\r\n}\r\n\r\nexport const ChallengeSelector: React.FC<ChallengeSelectorProps> = (props: ChallengeSelectorProps) => {\r\n    const { challenges, compactList, selected, onChallengeReorder, onSelect, onDelete } = props;\r\n\r\n    const [localChallenges, setLocalChallenges] = useState<Challenge[]>(challenges);\r\n    const [selectedChallenge, setSelectedChallenge] = useState<Challenge | undefined>(selected || undefined);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        console.log(challenges);\r\n        setLocalChallenges(challenges);\r\n    }, [challenges]);\r\n\r\n    useEffect(() => {\r\n        setSelectedChallenge(selected);\r\n    }, [selected]);\r\n\r\n    const handleThumbnailClick = (challenge: Challenge) => {\r\n        setSelectedChallenge(challenge);\r\n        if (onSelect) {\r\n            onSelect(challenge);\r\n        }\r\n    };\r\n\r\n    const handleThumbnailDelete = (challenge: Challenge) => {\r\n        if (onDelete) {\r\n            onDelete(challenge);\r\n        }\r\n    };\r\n\r\n    const handleChallengeMove = (dragIndex: number, hoverIndex: number) => {\r\n        if (onChallengeReorder) {\r\n            const filteredCards = challenges.filter(\r\n                (aChallenge: Challenge, idx: number) => idx !== dragIndex\r\n            );\r\n            const newChallenges = [\r\n                ...filteredCards.slice(0, hoverIndex),\r\n                challenges[dragIndex],\r\n                ...filteredCards.slice(hoverIndex)\r\n            ];\r\n            setLocalChallenges(newChallenges);\r\n            onChallengeReorder(newChallenges);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' alignItems='center' spacing={2} className={classes.root}>\r\n            {\r\n                localChallenges.map((aChallenge: Challenge, idx: number) => (\r\n                    <ChallengeThumbnail\r\n                        key={aChallenge.id}\r\n                        challenge={aChallenge}\r\n                        index={idx}\r\n                        selected={selectedChallenge?.id === aChallenge.id}\r\n                        compact={compactList}\r\n                        onChallengeMove={handleChallengeMove}\r\n                        onClick={handleThumbnailClick}\r\n                        onDelete={handleThumbnailDelete}\r\n                    />\r\n                ))\r\n            }\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Icon } from '@material-ui/core';\r\nimport { CSSProperties } from '@material-ui/styles';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { ChallengeType, FillMethod, Language, PictureType } from 'enums';\r\nimport { Challenge, ChallengeConfig, ClassifyChallenge, ClassifyChallengeConfig, FillGapsChallenge, FillGapsChallengeConfig, FillGapsChallengeSentence, FillTableChallenge, FillTableChallengeConfig, MatchChallenge, MatchChallengeConfig, SelectAnswerChallenge, SelectAnswerChallengeConfig, SortChallenge, SortChallengeConfig, TrueOrFalseChallenge, TrueOrFalseChallengeConfig } from 'types';\r\n\r\nexport const getChallengeTypeDescription = (type: ChallengeType, language: Language = Language.Es): string => {\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer:\r\n            return language === Language.Es ? \"Selecciona la respuesta correcta\" : \"Choose the correct answer\";\r\n        case ChallengeType.TrueOrFalse:\r\n            return language === Language.Es ? \"Verdadero o falso\" : \"True or false\";\r\n        case ChallengeType.Match:\r\n            return language === Language.Es ? \"Une las opciones\" : \"Match the options\";\r\n        case ChallengeType.FillGaps:\r\n            return language === Language.Es ? \"Rellena los huecos\" : \"Fill in the gaps\";\r\n        case ChallengeType.Sort:\r\n            return language === Language.Es ? \"Ordena los elementos\" : \"Order the elements\";\r\n        case ChallengeType.Classify:\r\n            return language === Language.Es ? \"Clasifica los elementos\" : \"Classify the elements\";\r\n        case ChallengeType.FillTable:\r\n            return language === Language.Es ? \"Completa la tabla\" : \"Complete the table\";\r\n        case ChallengeType.TheOddOne:\r\n            return language === Language.Es ? \"Busca el que sobra\" : \"Find the odd one\";\r\n        case ChallengeType.Crossword:\r\n            return language === Language.Es ? \"Crucigrama\" : \"Crossword\";\r\n        default:\r\n            return language === Language.Es ? \"Sin definir\" : \"Undefined\";\r\n    }\r\n};\r\n\r\nexport const getChallengeTypeIcon = (type: ChallengeType, size: 'large' | 'default' | 'small' = 'default', style: CSSProperties = {}): JSX.Element => {\r\n    return (\r\n        <Icon fontSize={size} style={style}>\r\n            {\r\n                type === ChallengeType.SelectAnswer ? 'widgets'\r\n                    : type === ChallengeType.TrueOrFalse ? 'check'\r\n                        : type === ChallengeType.FillGaps ? 'space_bar'\r\n                            : type === ChallengeType.Match ? 'shuffle'\r\n                                : type === ChallengeType.Sort ? 'swap_vert'\r\n                                    : type === ChallengeType.Classify ? 'category'\r\n                                        : type === ChallengeType.FillTable ? 'grid_on'\r\n                                            : type === ChallengeType.TheOddOne ? 'touch_app'\r\n                                                : type === ChallengeType.Crossword ? 'font_download' : ''\r\n            }\r\n        </Icon>\r\n    );\r\n};\r\n\r\nconst getDefaultChallengeConfig = (type: ChallengeType): ChallengeConfig => {\r\n    const defaultChallengeConfig: ChallengeConfig = {\r\n        timeLimit: 30,\r\n        questionFontSize: 28\r\n    };\r\n\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                answerFontSize: 22,\r\n                pictureCount: 1,\r\n                pictureLabel: false,\r\n                multiselect: false\r\n            } as SelectAnswerChallengeConfig;\r\n        case ChallengeType.TrueOrFalse:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                pictureCount: 1,\r\n                pictureLabel: false\r\n            } as TrueOrFalseChallengeConfig;\r\n        case ChallengeType.Match:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                answerFontSize: 22,\r\n                pairsCount: 4\r\n            } as MatchChallengeConfig;\r\n        case ChallengeType.FillGaps:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                textFontSize: 18,\r\n                fillMethod: FillMethod.Writing\r\n            } as FillGapsChallengeConfig;\r\n        case ChallengeType.Sort:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                itemsFontSize: 18,\r\n                itemCount: 5\r\n            } as SortChallengeConfig;\r\n        case ChallengeType.Classify:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                itemsFontSize: 18,\r\n                groupCount: 3\r\n            } as ClassifyChallengeConfig;\r\n        case ChallengeType.FillTable:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                itemsFontSize: 18,\r\n                rowCount: 3,\r\n                columnCount: 3,\r\n                firstRowFixed: false,\r\n                firstColumnFixed: false\r\n            } as FillTableChallengeConfig;\r\n        default:\r\n            return defaultChallengeConfig;\r\n    }\r\n};\r\n\r\nexport const getDefaultChallenge = (type: ChallengeType): Challenge => {\r\n    const defaultChallenge: Challenge = {\r\n        id: uuidv4(),\r\n        type,\r\n        question: '',\r\n        config: getDefaultChallengeConfig(type)\r\n    };\r\n\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer:\r\n            return {\r\n                ...defaultChallenge,\r\n                pictures: [{\r\n                    type: PictureType.None,\r\n                    data: ''\r\n                }],\r\n                answers: [\r\n                    { text: '', valid: false },\r\n                    { text: '', valid: false },\r\n                    { text: '', valid: false },\r\n                    { text: '', valid: false }\r\n                ]\r\n            } as SelectAnswerChallenge;\r\n        case ChallengeType.TrueOrFalse:\r\n            return {\r\n                ...defaultChallenge,\r\n                pictures: [{\r\n                    type: PictureType.None,\r\n                    data: ''\r\n                }],\r\n                answer: true\r\n            } as TrueOrFalseChallenge;\r\n        case ChallengeType.Match:\r\n            return {\r\n                ...defaultChallenge,\r\n                pairs: [\r\n                    { source: '', destination: '' },\r\n                    { source: '', destination: '' },\r\n                    { source: '', destination: '' },\r\n                    { source: '', destination: '' }\r\n                ]\r\n            } as MatchChallenge;\r\n        case ChallengeType.FillGaps:\r\n            return {\r\n                ...defaultChallenge,\r\n                sentences: [] as FillGapsChallengeSentence[]\r\n            } as FillGapsChallenge;\r\n        case ChallengeType.Sort:\r\n            return {\r\n                ...defaultChallenge,\r\n                items: ['', '', '', '', '']\r\n            } as SortChallenge;\r\n        case ChallengeType.Classify:\r\n            return {\r\n                ...defaultChallenge,\r\n                groups: [\r\n                    { name: '', items: ([] as string[]) },\r\n                    { name: '', items: ([] as string[]) },\r\n                    { name: '', items: ([] as string[]) }\r\n                ]\r\n            } as ClassifyChallenge;\r\n        case ChallengeType.FillTable:\r\n            return {\r\n                ...defaultChallenge,\r\n                items: [\r\n                    [{ text: '', hidden: false },{ text: '', hidden: false },{ text: '', hidden: false }],\r\n                    [{ text: '', hidden: false },{ text: '', hidden: false },{ text: '', hidden: false }],\r\n                    [{ text: '', hidden: false },{ text: '', hidden: false },{ text: '', hidden: false }]\r\n                ]\r\n            } as FillTableChallenge;\r\n        default:\r\n            return defaultChallenge;\r\n    }\r\n};\r\n","export const splitSentence = (text: string): string[] => {\r\n    return text\r\n        .replace(/\\./g, ' .')\r\n        .replace(/,/g, ' ,')\r\n        .replace(/;/g, ' ;')\r\n        .replace(/:/g, ' :')\r\n        .split( ' ');\r\n};\r\n\r\nexport const joinSentence = (textParts: string[]): string => {\r\n    return textParts\r\n        .join(' ')\r\n        .replace(/ \\./g, '.')\r\n        .replace(/ ,/g, ',')\r\n        .replace(/ ;/g, ';')\r\n        .replace(/ :/g, ':');\r\n};\r\n\r\nexport const createQueryString = (params: Record<string, unknown>): string => (\r\n    Object.keys(params).reduce(\r\n        (acc: string, current: string, idx: number) => (\r\n            `${acc}${idx > 0 ? '&' : ''}${current}=${params[current]}`\r\n        ),\r\n        '?'\r\n    )\r\n);\r\n\r\nexport const parseQueryString = (qs: string): any => {\r\n    const qsAux = qs[0] === '?' ? qs.slice(1) : qs;\r\n    const result: any = {};\r\n    qsAux.split(/&/g).forEach((aParam: string) => {\r\n        const paramParts = aParam.split('=');\r\n        result[paramParts[0]] = (\r\n            paramParts[1] === 'true' || paramParts[1] === 'false' ? paramParts[1] === 'true' : paramParts[1]\r\n        );\r\n    });\r\n    return result;\r\n};\r\n\r\nexport const checkEqual = (\r\n    stringA: string,\r\n    stringB: string,\r\n    checkCapitalLetters: boolean,\r\n    checkAccentMarks: boolean\r\n): boolean => {\r\n    let strA = stringA;\r\n    let strB = stringB;\r\n\r\n    if (!checkCapitalLetters) {\r\n        strA = strA.toLowerCase();\r\n        strB = strB.toLowerCase();\r\n    }\r\n\r\n    if (!checkAccentMarks) {\r\n        strA = strA\r\n            .replace(/Á/g, 'A')\r\n            .replace(/É/g, 'E')\r\n            .replace(/Í/g, 'I')\r\n            .replace(/Ó/g, 'O')\r\n            .replace(/Ú/g, 'U')\r\n            .replace(/á/g, 'a')\r\n            .replace(/é/g, 'e')\r\n            .replace(/í/g, 'i')\r\n            .replace(/ó/g, 'o')\r\n            .replace(/ú/g, 'u');\r\n        strB = strB\r\n            .replace(/Á/g, 'A')\r\n            .replace(/É/g, 'E')\r\n            .replace(/Í/g, 'I')\r\n            .replace(/Ó/g, 'O')\r\n            .replace(/Ú/g, 'U')\r\n            .replace(/á/g, 'a')\r\n            .replace(/é/g, 'e')\r\n            .replace(/í/g, 'i')\r\n            .replace(/ó/g, 'o')\r\n            .replace(/ú/g, 'u');\r\n    }\r\n\r\n    return strA === strB;\r\n};\r\n","import { ChallengeType, PictureType } from \"enums\";\r\nimport { Challenge, ChallengeConfig, ChallengePicture, ClassifyChallenge, ClassifyChallengeGroup, FillGapsChallenge, FillGapsChallengeSentence, FillTableChallenge, FillTableChallengeCell, MatchChallenge, MatchChallengePair, Project, SelectAnswerChallenge, SelectAnswerChallengeAnswer, SelectAnswerChallengeConfig, SortChallenge, Test } from \"types\";\r\n\r\nexport interface Validation {\r\n    valid: boolean,\r\n    errorMessage: string[]\r\n}\r\n\r\nexport const isValidConfig = (type: ChallengeType, config: ChallengeConfig): Validation => {\r\n    const errorMessage: string[] = [];\r\n\r\n    if (config?.timeLimit == null || config?.timeLimit <= 0) { errorMessage.push('El tiempo límite debe ser mayor de 0') ;}\r\n    if (config?.questionFontSize == null || config?.questionFontSize <= 0) { errorMessage.push('El tamaño de fuente del titulo debe ser mayor de 0'); }\r\n\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer: {\r\n            const customConfig = config as SelectAnswerChallengeConfig;\r\n            if (customConfig?.pictureCount == null || customConfig?.pictureCount <= 0) { errorMessage.push('El número de imágenes debe ser mayor de 0'); }\r\n            if (customConfig?.pictureLabel == null) { errorMessage.push('Error en indicador de etiquetado de imágenes'); }\r\n            if (customConfig?.multiselect == null) { errorMessage.push('Error en indicador de seleccion múltiple'); }\r\n            break;\r\n        }\r\n        case ChallengeType.TrueOrFalse:\r\n            break;\r\n        case ChallengeType.FillGaps:\r\n            break;\r\n        case ChallengeType.Match:\r\n            break;\r\n        case ChallengeType.Sort:\r\n            break;\r\n        case ChallengeType.Classify:\r\n            break;\r\n        case ChallengeType.FillTable:\r\n            break;\r\n        case ChallengeType.Crossword:\r\n            break;\r\n    }\r\n    return {\r\n        valid: errorMessage.length === 0,\r\n        errorMessage\r\n    };\r\n};\r\n\r\nexport const isValidChallenge = (challenge: Challenge): Validation => {\r\n    let errorMessage: string[] = [];\r\n\r\n    if (challenge?.id == null || challenge?.type == null) { errorMessage.push('Datos internos incorrectos'); }\r\n    const configValidation = isValidConfig(challenge?.type, challenge?.config);\r\n    if (!configValidation.valid) { errorMessage = [...errorMessage, ...configValidation.errorMessage]; }\r\n    if (challenge?.question == null || challenge?.question === '') { errorMessage.push('Se debe rellenar el enunciado / pregunta'); }\r\n\r\n    switch (challenge.type) {\r\n        case ChallengeType.SelectAnswer: {\r\n            const customChallenge = challenge as SelectAnswerChallenge;\r\n            if (customChallenge.config.pictureCount > 1\r\n                && customChallenge.pictures.some((aPicture: ChallengePicture) => aPicture.type === PictureType.None)\r\n            ) {\r\n                errorMessage.push('Hay imágenes vacías');\r\n            }\r\n            if(!customChallenge.answers.reduce(\r\n                (acc: boolean, current: SelectAnswerChallengeAnswer) => acc && current.text != null && current.text !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay alguna respuesta vacía');\r\n            }\r\n            if(!customChallenge.answers.some((anAnswer: SelectAnswerChallengeAnswer) => anAnswer.valid)) {\r\n                errorMessage.push('Debe marcarse al menos una respuesta como válida');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.TrueOrFalse:\r\n            break;\r\n        case ChallengeType.FillGaps:{\r\n            const customChallenge = challenge as FillGapsChallenge;\r\n            if(!customChallenge.sentences.reduce(\r\n                (acc: boolean, current: FillGapsChallengeSentence) => acc && current != null && current.text !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay elementos sin texto');\r\n            }\r\n            if (customChallenge.sentences.length === 0) {\r\n                errorMessage.push('Debe haber al menos una frase');\r\n            }\r\n            if(!customChallenge.sentences.reduce(\r\n                (acc: boolean, current: FillGapsChallengeSentence) => (\r\n                    acc\r\n                    && current != null\r\n                    && current.hiddenExpressions.length > 0\r\n                ),\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay frases sin palabras ocultas');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.Match: {\r\n            const customChallenge = challenge as MatchChallenge;\r\n            if(!customChallenge.pairs.reduce(\r\n                (acc: boolean, current: MatchChallengePair) => (\r\n                    acc\r\n                    && current.source != null && current.source !== ''\r\n                    && current.destination != null && current.destination !== ''\r\n                ),\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay elementos sin texto');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.Sort: {\r\n            const customChallenge = challenge as SortChallenge;\r\n            if(!customChallenge.items.reduce(\r\n                (acc: boolean, current: string) => acc && current != null && current !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay elementos sin texto');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.Classify: {\r\n            const customChallenge = challenge as ClassifyChallenge;\r\n            if(!customChallenge.groups.reduce(\r\n                (acc: boolean, current: ClassifyChallengeGroup) => acc && current.name != null && current.name !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Todos los grupos deben tener un título');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.FillTable: {\r\n            const customChallenge = challenge as FillTableChallenge;\r\n            if(!customChallenge.items.reduce(\r\n                (accRow: boolean, currentRow: FillTableChallengeCell[], rowIdx: number) => (\r\n                    accRow\r\n                    && currentRow.reduce(\r\n                        (accColumn: boolean, currentColumn: FillTableChallengeCell, columnIdx: number) => (\r\n                            accColumn\r\n                            && (\r\n                                (\r\n                                    customChallenge.config.firstRowFixed\r\n                                    && rowIdx === 0\r\n                                    && customChallenge.config.firstColumnFixed\r\n                                    && columnIdx === 0\r\n                                )\r\n                                || currentColumn.text !== ''\r\n                            )\r\n                        ),\r\n                        true\r\n                    )\r\n                ),\r\n                true\r\n            )) {\r\n                errorMessage.push('Todas las celdas deben estar rellenas');\r\n            }\r\n            break;\r\n            break;\r\n        }\r\n        case ChallengeType.Crossword:\r\n            break;\r\n    }\r\n    return {\r\n        valid: errorMessage.length === 0,\r\n        errorMessage\r\n    };\r\n};\r\n\r\nexport const isValidTest = (test: Test): boolean => {\r\n    return test != null\r\n        && test.id != null\r\n        && test.name != null\r\n        && test.challenges != null\r\n        && test.challenges.reduce(\r\n            (acc: boolean, current: Challenge) => acc && isValidChallenge(current).valid,\r\n            true\r\n        );\r\n};\r\n\r\nexport const isValidProject = (project: Project): boolean => {\r\n    return project != null\r\n        && project.id != null\r\n        && project.name != null\r\n        && project.tests != null\r\n        && project.tests.reduce(\r\n            (acc: boolean, current: Test) => acc && isValidTest(current),\r\n            true\r\n        );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, CardActionArea, CardActions, CardContent, CardHeader, Chip, Grid, Icon, IconButton, makeStyles, Tooltip, Typography } from '@material-ui/core';\r\nimport { DropTargetMonitor, useDrag, useDrop, XYCoord } from 'react-dnd';\r\nimport { getEmptyImage } from 'react-dnd-html5-backend';\r\nimport { Challenge } from 'types';\r\nimport { getChallengeTypeDescription, getChallengeTypeIcon, isValidChallenge, Validation } from 'utils';\r\nimport { colors } from 'theme';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    },\r\n    fullHeight: {\r\n        height: '100%',\r\n    },\r\n    headerContainer: {\r\n        overflow: \"hidden\"\r\n    },\r\n    contentContainer: {\r\n        overflow: \"hidden\"\r\n    },\r\n    actionContainer: {\r\n        marginTop: '8px'\r\n    },\r\n    descriptionContainer: {\r\n        width: '100%',\r\n    },\r\n    description: {\r\n        whiteSpace: 'nowrap',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis'\r\n    },\r\n    tooltipRow: {\r\n        fontSize: '12px'\r\n    },\r\n    statusContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    }\r\n});\r\n\r\ninterface DragItem {\r\n    index: number,\r\n    challenge: Challenge,\r\n    type: string\r\n}\r\n\r\ninterface ChallengeThumbnailProps {\r\n    challenge: Challenge,\r\n    index: number,\r\n    selected?: boolean,\r\n    compact?: boolean,\r\n    onChallengeMove: (dragIndex: number, hoverIndex: number) => void,\r\n    onClick?: (selectedChallenge: Challenge) => void,\r\n    onDelete?: (deletedChallenge: Challenge) => void\r\n}\r\n\r\nexport const ChallengeThumbnail: React.FC<ChallengeThumbnailProps> = (props: ChallengeThumbnailProps) => {\r\n    const { challenge, index, selected, compact, onChallengeMove, onClick, onDelete } = props;\r\n\r\n    const ref = useRef(null);\r\n\r\n    const [validation, setValidation] = useState<Validation>({ valid: true, errorMessage: [] });\r\n\r\n    const classes = useStyles();\r\n\r\n    const [, drop] = useDrop({\r\n        accept: 'challengeThumbnail',\r\n        hover(item: DragItem, monitor: DropTargetMonitor) {\r\n            if (!ref.current) {\r\n                return;\r\n            }\r\n            const dragIndex = item.index;\r\n            const hoverIndex = index;\r\n\r\n            if (dragIndex === hoverIndex) {\r\n                return;\r\n            }\r\n\r\n            const hoverBoundingRect = (ref.current as any).getBoundingClientRect();\r\n            const hoverMiddleY =\r\n                (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n            const clientOffset = monitor.getClientOffset();\r\n            const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\r\n\r\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n                return;\r\n            }\r\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n                return;\r\n            }\r\n            onChallengeMove(dragIndex, hoverIndex);\r\n            item.index = hoverIndex;\r\n        },\r\n    });\r\n\r\n    const [{ isDragging }, drag, preview] = useDrag({\r\n        type: 'challengeThumbnail',\r\n        item: { type: 'challengeThumbnail', challenge, index },\r\n        collect: (monitor: any) => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n    });\r\n\r\n    useEffect(() => {\r\n        preview(getEmptyImage(), { captureDraggingState: true });\r\n    }, []);\r\n\r\n    const style = isDragging ? ({\r\n        opacity: 5,\r\n        backgroundColor: colors.primary.light\r\n    }) : ({\r\n        opacity: 1\r\n    });\r\n    drag(drop(ref));\r\n\r\n\r\n    const handleClick = () => {\r\n        if (onClick) {\r\n            onClick(challenge);\r\n        }\r\n    };\r\n\r\n    const handleDeleteClick = () => {\r\n        if (onDelete) {\r\n            onDelete(challenge);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setValidation(isValidChallenge(challenge));\r\n    }, [challenge]);\r\n\r\n    return (\r\n        <Grid item className={classes.fullWidth}>\r\n            <Card\r\n                ref={ref}\r\n                style={{ ...style }}\r\n                variant={selected ? 'elevation' : 'outlined'}\r\n                elevation={10}\r\n                className={classes.fullWidth}\r\n            >\r\n                <CardActionArea className={classes.fullWidth} onMouseDown={handleClick}>\r\n                    <CardHeader\r\n                        classes={{\r\n                            root: classes.headerContainer,\r\n                            content: classes.contentContainer,\r\n                        }}\r\n                        avatar={\r\n                            compact ? getChallengeTypeIcon(challenge.type, 'small') : undefined\r\n                        }\r\n                        subheader={\r\n                            <Typography variant='subtitle2' color={selected ? 'secondary' : 'textPrimary'} className={classes.description}>\r\n                                {compact ? challenge.question : `#${index + 1} ${getChallengeTypeDescription(challenge.type)}`}\r\n                            </Typography>\r\n                        }\r\n                        action={\r\n                            compact ? (\r\n                                <Grid container alignItems=\"center\" className={classes.actionContainer}>\r\n                                    {\r\n                                        validation.valid ? <Icon color=\"primary\" fontSize=\"small\">check</Icon>\r\n                                            : (\r\n                                                <Tooltip arrow title={\r\n                                                    <>\r\n                                                        {\r\n                                                            validation.errorMessage.map((\r\n                                                                aMessage: string,\r\n                                                                messageIdx: number\r\n                                                            ) => (\r\n                                                                <li\r\n                                                                    key={`li_${messageIdx}`}\r\n                                                                    className={classes.tooltipRow}\r\n                                                                >\r\n                                                                    {aMessage}\r\n                                                                </li>\r\n                                                            ))\r\n                                                        }\r\n                                                    </>\r\n                                                }>\r\n                                                    <Icon color=\"secondary\" fontSize=\"small\">priority_high</Icon>\r\n                                                </Tooltip>\r\n                                            )\r\n                                    }\r\n                                </Grid>\r\n                            ) : undefined\r\n                        }\r\n                    />\r\n                    {\r\n                        !compact && (\r\n                            <CardContent>\r\n                                <Typography noWrap>{challenge.question}</Typography>\r\n                            </CardContent>\r\n                        )\r\n                    }\r\n                </CardActionArea>\r\n                {\r\n                    !compact && (\r\n                        <CardActions className={classes.statusContainer}>\r\n                            {\r\n                                validation.valid ? <Chip label=\"completo\" color=\"primary\" size=\"small\" icon={<Icon fontSize=\"small\">check</Icon>} />\r\n                                    : (\r\n                                        <Tooltip arrow title={\r\n                                            <>\r\n                                                {\r\n                                                    validation.errorMessage.map((aMessage: string, messageIdx) => (\r\n                                                        <li\r\n                                                            key={`li_${messageIdx}`}\r\n                                                            className={classes.tooltipRow}>\r\n                                                            {aMessage}\r\n                                                        </li>\r\n                                                    ))\r\n                                                }\r\n                                            </>\r\n                                        }>\r\n                                            <Chip label=\"error\" color=\"secondary\" size=\"small\" style={{ color: '#ffffff' }} icon={<Icon fontSize=\"small\">priority_high</Icon>} />\r\n                                        </Tooltip>\r\n                                    )\r\n                            }\r\n                            <IconButton onClick={handleDeleteClick}>\r\n                                <Icon>delete</Icon>\r\n                            </IconButton>\r\n                        </CardActions>\r\n                    )\r\n                }\r\n            </Card>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { Fragment, useCallback, useEffect, useState } from 'react';\r\nimport { Grid, Icon, IconButton, ListItemIcon, makeStyles, Menu, MenuItem, Typography } from '@material-ui/core';\r\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useProjects } from 'hooks/useProjects';\r\nimport { Challenge, Project, Test } from 'types';\r\nimport { ChallengeType, Language } from 'enums';\r\nimport { ChallengeDesigner, ChallengeSelector, DialogConfirm } from 'components';\r\nimport { getChallengeTypeDescription, getChallengeTypeIcon, getDefaultChallenge } from 'utils';\r\nimport { colors } from 'theme';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },\r\n    listContainer: {\r\n        paddingRight: '10px',\r\n        height: '100%',\r\n        width: '100%',\r\n        overflow: 'hidden'\r\n    },\r\n    challengesContainer: {\r\n        height: 'calc(100% - 50px)',\r\n        width: '100%',\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        listStyle: 'none',\r\n        '&::-webkit-scrollbar': {\r\n            width: '0.2em'\r\n        },\r\n        '&::-webkit-scrollbar-track': {\r\n            boxShadow: 'inset 0 0 6px rgba(255,0,0,0.00)',\r\n            webkitBoxShadow: 'inset 0 0 6px rgba(255,0,0,0.00)'\r\n        },\r\n        '&::-webkit-scrollbar-thumb': {\r\n            backgroundColor: colors.primary.light,\r\n            outline: '1px solid slategrey'\r\n        }\r\n    },\r\n    challengeSelector: {\r\n        flexGrow: 1\r\n    }\r\n}));\r\n\r\nconst addMenuItems = [\r\n    { type: ChallengeType.SelectAnswer, disabled: false },\r\n    { type: ChallengeType.TrueOrFalse, disabled: false },\r\n    { type: ChallengeType.FillGaps, disabled: false },\r\n    { type: ChallengeType.Match, disabled: false },\r\n    { type: ChallengeType.Sort, disabled: true },\r\n    { type: ChallengeType.Classify, disabled: false },\r\n    { type: ChallengeType.FillTable, disabled: false },\r\n    { type: ChallengeType.TheOddOne, disabled: true },\r\n    { type: ChallengeType.Crossword, disabled: true }\r\n];\r\n\r\ninterface TestDesignerProps {\r\n    projectId: string,\r\n    testId: string\r\n}\r\n\r\nexport const TestDesigner: React.FC<TestDesignerProps> = (props: TestDesignerProps) => {\r\n    const { projectId, testId } = props;\r\n\r\n    const { projects, setProjects } = useProjects();\r\n\r\n    const [test, setTest] = useState<Test>({\r\n        id: uuidv4(),\r\n        name: 'Nuevo cuestionario',\r\n        description: '',\r\n        language: Language.Es,\r\n        challenges: []\r\n    });\r\n\r\n    const [compactList, setCompactList] = useState<boolean>(false);\r\n    const [selectedChallenge, setSelectedChallenge] = useState<Challenge>();\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n    const [deletedChallenge, setDeletedChallenge] = useState<Challenge>();\r\n    const [openRemoveChallengeConfirm, setOpenRemoveChallengeConfirm] = useState<boolean>(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        const project = projects.find((aProject: Project) => aProject.id === projectId);\r\n        if (project != null) {\r\n            const test = project.tests.find((aTest: Test) => aTest.id === testId);\r\n            if (test != null) {\r\n                setTest(test);\r\n                if (test.challenges.length > 0) {\r\n                    if (selectedChallenge == null) {\r\n                        setSelectedChallenge(test.challenges[0]);\r\n                    } else {\r\n                        setSelectedChallenge({ ...selectedChallenge });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, [projects, projectId, testId]);\r\n\r\n    const handleReorderChallenges = useCallback(\r\n        (reorderedChallenges: Challenge[]) => {\r\n            const updatedProjects = projects.map((aProject: Project) => {\r\n                if (aProject.id !== projectId) {\r\n                    return { ...aProject };\r\n                }\r\n                const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                    if (aTest.id !== testId) {\r\n                        return { ...aTest };\r\n                    }\r\n                    return {\r\n                        ...aTest,\r\n                        challenges: reorderedChallenges\r\n                    };\r\n                });\r\n                return {\r\n                    ...aProject,\r\n                    tests: [...updatedTests]\r\n                };\r\n            });\r\n            setProjects(updatedProjects);\r\n        },\r\n        [projects]\r\n    );\r\n\r\n    const handleSelectChallenge = (challenge: Challenge) => {\r\n        setSelectedChallenge(challenge);\r\n    };\r\n\r\n    const handleDeleteChallenge = (challenge: Challenge) => {\r\n        setDeletedChallenge(challenge);\r\n        setOpenRemoveChallengeConfirm(true);\r\n    };\r\n\r\n    const handleClickNewChallengeMenu = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleNewChallengeOptionClick = (type: ChallengeType) => {\r\n        const newChallenge: Challenge = getDefaultChallenge(type);\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return { ...aProject };\r\n            }\r\n            const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                if (aTest.id !== testId) {\r\n                    return { ...aTest };\r\n                }\r\n                const selectedPosition = selectedChallenge != null ? (\r\n                    test.challenges.findIndex(\r\n                        (aChallenge: Challenge) => aChallenge.id === selectedChallenge?.id\r\n                    )\r\n                ) : 0;\r\n                return {\r\n                    ...aTest,\r\n                    challenges: [\r\n                        ...aTest.challenges.slice(0, selectedPosition + 1),\r\n                        newChallenge,\r\n                        ...aTest.challenges.slice(selectedPosition + 1)\r\n                    ]\r\n                };\r\n            });\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        setSelectedChallenge(newChallenge);\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleCloseNewChallengeMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleChallengeChange = (updatedChallenge: Challenge) => {\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return aProject;\r\n            }\r\n            const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                if (aTest.id !== testId) {\r\n                    return { ...aTest };\r\n                }\r\n                const updatedChallenges = aTest.challenges.map((aChallenge: Challenge) => {\r\n                    if (aChallenge.id !== updatedChallenge.id) {\r\n                        return { ...aChallenge };\r\n                    }\r\n                    return { ...updatedChallenge };\r\n                });\r\n                return {\r\n                    ...aTest,\r\n                    challenges: [...updatedChallenges]\r\n                };\r\n            });\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        setSelectedChallenge({ ...updatedChallenge });\r\n    };\r\n\r\n    const handleConfirmRemoveChallenge = () => {\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return aProject;\r\n            }\r\n            const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                if (aTest.id !== testId) {\r\n                    return aTest;\r\n                }\r\n                if (deletedChallenge?.id === selectedChallenge?.id) {\r\n                    setSelectedChallenge(aTest.challenges.find(\r\n                        (aChallenge: Challenge) => aChallenge.id !== deletedChallenge?.id\r\n                    ));\r\n                }\r\n                const updatedChallenges = aTest.challenges.filter((\r\n                    aChallenge: Challenge\r\n                ) => aChallenge.id !== deletedChallenge?.id);\r\n                return {\r\n                    ...aTest,\r\n                    challenges: [...updatedChallenges]\r\n                };\r\n            });\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        setOpenRemoveChallengeConfirm(false);\r\n    };\r\n\r\n    const handleRefuseRemoveChallenge = () => {\r\n        setOpenRemoveChallengeConfirm(false);\r\n    };\r\n\r\n    const handleListModeChange = (event: React.MouseEvent<HTMLElement>, newListMode: boolean) => {\r\n        setCompactList(newListMode);\r\n    };\r\n\r\n    const renderAddMenuItem = (challengeType: ChallengeType, disabled: boolean): React.ReactNode => {\r\n        return (\r\n            <MenuItem key={`item_${challengeType}`} disabled={disabled} onClick={() => {\r\n                handleNewChallengeOptionClick(challengeType);\r\n            }}>\r\n                <ListItemIcon>{getChallengeTypeIcon(challengeType, 'large')}</ListItemIcon>\r\n                <Typography variant='button'>\r\n                    {getChallengeTypeDescription(challengeType)}\r\n                </Typography>\r\n            </MenuItem>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <DialogConfirm\r\n                open={openRemoveChallengeConfirm}\r\n                text='¿Seguro que deseas eliminar la pregunta?'\r\n                width='xs'\r\n                onConfirm={handleConfirmRemoveChallenge}\r\n                onRefuse={handleRefuseRemoveChallenge}\r\n            />\r\n            <Grid container className={classes.fullHeight} spacing={2}>\r\n                <Grid item xs={2} className={classes.listContainer}>\r\n                    <Grid container direction='column' className={classes.fullHeight}>\r\n                        <Grid item className={classes.fullWidth}>\r\n                            <Grid container justify='space-between' alignItems='center'>\r\n                                <Grid item>\r\n                                    <Typography variant='h5'>Preguntas</Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Grid container justify='flex-end' alignItems='center'>\r\n                                        <Grid item>\r\n                                            <ToggleButtonGroup size=\"small\" value={compactList} exclusive onChange={handleListModeChange}>\r\n                                                <ToggleButton value={false}>\r\n                                                    <Icon>crop_din</Icon>\r\n                                                </ToggleButton>\r\n                                                <ToggleButton value={true}>\r\n                                                    <Icon>reorder</Icon>\r\n                                                </ToggleButton>\r\n                                            </ToggleButtonGroup>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <IconButton onClick={handleClickNewChallengeMenu}>\r\n                                                <Icon color='primary'>add_circle</Icon>\r\n                                            </IconButton>\r\n                                            <Menu\r\n                                                id='new-challenge-menu'\r\n                                                anchorEl={anchorEl}\r\n                                                keepMounted\r\n                                                open={Boolean(anchorEl)}\r\n                                                onClose={handleCloseNewChallengeMenu}\r\n                                            >\r\n                                                {\r\n                                                    addMenuItems.map((anItem) => (\r\n                                                        renderAddMenuItem(anItem.type, anItem.disabled)\r\n                                                    ))\r\n                                                }\r\n                                            </Menu>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item className={classes.challengesContainer}>\r\n                            <DndProvider backend={HTML5Backend}>\r\n                                <ChallengeSelector\r\n                                    challenges={test.challenges}\r\n                                    compactList={compactList}\r\n                                    selected={selectedChallenge}\r\n                                    onChallengeReorder={handleReorderChallenges}\r\n                                    onSelect={handleSelectChallenge}\r\n                                    onDelete={handleDeleteChallenge}\r\n                                />\r\n                            </DndProvider>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={10}>\r\n                    {\r\n                        selectedChallenge && (\r\n                            <ChallengeDesigner\r\n                                challenge={selectedChallenge}\r\n                                onChallengeChange={handleChallengeChange}\r\n                            />\r\n                        )\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { Challenge, ChallengeOptions, ClassifyChallenge, FillGapsChallenge, FillTableChallenge, MatchChallenge, SelectAnswerChallenge, TrueOrFalseChallenge } from 'types';\r\nimport { ChallengeType, ComponentMode } from 'enums';\r\nimport { ClassifyChallenger, FillGapsChallenger, FillTableChallenger, MatchChallenger, SelectAnswerChallenger, TrueOrFalseChallenger } from 'components';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\ninterface ChallengeEvaluatorProps {\r\n    challenge: Challenge,\r\n    options: ChallengeOptions,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const ChallengeEvaluator: React.FC<ChallengeEvaluatorProps> = (props: ChallengeEvaluatorProps) => {\r\n    const { challenge, options, onSuccess, onError } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handlerSucessChallenge = () => {\r\n        if (onSuccess) {\r\n            onSuccess();\r\n        }\r\n    };\r\n\r\n    const handlerErrorChallenge = () => {\r\n        if (onError) {\r\n            onError();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight}>\r\n            <Grid item xs={12}>\r\n                {\r\n                    challenge?.type === ChallengeType.SelectAnswer\r\n                    && (\r\n                        <SelectAnswerChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as SelectAnswerChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.TrueOrFalse\r\n                    && (\r\n                        <TrueOrFalseChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as TrueOrFalseChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.FillGaps\r\n                    && (\r\n                        <FillGapsChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as FillGapsChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Match\r\n                    && (\r\n                        <MatchChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as MatchChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Classify\r\n                    && (\r\n                        <ClassifyChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as ClassifyChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.FillTable\r\n                    && (\r\n                        <FillTableChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as FillTableChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { Grid, LinearProgress, makeStyles, Typography } from '@material-ui/core';\r\nimport { ChallengeType, Language } from 'enums';\r\nimport { getChallengeTypeDescription } from 'utils';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: 'solid 1px',\r\n        backgroundColor: theme.palette.primary.light,\r\n    }\r\n}));\r\n\r\ninterface ChallengeLauncherProps {\r\n    challengeType: ChallengeType,\r\n    challengeNumber: number,\r\n    challengeTotalCount: number,\r\n    language: Language,\r\n    delay: number,\r\n    onEnd: () => void\r\n}\r\n\r\nexport const ChallengeLauncher: React.FC<ChallengeLauncherProps> = (props: ChallengeLauncherProps) => {\r\n    const { challengeType, challengeNumber, challengeTotalCount, language, delay, onEnd } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => { onEnd(); }, delay * 1000);\r\n    }, []);\r\n\r\n    return (\r\n        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={2} className={classes.root}>\r\n            <Grid item>\r\n                <Typography variant=\"h2\">\r\n                    {\r\n                        getChallengeTypeDescription(challengeType, language)\r\n                    }\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item style={{width: '100%'}}>\r\n                <LinearProgress color=\"secondary\" />\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant=\"h4\">\r\n                    {\r\n                        language === Language.En ? (\r\n                            `Question ${challengeNumber.toString()} of ${challengeTotalCount.toString()}`\r\n                        ) : (\r\n                            `Pregunta ${challengeNumber.toString()} de ${challengeTotalCount.toString()}`\r\n                        )\r\n                    }\r\n                </Typography>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Button, Grid, Icon, makeStyles, Typography } from '@material-ui/core';\r\nimport { Test } from 'types';\r\nimport { Language } from 'enums';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        border: 'solid 1px'\r\n    },\r\n    timeline: {\r\n        transform: 'rotate(-90deg)'\r\n    },\r\n    timelineContentContainer: {\r\n        textAlign: 'left',\r\n        padding: '0px'\r\n    },\r\n    timelineContent: {\r\n        transform: 'rotate(90deg)',\r\n        padding: '0px 5px'\r\n    },\r\n    timelineIcon: {\r\n        transform: 'rotate(90deg)'\r\n    }\r\n}));\r\n\r\ninterface TestResultProps {\r\n    test: Test,\r\n    results: boolean[],\r\n    onBackHome: () => void,\r\n    onRepeatTest: () => void\r\n}\r\n\r\nexport const TestResult: React.FC<TestResultProps> = (props: TestResultProps) => {\r\n    const { test, results, onBackHome, onRepeatTest } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container\r\n            direction=\"column\"\r\n            className={classes.root}\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={4}\r\n        >\r\n            <Grid item>\r\n                <Typography variant=\"h2\">\r\n                    {test.name}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant=\"h3\">\r\n                    {test.description}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant=\"h4\">\r\n                    {\r\n                        `${test.language === Language.En ? 'Correct answers' : 'Respuestas correctas'}: ${results.filter((aResult: boolean) => aResult).length}/${results.length}`\r\n                    }\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item container justify=\"center\" alignItems=\"center\" spacing={4}>\r\n                <Grid item>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onBackHome}>\r\n                        <Icon>navigate_before</Icon>\r\n                        &nbsp;\r\n                        { test.language === Language.En ? 'Go back to home' : 'Volver a la pantalla principal' }\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onRepeatTest}>\r\n                        <Icon>replay</Icon>\r\n                        &nbsp;\r\n                        { test.language === Language.En ? 'repeat test' : 'Repetir cuestionario' }\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Box, Button, Dialog, Grid, Icon, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText, makeStyles, TextField, Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n}));\r\n\r\ninterface DialogFillGapsCandidatesProps {\r\n    open: boolean,\r\n    text: string,\r\n    candidates: string[],\r\n    onAccept: (alternatives: string[]) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const DialogFillGapsCandidates: React.FC<DialogFillGapsCandidatesProps> = (props: DialogFillGapsCandidatesProps) => {\r\n    const { open, text, candidates, onAccept, onCancel } = props;\r\n\r\n    const [formState, setFormState] = useState<string[]>(candidates);\r\n\r\n    const inputCandidate = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (candidates != null) {\r\n            setFormState(candidates);\r\n        }\r\n    }, [candidates]);\r\n\r\n    const addCandidate = () => {\r\n        setFormState([\r\n            ...formState,\r\n            inputCandidate.current.value\r\n        ]);\r\n        inputCandidate.current.value = '';\r\n    };\r\n\r\n    const handleCandidateKeyPress = (evt: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (evt.code === 'Enter' && inputCandidate.current.value !== '') {\r\n            addCandidate();\r\n        }\r\n    };\r\n\r\n    const handleDeleteCandidate = (candidateIdx: number) => {\r\n        setFormState(\r\n            formState.filter((aCandidate: string, idx: number) => idx !== candidateIdx)\r\n        );\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        onAccept(formState);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth='sm'\r\n        >\r\n            <Box className={classes.dialogContainer}>\r\n                <Grid\r\n                    container\r\n                    direction='column'\r\n                    spacing={2}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h6\">\r\n                            {`Otros textos validos para \"${text}\"`}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <List>\r\n                            {\r\n                                formState.map((aCandidate: string, candidateIdx: number) => (\r\n                                    <ListItem>\r\n                                        <ListItemText primary={aCandidate} />\r\n                                        <ListItemSecondaryAction>\r\n                                            <IconButton edge=\"end\" onClick={() => { handleDeleteCandidate(candidateIdx); }}>\r\n                                                <Icon>delete</Icon>\r\n                                            </IconButton>\r\n                                        </ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                ))\r\n                            }\r\n                        </List>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            inputRef={inputCandidate}\r\n                            variant=\"outlined\"\r\n                            style={{ width: '100%' }}\r\n                            label=\"Nuevo candidato\"\r\n                            onKeyPress={handleCandidateKeyPress}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container justify='flex-end' spacing={1}>\r\n                            <Grid item>\r\n                                <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { CSSProperties } from '@material-ui/styles';\r\nimport { useDrop } from 'react-dnd';\r\nimport { colors } from 'theme';\r\n\r\ninterface DropGapProps {\r\n    value: string,\r\n    style?: CSSProperties,\r\n    fontSize: number,\r\n    onDrop: (text: string) => void\r\n}\r\n\r\nexport const DropGap: React.FC<DropGapProps> = (props: DropGapProps) => {\r\n    const { value, style, fontSize, onDrop } = props;\r\n\r\n    const handleDrop = (item: any) => {\r\n        onDrop(item.name);\r\n    };\r\n\r\n    const [/* { isOver, canDrop } */, drop] = useDrop({\r\n        accept: 'dnd',\r\n        drop: handleDrop,\r\n        collect: (monitor: { isOver: () => boolean, canDrop: () => boolean }) => {\r\n            return ({\r\n                isOver: monitor.isOver(),\r\n                canDrop: monitor.canDrop()\r\n            });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div\r\n            ref={drop}\r\n            style={{\r\n                width: '150px',\r\n                height: '50px',\r\n                lineHeight: '50px',\r\n                textAlign: 'center',\r\n                borderBottom: `solid 1px ${colors.primary.main}`,\r\n                color: colors.primary.main,\r\n                fontSize: `${fontSize ? fontSize : 50}px`,\r\n                ...style\r\n            }}\r\n\r\n        >\r\n            {value}\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { FillGapsChallenge, FillGapsChallengeConfig } from 'types';\r\nimport { ComponentMode } from 'enums';\r\nimport { FillGapsChallenger, FillGapsConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface FillGapsChallengeDesignerProps {\r\n    challenge: FillGapsChallenge,\r\n    onChallengeChange: (challenge: FillGapsChallenge) => void\r\n}\r\n\r\nexport const FillGapsChallengeDesigner: React.FC<FillGapsChallengeDesignerProps> = (\r\n    props: FillGapsChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handlerChallengeChange = (updatedChallenge: FillGapsChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: FillGapsChallengeConfig) => {\r\n        const updatedChallenge: FillGapsChallenge = {\r\n            ...challenge,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <FillGapsChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <FillGapsConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, IconButton, makeStyles, TextField } from '@material-ui/core';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport useSound from 'use-sound';\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { ChallengeOptions, FillGapsChallenge, FillGapsChallengeExpression, FillGapsChallengeSentence } from 'types';\r\nimport { ComponentMode, FillMethod, Language } from 'enums';\r\nimport { ChallengeQuestion, Countdown, DialogFillGapsCandidates, DragableItem, FillGapsSentence, FillGapsSentenceAnswer } from 'components';\r\nimport { checkEqual, joinSentence, splitSentence } from 'utils';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    answerContainer: {\r\n        height: '80%',\r\n        width: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionsContainer: {\r\n        border: 'solid 1px gray',\r\n        backgroundColor: '#ffffff',\r\n        minHeight: '60px'\r\n    },\r\n    sentencesContainer: {\r\n        paddingLeft: '10px'\r\n    },\r\n}));\r\n\r\nconst initialFillGapsState = (challenge: FillGapsChallenge): FillGapsSentenceAnswer[][] => {\r\n    return challenge.sentences.map((aSentence: FillGapsChallengeSentence) => ([]));\r\n};\r\n\r\nconst reorderItems = (sentences: FillGapsChallengeSentence[], mode: ComponentMode): Item[] => {\r\n    let list: Item[] = [];\r\n    sentences.forEach((aSentence: FillGapsChallengeSentence, sentenceIdx: number) => {\r\n        aSentence.hiddenExpressions.forEach((aHiddenExpression: FillGapsChallengeExpression, hiddenExpressionIdx: number) => {\r\n            list.push({\r\n                sentenceText: aSentence.text,\r\n                sentenceIdx,\r\n                hiddenExpression: aHiddenExpression,\r\n                hiddenExpressionIdx\r\n            });\r\n        });\r\n    });\r\n    if (mode === ComponentMode.Play) {\r\n        list = list.sort(() => Math.random() - 0.5);\r\n    }\r\n    return list;\r\n};\r\n\r\ninterface FillGapsChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: FillGapsChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: FillGapsChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\ninterface Item {\r\n    sentenceText: string,\r\n    sentenceIdx: number,\r\n    hiddenExpression: FillGapsChallengeExpression,\r\n    hiddenExpressionIdx: number\r\n}\r\n\r\nexport const FillGapsChallenger: React.FC<FillGapsChallengerProps> = (props: FillGapsChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const inputSentence = useRef({} as HTMLInputElement);\r\n\r\n    const [fillGapsState, setFillGapsState] = useState<FillGapsSentenceAnswer[][]>(initialFillGapsState(challenge));\r\n    const [openCandidatesDialog, setOpenCandidatesDialog] = useState<boolean>(false);\r\n    const [selectedExpression, setSelectedExpression] = useState<number[]>();\r\n    const [draggableItems, setDragabbleItems] = useState<Item[]>(reorderItems(challenge.sentences, mode));\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setDragabbleItems(reorderItems(challenge.sentences, mode));\r\n    }, [challenge.sentences]);\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const handleSentenceChange = (updatedSentence: FillGapsChallengeSentence, sentenceIdx: number) => {\r\n        if (onChallengeChange) {\r\n            const updatedSentences = challenge.sentences.map((\r\n                aSentence: FillGapsChallengeSentence,\r\n                idx: number\r\n            ) => idx === sentenceIdx ? updatedSentence : aSentence);\r\n            onChallengeChange({\r\n                ...challenge,\r\n                sentences: updatedSentences\r\n            });\r\n        }\r\n    };\r\n\r\n    const addSentence = () => {\r\n        if (onChallengeChange) {\r\n            const newSentence: FillGapsChallengeSentence = {\r\n                text: inputSentence.current.value,\r\n                hiddenExpressions: [] as FillGapsChallengeExpression[]\r\n            };\r\n            onChallengeChange({\r\n                ...challenge,\r\n                sentences: [...challenge.sentences, newSentence]\r\n            });\r\n            setFillGapsState([\r\n                ...fillGapsState,\r\n                []\r\n            ]);\r\n        }\r\n        inputSentence.current.value = '';\r\n    };\r\n\r\n    const handleSentenceKeyPress = (evt: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (evt.code === 'Enter' && inputSentence.current.value !== '') {\r\n            addSentence();\r\n        }\r\n    };\r\n\r\n    const handleSentenceRemove = (sentenceIdx: number) => {\r\n        if (onChallengeChange) {\r\n            const updatedSentences = challenge.sentences\r\n                .filter((aSentence: FillGapsChallengeSentence, idx: number) => idx !== sentenceIdx);\r\n            onChallengeChange({\r\n                ...challenge,\r\n                sentences: updatedSentences\r\n            });\r\n            setFillGapsState(fillGapsState.filter(\r\n                (aFillGapsState: FillGapsSentenceAnswer[], idx: number) => idx !== sentenceIdx\r\n            ));\r\n        }\r\n    };\r\n\r\n    const handleAddCandidateClick = (sentenceIdx: number, hiddenExpIdx: number) => {\r\n        setSelectedExpression([sentenceIdx, hiddenExpIdx]);\r\n        setOpenCandidatesDialog(true);\r\n    };\r\n\r\n    const handleCandidateAccept = (newCandidates: string[]) => {\r\n        if (onChallengeChange && selectedExpression) {\r\n            const updatedSentences = challenge.sentences.map((\r\n                aSentence: FillGapsChallengeSentence,\r\n                sentenceIdx: number\r\n            ) => sentenceIdx !== selectedExpression[0] ? aSentence : (\r\n                {\r\n                    ...aSentence,\r\n                    hiddenExpressions: aSentence.hiddenExpressions.map((\r\n                        aHiddenExpression: FillGapsChallengeExpression,\r\n                        hiddenExpresionIdx: number\r\n                    ) => hiddenExpresionIdx !== selectedExpression[1] ? aHiddenExpression : (\r\n                        {\r\n                            ...aHiddenExpression,\r\n                            alternatives: [...newCandidates]\r\n                        }\r\n                    ))\r\n                }\r\n            ));\r\n            onChallengeChange({\r\n                ...challenge,\r\n                sentences: updatedSentences\r\n            });\r\n        }\r\n        setOpenCandidatesDialog(false);\r\n    };\r\n\r\n    const expressionInSentence = (sentence: string, expression: FillGapsChallengeExpression): string => {\r\n        return joinSentence(\r\n            splitSentence(sentence)\r\n                .slice(expression.initPosition, expression.initPosition + expression.wordCount)\r\n        );\r\n    };\r\n\r\n    const handleSentenceAnswer = (sentenceIdx: number, answer: FillGapsSentenceAnswer[]) => {\r\n        console.log(answer);\r\n        const updatedState = fillGapsState.map((aFillGapsState: FillGapsSentenceAnswer[], idx: number) => (\r\n            idx === sentenceIdx ? [...answer] : [...aFillGapsState]\r\n        ));\r\n        setFillGapsState(updatedState);\r\n    };\r\n\r\n    const completed = () => {\r\n        return challenge.sentences\r\n            .reduce((acc: boolean, current: FillGapsChallengeSentence, sentenceIdx: number) => (\r\n                acc\r\n                && current.hiddenExpressions.length === fillGapsState[sentenceIdx].length\r\n                && fillGapsState[sentenceIdx].every((el: FillGapsSentenceAnswer) => (\r\n                    el.value != null && el.value !== ''\r\n                ))\r\n            ), true);\r\n    };\r\n\r\n    const isDropped = (item: Item): boolean => {\r\n        const text = expressionInSentence(\r\n            item.sentenceText,\r\n            item.hiddenExpression\r\n        );\r\n\r\n        return fillGapsState.some((sentencesAnswer: FillGapsSentenceAnswer[]) => (\r\n            sentencesAnswer.some((aSentenceAnswer: FillGapsSentenceAnswer) => (\r\n                aSentenceAnswer.value === text\r\n            ))\r\n        ));\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const correct = challenge.sentences.reduce(\r\n            (accSentences: boolean, currentSentence: FillGapsChallengeSentence, sentenceIdx: number) => {\r\n                const words: string[] = splitSentence(currentSentence.text);\r\n                const correctExpressions = currentSentence.hiddenExpressions.reduce(\r\n                    (accExpressions: boolean, currentExpression: FillGapsChallengeExpression, expressionIdx: number) => {\r\n                        const hiddenAnswer = fillGapsState[sentenceIdx]\r\n                            .find((anAnswer: FillGapsSentenceAnswer) => anAnswer.hiddenIdx === expressionIdx);\r\n\r\n                        return hiddenAnswer != null && accExpressions && (\r\n                            checkEqual(\r\n                                joinSentence(words.slice(\r\n                                    currentExpression.initPosition,\r\n                                    currentExpression.initPosition + currentExpression.wordCount\r\n                                )),\r\n                                hiddenAnswer.value,\r\n                                challenge.config.checkCapitalLetters,\r\n                                challenge.config.checkAccentMarks\r\n                            )\r\n                            || currentExpression.alternatives.some(\r\n                                (anAlternative: string) => checkEqual(\r\n                                    anAlternative,\r\n                                    hiddenAnswer.value,\r\n                                    challenge.config.checkCapitalLetters,\r\n                                    challenge.config.checkAccentMarks\r\n                                )\r\n                            )\r\n                        );\r\n                    },\r\n                    true\r\n                );\r\n                return accSentences && correctExpressions;\r\n            },\r\n            true\r\n        );\r\n        showResult(correct);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='center' className={classes.fullHeight}>\r\n                    <Grid item xs={2} className={classes.fullHeight}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} className={classes.fullHeight}>\r\n                        {\r\n                            selectedExpression && (\r\n                                <DialogFillGapsCandidates\r\n                                    open={openCandidatesDialog}\r\n                                    text={\r\n                                        expressionInSentence(\r\n                                            challenge.sentences[selectedExpression[0]].text,\r\n                                            challenge.sentences[selectedExpression[0]].hiddenExpressions[selectedExpression[1]]\r\n                                        )\r\n                                    }\r\n                                    candidates={\r\n                                        challenge.sentences[selectedExpression[0]]\r\n                                            .hiddenExpressions[selectedExpression[1]].alternatives\r\n                                    }\r\n                                    onAccept={handleCandidateAccept}\r\n                                    onCancel={() => { setOpenCandidatesDialog(false); }}\r\n                                />\r\n                            )\r\n                        }\r\n                        <DndProvider backend={HTML5Backend}>\r\n                            <Grid\r\n                                container\r\n                                spacing={2}\r\n                                direction=\"column\"\r\n                                className={classes.fullHeight}\r\n                            >\r\n                                {\r\n                                    (\r\n                                        mode === ComponentMode.Design ||\r\n                                        challenge.config.fillMethod === FillMethod.Dragging\r\n                                    ) && (\r\n                                        <Grid\r\n                                            item\r\n                                            // xs={12}\r\n                                            className={classes.optionsContainer}\r\n                                        >\r\n                                            <Grid container spacing={2} justify=\"space-around\" alignItems=\"center\">\r\n                                                {\r\n                                                    draggableItems.map((anItem: Item) => !isDropped(anItem) && (\r\n                                                        <Grid item key={`gridItem_${anItem.sentenceIdx}_${anItem.hiddenExpression.initPosition}`}>\r\n                                                            <DragableItem\r\n                                                                name={expressionInSentence(\r\n                                                                    anItem.sentenceText,\r\n                                                                    anItem.hiddenExpression\r\n                                                                )}\r\n                                                                key={`dragable_${anItem.sentenceIdx}_${anItem.hiddenExpression.initPosition}`}\r\n                                                                style={{fontSize: challenge.config.textFontSize}}\r\n                                                                iconButton={\r\n                                                                    mode === ComponentMode.Design ? (\r\n                                                                        <IconButton\r\n                                                                            size=\"small\"\r\n                                                                            onClick={() => {\r\n                                                                                handleAddCandidateClick(\r\n                                                                                    anItem.sentenceIdx,\r\n                                                                                    anItem.hiddenExpressionIdx\r\n                                                                                );\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <Icon>add_circle</Icon>\r\n                                                                        </IconButton>\r\n                                                                    ) : undefined\r\n                                                                }\r\n                                                            />\r\n                                                        </Grid>\r\n                                                    ))\r\n                                                }\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    )\r\n                                }\r\n                                <Grid\r\n                                    item\r\n                                    xs\r\n                                >\r\n                                    <Grid container direction=\"column\" justify=\"space-around\" className={`${classes.fullWidth} ${classes.fullHeight}`}>\r\n                                        {\r\n                                            challenge.sentences.map((\r\n                                                aSentence: FillGapsChallengeSentence,\r\n                                                sentenceIdx: number\r\n                                            ) => (\r\n                                                <Grid\r\n                                                    item\r\n                                                    key={`sentence_${sentenceIdx}`}\r\n                                                >\r\n                                                    <FillGapsSentence\r\n                                                        mode={mode}\r\n                                                        sentence={aSentence}\r\n                                                        fillMethod={challenge.config.fillMethod}\r\n                                                        checkCapitalLetters={challenge.config.checkCapitalLetters}\r\n                                                        checkAccentMarks={challenge.config.checkAccentMarks}\r\n                                                        showResults={highlightResults}\r\n                                                        fontSize={challenge.config.textFontSize}\r\n                                                        onSentenceChange={(\r\n                                                            updatedSentence: FillGapsChallengeSentence\r\n                                                        ) => handleSentenceChange(updatedSentence, sentenceIdx)}\r\n                                                        onSentenceRemove={() => { handleSentenceRemove(sentenceIdx); }}\r\n                                                        onAnswersChange={(answer: FillGapsSentenceAnswer[]) => {\r\n                                                            handleSentenceAnswer(sentenceIdx, answer);\r\n                                                        }}\r\n                                                    />\r\n                                                </Grid>\r\n                                            ))\r\n                                        }\r\n                                    </Grid>\r\n                                </Grid>\r\n                                {\r\n                                    mode === ComponentMode.Design && (\r\n                                        <Grid item>\r\n                                            <TextField\r\n                                                inputRef={inputSentence}\r\n                                                variant=\"outlined\"\r\n                                                style={{width: '100%'}}\r\n                                                InputProps={\r\n                                                    {\r\n                                                        style: {\r\n                                                            fontSize: challenge.config.textFontSize,\r\n                                                            color: '#000000'\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                label=\"Nueva frase\"\r\n                                                onKeyPress={handleSentenceKeyPress}\r\n                                            />\r\n                                        </Grid>\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                        </DndProvider>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || !completed()}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;{options?.language === Language.En ? 'Check' : 'Corregir'}\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControl, FormControlLabel, Grid, InputLabel, makeStyles, MenuItem, Select, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { ChallengeConfig, FillGapsChallengeConfig } from 'types';\r\nimport { FillMethod } from 'enums';\r\nimport { ChallengeConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface FillGapsConfiguratorProps {\r\n    config: FillGapsChallengeConfig,\r\n    onConfigChange?: (config: FillGapsChallengeConfig) => void\r\n}\r\n\r\nexport const FillGapsConfigurator: React.FC<FillGapsConfiguratorProps> = (props: FillGapsConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<FillGapsChallengeConfig>(config);\r\n\r\n    const inputTextFontSize = useRef({} as HTMLInputElement);\r\n    const inputFillMethod = useRef({} as HTMLSelectElement);\r\n    const checkCapitalLetters = useRef({} as HTMLInputElement);\r\n    const checkAccentMarks = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean | string) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    const handleBaseConfigChange = (newBaseConfig: ChallengeConfig) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            ...newBaseConfig\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <ChallengeConfigurator\r\n                    config={config}\r\n                    onConfigChange={handleBaseConfigChange}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTextFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.textFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('textFontSize', parseInt(inputTextFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControl className={classes.fullWidth}>\r\n                    <InputLabel>Modo de rellenado</InputLabel>\r\n                    <Select\r\n                        inputRef={inputFillMethod}\r\n                        label=\"Modo de rellenado\"\r\n                        value={formData.fillMethod}\r\n                        color='secondary'\r\n                        className={classes.fullWidth}\r\n                        onChange={(evt: React.ChangeEvent<{name?: string | undefined, value: unknown}>) => {\r\n                            handleConfigParameterChange('fillMethod', evt.target.value as string);\r\n                        }}\r\n                    >\r\n                        <MenuItem value={FillMethod.Writing}>Escribiendo</MenuItem>\r\n                        <MenuItem value={FillMethod.Dragging}>Arrastrando</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkCapitalLetters}\r\n                            name='checkMultiselect'\r\n                            checked={formData.checkCapitalLetters}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('checkCapitalLetters', checkCapitalLetters.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Comprobar mayúsculas/minúsculas'\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkAccentMarks}\r\n                            name='checkAccentMarks'\r\n                            checked={formData.checkAccentMarks}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('checkAccentMarks', checkAccentMarks.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Comprobar tildes'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Grid, Icon, IconButton, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { FillGapsChallengeExpression, FillGapsChallengeSentence } from 'types';\r\nimport { ComponentMode, FillMethod } from 'enums';\r\nimport { DropGap } from 'components';\r\nimport { checkEqual, joinSentence, splitSentence } from 'utils';\r\nimport { colors } from 'theme';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    word: {\r\n        padding: '2px',\r\n        // backgroundColor: '#f0f0f0',\r\n        '& :hover': {\r\n            backgroundColor: theme.palette.primary.light,\r\n            color:'#ffffff',\r\n            cursor: 'pointer',\r\n            borderRadius: '10px'\r\n        }\r\n    },\r\n    selected: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        borderRadius: '10px',\r\n        color:'#ffffff',\r\n    }\r\n}));\r\n\r\ninterface SentencePart {\r\n    type: 'text' | 'hidden',\r\n    hiddenIdx: number,\r\n    value: string,\r\n    answer: string\r\n}\r\n\r\nexport interface FillGapsSentenceAnswer {\r\n    hiddenIdx: number,\r\n    value: string\r\n}\r\n\r\nconst sentenceParts = (sentence: FillGapsChallengeSentence): SentencePart[] => {\r\n    const result: SentencePart[] = [];\r\n    let currentIdx = 0;\r\n    const words = splitSentence(sentence.text);\r\n    sentence.hiddenExpressions.forEach((anExp: FillGapsChallengeExpression, idx: number) => {\r\n        if (anExp.initPosition > currentIdx) {\r\n            result.push({\r\n                type: 'text',\r\n                hiddenIdx: -1,\r\n                value: joinSentence(words.slice(currentIdx, anExp.initPosition)),\r\n                answer: ''\r\n            });\r\n        }\r\n        result.push({\r\n            type: 'hidden',\r\n            hiddenIdx: idx,\r\n            value: joinSentence(words.slice(anExp.initPosition, anExp.initPosition + anExp.wordCount)),\r\n            answer: ''\r\n        });\r\n        currentIdx = anExp.initPosition + anExp.wordCount;\r\n    });\r\n    if (currentIdx < words.length - 1) {\r\n        result.push({\r\n            type: 'text',\r\n            hiddenIdx: -1,\r\n            value: joinSentence(words.slice(currentIdx)),\r\n            answer: ''\r\n        });\r\n    }\r\n    return result;\r\n};\r\n\r\ninterface FillGapsSentenceProps {\r\n    mode: ComponentMode,\r\n    sentence: FillGapsChallengeSentence,\r\n    fillMethod: FillMethod,\r\n    checkCapitalLetters: boolean,\r\n    checkAccentMarks: boolean,\r\n    showResults: boolean,\r\n    fontSize: number,\r\n    onSentenceChange: (newSentence: FillGapsChallengeSentence) => void,\r\n    onSentenceRemove: () => void,\r\n    onAnswersChange: (answers: FillGapsSentenceAnswer[]) => void\r\n}\r\n\r\nexport const FillGapsSentence: React.FC<FillGapsSentenceProps> = (props: FillGapsSentenceProps) => {\r\n    const {mode,\r\n        sentence,\r\n        fillMethod,\r\n        checkCapitalLetters,\r\n        checkAccentMarks,\r\n        showResults,\r\n        fontSize,\r\n        onSentenceChange,\r\n        onSentenceRemove,\r\n        onAnswersChange\r\n    } = props;\r\n\r\n    const [parts, setParts] = useState<SentencePart[]>(sentenceParts(sentence));\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleWordClick = (wordIdx: number) => {\r\n        let updatedHiddenExpressions: FillGapsChallengeExpression[] = [];\r\n\r\n        if (sentence.hiddenExpressions.length === 0) {\r\n            //Primera expresion\r\n            console.log('');\r\n            updatedHiddenExpressions.push({\r\n                initPosition: wordIdx,\r\n                wordCount: 1,\r\n                alternatives: []\r\n            });\r\n        }\r\n\r\n        sentence.hiddenExpressions.some((anExp: FillGapsChallengeExpression, idx: number) => {\r\n            let completeArrayFrom = -1;\r\n            if (idx === 0 && wordIdx < anExp.initPosition - 1) {\r\n                //Antes de la primera expresion y no contigua\r\n                // console.log('Antes de la primera expresion y no contigua');\r\n                updatedHiddenExpressions = [\r\n                    { initPosition: wordIdx, wordCount: 1, alternatives:[] },\r\n                    ...sentence.hiddenExpressions\r\n                ];\r\n                return true;\r\n            } else if (wordIdx === anExp.initPosition - 1) {\r\n                //Contigua a la expresion por delante\r\n                // console.log('Contigua a la expresion por delante');\r\n                updatedHiddenExpressions.push(\r\n                    { initPosition: wordIdx, wordCount: anExp.wordCount + 1, alternatives: [...anExp.alternatives] }\r\n                );\r\n                completeArrayFrom = idx;\r\n            } else if (wordIdx === anExp.initPosition) {\r\n                //Sobre la primera palabra de la expresion\r\n                // console.log('Sobre la primera palabra de la expresion');\r\n                if (anExp.wordCount === 1) {\r\n                    //Si la expresion solo tiene una palabra\r\n                    // console.log('Si la expresion solo tiene una palabra');\r\n                } else {\r\n                    //Si la expresion tiene más de una palabra\r\n                    // console.log('Si la expresion tiene más de una palabra');\r\n                    updatedHiddenExpressions.push(\r\n                        { initPosition: wordIdx + 1, wordCount: anExp.wordCount - 1, alternatives: [...anExp.alternatives] }\r\n                    );\r\n                }\r\n                completeArrayFrom = idx;\r\n            } else if (wordIdx > anExp.initPosition && wordIdx < anExp.initPosition + anExp.wordCount - 1) {\r\n                //Sobre una palabra interior de la expresion\r\n                // console.log('Sobre una palabra interior de la expresion');\r\n                updatedHiddenExpressions = [\r\n                    ...updatedHiddenExpressions,\r\n                    {\r\n                        initPosition: anExp.initPosition,\r\n                        wordCount: wordIdx - anExp.initPosition,\r\n                        alternatives: []\r\n                    },\r\n                    {\r\n                        initPosition: wordIdx + 1,\r\n                        wordCount: anExp.initPosition + anExp.wordCount - wordIdx - 1,\r\n                        alternatives: []\r\n                    }\r\n                ];\r\n                completeArrayFrom = idx;\r\n            } else if (wordIdx === anExp.initPosition + anExp.wordCount - 1) {\r\n                //Sobre la ultima palabra de la expresion\r\n                // console.log('Sobre la ultima palabra de la expresion');\r\n                if (anExp.wordCount === 1) {\r\n                    //Si la expresion solo tiene una palabra\r\n                    // console.log('Si la expresion solo tiene una palabra');\r\n                } else {\r\n                    //Si la expresion tiene más de una palabra\r\n                    // console.log('Si la expresion tiene más de una palabra');\r\n                    updatedHiddenExpressions.push(\r\n                        {\r\n                            initPosition: anExp.initPosition,\r\n                            wordCount: anExp.wordCount - 1,\r\n                            alternatives: [...anExp.alternatives]\r\n                        }\r\n                    );\r\n                }\r\n                completeArrayFrom = idx;\r\n            } else if (idx < sentence.hiddenExpressions.length - 1\r\n                && wordIdx > anExp.initPosition + anExp.wordCount\r\n                && wordIdx < sentence.hiddenExpressions[idx + 1].initPosition - 1) {\r\n                //Entre dos expresiones de manera no contigua\r\n                // console.log('Entre dos expresiones de manera no contigua');\r\n                updatedHiddenExpressions = [\r\n                    ...updatedHiddenExpressions,\r\n                    {...anExp},\r\n                    { initPosition: wordIdx, wordCount: 1, alternatives: [] }\r\n                ];\r\n                completeArrayFrom = idx;\r\n            } else if (idx < sentence.hiddenExpressions.length - 1\r\n                && wordIdx === anExp.initPosition + anExp.wordCount\r\n                && wordIdx === sentence.hiddenExpressions[idx + 1].initPosition - 1) {\r\n                //Entre dos expresiones de manera contigua a ambas\r\n                // console.log('Entre dos expresiones de manera contigua a ambas');\r\n                updatedHiddenExpressions.push({\r\n                    initPosition: anExp.initPosition,\r\n                    wordCount: anExp.wordCount + sentence.hiddenExpressions[idx + 1].wordCount + 1,\r\n                    alternatives: []\r\n                });\r\n                completeArrayFrom = idx + 1;\r\n            } else if (wordIdx === anExp.initPosition + anExp.wordCount) {\r\n                //Contigua a la expresion por detras\r\n                // console.log('Contigua a la expresion por detras');\r\n                updatedHiddenExpressions.push({\r\n                    initPosition: anExp.initPosition,\r\n                    wordCount: anExp.wordCount + 1,\r\n                    alternatives: [...anExp.alternatives]\r\n                });\r\n                completeArrayFrom = idx;\r\n            } else if (idx === sentence.hiddenExpressions.length - 1) {\r\n                //Despues de la ultima expresion y de manera no contigua\r\n                // console.log('Despues de la ultima expresion y de manera no contigua');\r\n                updatedHiddenExpressions = [\r\n                    ...updatedHiddenExpressions,\r\n                    {...anExp},\r\n                    { initPosition: wordIdx, wordCount: 1, alternatives: [] }\r\n                ];\r\n                return true;\r\n            }\r\n\r\n            if (completeArrayFrom !== -1) {\r\n                if (idx < sentence.hiddenExpressions.length - 1) {\r\n                    updatedHiddenExpressions = [\r\n                        ...updatedHiddenExpressions,\r\n                        ...sentence.hiddenExpressions.slice(completeArrayFrom + 1)\r\n                    ];\r\n                }\r\n                return true;\r\n            }\r\n\r\n            updatedHiddenExpressions.push({...anExp});\r\n            return false;\r\n        });\r\n\r\n        onSentenceChange({\r\n            ...sentence,\r\n            hiddenExpressions: updatedHiddenExpressions\r\n        });\r\n    };\r\n\r\n    const handleDeleteClick = () => {\r\n        if (onSentenceRemove) {\r\n            onSentenceRemove();\r\n        }\r\n    };\r\n\r\n    const selected = (wordIdx: number) => {\r\n        return sentence.hiddenExpressions.some(\r\n            (anExpression: FillGapsChallengeExpression) => (\r\n                wordIdx >= anExpression.initPosition\r\n                && wordIdx <= anExpression.initPosition + anExpression.wordCount - 1\r\n            )\r\n        );\r\n    };\r\n\r\n    const handlePartChange = (partIdx: number, text: string) => {\r\n        const updatedParts = parts.map((aPart: SentencePart, idx: number) => (\r\n            {\r\n                ...aPart,\r\n                answer: idx === partIdx ? text : aPart.answer\r\n            }\r\n        ));\r\n        setParts(updatedParts);\r\n        onAnswersChange(updatedParts.filter(\r\n            (aPart: SentencePart) => aPart.type === 'hidden'\r\n        ).map(\r\n            (aPart: SentencePart) => ({\r\n                hiddenIdx: aPart.hiddenIdx,\r\n                value: aPart.answer\r\n            }))\r\n        );\r\n    };\r\n\r\n    const getPartStyle = (validValues: string[], value: string) => showResults ? (\r\n        validValues.some(\r\n            (aValidValue: string) => checkEqual(\r\n                aValidValue,\r\n                value,\r\n                checkCapitalLetters,\r\n                checkAccentMarks\r\n            )\r\n        ) ? { color: '#4caf50' } : { color: '#f44336' }\r\n    ) : {};\r\n\r\n    return (\r\n        <Grid container alignItems=\"center\" spacing={1}>\r\n            <Grid item>\r\n                <Icon fontSize=\"small\" color=\"secondary\">navigate_next</Icon>\r\n            </Grid>\r\n            {\r\n                mode === ComponentMode.Design\r\n                && splitSentence(sentence.text).map((aWord: string, idx: number) => (\r\n                    <Grid\r\n                        item\r\n                        key={`word_${idx}`}\r\n                        className={`${classes.word} ${selected(idx) ? classes.selected : ''}`}\r\n                        onClick={() => { handleWordClick(idx); }}\r\n                    >\r\n                        <Typography style={{fontSize: `${fontSize ? fontSize: 50}px`}}>\r\n                            {aWord}\r\n                        </Typography>\r\n                    </Grid>\r\n                ))\r\n            }\r\n            {\r\n                mode === ComponentMode.Design && (\r\n                    <Grid item>\r\n                        <IconButton size=\"small\" onClick={handleDeleteClick}>\r\n                            <Icon>delete</Icon>\r\n                        </IconButton>\r\n                    </Grid>\r\n                )\r\n            }\r\n            {\r\n                mode === ComponentMode.Play && (\r\n                    parts.map((aPart: SentencePart, idx: number) => (\r\n                        aPart.type === 'text' ? (\r\n                            <Grid\r\n                                item\r\n                                key={`part_${idx}`}\r\n                                className={classes.word}\r\n                            >\r\n                                <Typography style={{fontSize: `${fontSize ? fontSize: 50}px`}}>\r\n                                    {aPart.value}\r\n                                </Typography>\r\n                            </Grid>\r\n                        ) : (\r\n                            <Grid\r\n                                item\r\n                                key={`part_${idx}`}\r\n                            >\r\n                                {\r\n                                    fillMethod === FillMethod.Writing ? (\r\n                                        <TextField\r\n                                            key={`input_${idx}`}\r\n                                            value={aPart.answer}\r\n                                            color=\"primary\"\r\n                                            inputProps={{\r\n                                                style: {\r\n                                                    fontSize: `${fontSize ? fontSize : 50}px`,\r\n                                                    textAlign: 'center',\r\n                                                    color: colors.primary.main,\r\n                                                    ...getPartStyle(\r\n                                                        [\r\n                                                            aPart.value,\r\n                                                            ...sentence.hiddenExpressions[aPart.hiddenIdx].alternatives\r\n                                                        ],\r\n                                                        aPart.answer\r\n                                                    )\r\n                                                }\r\n                                            }}\r\n                                            onInput={\r\n                                                (evt: React.FormEvent<HTMLInputElement>) => {\r\n                                                    handlePartChange(idx, (evt.target as any).value);\r\n                                                }\r\n                                            }\r\n                                        />\r\n                                    ) : (\r\n                                        <DropGap\r\n                                            key={`input_${idx}`}\r\n                                            value={aPart.answer}\r\n                                            style={getPartStyle(\r\n                                                [\r\n                                                    aPart.value,\r\n                                                    ...sentence.hiddenExpressions[aPart.hiddenIdx].alternatives\r\n                                                ],\r\n                                                aPart.answer\r\n                                            )}\r\n                                            fontSize={fontSize}\r\n                                            onDrop={(droppedText: string) => {\r\n                                                handlePartChange(idx, droppedText);\r\n                                            }}\r\n                                        />\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                        )\r\n                    ))\r\n                )\r\n            }\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { FillTableChallenge, FillTableChallengeCell, FillTableChallengeConfig } from 'types';\r\nimport { ComponentMode } from 'enums';\r\nimport { FillTableChallenger, FillTableConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface FillTableChallengeDesignerProps {\r\n    challenge: FillTableChallenge,\r\n    onChallengeChange: (challenge: FillTableChallenge) => void\r\n}\r\n\r\nexport const FillTableChallengeDesigner: React.FC<FillTableChallengeDesignerProps> = (\r\n    props: FillTableChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustTable = (rowCount: number, columnCount: number): FillTableChallengeCell[][] => {\r\n        let items = [...challenge.items];\r\n        if (rowCount > items.length) {\r\n            const auxColumn = Array.from(Array(items[0].length)).map(() => ({ text: '', hidden: false}));\r\n            const newRows = Array.from(Array(rowCount - items.length))\r\n                .map(() => [...auxColumn]);\r\n            items = [...items, ...newRows];\r\n        } else if (rowCount < items.length) {\r\n            items = items.slice(0, rowCount);\r\n        }\r\n\r\n        if (columnCount > items[0].length) {\r\n            const newColumns = Array.from(Array(columnCount - items[0].length))\r\n                .map(() => ({ text: '', hidden: false}));\r\n            items = items.map((anItem: FillTableChallengeCell[]) => [...anItem, ...newColumns]);\r\n        } else if (columnCount < items[0].length) {\r\n            items = items.map((anItem: FillTableChallengeCell[]) => anItem.slice(0, columnCount));\r\n        }\r\n\r\n        return items;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: FillTableChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: FillTableChallengeConfig) => {\r\n        const items = readjustTable(config.rowCount, config.columnCount);\r\n        const updatedChallenge: FillTableChallenge = {\r\n            ...challenge,\r\n            items,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <FillTableChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <FillTableConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { ChallengeOptions, FillTableChallenge, FillTableChallengeCell } from 'types';\r\nimport { ComponentMode, Language } from 'enums';\r\nimport { ChallengeQuestion, Countdown, TableCell } from 'components';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    answerContainer: {\r\n        height: '80%'\r\n    },\r\n    optionContainer: {\r\n        height: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    cell: {\r\n        // border: 'solid 1px gray',\r\n        height: '60px'\r\n    }\r\n}));\r\n\r\nconst initialFillTableState = (challenge: FillTableChallenge): FillTableChallengeCell[][] => {\r\n    return challenge.items.map((aRow: FillTableChallengeCell[]) => {\r\n        const updatedColumns = aRow.map((aColumn: FillTableChallengeCell) => {\r\n            return aColumn.hidden ? {...aColumn, text: ''} : {...aColumn};\r\n        });\r\n        return updatedColumns;\r\n    });\r\n};\r\n\r\ninterface FillTableChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: FillTableChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: FillTableChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const FillTableChallenger: React.FC<FillTableChallengerProps> = (props: FillTableChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [fillTableState, setFillTableState] =useState<FillTableChallengeCell[][]>(initialFillTableState(challenge));\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const handleCellChange = (newCell: FillTableChallengeCell, rowIdx: number, columnIdx: number) => {\r\n        const updatedItems = (mode === ComponentMode.Design ? challenge.items : fillTableState)\r\n            .map((aRow: FillTableChallengeCell[], auxRowIdx: number) => {\r\n                if (auxRowIdx !== rowIdx) {\r\n                    return [...aRow];\r\n                }\r\n                const updatedColumns = aRow.map((aColumn: FillTableChallengeCell, auxColumnIdx: number) => {\r\n                    return auxColumnIdx === columnIdx ? {...newCell} : {...aColumn};\r\n                });\r\n                return updatedColumns;\r\n            });\r\n        if (mode === ComponentMode.Play) {\r\n            setFillTableState(updatedItems);\r\n        } else if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                items: updatedItems\r\n            });\r\n        }\r\n    };\r\n\r\n    const completed = () => {\r\n        return fillTableState.reduce(\r\n            (accRow: boolean, currentRow: FillTableChallengeCell[], rowIdx: number) => (\r\n                accRow\r\n                && currentRow.reduce(\r\n                    (accColumn: boolean, currentColumn: FillTableChallengeCell, columnIdx: number) => (\r\n                        accColumn\r\n                        && (\r\n                            (\r\n                                challenge.config.firstRowFixed\r\n                                && rowIdx === 0\r\n                                && challenge.config.firstColumnFixed\r\n                                && columnIdx === 0\r\n                            )\r\n                            || currentColumn.text !== ''\r\n                        )\r\n                    ),\r\n                    true\r\n                )\r\n            ),\r\n            true\r\n        );\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const result = fillTableState.reduce(\r\n            (accRow: boolean, currentRow: FillTableChallengeCell[], rowIdx: number) => (\r\n                accRow\r\n                && currentRow.reduce(\r\n                    (accColumn: boolean, currentColumn: FillTableChallengeCell, columnIdx: number) => (\r\n                        accColumn\r\n                        && (\r\n                            (\r\n                                challenge.config.firstRowFixed\r\n                                && rowIdx === 0\r\n                                && challenge.config.firstColumnFixed\r\n                                && columnIdx === 0\r\n                            )\r\n                            || currentColumn.text === challenge.items[rowIdx][columnIdx].text\r\n                        )\r\n                    ),\r\n                    true\r\n                )\r\n            ),\r\n            true\r\n        );\r\n\r\n        showResult(result);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='center' style={{ height: '100%' }}>\r\n                    <Grid item xs={2} style={{ height: '100%' }}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} style={{ height: '100%' }}>\r\n                        <Grid container alignItems=\"center\" style={{ height: '100%' }}>\r\n                            <Grid item xs>\r\n                                <Grid container direction=\"column\">\r\n                                    {\r\n                                        (mode === ComponentMode.Design ? challenge.items : fillTableState)\r\n                                            .map((aRow: FillTableChallengeCell[], rowIdx: number) => (\r\n                                                <Grid item xs key={`row_${rowIdx}`}>\r\n                                                    <Grid container>\r\n                                                        {\r\n                                                            aRow.map((aColumn: FillTableChallengeCell, columnIdx: number) => (\r\n                                                                <Grid item xs key={`column_${columnIdx}`} className={classes.cell}>\r\n                                                                    {\r\n                                                                        // mode === ComponentMode.Design\r\n                                                                        // &&\r\n                                                                        !(\r\n                                                                            challenge.config.firstRowFixed\r\n                                                                            && challenge.config.firstColumnFixed\r\n                                                                            && rowIdx === 0\r\n                                                                            && columnIdx === 0\r\n                                                                        ) && (\r\n                                                                            <TableCell\r\n                                                                                mode={mode}\r\n                                                                                cell={aColumn}\r\n                                                                                fixed={\r\n                                                                                    (\r\n                                                                                        challenge.config.firstRowFixed\r\n                                                                                        && rowIdx === 0\r\n                                                                                    ) || (\r\n                                                                                        challenge.config.firstColumnFixed\r\n                                                                                        && columnIdx === 0\r\n                                                                                    )\r\n                                                                                }\r\n                                                                                fontSize={challenge.config.itemsFontSize}\r\n                                                                                showResults={highlightResults}\r\n                                                                                success={\r\n                                                                                    (\r\n                                                                                        !challenge.config.firstRowFixed\r\n                                                                                        || rowIdx !== 0\r\n                                                                                    ) && (\r\n                                                                                        !challenge.config.firstColumnFixed\r\n                                                                                        || columnIdx !== 0\r\n                                                                                    ) && (\r\n                                                                                        challenge.items[rowIdx][columnIdx].text\r\n                                                                                        === fillTableState[rowIdx][columnIdx].text\r\n                                                                                    )\r\n                                                                                }\r\n                                                                                onCellChange={(cell)=>{\r\n                                                                                    handleCellChange(cell, rowIdx, columnIdx);\r\n                                                                                }}\r\n                                                                            />\r\n                                                                        )\r\n                                                                    }\r\n                                                                </Grid>\r\n                                                            ))\r\n                                                        }\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            ))\r\n                                    }\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || !completed()}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;{options?.language === Language.En ? 'Check' : 'Corregir'}\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControlLabel, Grid, makeStyles, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { ChallengeConfig, FillTableChallengeConfig } from 'types';\r\nimport { ChallengeConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface FillTableConfiguratorProps {\r\n    config: FillTableChallengeConfig,\r\n    onConfigChange?: (config: FillTableChallengeConfig) => void\r\n}\r\n\r\nexport const FillTableConfigurator: React.FC<FillTableConfiguratorProps> = (props: FillTableConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<FillTableChallengeConfig>(config);\r\n\r\n    const inputItemsFontSize = useRef({} as HTMLInputElement);\r\n    const inputRowCount = useRef({} as HTMLInputElement);\r\n    const checkFirstRowFixed = useRef({} as HTMLInputElement);\r\n    const inputColumnCount = useRef({} as HTMLInputElement);\r\n    const checkFirstColumnFixed = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    const handleBaseConfigChange = (newBaseConfig: ChallengeConfig) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            ...newBaseConfig\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <ChallengeConfigurator\r\n                    config={config}\r\n                    onConfigChange={handleBaseConfigChange}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemsFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemsFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('itemsFontSize', parseInt(inputItemsFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputRowCount}\r\n                    type='number'\r\n                    label='Número de filas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.rowCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('rowCount', parseInt(inputRowCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkFirstRowFixed}\r\n                            name='checkMultiselect'\r\n                            checked={formData.firstRowFixed}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('firstRowFixed', checkFirstRowFixed.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Primera fila fija'\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputColumnCount}\r\n                    type='number'\r\n                    label='Número de columnas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.columnCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('columnCount', parseInt(inputColumnCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkFirstColumnFixed}\r\n                            name='checkFirstColumnFixed'\r\n                            checked={formData.firstColumnFixed}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('firstColumnFixed', checkFirstColumnFixed.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Primera columna fija'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useRef, useState } from 'react';\r\nimport { Button, Grid, Icon, makeStyles, TextField } from '@material-ui/core';\r\nimport { FillTableChallengeCell } from 'types';\r\nimport { ComponentMode } from 'enums';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: 'solid 1px gray'\r\n    },\r\n    fixed: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: '#ffffff'\r\n    },\r\n    valid: {\r\n        backgroundColor: '#4caf50',\r\n    },\r\n    invalid: {\r\n        backgroundColor: '#f44336',\r\n    }\r\n}));\r\n\r\ninterface TableCellProps {\r\n    mode: ComponentMode,\r\n    cell: FillTableChallengeCell,\r\n    fixed?: boolean,\r\n    fontSize?: number,\r\n    showResults?: boolean,\r\n    success?: boolean,\r\n    onCellChange: (newCell: FillTableChallengeCell) => void\r\n}\r\n\r\nexport const TableCell: React.FC<TableCellProps> = (props: TableCellProps) => {\r\n    const { mode, cell, fixed, fontSize, showResults, success, onCellChange } = props;\r\n\r\n    const [formData, setFormData] = useState<FillTableChallengeCell>(cell);\r\n    const inputText = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTextChange = () => {\r\n        const newState = {\r\n            ...formData,\r\n            text: inputText.current.value\r\n        };\r\n        setFormData(newState);\r\n        onCellChange(newState);\r\n    };\r\n\r\n    const handleVisibilityChange = () => {\r\n        const newState ={\r\n            ...formData,\r\n            hidden: !formData.hidden\r\n        };\r\n        setFormData(newState);\r\n        onCellChange(newState);\r\n    };\r\n\r\n    return (\r\n        <Grid container alignItems=\"center\" className={`${classes.root} ${fixed ? classes.fixed : (showResults ? (success ? classes.valid : classes.invalid ) : '')}`}>\r\n            {\r\n                mode === ComponentMode.Design && !fixed && (\r\n                    <Grid item>\r\n                        <Button value=\"hidden\" onClick={handleVisibilityChange}>\r\n                            <Icon color={formData.hidden ? 'secondary' : 'primary'}>\r\n                                {\r\n                                    formData.hidden ? 'visibility_off' : 'visibility'\r\n                                }\r\n                            </Icon>\r\n                        </Button>\r\n                    </Grid>\r\n                )\r\n            }\r\n            <Grid item xs>\r\n                {\r\n                    (mode === ComponentMode.Design || formData.hidden) ? (\r\n                        <TextField\r\n                            inputRef={inputText}\r\n                            value={formData.text}\r\n                            color='secondary'\r\n                            style={{ marginLeft: '10px', width: 'calc(100% - 20px)' }}\r\n                            inputProps = {{\r\n                                style: {\r\n                                    textAlign: 'center',\r\n                                    fontSize: `${fontSize != null ? fontSize : 28}px`,\r\n                                    color: fixed || showResults ? '#ffffff': '#000000',\r\n                                    width: '100%'\r\n                                }\r\n                            }}\r\n                            onInput={handleTextChange}\r\n                        />\r\n                    ) : (\r\n                        <div\r\n                            style={{\r\n                                textAlign: 'center',\r\n                                fontSize: `${fontSize != null ? fontSize : 28}px`,\r\n                                color: fixed || showResults ? '#ffffff': '#000000'\r\n                            }}\r\n                        >\r\n                            {formData.text}\r\n                        </div>\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useRef, useState } from 'react';\r\nimport { Box, Button, Dialog, DialogTitle, FormControlLabel, Grid, makeStyles, Switch } from '@material-ui/core';\r\nimport { TestOptions } from 'types';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n}));\r\n\r\ninterface DialogTestOptionsProps {\r\n    open: boolean,\r\n    onAccept: (options: TestOptions) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const DialogTestOptions: React.FC<DialogTestOptionsProps> = (props: DialogTestOptionsProps) => {\r\n    const {open, onAccept, onCancel} = props;\r\n\r\n    const [formState, setFormState] = useState<TestOptions>({ ignoreTimeLimit: false, autoNext: true });\r\n\r\n    const checkIgnoreTimeLimit = useRef({} as HTMLInputElement);\r\n    const checkAutoNextChallenge = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleAttributeChange = (attribute: string, value: boolean) => {\r\n        setFormState({\r\n            ...formState,\r\n            [attribute]: value\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        onAccept(formState);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth='sm'\r\n        >\r\n            <DialogTitle>Opciones del cuestionario</DialogTitle>\r\n            <Box className={classes.dialogContainer}>\r\n                <Grid\r\n                    container\r\n                    direction='column'\r\n                    spacing={2}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    inputRef={checkIgnoreTimeLimit}\r\n                                    name='checkMultiselect'\r\n                                    checked={formState.ignoreTimeLimit}\r\n                                    color='secondary'\r\n                                    onChange={() => { handleAttributeChange('ignoreTimeLimit', checkIgnoreTimeLimit.current.checked); }}\r\n                                />\r\n                            }\r\n                            label='Desactivar tiempo límite de las preguntas'\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    inputRef={checkAutoNextChallenge}\r\n                                    name='checkMultiselect'\r\n                                    checked={formState.autoNext}\r\n                                    color='secondary'\r\n                                    onChange={() => { handleAttributeChange('autoNext', checkAutoNextChallenge.current.checked); }}\r\n                                />\r\n                            }\r\n                            label='Avanzar automáticamente a la siguiente pregunta'\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container justify='flex-end' spacing={1}>\r\n                            <Grid item>\r\n                                <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Box, Dialog, DialogTitle, makeStyles } from '@material-ui/core';\r\nimport { Project } from 'types';\r\nimport { ProjectForm } from 'components';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n}));\r\n\r\ninterface DialogProjectFormProps {\r\n    open: boolean,\r\n    project?: Project,\r\n    onAccept: (project: Project) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const DialogProjectForm: React.FC<DialogProjectFormProps> = (props: DialogProjectFormProps) => {\r\n    const {open, project, onAccept, onCancel} = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth='sm'\r\n        >\r\n            <DialogTitle>Proyecto</DialogTitle>\r\n            <Box className={classes.dialogContainer}>\r\n                <ProjectForm\r\n                    project={project}\r\n                    onAccept={onAccept}\r\n                    onCancel={onCancel}\r\n                />\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { useRef, useState } from 'react';\r\nimport { Button, Grid, TextField } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Project } from 'types';\r\n\r\ninterface FormState {\r\n    name: string,\r\n    description: string\r\n}\r\n\r\nconst initialState = (project?: Project): FormState => {\r\n    if (project != null) {\r\n        return {\r\n            name: project.name,\r\n            description: project.description || ''\r\n        };\r\n    }\r\n    return {\r\n        name: '',\r\n        description: ''\r\n    };\r\n};\r\n\r\ninterface ProjectFormProps {\r\n    project?: Project,\r\n    onAccept: (newProject: Project) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const ProjectForm: React.FC<ProjectFormProps> = (props: ProjectFormProps) => {\r\n    const { project, onAccept, onCancel } = props;\r\n\r\n    const [formState, setFormState] = useState<FormState>(initialState(project));\r\n\r\n    const inputName = useRef({} as HTMLInputElement);\r\n    const inputDescription = useRef({} as HTMLInputElement);\r\n\r\n    const handleNameChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            name: inputName.current.value\r\n        });\r\n    };\r\n\r\n    const handleDescriptionChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            description: inputDescription.current.value\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        const newProject: Project = project ?\r\n            {\r\n                ...project,\r\n                name: inputName.current.value,\r\n                description: inputDescription.current.value\r\n            }\r\n            : {\r\n                id: uuidv4(),\r\n                name: inputName.current.value,\r\n                description: inputDescription.current.value,\r\n                tests: []\r\n            };\r\n\r\n        onAccept(newProject);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            direction='column'\r\n            spacing={2}\r\n        >\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputName}\r\n                    label='Nombre'\r\n                    fullWidth\r\n                    value={formState.name}\r\n                    onInput={handleNameChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputDescription}\r\n                    label='Descripción'\r\n                    fullWidth\r\n                    value={formState.description}\r\n                    onInput={handleDescriptionChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid container justify='flex-end' spacing={1}>\r\n                    <Grid item>\r\n                        <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { ChangeEvent, Fragment, useState } from 'react';\r\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Button, Dialog, DialogTitle, Divider, Grid, Icon, IconButton, makeStyles, Snackbar, SnackbarContent, Typography } from '@material-ui/core';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Project, Test } from 'types';\r\nimport { DialogConfirm, JsonLoader, ProjectForm, TestList } from 'components';\r\nimport { isValidProject } from 'utils';\r\nimport { colors } from 'theme';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15)\r\n    },\r\n    secondaryHeading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        color: colors.secondary.main\r\n    },\r\n    gridContainer: {\r\n        padding: '0px 10px'\r\n    },\r\n    gridItems: {\r\n        flexGrow: 1,\r\n    },\r\n    messageControl: {\r\n        backgroundColor: colors.error,\r\n        color: colors.font.errorContrast\r\n    },\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    }\r\n}));\r\n\r\ninterface ProjectListProps {\r\n    projects: Project[],\r\n    setProjects: (newProjects: Project[]) => void\r\n}\r\n\r\nexport const ProjectList: React.FC<ProjectListProps> = (props: ProjectListProps) => {\r\n    const { projects, setProjects } = props;\r\n\r\n    const history = useHistory();\r\n\r\n    const [expandedProject, setExpandedProject] = React.useState<string | false>(false);\r\n    const [preimportedProject, setPreimportedProject] = React.useState<Project | undefined>();\r\n    const [openOverwriteProject, setOpenOverwriteProject] = React.useState<boolean>(false);\r\n    const [openProjectForm, setOpenProjectForm] = useState<boolean>(false);\r\n    const [openRemoveProjectConfirm, setOpenRemoveProjectConfirm] = useState<boolean>(false);\r\n    const [selectedProject, setSelectedProject] = useState<Project>();\r\n    const [openMessage, setOpenMessage] = useState<boolean>(false);\r\n    const [messageText, setMessageText] = useState<string>('');\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleExpandChange = (project: Project, isExpanded: boolean) => {\r\n        setExpandedProject(isExpanded ? project.id : false);\r\n    };\r\n\r\n    const handleNewProjectClick = () => {\r\n        setOpenProjectForm(true);\r\n    };\r\n\r\n    const handleEditProjectClick = (project: Project) => {\r\n        setSelectedProject(project);\r\n        setOpenProjectForm(true);\r\n    };\r\n\r\n    const handleRemoveProjectClick = (project: Project) => {\r\n        setSelectedProject(project);\r\n        setOpenRemoveProjectConfirm(true);\r\n    };\r\n\r\n    const handleExportProjectClick = (project: Project) => {\r\n        const element = document.createElement('a');\r\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(project)));\r\n        element.setAttribute('download', project.name.replace(/ /g, '_'));\r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n        element.click();\r\n        document.body.removeChild(element);\r\n    };\r\n\r\n    const handleProjectFormAccept = (newProject: Project) => {\r\n        if (selectedProject != null) {\r\n            setProjects(projects.map((aProject: Project) => aProject.id === newProject.id ? newProject : aProject));\r\n        } else {\r\n            setProjects([\r\n                ...projects,\r\n                {\r\n                    ...newProject\r\n                }\r\n            ]);\r\n        }\r\n        setSelectedProject(undefined);\r\n        setOpenProjectForm(false);\r\n    };\r\n\r\n    const handleProjectFormCancel = () => {\r\n        setSelectedProject(undefined);\r\n        setOpenProjectForm(false);\r\n    };\r\n\r\n    const handleImportProject = (project: unknown) => {\r\n        const newProject = project as Project;\r\n        if (!isValidProject(newProject)) {\r\n            setMessageText('El proyecto es inválido');\r\n            setOpenMessage(true);\r\n        }\r\n        const exist = projects.find((aProject: Project) => aProject.id === newProject.id) != null;\r\n        if (!exist) {\r\n            setProjects([\r\n                ...projects,\r\n                {...newProject}\r\n            ]);\r\n        } else {\r\n            setPreimportedProject(newProject);\r\n            setOpenOverwriteProject(true);\r\n        }\r\n    };\r\n\r\n    const handleConfirmOverwriteProject = () => {\r\n        if (preimportedProject) {\r\n            setProjects(\r\n                projects.map((aProject: Project) => aProject.id === preimportedProject.id ? preimportedProject : aProject)\r\n            );\r\n            setPreimportedProject(undefined);\r\n        }\r\n        setOpenOverwriteProject(false);\r\n    };\r\n\r\n    const handleRefuseOverwriteProject = () => {\r\n        if (preimportedProject) {\r\n            const newProject = {\r\n                ...preimportedProject,\r\n                id: uuidv4(),\r\n                name: `Copia ${preimportedProject?.name}`\r\n            };\r\n            setProjects([\r\n                ...projects,\r\n                {...newProject}\r\n            ]);\r\n            setPreimportedProject(undefined);\r\n        }\r\n        setOpenOverwriteProject(false);\r\n    };\r\n\r\n    const handleImportProjectError = () => {\r\n        setMessageText('Se produjo un error en la importación');\r\n        setOpenMessage(true);\r\n    };\r\n\r\n    const handleConfirmRemoveProject = () => {\r\n        if (selectedProject != null) {\r\n            setProjects(projects.filter((aProject: Project) => aProject.id !== selectedProject.id));\r\n        }\r\n        setOpenRemoveProjectConfirm(false);\r\n    };\r\n\r\n    const handleRefuseRemoveProject = () => {\r\n        setOpenRemoveProjectConfirm(false);\r\n    };\r\n\r\n    const handleCreateTest = (projectId: string, test: Test, openDesign: boolean) => {\r\n        const theProject = projects.find((aProject: Project) => aProject.id === projectId);\r\n        const updating = theProject != null && theProject.tests.some((aTest: Test) => aTest.id === test.id);\r\n\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return {...aProject};\r\n            }\r\n            if (updating) {\r\n                const updatedTests = aProject.tests.map((aTest: Test) => aTest.id === test.id ? {...test} : {...aTest});\r\n                return {\r\n                    ...aProject,\r\n                    tests: [...updatedTests]\r\n                };\r\n            }\r\n            return {\r\n                ...aProject,\r\n                tests: [...aProject.tests, test]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        if (!updating && openDesign) {\r\n            history.push(`/designer/${projectId}/${test.id}`);\r\n        }\r\n    };\r\n\r\n    const handleDeleteTest = (projectId: string, test: Test) => {\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return {...aProject};\r\n            }\r\n            const updatedTests = aProject.tests.filter((aTest: Test) => aTest.id !== test.id);\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n    };\r\n\r\n    const handleMessageClose = () => {\r\n        setOpenMessage(false);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <DialogConfirm\r\n                open={openOverwriteProject}\r\n                text=\"El proyecto ya existe. ¿Qué deseas hacer?\"\r\n                acceptButtonText=\"Sobreescribir proyecto\"\r\n                cancelButtonText=\"Crear nueva copia\"\r\n                width=\"sm\"\r\n                onConfirm={handleConfirmOverwriteProject}\r\n                onRefuse={handleRefuseOverwriteProject}\r\n            />\r\n            <Dialog\r\n                open={openProjectForm}\r\n                fullWidth\r\n                maxWidth='sm'\r\n            >\r\n                <DialogTitle>Proyecto</DialogTitle>\r\n                <Box className={classes.dialogContainer}>\r\n                    <ProjectForm\r\n                        project={selectedProject}\r\n                        onAccept={handleProjectFormAccept}\r\n                        onCancel={handleProjectFormCancel}\r\n                    />\r\n                </Box>\r\n            </Dialog>\r\n            <DialogConfirm\r\n                open={openRemoveProjectConfirm}\r\n                text='¿Seguro que deseas eliminar el proyecto?'\r\n                width='xs'\r\n                onConfirm={handleConfirmRemoveProject}\r\n                onRefuse={handleRefuseRemoveProject}\r\n            />\r\n            <Snackbar\r\n                open={openMessage}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                autoHideDuration={3000}\r\n                onClose={handleMessageClose}\r\n            >\r\n                <SnackbarContent\r\n                    message={\r\n                        <Grid container spacing={4}>\r\n                            <Grid item xs={1}>\r\n                                <Icon>error</Icon>\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <Typography>{messageText}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    }\r\n                    className={classes.messageControl}\r\n                />\r\n            </Snackbar>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <Grid container direction='row' justify='center' alignItems='center' spacing={2} className={classes.gridContainer}>\r\n                        <Grid item className={classes.gridItems}>\r\n                            <Typography variant='h6'>\r\n                                Proyectos\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button\r\n                                style={{ color: colors.primary.dark }}\r\n                                onClick={handleNewProjectClick}\r\n                            >\r\n                                Nuevo proyecto\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <JsonLoader\r\n                                label=\"Importar proyecto\"\r\n                                onDataLoaded={handleImportProject}\r\n                                onError={handleImportProjectError}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    {\r\n                        projects.map((aProject: Project) => (\r\n                            <Accordion\r\n                                key={aProject.id}\r\n                                expanded={expandedProject === aProject.id}\r\n                                onChange={ (event: ChangeEvent<unknown>, isExpanded: boolean) => {\r\n                                    handleExpandChange(aProject, isExpanded);\r\n                                }}\r\n                            >\r\n                                <AccordionSummary title={aProject.description}>\r\n                                    <Grid container justify='space-between' alignItems='center'>\r\n                                        <Grid item xs={3}>\r\n                                            <Typography className={classes.heading}>{aProject.name}</Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={7}>\r\n                                            <Typography className={classes.secondaryHeading}>\r\n                                                {`${aProject.tests.length} cuestionario${aProject.tests.length !== 1 ? 's' : ''}`}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <IconButton\r\n                                                title='Descargar proyecto'\r\n                                                color='primary'\r\n                                                onClick={(evt) => {\r\n                                                    evt.stopPropagation();\r\n                                                    handleExportProjectClick(aProject);\r\n                                                }}\r\n                                            >\r\n                                                <Icon>download</Icon>\r\n                                            </IconButton>\r\n                                            {\r\n                                                <IconButton\r\n                                                    title='Editar proyecto'\r\n                                                    color='primary'\r\n                                                    onClick={(evt) => {\r\n                                                        evt.stopPropagation();\r\n                                                        handleEditProjectClick(aProject);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon>edit</Icon>\r\n                                                </IconButton>\r\n                                            }\r\n                                            {\r\n                                                <IconButton\r\n                                                    title='Eliminar proyecto'\r\n                                                    onClick={(evt) => {\r\n                                                        evt.stopPropagation();\r\n                                                        handleRemoveProjectClick(aProject);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon>delete</Icon>\r\n                                                </IconButton>\r\n                                            }\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </AccordionSummary>\r\n                                <AccordionDetails>\r\n                                    <TestList\r\n                                        project={aProject}\r\n                                        onCreateTest={handleCreateTest}\r\n                                        onDeleteTest={handleDeleteTest}\r\n                                    />\r\n                                </AccordionDetails>\r\n                            </Accordion>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useRef, useState } from 'react';\r\nimport { Button, Grid, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Test } from 'types';\r\nimport { Language } from 'enums';\r\n\r\ninterface TestState {\r\n    name: string,\r\n    description: string,\r\n    language: Language\r\n}\r\n\r\nconst initialState = (test?: Test): TestState => {\r\n    if (test != null) {\r\n        return {\r\n            name: test.name,\r\n            description: test.description || '',\r\n            language: test.language || Language.Es\r\n        };\r\n    }\r\n    return {\r\n        name: '',\r\n        description: '',\r\n        language: Language.Es\r\n    };\r\n};\r\n\r\ninterface TestFormProps {\r\n    test?: Test,\r\n    onAccept: (newTest: Test) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const TestForm: React.FC<TestFormProps> = (props: TestFormProps) => {\r\n    const { test, onAccept, onCancel } = props;\r\n\r\n    const [formState, setFormState] = useState<TestState>(initialState(test));\r\n\r\n    const inputName = useRef({} as HTMLInputElement);\r\n    const inputDescription = useRef({} as HTMLInputElement);\r\n\r\n    const handleNameChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            name: inputName.current.value\r\n        });\r\n    };\r\n\r\n    const handleDescriptionChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            description: inputDescription.current.value\r\n        });\r\n    };\r\n\r\n    const handleLanguageChange = (evt: React.ChangeEvent<{ name?: string | undefined, value: unknown}>) => {\r\n        const updatedLanguage = evt.target.value === Language.Es.toString() ? Language.Es : Language.En;\r\n        setFormState({\r\n            ...formState,\r\n            language: updatedLanguage\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        const newTest: Test = test ?\r\n            {\r\n                ...test,\r\n                name: formState.name,\r\n                description: formState.description,\r\n                language: formState.language\r\n            }\r\n            : {\r\n                id: uuidv4(),\r\n                name: formState.name,\r\n                description: formState.description,\r\n                language: formState.language,\r\n                challenges: []\r\n            };\r\n\r\n        onAccept(newTest);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            direction='column'\r\n            spacing={4}\r\n        >\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputName}\r\n                    id='newTestNameInput'\r\n                    label='Nombre'\r\n                    fullWidth\r\n                    value={formState.name}\r\n                    onInput={handleNameChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputDescription}\r\n                    id='newTestNameInput'\r\n                    label='Descripción'\r\n                    fullWidth\r\n                    value={formState.description}\r\n                    onInput={handleDescriptionChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <InputLabel shrink id=\"label-language\">\r\n                    Idioma\r\n                </InputLabel>\r\n                <Select\r\n                    labelId=\"label-language\"\r\n                    id='newTestLanguageInput'\r\n                    label='Idioma'\r\n                    fullWidth\r\n                    value={formState.language.toString()}\r\n                    onChange={handleLanguageChange}\r\n                >\r\n                    <MenuItem value={Language.Es.toString()}>Español</MenuItem>\r\n                    <MenuItem value={Language.En.toString()}>Inglés</MenuItem>\r\n                </Select>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid container justify='flex-end' spacing={1}>\r\n                    <Grid item>\r\n                        <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { Fragment, useState } from 'react';\r\nimport { Box, Button, Dialog, DialogTitle, Divider, Grid, Icon, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText, makeStyles, Menu, MenuItem, Snackbar, SnackbarContent, Typography } from '@material-ui/core';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { colors } from 'theme';\r\nimport { Project, Test, TestOptions } from 'types';\r\nimport { isValidTest } from 'utils';\r\nimport { DialogConfirm, DialogTestOptions, JsonLoader, TestForm } from 'components';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    listItemSecondaryAction: {\r\n        visibility: 'hidden'\r\n    },\r\n    listItem: {\r\n        '&:hover $listItemSecondaryAction': {\r\n            visibility: 'inherit'\r\n        }\r\n    },\r\n    bottomContainer: {\r\n        marginTop: '10px'\r\n    },\r\n    play: {\r\n        color: colors.action\r\n    },\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n    messageControl: {\r\n        backgroundColor: colors.error,\r\n        color: colors.font.errorContrast\r\n    }\r\n}));\r\n\r\ninterface PlayOptionsState {\r\n    projectId?: string,\r\n    testId?: string,\r\n    openOptions: boolean\r\n}\r\ninterface TestListProps {\r\n    project: Project,\r\n    onCreateTest: (projectId: string, test: Test, openDesign: boolean) => void,\r\n    onDeleteTest: (projectId: string, test: Test) => void\r\n}\r\n\r\nexport const TestList: React.FC<TestListProps> = (props: TestListProps) => {\r\n    const { project, onCreateTest, onDeleteTest } = props;\r\n\r\n    const history = useHistory();\r\n\r\n    const [selectedTest, setSelectedTest] = React.useState<Test | undefined>();\r\n    const [preimportedTest, setPreimportedTest] = React.useState<Test | undefined>();\r\n    const [anchorElEdit, setAnchorElEdit] = React.useState<Element | null>(null);\r\n    const [openOverwriteTest, setOpenOverwriteTest] = React.useState<boolean>(false);\r\n    const [openTestForm, setOpenTestForm] = useState<boolean>(false);\r\n    const [openRemoveTestConfirm, setOpenRemoveTestConfirm] = useState<boolean>(false);\r\n    const [playOptionsState, setPlayOptionsState] = useState<PlayOptionsState>();\r\n    const [openMessage, setOpenMessage] = useState<boolean>(false);\r\n    const [messageText, setMessageText] = useState<string>('');\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleCreateTestClick = () => {\r\n        setOpenTestForm(true);\r\n    };\r\n\r\n    const handleImportTest = (test: unknown) => {\r\n        const newTest = test as Test;\r\n        if (!isValidTest(newTest)) {\r\n            setMessageText('El cuestionario es inválido');\r\n            setOpenMessage(true);\r\n        }\r\n        const exist = project.tests.find((aTest: Test) => aTest.id === newTest.id) != null;\r\n        if (!exist) {\r\n            onCreateTest(project.id, newTest, false);\r\n        } else {\r\n            setPreimportedTest(newTest);\r\n            setOpenOverwriteTest(true);\r\n        }\r\n    };\r\n\r\n    const handleConfirmOverwriteTest = () => {\r\n        if (preimportedTest) {\r\n            onCreateTest(project.id, preimportedTest, false);\r\n            setPreimportedTest(undefined);\r\n        }\r\n        setOpenOverwriteTest(false);\r\n    };\r\n\r\n    const handleRefuseOverwriteTest = () => {\r\n        if (preimportedTest) {\r\n            const newTest = {\r\n                ...preimportedTest,\r\n                id: uuidv4(),\r\n                name: `Copia ${preimportedTest?.name}`\r\n            };\r\n            onCreateTest(project.id, newTest, false);\r\n            setPreimportedTest(undefined);\r\n        }\r\n        setOpenOverwriteTest(false);\r\n    };\r\n\r\n    const handleImportTestError = () => {\r\n        setMessageText('Se produjo un error en la importación');\r\n        setOpenMessage(true);\r\n    };\r\n\r\n    const handleTestFormAccept = (newTest: Test) => {\r\n        onCreateTest(project.id, newTest, true);\r\n        setSelectedTest(undefined);\r\n        setOpenTestForm(false);\r\n    };\r\n\r\n    const handleTestFormCancel = () => {\r\n        setSelectedTest(undefined);\r\n        setOpenTestForm(false);\r\n    };\r\n\r\n    const handleEditClick = (evt: React.MouseEvent<HTMLButtonElement>, test: Test) => {\r\n        setSelectedTest(test);\r\n        setAnchorElEdit(evt.currentTarget);\r\n    };\r\n\r\n    const handleCloseEditMenu = () => {\r\n        setAnchorElEdit(null);\r\n    };\r\n\r\n    const handleEditDataClick = () => {\r\n        setAnchorElEdit(null);\r\n        setOpenTestForm(true);\r\n    };\r\n\r\n    const handleExportTestClick = (test: Test) => {\r\n        const element = document.createElement('a');\r\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(test)));\r\n        element.setAttribute('download', test.name.replace(/ /g, '_'));\r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n        element.click();\r\n        document.body.removeChild(element);\r\n    };\r\n\r\n    const handleRemoveTestClick = (test: Test) => {\r\n        setSelectedTest(test);\r\n        setOpenRemoveTestConfirm(true);\r\n    };\r\n\r\n    const handleConfirmRemoveTest = () => {\r\n        if (selectedTest != null) {\r\n            onDeleteTest(project.id, selectedTest);\r\n        }\r\n        setSelectedTest(undefined);\r\n        setOpenRemoveTestConfirm(false);\r\n    };\r\n\r\n    const handleRefuseRemoveTest = () => {\r\n        setSelectedTest(undefined);\r\n        setOpenRemoveTestConfirm(false);\r\n    };\r\n\r\n    const handlePlayClick = (projectId: string, testId: string) => {\r\n        setPlayOptionsState({\r\n            projectId,\r\n            testId,\r\n            openOptions: true\r\n        });\r\n    };\r\n\r\n    const handleAcceptPlayOptions = (testOptions: TestOptions) => {\r\n        history.push(`/play/${playOptionsState?.projectId}/${playOptionsState?.testId}?ignoreTimeLimit=${testOptions.ignoreTimeLimit}&autoNext=${testOptions.autoNext}`, playOptionsState);\r\n        setPlayOptionsState({\r\n            openOptions: false\r\n        });\r\n    };\r\n\r\n    const handleCancelPlayOptions = () => {\r\n        setPlayOptionsState({\r\n            openOptions: false\r\n        });\r\n    };\r\n\r\n    const handleMessageClose = () => {\r\n        setOpenMessage(false);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Menu\r\n                id=\"addNewMenu\"\r\n                anchorEl={anchorElEdit}\r\n                keepMounted\r\n                open={Boolean(anchorElEdit)}\r\n                onClose={handleCloseEditMenu}\r\n            >\r\n                <MenuItem onClick={handleEditDataClick}>\r\n                    <Typography variant=\"subtitle2\">\r\n                        Editar datos generales\r\n                    </Typography>\r\n                </MenuItem>\r\n                <MenuItem component={Link} to={`/designer/${project.id}/${selectedTest?.id}`}>\r\n                    <Typography variant=\"subtitle2\">\r\n                        Editar preguntas\r\n                    </Typography>\r\n                </MenuItem>\r\n            </Menu>\r\n            <DialogConfirm\r\n                open={openOverwriteTest}\r\n                text=\"El cuestionario ya existe en este proyecto. ¿Qué deseas hacer?\"\r\n                acceptButtonText=\"Sobreescribir cuestionario\"\r\n                cancelButtonText=\"Crear nueva copia\"\r\n                width=\"sm\"\r\n                onConfirm={handleConfirmOverwriteTest}\r\n                onRefuse={handleRefuseOverwriteTest}\r\n            />\r\n            <Dialog\r\n                open={openTestForm}\r\n                fullWidth\r\n                maxWidth='sm'\r\n            >\r\n                <DialogTitle>Cuestionario</DialogTitle>\r\n                <Box className={classes.dialogContainer}>\r\n                    <TestForm\r\n                        test={selectedTest}\r\n                        onAccept={handleTestFormAccept}\r\n                        onCancel={handleTestFormCancel}\r\n                    />\r\n                </Box>\r\n            </Dialog>\r\n            <DialogConfirm\r\n                open={openRemoveTestConfirm}\r\n                text='¿Seguro que deseas eliminar el proyecto?'\r\n                width='xs'\r\n                onConfirm={handleConfirmRemoveTest}\r\n                onRefuse={handleRefuseRemoveTest}\r\n            />\r\n            <Snackbar\r\n                open={openMessage}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                autoHideDuration={3000}\r\n                onClose={handleMessageClose}\r\n            >\r\n                <SnackbarContent\r\n                    message={\r\n                        <Grid container spacing={4}>\r\n                            <Grid item xs={1}>\r\n                                <Icon>error</Icon>\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <Typography>{messageText}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    }\r\n                    className={classes.messageControl}\r\n                />\r\n            </Snackbar>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    {\r\n                        project.tests.length === 0\r\n                        && <Typography>No hay cuestionarios</Typography>\r\n                    }\r\n                    {\r\n                        project.tests.length > 0\r\n                        && <List>\r\n                            {\r\n                                project.tests.map((aTest: Test) => (\r\n                                    <Fragment key={`fragment_${aTest.id}`}>\r\n                                        <ListItem\r\n                                            button\r\n                                            key={aTest.id}\r\n                                            alignItems='flex-start'\r\n                                            classes={{ container: classes.listItem }}\r\n                                        >\r\n                                            <Grid container>\r\n                                                <Grid item xs={6}>\r\n                                                    <ListItemText\r\n                                                        primary={\r\n                                                            aTest.name\r\n                                                        }\r\n                                                        secondary={\r\n                                                            <Typography\r\n                                                                component='span'\r\n                                                                variant='body2'\r\n                                                                className={classes.inline}\r\n                                                                color='textPrimary'\r\n                                                            >\r\n                                                                {aTest.description}\r\n                                                            </Typography>\r\n                                                        }\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={2}>\r\n                                                    <ListItemText\r\n                                                        secondary={`${aTest.challenges.length} pregunta${aTest.challenges.length !== 1 ? 's' : ''}`}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <ListItemSecondaryAction className={classes.listItemSecondaryAction}>\r\n                                                <Grid container>\r\n                                                    <Grid item>\r\n                                                        {\r\n                                                            isValidTest(aTest) ? (\r\n                                                                <IconButton title='Jugar!' onClick={() => { handlePlayClick(project.id, aTest.id); }}>\r\n                                                                    <Icon className={classes.play}>play_circle_filled</Icon>\r\n                                                                </IconButton>\r\n                                                            ) : (\r\n                                                                <IconButton title='Errores en el cuestionario'>\r\n                                                                    <Icon color='error'>error</Icon>\r\n                                                                </IconButton>\r\n                                                            )\r\n                                                        }\r\n                                                    </Grid>\r\n                                                    <Grid item>\r\n                                                        <IconButton title='Editar cuestionario' onClick={(evt: React.MouseEvent<HTMLButtonElement>) => {\r\n                                                            evt.stopPropagation();\r\n                                                            handleEditClick(evt, aTest);\r\n                                                        }}>\r\n                                                            <Icon color='primary'>edit</Icon>\r\n                                                        </IconButton>\r\n                                                    </Grid>\r\n                                                    <Grid item>\r\n                                                        <IconButton title='Descargar cuestionario' onClick={(evt) => {\r\n                                                            evt.stopPropagation();\r\n                                                            handleExportTestClick(aTest);\r\n                                                        }}>\r\n                                                            <Icon>download</Icon>\r\n                                                        </IconButton>\r\n                                                    </Grid>\r\n                                                    <Grid item>\r\n                                                        <IconButton title='Eliminar cuestionario' onClick={(evt) => {\r\n                                                            evt.stopPropagation();\r\n                                                            handleRemoveTestClick(aTest);\r\n                                                        }}>\r\n                                                            <Icon>delete</Icon>\r\n                                                        </IconButton>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </ListItemSecondaryAction>\r\n                                        </ListItem>\r\n                                        <Divider variant='inset' component='li' />\r\n                                    </Fragment>\r\n                                ))\r\n                            }\r\n                        </List>\r\n                    }\r\n                    <Grid item xs={12} className={classes.bottomContainer}>\r\n                        <Grid container justify='flex-end' spacing={1}>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant='contained'\r\n                                    color='primary'\r\n                                    onClick={handleCreateTestClick}\r\n                                >\r\n                                    Nuevo cuestionario\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <JsonLoader\r\n                                    label=\"Importar cuestionario\"\r\n                                    onDataLoaded={handleImportTest}\r\n                                    onError={handleImportTestError}\r\n                                />\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            {\r\n                playOptionsState && (\r\n                    <DialogTestOptions\r\n                        open={playOptionsState.openOptions}\r\n                        onAccept={handleAcceptPlayOptions}\r\n                        onCancel={handleCancelPlayOptions}\r\n                    />\r\n                )\r\n            }\r\n        </Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { MatchChallenge, MatchChallengeConfig, MatchChallengePair } from 'types';\r\nimport { ComponentMode } from 'enums';\r\nimport { MatchChallenger, MatchConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface MatchChallengeDesignerProps {\r\n    challenge: MatchChallenge,\r\n    onChallengeChange: (challenge: MatchChallenge) => void\r\n}\r\n\r\nexport const MatchChallengeDesigner: React.FC<MatchChallengeDesignerProps> = (\r\n    props: MatchChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustPairs = (pairsCount: number): MatchChallengePair[] => {\r\n        let pairs = [...challenge.pairs];\r\n        if (pairsCount > pairs.length) {\r\n            const newPairs = Array.from(Array(pairsCount - pairs.length))\r\n                .map(() => ({ source: '', destination: ''}));\r\n            pairs = [...pairs, ...newPairs];\r\n        } else if (pairsCount < pairs.length) {\r\n            pairs = pairs.slice(0, pairsCount);\r\n        }\r\n        return pairs;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: MatchChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: MatchChallengeConfig) => {\r\n        const pairs = readjustPairs(config.pairsCount);\r\n        const updatedChallenge: MatchChallenge = {\r\n            ...challenge,\r\n            pairs,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <MatchChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <MatchConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport Xarrow from 'react-xarrows/lib';\r\nimport useSound from 'use-sound';\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { ChallengeOptions, MatchChallenge, MatchChallengePair, MatchItem } from 'types';\r\nimport { ComponentMode, Language, MatchElement } from 'enums';\r\nimport { ChallengeQuestion, Countdown, MatchDestination, MatchSource } from 'components';\r\nimport { colors } from 'theme';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    answerContainer: {\r\n        height: '80%',\r\n        width: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionsContainer: {\r\n        border: 'solid 1px gray',\r\n        backgroundColor: '#ffffff',\r\n        minHeight: '60px'\r\n    },\r\n    sentencesContainer: {\r\n        paddingLeft: '10px'\r\n    }\r\n}));\r\n\r\ninterface MatchAnswer {\r\n    source: MatchItem,\r\n    destination: MatchItem\r\n}\r\n\r\nconst reorderItems = (texts: string[], mode: ComponentMode): string[] => {\r\n    let list: string[] = [...texts];\r\n    if (mode === ComponentMode.Play) {\r\n        list = list.sort(() => Math.random() - 0.5);\r\n    }\r\n    return list;\r\n};\r\n\r\ninterface MatchChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: MatchChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: MatchChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const MatchChallenger: React.FC<MatchChallengerProps> = (props: MatchChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [sourceItems, setSourceItems] = useState<string[]>(reorderItems(\r\n        challenge.pairs.map((aPair: MatchChallengePair) => aPair.source),\r\n        mode\r\n    ));\r\n    const [destinationItems, setDestinationItems] = useState<string[]>(reorderItems(\r\n        challenge.pairs.map((aPair: MatchChallengePair) => aPair.destination),\r\n        mode\r\n    ));\r\n\r\n    const [matchState, setMatchState] = useState<MatchAnswer[]>([]);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setSourceItems(reorderItems(\r\n            challenge.pairs.map((aPair: MatchChallengePair) => aPair.source),\r\n            mode\r\n        ));\r\n        setDestinationItems(reorderItems(\r\n            challenge.pairs.map((aPair: MatchChallengePair) => aPair.destination),\r\n            mode\r\n        ));\r\n    }, [challenge.pairs]);\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const handleTextChange = (newText: string, element: MatchElement, pairIdx: number) => {\r\n        if (onChallengeChange) {\r\n            const pairAttribute = element === MatchElement.Source ? 'source' : 'destination';\r\n            const newChallenge: MatchChallenge = {\r\n                ...challenge,\r\n                pairs: challenge.pairs.map((aPair: MatchChallengePair, idx: number) => (\r\n                    idx === pairIdx ? {\r\n                        ...aPair,\r\n                        [pairAttribute]: newText\r\n                    } : {...aPair}\r\n                ))\r\n            };\r\n            onChallengeChange(newChallenge);\r\n        }\r\n    };\r\n\r\n    const handleDrop = (source: MatchItem, destination: MatchItem) => {\r\n        const newState = matchState.filter((anAnswer: MatchAnswer) => (\r\n            anAnswer.source.index !== source.index\r\n            && anAnswer.destination.index !== destination.index\r\n        ));\r\n        newState.push({source, destination});\r\n        setMatchState(newState);\r\n    };\r\n\r\n    const completed = () => matchState.length === challenge.pairs.length;\r\n\r\n    const handleCheckClick = () => {\r\n        const correct = challenge.pairs.reduce(\r\n            (accPairs: boolean, currentPair: MatchChallengePair) => {\r\n                const idxAnswer = matchState.findIndex((anAnswer: MatchAnswer) => (\r\n                    anAnswer.source.text === currentPair.source\r\n                    && anAnswer.destination.text === currentPair.destination\r\n                ));\r\n                return accPairs && idxAnswer >= 0;\r\n            },\r\n            true\r\n        );\r\n        showResult(correct);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='center' className={classes.fullHeight}>\r\n                    <Grid item xs={2} className={classes.fullHeight}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} className={classes.fullHeight} container>\r\n                        <DndProvider backend={HTML5Backend}>\r\n                            <Grid item xs={5} container direction=\"column\" justify=\"space-around\" alignItems=\"center\">\r\n                                {\r\n                                    sourceItems.map((aSource: string, sourceIdx: number) => (\r\n                                        <MatchSource\r\n                                            key={`source_${sourceIdx}`}\r\n                                            mode={mode}\r\n                                            item={{text: aSource, index: sourceIdx}}\r\n                                            fontSize={challenge.config.answerFontSize}\r\n                                            arrowNode={(\r\n                                                <div\r\n                                                    id={`an_s_${sourceIdx}`}\r\n                                                    style={{\r\n                                                        width: '20px',\r\n                                                        height: '20px',\r\n                                                        border: `solid 1px ${colors.primary.main}`,\r\n                                                        borderRadius: '20px'\r\n                                                    }}\r\n                                                />\r\n                                            )}\r\n                                            onTextChange={\r\n                                                (newText: string) => handleTextChange(\r\n                                                    newText,\r\n                                                    MatchElement.Source,\r\n                                                    sourceIdx\r\n                                                )\r\n                                            }\r\n                                        />\r\n                                    ))\r\n                                }\r\n                            </Grid>\r\n                            <Grid item xs={2} />\r\n                            <Grid item xs={5} container direction=\"column\" justify=\"space-around\" alignItems=\"center\">\r\n                                {\r\n                                    destinationItems.map((aDestination: string, destinationIdx: number) => (\r\n                                        <MatchDestination\r\n                                            key={`destination_${destinationIdx}`}\r\n                                            mode={mode}\r\n                                            item={{text: aDestination, index: destinationIdx}}\r\n                                            fontSize={challenge.config.answerFontSize}\r\n                                            arrowNode={(\r\n                                                <div\r\n                                                    id={`an_d_${destinationIdx}`}\r\n                                                    style={{\r\n                                                        width: '20px',\r\n                                                        height: '20px',\r\n                                                        border: `solid 1px ${colors.primary.main}`,\r\n                                                        borderRadius: '20px'\r\n                                                    }}\r\n                                                />\r\n                                            )}\r\n                                            onTextChange={\r\n                                                (newText: string) => handleTextChange(\r\n                                                    newText,\r\n                                                    MatchElement.Destination,\r\n                                                    destinationIdx\r\n                                                )\r\n                                            }\r\n                                            onDrop={(source: MatchItem) => {\r\n                                                handleDrop(source, {text: aDestination, index: destinationIdx});\r\n                                            }}\r\n                                        />\r\n                                    ))\r\n                                }\r\n                                {\r\n                                    mode === ComponentMode.Design ? (\r\n                                        sourceItems.map((aSource: string, idx: number) => (\r\n                                            <Xarrow\r\n                                                key={`designArrow_${idx}`}\r\n                                                start={`an_s_${idx}`}\r\n                                                end={`an_d_${(idx)}`}\r\n                                                curveness={0}\r\n                                            />\r\n                                        ))\r\n                                    ) : (\r\n                                        matchState.map((anAnswer: MatchAnswer, idx: number) => (\r\n                                            <Xarrow\r\n                                                key={`playArrow_${idx}`}\r\n                                                start={`an_s_${anAnswer.source.index}`}\r\n                                                end={`an_d_${(anAnswer.destination.index)}`}\r\n                                                curveness={0}\r\n                                                color={\r\n                                                    highlightResults ? (\r\n                                                        challenge.pairs.findIndex((aPair: MatchChallengePair) => (\r\n                                                            aPair.source === anAnswer.source.text\r\n                                                            && aPair.destination === anAnswer.destination.text\r\n                                                        )) >= 0 ? '#4caf50' : '#f44336'\r\n                                                    ) : undefined\r\n                                                }\r\n                                            />\r\n                                        ))\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                        </DndProvider>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || !completed()}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;{options?.language === Language.En ? 'Check' : 'Corregir'}\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ChallengeConfig, MatchChallengeConfig } from 'types';\r\nimport { ChallengeConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface MatchConfiguratorProps {\r\n    config: MatchChallengeConfig,\r\n    onConfigChange?: (config: MatchChallengeConfig) => void\r\n}\r\n\r\nexport const MatchConfigurator: React.FC<MatchConfiguratorProps> = (props: MatchConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<MatchChallengeConfig>(config);\r\n\r\n    const inputAnswerFontSize = useRef({} as HTMLInputElement);\r\n    const inputPairsCount = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    const handleBaseConfigChange = (newBaseConfig: ChallengeConfig) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            ...newBaseConfig\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <ChallengeConfigurator\r\n                    config={config}\r\n                    onConfigChange={handleBaseConfigChange}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputAnswerFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de las respuestas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.answerFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('answerFontSize', parseInt(inputAnswerFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputPairsCount}\r\n                    type='number'\r\n                    label='Número de parejas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.pairsCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('pairsCount', parseInt(inputPairsCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, CardContent, Grid, TextField, Typography } from '@material-ui/core';\r\nimport { useDrop } from 'react-dnd';\r\nimport { MatchItem } from 'types';\r\nimport { ComponentMode } from 'enums';\r\n\r\ninterface MatchDestinationProps {\r\n    mode: ComponentMode,\r\n    item: MatchItem,\r\n    fontSize: number,\r\n    arrowNode: React.ReactNode,\r\n    onTextChange?: (newText: string) => void,\r\n    onDrop?: (text: MatchItem) => void\r\n}\r\n\r\nexport const MatchDestination: React.FC<MatchDestinationProps> = (props: MatchDestinationProps) => {\r\n    const { mode, item, fontSize, arrowNode, onTextChange, onDrop } = props;\r\n\r\n    const [textValue, setTextValue] = useState<string>(item.text);\r\n\r\n    const inputText = useRef({} as HTMLInputElement);\r\n\r\n    useEffect(() => {\r\n        setTextValue(item.text);\r\n    }, [item.text]);\r\n\r\n    const handleTextChange = () => {\r\n        setTextValue(inputText.current.value);\r\n        if (onTextChange) {\r\n            onTextChange(inputText.current.value);\r\n        }\r\n    };\r\n\r\n    const handleDrop = (item: any) => {\r\n        if (onDrop) {\r\n            onDrop(item);\r\n        }\r\n    };\r\n\r\n    const [/* { isOver, canDrop } */, drop] = useDrop({\r\n        accept: 'dnd',\r\n        drop: handleDrop,\r\n        collect: (monitor: { isOver: () => boolean, canDrop: () => boolean }) => {\r\n            return ({\r\n                isOver: monitor.isOver(),\r\n                canDrop: monitor.canDrop()\r\n            });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <Card style={{width: '100%'}}>\r\n            <CardContent>\r\n                <Grid container alignItems=\"center\">\r\n                    <Grid item xs={1} container justify=\"center\">\r\n                        <div ref={drop}>\r\n                            {arrowNode}\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs container justify=\"center\">\r\n                        {\r\n                            mode === ComponentMode.Design ? (\r\n                                <TextField\r\n                                    inputRef={inputText}\r\n                                    value={textValue}\r\n                                    onInput={handleTextChange}\r\n                                    style={{width: '95%'}}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            fontSize: `${fontSize ? fontSize : 22}px`,\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            ) : (\r\n                                <Typography>\r\n                                    {textValue}\r\n                                </Typography>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, CardContent, Grid, TextField, Typography } from '@material-ui/core';\r\nimport { useDrag } from 'react-dnd';\r\nimport { MatchItem } from 'types';\r\nimport { ComponentMode } from 'enums';\r\n\r\ninterface MatchSourceProps {\r\n    mode: ComponentMode,\r\n    item: MatchItem,\r\n    fontSize: number,\r\n    arrowNode: React.ReactNode,\r\n    onTextChange?: (newText: string) => void\r\n}\r\n\r\nexport const MatchSource: React.FC<MatchSourceProps> = (props: MatchSourceProps) => {\r\n    const { mode, item, fontSize, arrowNode, onTextChange } = props;\r\n\r\n    const [textValue, setTextValue] = useState<string>(item.text);\r\n\r\n    const inputText = useRef({} as HTMLInputElement);\r\n\r\n    useEffect(() => {\r\n        setTextValue(item.text);\r\n    }, [item]);\r\n\r\n    const handleTextChange = () => {\r\n        setTextValue(inputText.current.value);\r\n        if (onTextChange) {\r\n            onTextChange(inputText.current.value);\r\n        }\r\n    };\r\n\r\n    const [/* { opacity } */, drag] = useDrag(\r\n        () => ({\r\n            type: 'dnd',\r\n            item: { ...item },\r\n            collect: (monitor) => ({\r\n                opacity: monitor.isDragging() ? 0.4 : 1,\r\n            }),\r\n        }),\r\n        [item],\r\n    );\r\n\r\n    return (\r\n        <Card style={{width: '100%'}}>\r\n            <CardContent>\r\n                <Grid container alignItems=\"center\">\r\n                    <Grid item xs container justify=\"center\">\r\n                        {\r\n                            mode === ComponentMode.Design ? (\r\n                                <TextField\r\n                                    inputRef={inputText}\r\n                                    value={textValue}\r\n                                    onInput={handleTextChange}\r\n                                    style={{width: '95%'}}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            fontSize: `${fontSize ? fontSize : 22}px`,\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            ) : (\r\n                                <Typography>\r\n                                    {textValue}\r\n                                </Typography>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={1} container justify=\"center\">\r\n                        <div ref={drag}>\r\n                            {arrowNode}\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { ChallengePicture, SelectAnswerChallenge, SelectAnswerChallengeAnswer, SelectAnswerChallengeConfig } from 'types';\r\nimport { ComponentMode, PictureType } from 'enums';\r\nimport { SelectAnswerChallenger, SelectAnswerConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface SelectAnswerChallengeDesignerProps {\r\n    challenge: SelectAnswerChallenge,\r\n    onChallengeChange: (challenge: SelectAnswerChallenge) => void\r\n}\r\n\r\nexport const SelectAnswerChallengeDesigner: React.FC<SelectAnswerChallengeDesignerProps> = (\r\n    props: SelectAnswerChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustPictures = (pictureCount: number): ChallengePicture[] => {\r\n        let pictures = [...challenge.pictures];\r\n        if (pictureCount > pictures.length) {\r\n            const newPictures = Array.from(Array(pictureCount - pictures.length))\r\n                .map(() => ({ type: PictureType.None, data: ''}));\r\n            pictures = [...pictures, ...newPictures];\r\n        } else if (pictureCount < pictures.length) {\r\n            pictures = pictures.slice(0, pictureCount);\r\n        }\r\n        return pictures;\r\n    };\r\n\r\n    const readjustValidAnswers = (multiselect: boolean): SelectAnswerChallengeAnswer[] => {\r\n        let validPresent = false;\r\n        const answers: SelectAnswerChallengeAnswer[] = challenge.answers.map((anAnswer: SelectAnswerChallengeAnswer) => {\r\n            if (!multiselect) {\r\n                if (anAnswer.valid && !validPresent) {\r\n                    validPresent = true;\r\n                    return { ...anAnswer };\r\n                }\r\n                return { ...anAnswer, valid: false };\r\n            }\r\n            return { ...anAnswer };\r\n        });\r\n        return answers;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: SelectAnswerChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: SelectAnswerChallengeConfig) => {\r\n        const pictures = readjustPictures(config.pictureCount);\r\n        const answers = readjustValidAnswers(config.multiselect);\r\n        const updatedChallenge: SelectAnswerChallenge = {\r\n            ...challenge,\r\n            pictures: [...pictures],\r\n            answers: [...answers],\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <SelectAnswerChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <SelectAnswerConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { ChallengeOptions, ChallengePicture, SelectAnswerChallenge, SelectAnswerChallengeAnswer } from 'types';\r\nimport { ComponentMode, Language } from 'enums';\r\nimport { ChallengeQuestion, Countdown, PictureGrid, SelectableOption } from 'components';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    pictureContainer: {\r\n        height: '50%'\r\n    },\r\n    answerContainer: {\r\n        height: '30%',\r\n        paddingTop: '10px'\r\n    },\r\n    optionContainer: {\r\n        height: '50%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\ninterface SelectAnswerChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: SelectAnswerChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: SelectAnswerChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const SelectAnswerChallenger: React.FC<SelectAnswerChallengerProps> = (props: SelectAnswerChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [selectedAnswers, setSelectedAnswers] = useState<number[]>([]);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlePicturesChange = (newPictures: ChallengePicture[]) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                pictures: [...newPictures]\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleAnswerChange = (position: number, updatedAnswer: SelectAnswerChallengeAnswer) => {\r\n        const updatedAnswers = challenge.answers.map((anAnswer: SelectAnswerChallengeAnswer, idx: number) => {\r\n            if (idx !== position) {\r\n                if (!challenge.config.multiselect) {\r\n                    return {\r\n                        ...anAnswer,\r\n                        valid: false\r\n                    };\r\n                }\r\n                return { ...anAnswer };\r\n            }\r\n            return { ...updatedAnswer };\r\n        });\r\n\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                answers: updatedAnswers\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handlerOptionClick = (answerIdx: number) => {\r\n        if (mode === ComponentMode.Play) {\r\n            if (challenge.config.multiselect) {\r\n                const theIndex = selectedAnswers.findIndex((anAnswerIdx: number) => anAnswerIdx === answerIdx);\r\n                if (theIndex === -1) {\r\n                    setSelectedAnswers([...selectedAnswers, answerIdx]);\r\n                } else {\r\n                    setSelectedAnswers(selectedAnswers.filter((anAnswerIdx: number) => anAnswerIdx !== answerIdx));\r\n                }\r\n            } else {\r\n                if (challenge.answers[answerIdx].valid) {\r\n                    showResult(true);\r\n                } else {\r\n                    showResult(false);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const wrongsSelected = selectedAnswers\r\n            .map((anAnswerIdx: number) => challenge.answers[anAnswerIdx])\r\n            .filter((anAnswer: SelectAnswerChallengeAnswer) => !anAnswer.valid);\r\n        if (wrongsSelected.length === 0) {\r\n            const validsNotSelected = challenge.answers\r\n                .filter((anAnswer: SelectAnswerChallengeAnswer, answerIdx: number) =>\r\n                    anAnswer.valid && selectedAnswers.indexOf(answerIdx) === -1\r\n                );\r\n            if (validsNotSelected.length === 0) {\r\n                showResult(true);\r\n                return;\r\n            }\r\n        }\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.pictureContainer}>\r\n                <Grid container justify='center' style={{ height: '100%' }}>\r\n                    <Grid item xs={2} style={{ height: '100%' }}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} style={{ height: '100%' }}>\r\n                        <PictureGrid\r\n                            mode={mode}\r\n                            pictures={challenge.pictures}\r\n                            onPicturesChange={handlePicturesChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            challenge.config.multiselect && (\r\n                                <Fab\r\n                                    variant=\"extended\"\r\n                                    size=\"large\"\r\n                                    color=\"primary\"\r\n                                    disabled={mode === ComponentMode.Design || selectedAnswers.length === 0}\r\n                                    onClick={() => { handleCheckClick(); }}\r\n                                >\r\n                                    <Icon>check</Icon>&nbsp;{options?.language === Language.En ? 'Check' : 'Corregir'}\r\n                                </Fab>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='space-evenly' spacing={2} style={{ height: '100%' }}>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={challenge.answers[0].text}\r\n                            icon=\"wb_sunny\"\r\n                            valid={challenge.answers[0].valid}\r\n                            selected={\r\n                                mode === ComponentMode.Play\r\n                                && selectedAnswers.indexOf(0) >= 0\r\n                            }\r\n                            color='#f44336'\r\n                            fontSize={challenge.config.answerFontSize}\r\n                            multiselect={challenge.config.multiselect}\r\n                            showResults={highlightResults}\r\n                            onTextChange={(newText: string) => {\r\n                                handleAnswerChange(0, { ...challenge.answers[0], text: newText });\r\n                            }}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(0, { ...challenge.answers[0], valid });\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(0); }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={challenge.answers[1].text}\r\n                            icon=\"brightness_2\"\r\n                            valid={challenge.answers[1].valid}\r\n                            selected={\r\n                                mode === ComponentMode.Play\r\n                                && selectedAnswers.indexOf(1) >= 0\r\n                            }\r\n                            color='#03a9f4'\r\n                            fontSize={challenge.config.answerFontSize}\r\n                            multiselect={challenge.config.multiselect}\r\n                            showResults={highlightResults}\r\n                            onTextChange={(newText: string) => {\r\n                                handleAnswerChange(1, { ...challenge.answers[1], text: newText });\r\n                            }}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(1, { ...challenge.answers[1], valid });\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(1); }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={challenge.answers[2].text}\r\n                            icon=\"flash_on\"\r\n                            valid={challenge.answers[2].valid}\r\n                            selected={\r\n                                mode === ComponentMode.Play\r\n                                && selectedAnswers.indexOf(2) >= 0\r\n                            }\r\n                            color='#ffc107'\r\n                            fontSize={challenge.config.answerFontSize}\r\n                            multiselect={challenge.config.multiselect}\r\n                            showResults={highlightResults}\r\n                            onTextChange={(newText: string) => {\r\n                                handleAnswerChange(2, { ...challenge.answers[2], text: newText });\r\n                            }}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(2, { ...challenge.answers[2], valid });\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(2); }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={challenge.answers[3].text}\r\n                            icon=\"cloud\"\r\n                            valid={challenge.answers[3].valid}\r\n                            selected={\r\n                                mode === ComponentMode.Play\r\n                                && selectedAnswers.indexOf(3) >= 0\r\n                            }\r\n                            color='#4caf50'\r\n                            fontSize={challenge.config.answerFontSize}\r\n                            multiselect={challenge.config.multiselect}\r\n                            showResults={highlightResults}\r\n                            onTextChange={(newText: string) => {\r\n                                handleAnswerChange(3, { ...challenge.answers[3], text: newText });\r\n                            }}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(3, { ...challenge.answers[3], valid });\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(3); }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControlLabel, Grid, makeStyles, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { ChallengeConfig, SelectAnswerChallengeConfig } from 'types';\r\nimport { ChallengeConfigurator } from 'components/Common';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface SelectAnswerConfiguratorProps {\r\n    config: SelectAnswerChallengeConfig,\r\n    onConfigChange?: (config: SelectAnswerChallengeConfig) => void\r\n}\r\n\r\nexport const SelectAnswerConfigurator: React.FC<SelectAnswerConfiguratorProps> = (props: SelectAnswerConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<SelectAnswerChallengeConfig>(config);\r\n\r\n    const inputPictureCount = useRef({} as HTMLInputElement);\r\n    const checkPictureLabel = useRef({} as HTMLInputElement);\r\n    const inputAnswerFontSize = useRef({} as HTMLInputElement);\r\n    const checkMultiselect = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    const handleBaseConfigChange = (newBaseConfig: ChallengeConfig) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            ...newBaseConfig\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <ChallengeConfigurator\r\n                    config={config}\r\n                    onConfigChange={handleBaseConfigChange}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputPictureCount}\r\n                    type='number'\r\n                    label='Número de imágenes'\r\n                    inputProps={{ min: 1, max: 9 }}\r\n                    value={formData.pictureCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('pictureCount', parseInt(inputPictureCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkPictureLabel}\r\n                            name='checkPictureLabel'\r\n                            checked={formData.pictureLabel}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('pictureLabel', checkPictureLabel.current.checked); }}\r\n                        />}\r\n                    label='Numerar imágenes'\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputAnswerFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de las respuestas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.answerFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('answerFontSize', parseInt(inputAnswerFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkMultiselect}\r\n                            name='checkMultiselect'\r\n                            checked={formData.multiselect}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('multiselect', checkMultiselect.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Respuesta múltiple'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { SortChallenge, SortChallengeConfig } from 'types';\r\nimport { ComponentMode } from 'enums';\r\nimport { SortChallenger, SortConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface SortChallengeDesignerProps {\r\n    challenge: SortChallenge,\r\n    onChallengeChange: (challenge: SortChallenge) => void\r\n}\r\n\r\nexport const SortChallengeDesigner: React.FC<SortChallengeDesignerProps> = (\r\n    props: SortChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustItems = (itemCount: number): string[] => {\r\n        let items = [...challenge.items];\r\n        if (itemCount > items.length) {\r\n            const newItems = Array.from(Array(itemCount - items.length))\r\n                .map(() => (''));\r\n            items = [...items, ...newItems];\r\n        } else if (itemCount < items.length) {\r\n            items = items.slice(0, itemCount);\r\n        }\r\n        return items;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: SortChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: SortChallengeConfig) => {\r\n        const items = readjustItems(config.itemCount);\r\n        const updatedChallenge: SortChallenge = {\r\n            ...challenge,\r\n            items,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <SortChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <SortConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { SortChallenge } from 'types';\r\nimport { ComponentMode } from 'enums';\r\nimport { ChallengeQuestion, Countdown } from 'components';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    pictureContainer: {\r\n        height: '80%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionsContainer: {\r\n        height: '20%',\r\n        border: 'solid 1px'\r\n    },\r\n    item: {\r\n        padding: '5px 10px',\r\n        backgroundColor: theme.palette.secondary.main,\r\n        color: theme.palette.primary.contrastText,\r\n        borderRadius: '20px'\r\n    },\r\n    groupsContainer: {\r\n        height: '80%'\r\n    },\r\n}));\r\n\r\ninterface SortChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: SortChallenge,\r\n    onChallengeChange?: (updatedChallenge: SortChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const SortChallenger: React.FC<SortChallengerProps> = (props: SortChallengerProps) => {\r\n    const { mode, challenge, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [selectedAnswers /* , setSelectedAnswers */] = useState<number[]>([]);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n    //     const wrongsSelected = selectedAnswers\r\n    //         .map((anAnswerIdx: number) => challenge.answers[anAnswerIdx])\r\n    //         .filter((anAnswer: SelectAnswerChallengeAnswer) => !anAnswer.valid);\r\n    //     if (wrongsSelected.length === 0) {\r\n    //         const validsNotSelected = challenge.answers\r\n    //             .filter((anAnswer: SelectAnswerChallengeAnswer, answerIdx: number) =>\r\n    //                 anAnswer.valid && selectedAnswers.indexOf(answerIdx) === -1\r\n    //             );\r\n    //         if (validsNotSelected.length === 0) {\r\n    //             showResult(true);\r\n    //             return;\r\n    //         }\r\n    //     }\r\n    //     showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.pictureContainer}>\r\n                <Grid container justify='center' className={classes.fullHeight}>\r\n                    <Grid item xs={2} className={classes.fullHeight}>\r\n                        <Countdown\r\n                            mode={mode}\r\n                            time={challenge.config.timeLimit}\r\n                            stopTimer={stopTimer}\r\n                            onTimeUp={handlerTimeUp}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={8} className={classes.fullHeight}>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || selectedAnswers.length === 0}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;Corregir\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ChallengeConfig, SortChallengeConfig } from 'types';\r\nimport { ChallengeConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface SortConfiguratorProps {\r\n    config: SortChallengeConfig,\r\n    onConfigChange?: (config: SortChallengeConfig) => void\r\n}\r\n\r\nexport const SortConfigurator: React.FC<SortConfiguratorProps> = (props: SortConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<SortChallengeConfig>(config);\r\n\r\n    const inputItemsFontSize = useRef({} as HTMLInputElement);\r\n    const inputItemCount = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    const handleBaseConfigChange = (newBaseConfig: ChallengeConfig) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            ...newBaseConfig\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <ChallengeConfigurator\r\n                    config={config}\r\n                    onConfigChange={handleBaseConfigChange}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemsFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemsFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('itemsFontSize', parseInt(inputItemsFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemCount}\r\n                    type='number'\r\n                    label='Número de elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('groupCount', parseInt(inputItemCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { ChallengePicture, TrueOrFalseChallenge, TrueOrFalseChallengeConfig } from 'types';\r\nimport { ComponentMode, PictureType } from 'enums';\r\nimport { TrueOrFalseChallenger, TrueOrFalseConfigurator } from 'components';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface TrueOrFalseChallengeDesignerProps {\r\n    challenge: TrueOrFalseChallenge,\r\n    onChallengeChange: (challenge: TrueOrFalseChallenge) => void\r\n}\r\n\r\nexport const TrueOrFalseChallengeDesigner: React.FC<TrueOrFalseChallengeDesignerProps> = (\r\n    props: TrueOrFalseChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustPictures = (pictureCount: number): ChallengePicture[] => {\r\n        let pictures = [...challenge.pictures];\r\n        if (pictureCount > pictures.length) {\r\n            const newPictures = Array.from(Array(pictureCount - pictures.length))\r\n                .map(() => ({ type: PictureType.None, data: ''}));\r\n            pictures = [...pictures, ...newPictures];\r\n        } else if (pictureCount < pictures.length) {\r\n            pictures = pictures.slice(0, pictureCount);\r\n        }\r\n        return pictures;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: TrueOrFalseChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: TrueOrFalseChallengeConfig) => {\r\n        const pictures = readjustPictures(config.pictureCount);\r\n        const updatedChallenge: TrueOrFalseChallenge = {\r\n            ...challenge,\r\n            pictures: [...pictures],\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <TrueOrFalseChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <TrueOrFalseConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Card, Grid, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../Common/ChallengeQuestion';\r\nimport { SelectableOption } from '../Common/SelectableOption';\r\nimport { TrueOrFalseChallenge } from '../../types/TrueOrFalseChallenge';\r\nimport { PictureGrid } from '../Common/PictureGrid';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../Common/Countdown';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { ChallengeOptions, ChallengePicture } from '../../types/Challenge';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    pictureContainer: {\r\n        height: '60%'\r\n    },\r\n    answerContainer: {\r\n        height: '20%',\r\n        paddingTop: '10px'\r\n    },\r\n    optionContainer: {\r\n        height: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\ninterface TrueOrFalseChallengerProps {\r\n    mode: ComponentMode,\r\n    challenge: TrueOrFalseChallenge,\r\n    options?: ChallengeOptions,\r\n    onChallengeChange?: (updatedChallenge: TrueOrFalseChallenge) => void,\r\n    onSuccess?: () => void,\r\n    onError?: () => void\r\n}\r\n\r\nexport const TrueOrFalseChallenger: React.FC<TrueOrFalseChallengerProps> = (props: TrueOrFalseChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlePicturesChange = (newPictures: ChallengePicture[]) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                pictures: [...newPictures]\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleAnswerChange = (updatedAnswer: boolean) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                answer: updatedAnswer\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handlerOptionClick = (answer: boolean) => {\r\n        if (mode === ComponentMode.Play) {\r\n            if (challenge.answer === answer) {\r\n                showResult(true);\r\n            } else {\r\n                showResult(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.pictureContainer}>\r\n                <Grid container justify='center' style={{ height: '100%' }}>\r\n                    <Grid item xs={2} style={{ height: '100%' }}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} style={{ height: '100%' }}>\r\n                        <PictureGrid\r\n                            mode={mode}\r\n                            pictures={challenge.pictures}\r\n                            onPicturesChange={handlePicturesChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll} />\r\n                </Grid>\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='space-evenly' spacing={2} style={{ height: '100%' }}>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={options?.language === Language.En ? 'True' : 'Verdadero'}\r\n                            icon=\"wb_sunny\"\r\n                            valid={challenge.answer}\r\n                            color='#4caf50'\r\n                            fontSize={42}\r\n                            showResults={highlightResults}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(true);\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(true); }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={options?.language === Language.En ? 'False' : 'Falso'}\r\n                            icon=\"brightness_2\"\r\n                            valid={!challenge.answer}\r\n                            color='#f44336'\r\n                            fontSize={42}\r\n                            showResults={highlightResults}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(false);\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(false); }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControlLabel, Grid, makeStyles, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { ChallengeConfig, TrueOrFalseChallengeConfig } from 'types';\r\nimport { ChallengeConfigurator } from 'components/Common';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface TrueOrFalseConfiguratorProps {\r\n    config: TrueOrFalseChallengeConfig,\r\n    onConfigChange?: (config: TrueOrFalseChallengeConfig) => void\r\n}\r\n\r\nexport const TrueOrFalseConfigurator: React.FC<TrueOrFalseConfiguratorProps> = (props: TrueOrFalseConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<TrueOrFalseChallengeConfig>(config);\r\n\r\n    const inputPictureCount = useRef({} as HTMLInputElement);\r\n    const checkPictureLabel = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    const handleBaseConfigChange = (newBaseConfig: ChallengeConfig) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            ...newBaseConfig\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <ChallengeConfigurator\r\n                    config={config}\r\n                    onConfigChange={handleBaseConfigChange}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputPictureCount}\r\n                    type='number'\r\n                    label='Número de imágenes'\r\n                    inputProps={{ min: 1, max: 9 }}\r\n                    value={formData.pictureCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('pictureCount', parseInt(inputPictureCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkPictureLabel}\r\n                            name='checkPictureLabel'\r\n                            checked={formData.pictureLabel}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('pictureLabel', checkPictureLabel.current.checked); }}\r\n                        />}\r\n                    label='Numerar imágenes'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { useProjects } from 'hooks/useProjects';\r\nimport { ProjectList } from 'components';\r\n\r\nexport const Home: React.FC = () => {\r\n    const { projects, setProjects } = useProjects();\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n        >\r\n            <Grid item xs={12} lg={10} xl={7}>\r\n                <ProjectList\r\n                    projects={projects}\r\n                    setProjects={setProjects}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { useParams } from \"react-router\";\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { TestDesigner } from 'components';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\nexport const Designer: React.FC = () => {\r\n    const { projectId, testId } = useParams() as any;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n            className={classes.fullHeight}\r\n        >\r\n            <Grid item xs={12} className={classes.fullHeight}>\r\n                <TestDesigner\r\n                    projectId={projectId}\r\n                    testId={testId}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport { useProjects } from 'hooks/useProjects';\r\nimport { Project, Test, TestOptions } from 'types';\r\nimport { Language } from 'enums';\r\nimport { ChallengeEvaluator, ChallengeLauncher, TestResult } from 'components';\r\nimport { parseQueryString } from 'utils';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\ninterface IParams {\r\n    projectId: string,\r\n    testId: string\r\n}\r\n\r\ninterface ChallengeState {\r\n    idx: number,\r\n    launching: boolean\r\n}\r\n\r\nexport const Evaluator: React.FC = () => {\r\n    const { projectId, testId } = useParams() as IParams;\r\n    const history = useHistory();\r\n\r\n    const { projects } = useProjects();\r\n    const [testOptions] = useState<TestOptions>(parseQueryString(history.location.search));\r\n    const [test, setTest] = useState<Test>();\r\n    const [currentChallengeState, setCurrentChallengeState] = useState<ChallengeState>({idx: -1, launching: false});\r\n    const [results, setResults] = useState<boolean[]>([]);\r\n    const [showResult, setShowResult] = useState<boolean>(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (projectId != null && testId != null) {\r\n            const theProject: Project = projects.find((aProject: Project) => aProject.id === projectId);\r\n            if (theProject != null) {\r\n                const theTest: Test | undefined = theProject.tests.find((aTest: Test) => aTest.id === testId);\r\n                if (theTest != null) {\r\n                    setTest(theTest);\r\n                    setCurrentChallengeState({idx: 0, launching: true});\r\n                }\r\n            }\r\n        }\r\n    }, [projectId, testId]);\r\n\r\n    const next = () => {\r\n        if (test != null) {\r\n            if (currentChallengeState.launching) {\r\n                setCurrentChallengeState({\r\n                    ...currentChallengeState,\r\n                    launching: false\r\n                });\r\n            } else {\r\n                if (currentChallengeState.idx < test.challenges.length - 1) {\r\n                    setCurrentChallengeState({\r\n                        idx: currentChallengeState.idx + 1,\r\n                        launching: true\r\n                    });\r\n                } else {\r\n                    setCurrentChallengeState({\r\n                        idx: -1,\r\n                        launching: false\r\n                    });\r\n                    setShowResult(true);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleResponse = (success: boolean) => {\r\n        setResults([...results, success]);\r\n        if (testOptions.autoNext) {\r\n            next();\r\n        }\r\n    };\r\n\r\n    const handleBackHome = () => {\r\n        history.push('/');\r\n    };\r\n\r\n    const handleRepeatTest = () => {\r\n        setCurrentChallengeState({idx: 0, launching: true});\r\n        setResults([]);\r\n        setShowResult(false);\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n            className={classes.fullHeight}\r\n        >\r\n            {\r\n                !testOptions.autoNext ? <Grid item xs={1} xl={2} /> : undefined\r\n            }\r\n            <Grid item xs={testOptions.autoNext ? 12 : 10} xl={8} className={classes.fullHeight}>\r\n                {\r\n                    test != null && currentChallengeState.launching && currentChallengeState.idx >= 0 && (\r\n                        <ChallengeLauncher\r\n                            challengeType={test.challenges[currentChallengeState.idx].type}\r\n                            challengeNumber={currentChallengeState.idx + 1}\r\n                            challengeTotalCount={test.challenges.length}\r\n                            language={test.language}\r\n                            delay={3}\r\n                            onEnd={next}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    test != null && !currentChallengeState.launching && currentChallengeState.idx >= 0 && (\r\n                        <ChallengeEvaluator\r\n                            challenge={test.challenges[currentChallengeState.idx]}\r\n                            options={{\r\n                                language: test.language,\r\n                                ignoreTimeLimit: testOptions.ignoreTimeLimit\r\n                            }}\r\n                            onSuccess={() => { handleResponse(true); }}\r\n                            onError={() => { handleResponse(false); }}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    test != null && showResult && (\r\n                        <TestResult\r\n                            test={test}\r\n                            results={results}\r\n                            onBackHome={handleBackHome}\r\n                            onRepeatTest={handleRepeatTest}\r\n                        />\r\n                    )\r\n                }\r\n            </Grid>\r\n            {\r\n                !testOptions.autoNext ? (\r\n                    <Grid item xs={1} xl={2} className={`${classes.fullHeight} ${classes.centerAll}`}>\r\n                        {\r\n                            !testOptions.autoNext\r\n                            && currentChallengeState.idx === results.length - 1\r\n                            && (\r\n                                <Fab\r\n                                    variant=\"extended\"\r\n                                    size=\"large\"\r\n                                    color=\"primary\"\r\n                                    onClick={next}\r\n                                >\r\n                                    {test?.language === Language.En ? 'Next' : 'Siguiente'}&nbsp;<Icon>navigate_next</Icon>\r\n                                </Fab>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                ) : undefined\r\n            }\r\n        </Grid>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\r\nimport { ProjectContextProvider } from './context/ProjectContext';\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route\r\n} from \"react-router-dom\";\r\nimport { theme } from \"./theme\";\r\nimport { MainHeader } from \"./components/Common/MainHeader\";\r\nimport { Home } from \"./views/Home\";\r\nimport { Designer } from \"./views/Designer\";\r\nimport { Evaluator } from \"./views/Evaluator\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    mainContainer: {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    headerContainer: {\r\n        width: '100%',\r\n        height: '75px'\r\n    },\r\n    content: {\r\n        margin: '30px',\r\n        height: 'calc(100% - 135px)'\r\n    }\r\n}));\r\n\r\nexport default function App() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Router>\r\n            <ThemeProvider theme={theme}>\r\n                <ProjectContextProvider>\r\n                    <div className={classes.mainContainer}>\r\n                        <div className={classes.headerContainer}>\r\n                            <MainHeader></MainHeader>\r\n                        </div>\r\n                        <div className={classes.content}>\r\n                            <Switch>\r\n                                <Route exact path=\"/\">\r\n                                    <Home />\r\n                                </Route>\r\n                                <Route path=\"/designer/:projectId/:testId\">\r\n                                    <Designer />\r\n                                </Route>\r\n                                <Route path=\"/play/:projectId/:testId\">\r\n                                    <Evaluator />\r\n                                </Route>\r\n                            </Switch>\r\n                        </div>\r\n                    </div>\r\n                </ProjectContextProvider>\r\n            </ThemeProvider>\r\n        </Router >\r\n    );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}