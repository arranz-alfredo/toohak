{"version":3,"sources":["enums/ChallengeType.ts","enums/PictureType.ts","context/ProjectContext.tsx","theme/index.ts","components/common/MainHeader.tsx","hooks/useProjects.ts","utils/utilValidationTypes.ts","enums/Language.ts","components/Home/TestForm.tsx","enums/FillMethod.ts","components/common/DialogConfirm.tsx","components/Home/DialogTestOptions.tsx","components/Home/TestList.tsx","components/common/JsonLoader.tsx","components/Home/ProjectForm.tsx","components/Home/ProjectList.tsx","views/Home/index.tsx","utils/utilChallenges.tsx","enums/ComponentMode.ts","components/Designer/ChallengeThumbnail.tsx","components/Designer/ChallengeSelector.tsx","components/common/ChallengeQuestion.tsx","components/common/SelectableOption.tsx","components/common/DialogPictureSelector.tsx","components/common/PictureGrid.tsx","components/common/Countdown.tsx","assets/sounds/correct.wav","assets/sounds/incorrect.wav","components/SelectAnswerChallenge/SelectAnswerChallenger.tsx","components/SelectAnswerChallenge/SelectAnswerConfigurator.tsx","components/SelectAnswerChallenge/SelectAnswerChallengeDesigner.tsx","components/TrueOrFalseChallenge/TrueOrFalseChallenger.tsx","components/TrueOrFalseChallenge/TrueOrFalseConfigurator.tsx","components/TrueOrFalseChallenge/TrueOrFalseChallengeDesigner.tsx","components/common/DragableItem.tsx","components/ClassifyChallenge/DropGroup.tsx","components/ClassifyChallenge/ClassifyChallenger.tsx","components/ClassifyChallenge/ClassifyConfigurator.tsx","components/ClassifyChallenge/ClassifyChallengeDesigner.tsx","components/SortChallenge/SortChallenger.tsx","components/SortChallenge/SortConfigurator.tsx","components/SortChallenge/SortChallengeDesigner.tsx","components/FillTableChallenge/TableCell.tsx","components/FillTableChallenge/FillTableChallenger.tsx","components/FillTableChallenge/FillTableConfigurator.tsx","components/FillTableChallenge/FillTableChallengeDesigner.tsx","utils/utilStrings.ts","components/FillGapsChallenge/DropGap.tsx","components/FillGapsChallenge/FillGapsSentence.tsx","components/FillGapsChallenge/DialogFillGapsCandidates.tsx","components/FillGapsChallenge/FillGapsChallenger.tsx","components/FillGapsChallenge/FillGapsConfigurator.tsx","components/FillGapsChallenge/FillGapsChallengeDesigner.tsx","components/Designer/ChallengeDesigner.tsx","components/Designer/TestDesigner.tsx","views/Designer/index.tsx","components/Evaluator/ChallengeEvaluator.tsx","components/Evaluator/ChallengeLauncher.tsx","components/Evaluator/TestResult.tsx","views/Evaluator/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChallengeType","PictureType","ProjectContext","React","createContext","ProjectContextProvider","children","useState","projects","setProjects","Provider","value","colors","main","light","dark","mainContrast","contrast","errorContrast","theme","createMuiTheme","palette","primary","contrastText","secondary","background","default","paper","error","text","typography","fontSize","MainHeader","AppBar","position","Toolbar","Typography","variant","LOCALSTORAGE_KEY","useProjects","useContext","saveProjects","useEffect","length","strProjects","localStorage","getItem","JSON","parse","newProjects","setItem","stringify","Language","isValidChallenge","challenge","errorMessage","id","type","push","configValidation","config","timeLimit","questionFontSize","SelectAnswer","customConfig","pictureCount","pictureLabel","multiselect","TrueOrFalse","FillGaps","Match","Sort","Classify","FillTable","Crossword","valid","isValidConfig","question","customChallenge","pictures","some","aPicture","None","answers","reduce","acc","current","anAnswer","sentences","hiddenExpressions","items","groups","name","accRow","currentRow","rowIdx","accColumn","currentColumn","columnIdx","firstRowFixed","firstColumnFixed","isValidTest","test","challenges","FillMethod","TestForm","props","onAccept","onCancel","description","language","Es","initialState","formState","setFormState","inputName","useRef","inputDescription","Grid","container","direction","spacing","item","xs","TextField","inputRef","label","fullWidth","onInput","InputLabel","shrink","Select","labelId","toString","onChange","evt","updatedLanguage","target","En","MenuItem","justify","Button","color","onClick","newTest","uuidv4","DialogConfirm","open","acceptButtonText","cancelButtonText","width","onConfirm","onRefuse","Dialog","maxWidth","DialogContent","DialogActions","autoFocus","useStyles","makeStyles","dialogContainer","padding","DialogTestOptions","ignoreTimeLimit","autoNext","checkIgnoreTimeLimit","checkAutoNextChallenge","classes","handleAttributeChange","attribute","DialogTitle","Box","className","FormControlLabel","control","Switch","checked","inline","display","listItemSecondaryAction","visibility","listItem","bottomContainer","marginTop","play","TestList","project","onCreateTest","onDeleteTest","history","useHistory","selectedTest","setSelectedTest","anchorElEdit","setAnchorElEdit","openTestForm","setOpenTestForm","openRemoveTestConfirm","setOpenRemoveTestConfirm","playOptionsState","setPlayOptionsState","Menu","anchorEl","keepMounted","Boolean","onClose","component","Link","to","undefined","tests","List","map","aTest","ListItem","button","alignItems","ListItemText","ListItemSecondaryAction","IconButton","title","projectId","testId","openOptions","Icon","stopPropagation","currentTarget","handleEditClick","Divider","testOptions","uploadInput","JsonLoader","onDataLoaded","onError","inputImport","ref","accept","multiple","event","files","file","reader","FileReader","readAsText","onloadend","e","newProject","result","err","style","htmlFor","ProjectForm","heading","pxToRem","secondaryHeading","gridContainer","gridItems","flexGrow","messageControl","backgroundColor","ProjectList","expandedProject","setExpandedProject","openProjectForm","setOpenProjectForm","openRemoveProjectConfirm","setOpenRemoveProjectConfirm","selectedProject","setSelectedProject","openMessage","setOpenMessage","messageText","setMessageText","handleCreateTest","theProject","find","aProject","updating","updatedProjects","updatedTests","handleDeleteTest","filter","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","SnackbarContent","message","isValidProject","Accordion","expanded","isExpanded","handleExpandChange","AccordionSummary","element","document","createElement","setAttribute","encodeURIComponent","replace","body","appendChild","click","removeChild","handleExportProjectClick","AccordionDetails","Home","ComponentMode","getChallengeTypeDescription","TheOddOne","getChallengeTypeIcon","size","getDefaultChallengeConfig","defaultChallengeConfig","answerFontSize","textFontSize","fillMethod","Writing","itemsFontSize","itemCount","groupCount","rowCount","columnCount","whiteSpace","overflow","textOverflow","tooltipRow","statusContainer","justifyContent","ChallengeThumbnail","selected","compact","onDelete","validation","setValidation","Card","elevation","CardActionArea","CardHeader","avatar","subheader","action","Tooltip","arrow","aMessage","messageIdx","CardContent","noWrap","CardActions","Chip","icon","root","overflowY","ChallengeSelector","compactList","onSelect","selectedChallenge","setSelectedChallenge","handleThumbnailClick","handleThumbnailDelete","aChallenge","idx","height","inputContainer","input","ChallengeQuestion","mode","questionText","setQuestionText","inputQuestion","inputProps","textAlign","lineHeight","InputProps","readOnly","Play","disableUnderline","placeholder","multiline","rowsMax","option","optionActionArea","optionInput","optionInnerInput","cursor","optionIcon","selector","SelectableOption","showResults","onTextChange","onValidChange","optionState","setOptionState","inputTextOption","radioOption","checkOption","borderStyle","borderWidth","borderColor","Design","startAdornment","InputAdornment","endAdornment","Checkbox","newState","Radio","ev","preventDefault","justifySelf","DialogPictureForm","picture","inputUrl","data","newPicture","Url","fullHeight","pic","maxHeight","PictureGrid","onPicturesChange","pictureDialogState","setPictureDialogState","pictureItemSize","setPictureItemSize","openDialog","selectedPicture","newPic","pictureIdx","selectedPictureIdx","border","src","alt","Fab","handleAddPictureClick","Countdown","time","stopTimer","onTimeUp","timeRemaining","setTimeRemaining","stop","setStop","timeoutId","setTimeout","clearTimeout","CircularProgress","Math","round","top","left","bottom","right","titleContainer","pictureContainer","answerContainer","paddingTop","optionContainer","centerAll","SelectAnswerChallenger","options","onChallengeChange","onSuccess","setStopTimer","selectedAnswers","setSelectedAnswers","highlightResults","setHighlightResults","useSound","correct","playCorrect","incorrect","playIncorrect","handleAnswerChange","updatedAnswer","updatedAnswers","handlerOptionClick","answerIdx","theIndex","findIndex","anAnswerIdx","showResult","success","newTitle","newPictures","disabled","indexOf","handleCheckClick","newText","SelectAnswerConfigurator","onConfigChange","formData","setFormData","inputTimeLimit","inputQuestionFontSize","inputPictureCount","checkPictureLabel","inputAnswerFontSize","checkMultiselect","handleConfigParameterChange","parameter","newConfig","min","parseInt","max","SelectAnswerChallengeDesigner","updatedChallenge","Array","from","slice","readjustPictures","validPresent","readjustValidAnswers","TrueOrFalseChallenger","answer","TrueOrFalseConfigurator","TrueOrFalseChallengeDesigner","borderRadius","DragableItem","iconButton","useDrag","collect","monitor","opacity","isDragging","drag","itemsContainer","DropGroup","validItems","onTitleChange","onItemsChange","droppedItems","onDrop","useDrop","drop","isOver","canDrop","groupState","setGroupState","inputTitle","inputItem","addValidItem","updatedItems","anItem","itemIdx","handleRemoveValidItem","onKeyPress","code","aDroppedItem","classifyContainer","optionsContainer","groupsContainer","reorderItems","list","sort","random","ClassifyChallenger","aGroup","groupName","initialClassifyState","classifyState","setClassifyState","draggableItems","setDragabbleItems","isDropped","itemName","DndProvider","backend","HTML5Backend","newName","groupIdx","updatedName","updatedGroups","handleNameChange","newItems","handleItemsChange","auxGroup","droppedItem","newDroppedItems","handleDrop","accGroups","currentGroup","correctItems","accItems","currentItem","theGroup","ClassifyConfigurator","inputItemsFontSize","inputGroupCount","ClassifyChallengeDesigner","newGroups","readjustGroups","SortChallenger","SortConfigurator","inputItemCount","SortChallengeDesigner","readjustItems","fixed","invalid","TableCell","cell","onCellChange","inputText","hidden","FillTableChallenger","aRow","aColumn","initialFillTableState","fillTableState","setFillTableState","newCell","auxRowIdx","auxColumnIdx","handleCellChange","FillTableConfigurator","inputRowCount","checkFirstRowFixed","inputColumnCount","checkFirstColumnFixed","FillTableChallengeDesigner","auxColumn","newRows","newColumns","readjustTable","splitSentence","split","joinSentence","textParts","join","DropGap","borderBottom","word","FillGapsSentence","sentence","onSentenceChange","onSentenceRemove","onAnswersChange","currentIdx","words","forEach","anExp","initPosition","hiddenIdx","wordCount","sentenceParts","parts","setParts","handlePartChange","partIdx","updatedParts","aPart","getPartStyle","validValues","aWord","wordIdx","anExpression","updatedHiddenExpressions","console","log","alternatives","completeArrayFrom","handleWordClick","droppedText","DialogFillGapsCandidates","candidates","inputCandidate","aCandidate","candidateIdx","edge","handleDeleteCandidate","minHeight","sentencesContainer","paddingLeft","aSentence","sentenceIdx","aHiddenExpression","hiddenExpressionIdx","sentenceText","hiddenExpression","FillGapsChallenger","inputSentence","initialFillGapsState","fillGapsState","setFillGapsState","openCandidatesDialog","setOpenCandidatesDialog","selectedExpression","setSelectedExpression","expressionInSentence","expression","newCandidates","updatedSentences","hiddenExpresionIdx","Dragging","sentencesAnswer","aSentenceAnswer","hiddenExpIdx","updatedSentence","handleSentenceChange","aFillGapsState","handleSentenceRemove","updatedState","handleSentenceAnswer","newSentence","addSentence","every","el","accSentences","currentSentence","correctExpressions","accExpressions","currentExpression","expressionIdx","hiddenAnswer","FillGapsConfigurator","inputTextFontSize","inputFillMethod","FormControl","FillGapsChallengeDesigner","ChallengeDesigner","handleChallengeChange","listContainer","paddingRight","challengesContainer","overflowX","listStyle","boxShadow","webkitBoxShadow","outline","challengeSelector","TestDesigner","setTest","setCompactList","setAnchorEl","deletedChallenge","setDeletedChallenge","openRemoveChallengeConfirm","setOpenRemoveChallengeConfirm","handleNewChallengeOptionClick","newChallenge","defaultChallenge","getDefaultChallenge","handleCloseNewChallengeMenu","updatedChallenges","ToggleButtonGroup","exclusive","newListMode","ToggleButton","ListItemIcon","Designer","useParams","ChallengeEvaluator","handlerSucessChallenge","handlerErrorChallenge","ChallengeLauncher","challengeType","challengeNumber","challengeTotalCount","delay","onEnd","LinearProgress","timeline","transform","timelineContentContainer","timelineContent","timelineIcon","TestResult","results","onBackHome","onRepeatTest","aResult","Evaluator","qs","qsAux","aParam","paramParts","parseQueryString","location","search","launching","currentChallengeState","setCurrentChallengeState","setResults","setShowResult","theTest","next","handleResponse","mainContainer","flexDirection","headerContainer","content","margin","App","ThemeProvider","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mIAAYA,ECAAC,E,0ECKCC,EAAiBC,IAAMC,cAAyC,IAOhEC,EAAyB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAErC,EAAgCC,mBAAoC,IAApE,mBAAOC,EAAP,KAAiBC,EAAjB,KAEA,OACI,cAACP,EAAeQ,SAAhB,CAAyBC,MAAO,CAAEH,WAAUC,eAA5C,SACKH,K,yBChBAM,EACA,CACLC,KAAM,UACNC,MAAO,UACPC,KAAM,WAJDH,EAME,CACPC,KAAM,UACNC,MAAO,UACPC,KAAM,WATDH,EAWF,UAXEA,EAYG,CACRC,KAAM,UACNC,MAAO,UACPC,KAAM,WAfDH,EAiBH,CACFC,KAAM,UACNG,aAAc,UACdF,MAAO,UACPC,KAAM,UACNE,SAAU,UACVC,cAAe,WAvBVN,EAyBD,UASCO,EAAQC,YAAe,CAChCC,QAAS,CACLC,QAAS,CACLT,KAAMD,EAAeC,KACrBU,aAAcX,EAAYI,aAC1BF,MAAOF,EAAeE,OAE1BU,UAAW,CACPX,KAAMD,EAAiBC,KACvBU,aAAcX,EAAYC,KAC1BC,MAAOF,EAAiBE,OAE5BW,WAAY,CACRC,QAASd,EAAkBC,KAC3Bc,MAAOf,EAAkBE,OAE7Bc,MAAO,CACHf,KAAMD,GAEViB,KAAM,CACFP,QAASV,EAAYC,KACrBW,UAAWZ,EAAYG,OAG/Be,WAAY,CACRC,SA7BD,M,0BC7BMC,EAAuB,kBAChC,cAAC,WAAD,UACI,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,4B,SCHVC,EAAmB,WAKZC,EAAc,WAEvB,MAAgDC,qBAAWtC,GAAnDM,EAAR,EAAQA,SAAuBiC,EAA/B,EAAkBhC,YAElBiC,qBAAU,WACN,GAAgB,MAAZlC,GAAwC,IAApBA,EAASmC,OAAc,CAC3C,IAAMC,EAAcC,aAAaC,QAAQR,GAErCG,EADe,MAAfG,GAAuC,KAAhBA,EACVG,KAAKC,MAAMJ,GAEX,QAUzB,MAAO,CAAEpC,WAAUC,YALC,SAACwC,GACjBJ,aAAaK,QAAQZ,EAAkBS,KAAKI,UAAUF,IACtDR,EAAaQ,M,0LL1BTjD,K,kBAAAA,E,iBAAAA,E,cAAAA,E,WAAAA,E,UAAAA,E,cAAAA,E,eAAAA,E,eAAAA,E,gBAAAA,M,cCAAC,K,YAAAA,E,UAAAA,E,iBAAAA,M,KKgBL,IChBKmD,EDmDCC,EAAmB,SAACC,GAC7B,IAAIC,EAAyB,GAER,OAAR,OAATD,QAAS,IAATA,OAAA,EAAAA,EAAWE,KAAiC,OAAV,OAATF,QAAS,IAATA,OAAA,EAAAA,EAAWG,OAAgBF,EAAaG,KAAK,8BAC1E,IAAMC,EAvCmB,SAACF,EAAqBG,GAC/C,IAAML,EAAyB,GAK/B,QAHyB,OAAf,OAANK,QAAM,IAANA,OAAA,EAAAA,EAAQC,aAA2B,OAAND,QAAM,IAANA,OAAA,EAAAA,EAAQC,YAAa,IAAKN,EAAaG,KAAK,4CAC7C,OAAtB,OAANE,QAAM,IAANA,OAAA,EAAAA,EAAQE,oBAAkC,OAANF,QAAM,IAANA,OAAA,EAAAA,EAAQE,mBAAoB,IAAKP,EAAaG,KAAK,yDAEnFD,GACJ,KAAKzD,EAAc+D,aACf,IAAMC,EAAeJ,GACa,OAAlB,OAAZI,QAAY,IAAZA,OAAA,EAAAA,EAAcC,gBAAoC,OAAZD,QAAY,IAAZA,OAAA,EAAAA,EAAcC,eAAgB,IAAKV,EAAaG,KAAK,mDAC7D,OAAlB,OAAZM,QAAY,IAAZA,OAAA,EAAAA,EAAcE,eAAwBX,EAAaG,KAAK,mDAC3B,OAAjB,OAAZM,QAAY,IAAZA,OAAA,EAAAA,EAAcG,cAAuBZ,EAAaG,KAAK,+CAC3D,MAEJ,KAAK1D,EAAcoE,YAEnB,KAAKpE,EAAcqE,SAEnB,KAAKrE,EAAcsE,MAEnB,KAAKtE,EAAcuE,KAEnB,KAAKvE,EAAcwE,SAEnB,KAAKxE,EAAcyE,UAEnB,KAAKzE,EAAc0E,WAGvB,MAAO,CACHC,MAA+B,IAAxBpB,EAAaZ,OACpBY,gBAQqBqB,CAAa,OAACtB,QAAD,IAACA,OAAD,EAACA,EAAWG,KAAZ,OAAkBH,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAWM,QAInE,OAHKD,EAAiBgB,QAASpB,EAAY,sBAAOA,GAAP,YAAwBI,EAAiBJ,gBACzD,OAAd,OAATD,QAAS,IAATA,OAAA,EAAAA,EAAWuB,WAA4C,MAAf,OAATvB,QAAS,IAATA,OAAA,EAAAA,EAAWuB,WAAmBtB,EAAaG,KAAK,4CAE3EJ,EAAUG,MACd,KAAKzD,EAAc+D,aACf,IAAMe,EAAkBxB,EACpBwB,EAAgBlB,OAAOK,aAAe,GACnCa,EAAgBC,SAASC,MAAK,SAACC,GAAD,OAAgCA,EAASxB,OAASxD,EAAYiF,SAE/F3B,EAAaG,KAAK,6BAElBoB,EAAgBK,QAAQC,QACxB,SAACC,EAAcC,GAAf,OAAwDD,GAAuB,MAAhBC,EAAQzD,MAAiC,KAAjByD,EAAQzD,QAC/F,IAEA0B,EAAaG,KAAK,iCAElBoB,EAAgBK,QAAQH,MAAK,SAACO,GAAD,OAA2CA,EAASZ,UACjFpB,EAAaG,KAAK,uDAEtB,MAEJ,KAAK1D,EAAcoE,YACf,MACJ,KAAKpE,EAAcqE,SACf,IAAMS,EAAkBxB,EACpBwB,EAAgBU,UAAUJ,QAC1B,SAACC,EAAcC,GAAf,OAAsDD,GAAkB,MAAXC,GAAoC,KAAjBA,EAAQzD,QACxF,IAEA0B,EAAaG,KAAK,2BAEmB,IAArCoB,EAAgBU,UAAU7C,QAC1BY,EAAaG,KAAK,iCAElBoB,EAAgBU,UAAUJ,QAC1B,SAACC,EAAcC,GAAf,OACID,GACc,MAAXC,GACAA,EAAQG,kBAAkB9C,OAAS,KAE1C,IAEAY,EAAaG,KAAK,mCAEtB,MAEJ,KAAK1D,EAAcsE,MACf,MACJ,KAAKtE,EAAcuE,KACSjB,EACJoC,MAAMN,QACtB,SAACC,EAAcC,GAAf,OAAmCD,GAAkB,MAAXC,GAA+B,KAAZA,KAC7D,IAEA/B,EAAaG,KAAK,2BAEtB,MAEJ,KAAK1D,EAAcwE,SACSlB,EACJqC,OAAOP,QACvB,SAACC,EAAcC,GAAf,OAAmDD,GAAuB,MAAhBC,EAAQM,MAAiC,KAAjBN,EAAQM,QAC1F,IAEArC,EAAaG,KAAK,6CAEtB,MAEJ,KAAK1D,EAAcyE,UACf,IAAMK,EAAkBxB,EACpBwB,EAAgBY,MAAMN,QACtB,SAACS,EAAiBC,EAAsCC,GAAxD,OACIF,GACGC,EAAWV,QACV,SAACY,EAAoBC,EAAuCC,GAA5D,OACIF,IAGQlB,EAAgBlB,OAAOuC,eACT,IAAXJ,GACAjB,EAAgBlB,OAAOwC,kBACT,IAAdF,GAEmB,KAAvBD,EAAcpE,SAGzB,MAGR,IAEA0B,EAAaG,KAAK,yCAEtB,MAGJ,KAAK1D,EAAc0E,WAGvB,MAAO,CACHC,MAA+B,IAAxBpB,EAAaZ,OACpBY,iBAIK8C,GAAc,SAACC,GACxB,OAAe,MAARA,GACW,MAAXA,EAAK9C,IACQ,MAAb8C,EAAKV,MACc,MAAnBU,EAAKC,YACLD,EAAKC,WAAWnB,QACf,SAACC,EAAcC,GAAf,OAAsCD,GAAOhC,EAAiBiC,GAASX,SACvE,I,kDCzKAvB,K,QAAAA,E,SAAAA,M,KCYZ,ICZYoD,GDiCCC,GAAoC,SAACC,GAC9C,IAAQJ,EAA6BI,EAA7BJ,KAAMK,EAAuBD,EAAvBC,SAAUC,EAAaF,EAAbE,SAExB,EAAkCrG,mBAxBjB,SAAC+F,GAClB,OAAY,MAARA,EACO,CACHV,KAAMU,EAAKV,KACXiB,YAAaP,EAAKO,aAAe,GACjCC,SAAUR,EAAKQ,UAAY1D,EAAS2D,IAGrC,CACHnB,KAAM,GACNiB,YAAa,GACbC,SAAU1D,EAAS2D,IAa+BC,CAAaV,IAAnE,mBAAOW,EAAP,KAAkBC,EAAlB,KAEMC,EAAYC,iBAAO,IACnBC,EAAmBD,iBAAO,IA+ChC,OACI,eAACE,EAAA,EAAD,CACIC,WAAS,EACTC,UAAU,SACVC,QAAS,EAHb,UAKI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,cAACC,GAAA,EAAD,CACIC,SAAUV,EACV3D,GAAG,mBACHsE,MAAM,SACNC,WAAS,EACTpH,MAAOsG,EAAUrB,KACjBoC,QA1DS,WACrBd,EAAa,2BACND,GADK,IAERrB,KAAMuB,EAAU7B,QAAQ3E,cA0DxB,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,cAACC,GAAA,EAAD,CACIC,SAAUR,EACV7D,GAAG,mBACHsE,MAAM,iBACNC,WAAS,EACTpH,MAAOsG,EAAUJ,YACjBmB,QA7DgB,WAC5Bd,EAAa,2BACND,GADK,IAERJ,YAAaQ,EAAiB/B,QAAQ3E,cA6DtC,eAAC2G,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,UACI,cAACM,GAAA,EAAD,CAAYC,QAAM,EAAC1E,GAAG,iBAAtB,oBAGA,eAAC2E,GAAA,EAAD,CACIC,QAAQ,iBACR5E,GAAG,uBACHsE,MAAM,SACNC,WAAS,EACTpH,MAAOsG,EAAUH,SAASuB,WAC1BC,SAnEa,SAACC,GAC1B,IAAMC,EAAkBD,EAAIE,OAAO9H,QAAUyC,EAAS2D,GAAGsB,WAAajF,EAAS2D,GAAK3D,EAASsF,GAC7FxB,EAAa,2BACND,GADK,IAERH,SAAU0B,MAyDN,UAQI,cAACG,EAAA,EAAD,CAAUhI,MAAOyC,EAAS2D,GAAGsB,WAA7B,wBACA,cAACM,EAAA,EAAD,CAAUhI,MAAOyC,EAASsF,GAAGL,WAA7B,6BAGR,cAACf,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,eAACL,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,WAAWnB,QAAS,EAA5C,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACmB,EAAA,EAAD,CAAQxG,QAAQ,YAAYyG,MAAM,UAAUC,QApEtC,WACtB,IAAMC,EAAgB1C,EAAI,2BAEfA,GAFe,IAGlBV,KAAMqB,EAAUrB,KAChBiB,YAAaI,EAAUJ,YACvBC,SAAUG,EAAUH,WAEtB,CACEtD,GAAIyF,eACJrD,KAAMqB,EAAUrB,KAChBiB,YAAaI,EAAUJ,YACvBC,SAAUG,EAAUH,SACpBP,WAAY,IAGpBI,EAASqC,IAoDO,uBAEJ,cAAC1B,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACmB,EAAA,EAAD,CAAQC,MAAM,UAAUC,QApDlB,WACtBnC,KAmDgB,iC,oBEzHXsC,GAA8C,SAACxC,GACxD,IAAOyC,EAA8EzC,EAA9EyC,KAAMtH,EAAwE6E,EAAxE7E,KAAMuH,EAAkE1C,EAAlE0C,iBAAkBC,EAAgD3C,EAAhD2C,iBAAkBC,EAA8B5C,EAA9B4C,MAAOC,EAAuB7C,EAAvB6C,UAAWC,EAAY9C,EAAZ8C,SAEzE,OACI,eAACC,EAAA,EAAD,CACIN,KAAMA,EACNpB,WAAS,EACT2B,SAAWJ,GAAgB,KAH/B,UAKI,cAACK,GAAA,EAAD,UACI,cAACrC,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,SAAxB,SACI,cAACtB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACtF,EAAA,EAAD,CAAYC,QAAQ,SAApB,SAA8BR,UAI1C,eAAC+H,GAAA,EAAD,WACI,cAACf,EAAA,EAAD,CAAQgB,WAAS,EAACd,QAASQ,EAAWT,MAAM,UAAUzG,QAAQ,YAA9D,SACM+G,GAAsC,YAE5C,cAACP,EAAA,EAAD,CAAQE,QAASS,EAAUV,MAAM,UAAjC,SACMO,GAAsC,oB,6BC9BtDS,GAAYC,aAAW,iBAAO,CAChCC,gBAAiB,CACbC,QAAS,YAUJC,GAAsD,SAACxD,GAChE,IAAOyC,EAA4BzC,EAA5ByC,KAAMxC,EAAsBD,EAAtBC,SAAUC,EAAYF,EAAZE,SAEvB,EAAkCrG,mBAAsB,CAAE4J,iBAAiB,EAAOC,UAAU,IAA5F,mBAAOnD,EAAP,KAAkBC,EAAlB,KAEMmD,EAAuBjD,iBAAO,IAC9BkD,EAAyBlD,iBAAO,IAEhCmD,EAAUT,KAEVU,EAAwB,SAACC,EAAmB9J,GAC9CuG,EAAa,2BACND,GADK,mBAEPwD,EAAY9J,MAYrB,OACI,eAAC8I,EAAA,EAAD,CACIN,KAAMA,EACNpB,WAAS,EACT2B,SAAS,KAHb,UAKI,cAACgB,EAAA,EAAD,wCACA,cAACC,EAAA,EAAD,CAAKC,UAAWL,EAAQP,gBAAxB,SACI,eAAC1C,EAAA,EAAD,CACIC,WAAS,EACTC,UAAU,SACVC,QAAS,EAHb,UAKI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,cAACkD,GAAA,EAAD,CACIC,QACI,cAACC,GAAA,EAAD,CACIlD,SAAUwC,EACVzE,KAAK,mBACLoF,QAAS/D,EAAUkD,gBACnBrB,MAAM,YACNR,SAAU,WAAQkC,EAAsB,kBAAmBH,EAAqB/E,QAAQ0F,YAGhGlD,MAAM,mDAGd,cAACR,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,cAACkD,GAAA,EAAD,CACIC,QACI,cAACC,GAAA,EAAD,CACIlD,SAAUyC,EACV1E,KAAK,mBACLoF,QAAS/D,EAAUmD,SACnBtB,MAAM,YACNR,SAAU,WAAQkC,EAAsB,WAAYF,EAAuBhF,QAAQ0F,YAG3FlD,MAAM,yDAGd,cAACR,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,eAACL,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,WAAWnB,QAAS,EAA5C,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACmB,EAAA,EAAD,CAAQxG,QAAQ,YAAYyG,MAAM,UAAUC,QApD9C,WACtBpC,EAASM,IAmDe,uBAEJ,cAACK,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACmB,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAnD1B,WACtBnC,KAkDwB,sCC7E1BkD,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrC8J,OAAQ,CACJC,QAAS,UAEbC,wBAAyB,CACrBC,WAAY,UAEhBC,SAAU,CACN,mCAAoC,CAChCD,WAAY,YAGpBE,gBAAiB,CACbC,UAAW,QAEfC,KAAM,CACF1C,MAAOlI,GAEXoJ,gBAAiB,CACbC,QAAS,YAeJwB,GAAoC,SAAC/E,GAC9C,IAAQgF,EAAwChF,EAAxCgF,QAASC,EAA+BjF,EAA/BiF,aAAcC,EAAiBlF,EAAjBkF,aAEzBC,EAAUC,cAEhB,EAAwC3L,IAAMI,WAA9C,mBAAOwL,EAAP,KAAqBC,EAArB,KACA,EAAwC7L,IAAMI,SAAyB,MAAvE,mBAAO0L,EAAP,KAAqBC,EAArB,KACA,EAAwC3L,oBAAkB,GAA1D,mBAAO4L,EAAP,KAAqBC,EAArB,KACA,EAA0D7L,oBAAkB,GAA5E,mBAAO8L,EAAP,KAA8BC,EAA9B,KACA,EAAgD/L,qBAAhD,mBAAOgM,EAAP,KAAyBC,EAAzB,KAEMjC,EAAUT,KAsEhB,OACI,eAAC,WAAD,WACI,eAAC2C,EAAA,EAAD,CACIjJ,GAAG,aACHkJ,SAAUT,EACVU,aAAW,EACXxD,KAAMyD,QAAQX,GACdY,QAvDgB,WACxBX,EAAgB,OAiDZ,UAOI,cAACvD,EAAA,EAAD,CAAUI,QArDM,WACxBmD,EAAgB,MAChBE,GAAgB,IAmDR,SACI,cAAChK,EAAA,EAAD,CAAYC,QAAQ,YAApB,sCAIJ,cAACsG,EAAA,EAAD,CAAUmE,UAAWC,IAAMC,GAAE,oBAAetB,EAAQlI,GAAvB,mBAA6BuI,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAcvI,IAAxE,SACI,cAACpB,EAAA,EAAD,CAAYC,QAAQ,YAApB,mCAKR,eAACoH,EAAA,EAAD,CACIN,KAAMgD,EACNpE,WAAS,EACT2B,SAAS,KAHb,UAKI,cAACgB,EAAA,EAAD,2BACA,cAACC,EAAA,EAAD,CAAKC,UAAWL,EAAQP,gBAAxB,SACI,cAAC,GAAD,CACI1D,KAAMyF,EACNpF,SA7FS,SAACqC,GAC1B2C,EAAaD,EAAQlI,GAAIwF,GACzBgD,OAAgBiB,GAChBb,GAAgB,IA2FAxF,SAxFS,WACzBoF,OAAgBiB,GAChBb,GAAgB,WA0FZ,cAAC,GAAD,CACIjD,KAAMkD,EACNxK,KAAK,8CACLyH,MAAM,KACNC,UAxEoB,WACR,MAAhBwC,GACAH,EAAaF,EAAQlI,GAAIuI,GAE7BC,OAAgBiB,GAChBX,GAAyB,IAoEjB9C,SAjEmB,WAC3BwC,OAAgBiB,GAChBX,GAAyB,MAiErB,cAAChF,EAAA,EAAD,CAAMC,WAAS,EAAf,SACI,eAACD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,UAEiC,IAAzB+D,EAAQwB,MAAMvK,QACX,cAACP,EAAA,EAAD,mCAGHsJ,EAAQwB,MAAMvK,OAAS,GACpB,cAACwK,EAAA,EAAD,UAEKzB,EAAQwB,MAAME,KAAI,SAACC,GAAD,OACd,eAAC,WAAD,WACI,eAACC,EAAA,EAAD,CACIC,QAAM,EAENC,WAAW,aACXjD,QAAS,CAAEhD,UAAWgD,EAAQc,UAJlC,UAMI,eAAC/D,EAAA,EAAD,CAAMC,WAAS,EAAf,UACI,cAACD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAf,SACI,cAAC8F,EAAA,EAAD,CACInM,QACI+L,EAAMzH,KAEVpE,UACI,cAACY,EAAA,EAAD,CACI0K,UAAU,OACVzK,QAAQ,QACRuI,UAAWL,EAAQU,OACnBnC,MAAM,cAJV,SAMKuE,EAAMxG,kBAKvB,cAACS,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAf,SACI,cAAC8F,EAAA,EAAD,CACIjM,UAAS,UAAK6L,EAAM9G,WAAW5D,OAAtB,oBAAoE,IAA5B0K,EAAM9G,WAAW5D,OAAe,IAAM,WAInG,cAAC+K,EAAA,EAAD,CAAyB9C,UAAWL,EAAQY,wBAA5C,SACI,eAAC7D,EAAA,EAAD,CAAMC,WAAS,EAAf,UACI,cAACD,EAAA,EAAD,CAAMI,MAAI,EAAV,SAEQrB,GAAYgH,GACR,cAACM,EAAA,EAAD,CAAYC,MAAM,SAAS7E,QAAS,WA7GxE,IAAC8E,EAAmBC,EAAnBD,EA6G+FnC,EAAQlI,GA7GpFsK,EA6GwFT,EAAM7J,GA5GtIgJ,EAAoB,CAChBqB,YACAC,SACAC,aAAa,KAyGuC,SACI,cAACC,EAAA,EAAD,CAAMpD,UAAWL,EAAQiB,KAAzB,kCAGJ,cAACmC,EAAA,EAAD,CAAYC,MAAM,6BAAlB,SACI,cAACI,EAAA,EAAD,CAAMlF,MAAM,QAAZ,uBAKhB,cAACxB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACiG,EAAA,EAAD,CAAYC,MAAM,SAAS7E,QAAS,SAACR,GACjCA,EAAI0F,kBAzJpC,SAAC1F,EAA0CjC,GAC/D0F,EAAgB1F,GAChB4F,EAAgB3D,EAAI2F,eAwJgCC,CAAgB5F,EAAK8E,IAFzB,SAII,cAACW,EAAA,EAAD,CAAMlF,MAAM,UAAZ,sBAGR,cAACxB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACiG,EAAA,EAAD,CAAYC,MAAM,WAAW7E,QAAS,SAACR,GACnCA,EAAI0F,kBAlJxDjC,EAmJ0EqB,GAlJ1Ef,GAAyB,IAgJuB,SAII,cAAC0B,EAAA,EAAD,gCAxDXX,EAAM7J,IA8Df,cAAC4K,EAAA,EAAD,CAAS/L,QAAQ,QAAQyK,UAAU,SAjEvC,mBAA2BO,EAAM7J,UAuEjD,cAAC8D,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIiD,UAAWL,EAAQe,gBAAtC,SACI,cAAChE,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,WAAxB,SACI,cAACC,EAAA,EAAD,CACIxG,QAAQ,YACRyG,MAAM,UACNC,QApME,WAC1BqD,GAAgB,IAgMI,yCAYZG,GACI,cAAC,GAAD,CACIpD,KAAMoD,EAAiBwB,YACvBpH,SAzJY,SAAC0H,GAC7BxC,EAAQnI,KAAR,uBAAsB6I,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAkBsB,UAAxC,mBAAqDtB,QAArD,IAAqDA,OAArD,EAAqDA,EAAkBuB,OAAvE,4BAAiGO,EAAYlE,gBAA7G,qBAAyIkE,EAAYjE,UAAYmC,GACjKC,EAAoB,CAChBuB,aAAa,KAuJDnH,SAnJY,WAC5B4F,EAAoB,CAChBuB,aAAa,WCtHnBjE,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrCmN,YAAa,CACTpD,QAAS,YAaJqD,GAAwC,SAAC7H,GAClD,IAAQ8H,EAA0B9H,EAA1B8H,aAAcC,EAAY/H,EAAZ+H,QAEhBC,EAActH,iBAAO,IAErBmD,EAAUT,KA4BhB,OACI,eAAC,WAAD,WACI,uBACI6E,IAAKD,EACLE,OAAO,OACPhE,UAAWL,EAAQ+D,YACnB9K,GAAG,wBACHqL,UAAQ,EACRpL,KAAK,OACLuE,QAnCQ,SAAC8G,GACjB,IAAK,IAAD,EACMvG,EAAMuG,EACZ,GAA0B,OAAnB,OAAHvG,QAAG,IAAHA,GAAA,UAAAA,EAAKE,cAAL,eAAasG,OAAe,CAC5B,IAAMC,EAAOzG,EAAIE,OAAOsG,MAAM,GACxBE,EAAS,IAAIC,WACnBD,EAAOE,WAAWH,GAClBC,EAAOG,UAAY,SAACC,GAChB,IACI,IAAMC,EAAavM,KAAKC,MAAMiM,EAAOM,QACrCf,EAAac,GACf,MAAOE,GACDf,GACAA,OAKlB,MAAOe,GACDf,GACAA,IAGRC,EAAYpJ,QAAQ3E,MAAQ,MAcxB,cAACkI,EAAA,EAAD,CAAQ4G,MAAO,CAAE3G,MAAOlI,EAAeG,MAAvC,SACI,uBAAO2O,QAAQ,wBAAf,qCCnCHC,GAA0C,SAACjJ,GACpD,IAAQgF,EAAgChF,EAAhCgF,QAAS/E,EAAuBD,EAAvBC,SAAUC,EAAaF,EAAbE,SAE3B,EAAkCrG,mBAtBjB,SAACmL,GAClB,OAAe,MAAXA,EACO,CACH9F,KAAM8F,EAAQ9F,KACdiB,YAAa6E,EAAQ7E,aAAe,IAGrC,CACHjB,KAAM,GACNiB,YAAa,IAaqCG,CAAa0E,IAAnE,mBAAOzE,EAAP,KAAkBC,EAAlB,KAEMC,EAAYC,iBAAO,IACnBC,EAAmBD,iBAAO,IAqChC,OACI,eAACE,EAAA,EAAD,CACIC,WAAS,EACTC,UAAU,SACVC,QAAS,EAHb,UAKI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,cAACC,GAAA,EAAD,CACIC,SAAUV,EACVW,MAAM,SACNC,WAAS,EACTpH,MAAOsG,EAAUrB,KACjBoC,QA/CS,WACrBd,EAAa,2BACND,GADK,IAERrB,KAAMuB,EAAU7B,QAAQ3E,cA+CxB,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,cAACC,GAAA,EAAD,CACIC,SAAUR,EACVS,MAAM,iBACNC,WAAS,EACTpH,MAAOsG,EAAUJ,YACjBmB,QAjDgB,WAC5Bd,EAAa,2BACND,GADK,IAERJ,YAAaQ,EAAiB/B,QAAQ3E,cAiDtC,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,eAACL,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,WAAWnB,QAAS,EAA5C,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACmB,EAAA,EAAD,CAAQxG,QAAQ,YAAYyG,MAAM,UAAUC,QAhDtC,WACtB,IAAMuG,EAAsB5D,EAAO,2BAExBA,GAFwB,IAG3B9F,KAAMuB,EAAU7B,QAAQ3E,MACxBkG,YAAaQ,EAAiB/B,QAAQ3E,QAExC,CACE6C,GAAIyF,eACJrD,KAAMuB,EAAU7B,QAAQ3E,MACxBkG,YAAaQ,EAAiB/B,QAAQ3E,MACtCuM,MAAO,IAGfvG,EAAS2I,IAkCO,uBAEJ,cAAChI,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACmB,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAlClB,WACtBnC,KAiCgB,iCC1FlBkD,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrCyO,QAAS,CACL7N,SAAUZ,EAAMW,WAAW+N,QAAQ,KAEvCC,iBAAkB,CACd/N,SAAUZ,EAAMW,WAAW+N,QAAQ,IACnC/G,MAAOlI,EAAiBC,MAE5BkP,cAAe,CACX9F,QAAS,YAEb+F,UAAW,CACPC,SAAU,GAEdC,eAAgB,CACZC,gBAAiBvP,EACjBkI,MAAOlI,EAAYM,eAEvB8I,gBAAiB,CACbC,QAAS,YASJmG,GAA0C,SAAC1J,GACpD,IAAQlG,EAA0BkG,EAA1BlG,SAAUC,EAAgBiG,EAAhBjG,YAEZoL,EAAUC,cAEhB,EAA8C3L,IAAMI,UAAyB,GAA7E,mBAAO8P,EAAP,KAAwBC,EAAxB,KACA,EAA8C/P,oBAAkB,GAAhE,mBAAOgQ,EAAP,KAAwBC,EAAxB,KACA,EAAgEjQ,oBAAkB,GAAlF,mBAAOkQ,EAAP,KAAiCC,EAAjC,KACA,EAA8CnQ,qBAA9C,mBAAOoQ,EAAP,KAAwBC,EAAxB,KACA,EAAsCrQ,oBAAkB,GAAxD,mBAAOsQ,EAAP,KAAoBC,EAApB,KACA,EAAsCvQ,mBAAiB,IAAvD,mBAAOwQ,EAAP,KAAoBC,EAApB,KAEMzG,EAAUT,KAsFVmH,EAAmB,SAACpD,EAAmBvH,GACzC,IAAM4K,EAAa1Q,EAAS2Q,MAAK,SAACC,GAAD,OAAuBA,EAAS5N,KAAOqK,KAClEwD,EAAyB,MAAdH,GAAsBA,EAAWhE,MAAMlI,MAAK,SAACqI,GAAD,OAAiBA,EAAM7J,KAAO8C,EAAK9C,MAE1F8N,EAAkB9Q,EAAS4M,KAAI,SAACgE,GAClC,GAAIA,EAAS5N,KAAOqK,EAChB,OAAO,eAAIuD,GAEf,GAAIC,EAAU,CACV,IAAME,EAAeH,EAASlE,MAAME,KAAI,SAACC,GAAD,OAAiBA,EAAM7J,KAAO8C,EAAK9C,GAAlB,eAA2B8C,GAA3B,eAAuC+G,MAChG,OAAO,2BACA+D,GADP,IAEIlE,MAAM,YAAKqE,KAGnB,OAAO,2BACAH,GADP,IAEIlE,MAAM,GAAD,mBAAMkE,EAASlE,OAAf,CAAsB5G,SAGnC7F,EAAY6Q,GACPD,GACDxF,EAAQnI,KAAR,oBAA0BmK,EAA1B,YAAuCvH,EAAK9C,MAI9CgO,EAAmB,SAAC3D,EAAmBvH,GACzC,IAAMgL,EAAkB9Q,EAAS4M,KAAI,SAACgE,GAClC,GAAIA,EAAS5N,KAAOqK,EAChB,OAAO,eAAIuD,GAEf,IAAMG,EAAeH,EAASlE,MAAMuE,QAAO,SAACpE,GAAD,OAAiBA,EAAM7J,KAAO8C,EAAK9C,MAC9E,OAAO,2BACA4N,GADP,IAEIlE,MAAM,YAAKqE,QAGnB9Q,EAAY6Q,IAOhB,OACI,eAAC,WAAD,WACI,eAAC7H,EAAA,EAAD,CACIN,KAAMoH,EACNxI,WAAS,EACT2B,SAAS,KAHb,UAKI,cAACgB,EAAA,EAAD,uBACA,cAACC,EAAA,EAAD,CAAKC,UAAWL,EAAQP,gBAAxB,SACI,cAAC,GAAD,CACI0B,QAASiF,EACThK,SA/GY,SAAC2I,GAEzB7O,EADmB,MAAnBkQ,EACYnQ,EAAS4M,KAAI,SAACgE,GAAD,OAAuBA,EAAS5N,KAAO8L,EAAW9L,GAAK8L,EAAa8B,KAEjF,GAAD,mBACJ5Q,GADI,gBAGA8O,MAIfsB,OAAmB3D,GACnBuD,GAAmB,IAoGH5J,SAjGY,WAC5BgK,OAAmB3D,GACnBuD,GAAmB,WAmGf,cAAC,GAAD,CACIrH,KAAMsH,EACN5O,KAAK,8CACLyH,MAAM,KACNC,UA3EuB,WACR,MAAnBoH,GACAlQ,EAAYD,EAASiR,QAAO,SAACL,GAAD,OAAuBA,EAAS5N,KAAOmN,EAAgBnN,OAEvFkN,GAA4B,IAwEpBlH,SArEsB,WAC9BkH,GAA4B,MAsExB,cAACgB,EAAA,EAAD,CACIvI,KAAM0H,EACNc,aAAc,CACVC,SAAU,MACVC,WAAY,UAEhBC,iBAAkB,IAClBjF,QAlCe,WACvBiE,GAAe,IA0BX,SASI,cAACiB,EAAA,EAAD,CACIC,QACI,eAAC1K,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAf,SACI,cAACqG,EAAA,EAAD,sBAEJ,cAAC1G,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,cAACvF,EAAA,EAAD,UAAa2O,SAIzBnG,UAAWL,EAAQ2F,mBAG3B,eAAC5I,EAAA,EAAD,CAAMC,WAAS,EAAf,UACI,cAACD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,eAACL,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMoB,QAAQ,SAAS4E,WAAW,SAAS/F,QAAS,EAAGmD,UAAWL,EAAQwF,cAApG,UACI,cAACzI,EAAA,EAAD,CAAMI,MAAI,EAACkD,UAAWL,EAAQyF,UAA9B,SACI,cAAC5N,EAAA,EAAD,CAAYC,QAAQ,KAApB,yBAIJ,cAACiF,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACmB,EAAA,EAAD,CACI4G,MAAO,CAAE3G,MAAOlI,EAAeG,MAC/BgI,QArLE,WAC1ByH,GAAmB,IAkLC,8BAOJ,cAAClJ,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAAC,GAAD,CACI8G,aAhJA,SAAC9C,GACzB,IAAM4D,EAAa5D,GTsEG,SAACA,GAC3B,OAAkB,MAAXA,GACc,MAAdA,EAAQlI,IACQ,MAAhBkI,EAAQ9F,MACS,MAAjB8F,EAAQwB,OACRxB,EAAQwB,MAAM9H,QACb,SAACC,EAAcC,GAAf,OAAiCD,GAAOgB,GAAYf,MACpD,IS5EC2M,CAAe3C,KAChB0B,EAAe,8BACfF,GAAe,IAEkE,MAAvEtQ,EAAS2Q,MAAK,SAACC,GAAD,OAAuBA,EAAS5N,KAAO8L,EAAW9L,OAS1EwN,EAAe,yBACfF,GAAe,IARfrQ,EAAY,GAAD,mBACJD,GADI,gBAGA8O,OAsISb,QA7HK,WAC7BuC,EAAe,4CACfF,GAAe,aAgIP,cAACxJ,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,cAACyG,EAAA,EAAD,MAEJ,cAAC9G,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SAEQnH,EAAS4M,KAAI,SAACgE,GAAD,OACT,eAACc,EAAA,EAAD,CAEIC,SAAU9B,IAAoBe,EAAS5N,GACvC8E,SAAW,SAACwG,EAA6BsD,IA/M1C,SAAC1G,EAAkB0G,GAC1C9B,IAAmB8B,GAAa1G,EAAQlI,IA+MZ6O,CAAmBjB,EAAUgB,IAJrC,UAOI,cAACE,EAAA,EAAD,CAAkB1E,MAAOwD,EAASvK,YAAlC,SACI,eAACS,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,gBAAgB4E,WAAW,SAAnD,UACI,cAAClG,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAf,SACI,cAACvF,EAAA,EAAD,CAAYwI,UAAWL,EAAQqF,QAA/B,SAAyCwB,EAASxL,SAEtD,cAAC0B,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAf,SACI,cAACvF,EAAA,EAAD,CAAYwI,UAAWL,EAAQuF,iBAA/B,mBACQsB,EAASlE,MAAMvK,OADvB,wBACuE,IAA1ByO,EAASlE,MAAMvK,OAAe,IAAM,QAGrF,eAAC2E,EAAA,EAAD,CAAMI,MAAI,EAAV,UACI,cAACiG,EAAA,EAAD,CACIC,MAAM,YACN9E,MAAM,UACNC,QAAS,SAACR,GACNA,EAAI0F,kBAhNnB,SAACvC,GAC9B,IAAM6G,EAAUC,SAASC,cAAc,KACvCF,EAAQG,aAAa,OAAQ,iCAAmCC,mBAAmB5P,KAAKI,UAAUuI,KAClG6G,EAAQG,aAAa,WAAYhH,EAAQ9F,KAAKgN,QAAQ,KAAM,MAC5DL,EAAQ9C,MAAMvE,QAAU,OACxBsH,SAASK,KAAKC,YAAYP,GAC1BA,EAAQQ,QACRP,SAASK,KAAKG,YAAYT,GA0MkBU,CAAyB7B,IALjC,SAQI,cAACpD,EAAA,EAAD,yBAGA,cAACL,EAAA,EAAD,CACIC,MAAM,SACN9E,MAAM,UACNC,QAAS,SAACR,GACNA,EAAI0F,kBApOpD2C,EAqOuEQ,GApOvEZ,GAAmB,IA+NqB,SAQI,cAACxC,EAAA,EAAD,qBAIJ,cAACL,EAAA,EAAD,CACIC,MAAM,WACN7E,QAAS,SAACR,GACNA,EAAI0F,kBA1OpD2C,EA2OyEQ,GA1OzEV,GAA4B,IAsOY,SAOI,cAAC1C,EAAA,EAAD,+BAMpB,cAACkF,EAAA,EAAD,UACI,cAAC,GAAD,CACIxH,QAAS0F,EACTzF,aAAcsF,EACdrF,aAAc4F,QAzDjBJ,EAAS5N,gBC9PjC2P,GAAiB,WAC1B,MAAkC5Q,IAA1B/B,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,YAElB,OACI,cAAC6G,EAAA,EAAD,CACIC,WAAS,EACTqB,QAAQ,SAFZ,SAII,cAACtB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAf,SACI,cAAC,GAAD,CACInH,SAAUA,EACVC,YAAaA,S,0FPhBrB+F,K,YAAAA,E,cAAAA,Q,KQgBL,IChBK4M,GDgBCC,GAA8B,SAAC5P,GAAmE,IAA9CqD,EAA6C,uDAAxB1D,EAAS2D,GAC3F,OAAQtD,GACJ,KAAKzD,EAAc+D,aACf,OAAO+C,IAAa1D,EAAS2D,GAAK,mCAAqC,4BAC3E,KAAK/G,EAAcoE,YACf,OAAO0C,IAAa1D,EAAS2D,GAAK,oBAAsB,gBAC5D,KAAK/G,EAAcsE,MACf,OAAOwC,IAAa1D,EAAS2D,GAAK,mBAAqB,oBAC3D,KAAK/G,EAAcqE,SACf,OAAOyC,IAAa1D,EAAS2D,GAAK,qBAAuB,mBAC7D,KAAK/G,EAAcuE,KACf,OAAOuC,IAAa1D,EAAS2D,GAAK,uBAAyB,qBAC/D,KAAK/G,EAAcwE,SACf,OAAOsC,IAAa1D,EAAS2D,GAAK,0BAA4B,wBAClE,KAAK/G,EAAcyE,UACf,OAAOqC,IAAa1D,EAAS2D,GAAK,oBAAsB,qBAC5D,KAAK/G,EAAcsT,UACf,OAAOxM,IAAa1D,EAAS2D,GAAK,qBAAuB,mBAC7D,KAAK/G,EAAc0E,UACf,OAAOoC,IAAa1D,EAAS2D,GAAK,aAAe,YACrD,QACI,OAAOD,IAAa1D,EAAS2D,GAAK,cAAgB,cAIjDwM,GAAuB,SAAC9P,GAAkH,IAA7F+P,EAA4F,uDAAtD,UAAW/D,EAA2C,uDAApB,GAC9H,OACI,cAACzB,EAAA,EAAD,CAAMjM,SAAUyR,EAAM/D,MAAOA,EAA7B,SAEQhM,IAASzD,EAAc+D,aAAe,UAChCN,IAASzD,EAAcoE,YAAc,QACjCX,IAASzD,EAAcqE,SAAW,YAC9BZ,IAASzD,EAAcsE,MAAQ,UAC3Bb,IAASzD,EAAcuE,KAAO,YAC1Bd,IAASzD,EAAcwE,SAAW,WAC9Bf,IAASzD,EAAcyE,UAAY,UAC/BhB,IAASzD,EAAcsT,UAAY,YAC/B7P,IAASzD,EAAc0E,UAAY,gBAAkB,MAMjG+O,GAA4B,SAAChQ,GAC/B,IAAMiQ,EAA0C,CAC5C7P,UAAW,GACXC,iBAAkB,IAGtB,OAAQL,GACJ,KAAKzD,EAAc+D,aACf,OAAO,2BACA2P,GADP,IAEIC,eAAgB,GAChB1P,aAAc,EACdC,cAAc,EACdC,aAAa,IAErB,KAAKnE,EAAcoE,YACf,OAAO,2BACAsP,GADP,IAEIzP,aAAc,EACdC,cAAc,IAEtB,KAAKlE,EAAcsE,MACf,OAAOoP,EACX,KAAK1T,EAAcqE,SACf,OAAO,2BACAqP,GADP,IAEIE,aAAc,GACdC,WAAYrN,GAAWsN,UAE/B,KAAK9T,EAAcuE,KACf,OAAO,2BACAmP,GADP,IAEIK,cAAe,GACfC,UAAW,IAEnB,KAAKhU,EAAcwE,SACf,OAAO,2BACAkP,GADP,IAEIK,cAAe,GACfE,WAAY,IAEpB,KAAKjU,EAAcyE,UACf,OAAO,2BACAiP,GADP,IAEIK,cAAe,GACfG,SAAU,EACVC,YAAa,EACbhO,eAAe,EACfC,kBAAkB,IAE1B,QACI,OAAOsN,IExGb5J,GAAYC,YAAW,CACzBhC,UAAW,CACPuB,MAAO,QAEXzC,YAAa,CACTyC,MAAO,OACP8K,WAAY,SACZC,SAAU,SACVC,aAAc,YAElBC,WAAY,CACRxS,SAAU,QAEdyS,gBAAiB,CACbtJ,QAAS,OACTuJ,eAAgB,mBAaXC,GAAwD,SAAChO,GAClE,IAAQpD,EAA8DoD,EAA9DpD,UAAWpB,EAAmDwE,EAAnDxE,SAAUyS,EAAyCjO,EAAzCiO,SAAUC,EAA+BlO,EAA/BkO,QAAS7L,EAAsBrC,EAAtBqC,QAAS8L,EAAanO,EAAbmO,SAEzD,EAAoCtU,mBAAqB,CAAEoE,OAAO,EAAMpB,aAAc,KAAtF,mBAAOuR,EAAP,KAAmBC,EAAnB,KAEMxK,EAAUT,KAkBhB,OAJApH,qBAAU,WACNqS,EAAc1R,EAAiBC,MAChC,CAACA,IAGA,cAAC,WAAD,UAEQ,eAAC0R,GAAA,EAAD,CAAM3S,QAASsS,EAAW,YAAc,WAAYM,UAAW,GAAIrK,UAAWL,EAAQxC,UAAtF,UACI,eAACmN,GAAA,EAAD,CAAgBtK,UAAWL,EAAQxC,UAAWgB,QApB1C,WACZA,GACAA,EAAQzF,IAkBA,UACI,cAAC6R,GAAA,EAAD,CACIC,OACIR,EAAUrB,GAAqBjQ,EAAUG,KAAM,cAAWwJ,EAE9DoI,UACI,cAACjT,EAAA,EAAD,CAAYC,QAAQ,YAAYyG,MAAO6L,EAAW,YAAc,cAAe/J,UAAWL,EAAQ1D,YAAlG,SACM+N,EAAUtR,EAAUuB,SAAb,WAA4B3C,EAA5B,YAAwCmR,GAA4B/P,EAAUG,SAG/F6R,OACIV,EACI,cAACtN,EAAA,EAAD,CAAMC,WAAS,EAACiG,WAAW,SAA3B,SAEQsH,EAAWnQ,MAAQ,cAACqJ,EAAA,EAAD,CAAMlF,MAAM,UAAU/G,SAAS,QAA/B,mBAEX,cAACwT,GAAA,EAAD,CAASC,OAAK,EAAC5H,MACX,mCAEQkH,EAAWvR,aAAa6J,KAAI,SACxBqI,EACAC,GAFwB,OAIxB,oBAEI9K,UAAWL,EAAQgK,WAFvB,SAIKkB,GAJL,aACeC,SAR/B,SAiBI,cAAC1H,EAAA,EAAD,CAAMlF,MAAM,YAAY/G,SAAS,QAAjC,oCAQpBkL,KAIP2H,GACG,cAACe,GAAA,EAAD,UACI,cAACvT,EAAA,EAAD,CAAYwT,QAAM,EAAlB,SAAoBtS,EAAUuB,iBAMzC+P,GACG,eAACiB,GAAA,EAAD,CAAajL,UAAWL,EAAQiK,gBAAhC,UAEQM,EAAWnQ,MAAQ,cAACmR,GAAA,EAAD,CAAMhO,MAAM,WAAWgB,MAAM,UAAU0K,KAAK,QAAQuC,KAAM,cAAC/H,EAAA,EAAD,CAAMjM,SAAS,QAAf,qBAErE,cAACwT,GAAA,EAAD,CAASC,OAAK,EAAC5H,MACX,mCAEQkH,EAAWvR,aAAa6J,KAAI,SAACqI,EAAkBC,GAAnB,OACxB,oBAEI9K,UAAWL,EAAQgK,WAFvB,SAGKkB,GAHL,aACeC,SAL/B,SAaI,cAACI,GAAA,EAAD,CAAMhO,MAAM,QAAQgB,MAAM,YAAY0K,KAAK,QAAQ/D,MAAO,CAAE3G,MAAO,WAAaiN,KAAM,cAAC/H,EAAA,EAAD,CAAMjM,SAAS,QAAf,+BAItG,cAAC4L,EAAA,EAAD,CAAY5E,QAzFd,WAClB8L,GACAA,EAASvR,IAuFW,SACI,cAAC0K,EAAA,EAAD,gCCpI9BlE,GAAYC,YAAW,CACzBiM,KAAM,CACF1M,MAAO,OACP2M,UAAW,QAEflO,UAAW,CACPuB,MAAO,UAYF4M,GAAsD,SAACxP,GAChE,IAAQH,EAA0DG,EAA1DH,WAAY4P,EAA8CzP,EAA9CyP,YAAaxB,EAAiCjO,EAAjCiO,SAAUyB,EAAuB1P,EAAvB0P,SAAUvB,EAAanO,EAAbmO,SAErD,EAAkDtU,mBAAgCoU,QAAY1H,GAA9F,mBAAOoJ,EAAP,KAA0BC,EAA1B,KAEM/L,EAAUT,KAEVyM,EAAuB,SAACjT,GAC1BgT,EAAqBhT,GACjB8S,GACAA,EAAS9S,IAIXkT,EAAwB,SAAClT,GACvBuR,GACAA,EAASvR,IAIjB,OACI,cAACgE,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASgG,WAAW,SAAS/F,QAAS,EAAGmD,UAAWL,EAAQyL,KAAtF,SAEQzP,EAAW6G,KAAI,SAACqJ,EAAuBC,GAAxB,OACX,cAACpP,EAAA,EAAD,CAAMI,MAAI,EAAWkD,UAAWL,EAAQxC,UAAxC,SACI,cAAC,GAAD,CACIzE,UAAWmT,EACXvU,SAAUwU,EAAM,EAChB/B,UAA2B,OAAjB0B,QAAiB,IAAjBA,OAAA,EAAAA,EAAmB7S,MAAOiT,EAAWjT,GAC/CoR,QAASuB,EACTpN,QAASwN,EACT1B,SAAU2B,KAPFE,S,6BF/CxBtD,O,mBAAAA,I,gBAAAA,Q,KGIZ,IAAMtJ,GAAYC,YAAW,CACzBiM,KAAM,CACF1M,MAAO,OACPqN,OAAQ,OACRzL,QAAS,OACTuJ,eAAgB,SAChBjH,WAAY,UAEhBoJ,eAAgB,CACZtN,MAAO,MACPqN,OAAQ,MACRzL,QAAS,OACTuJ,eAAgB,SAChBjH,WAAY,UAEhBqJ,MAAO,CACHvN,MAAO,SAWFwN,GAAsD,SAACpQ,GAChE,IAAQqQ,EAAuCrQ,EAAvCqQ,KAAMlS,EAAiC6B,EAAjC7B,SAAU9C,EAAuB2E,EAAvB3E,SAAUuG,EAAa5B,EAAb4B,SAElC,EAAwC/H,mBAAiBsE,GAAzD,mBAAOmS,EAAP,KAAqBC,EAArB,KACMC,EAAgB9P,iBAAO,IAEvBmD,EAAUT,KAEhBpH,qBAAU,WACNuU,EAAgBpS,KAClB,CAACA,IASH,OACI,qBAAK+F,UAAWL,EAAQyL,KAAxB,SACI,cAAChB,GAAA,EAAD,CAAMpK,UAAWL,EAAQqM,eAAzB,SACI,cAAChP,GAAA,EAAD,CACIC,SAAUqP,EACV7U,QAAQ,WACRuI,UAAWL,EAAQsM,MACnBM,WAAc,CACV1H,MAAO,CACH2H,UAAW,SACXrV,SAAS,GAAD,OAAiB,MAAZA,EAAmBA,EAAW,GAAnC,MACRsV,WAAY,SAGpBC,WAAY,CACRC,SAAUR,IAAS3D,GAAcoE,KACjCC,iBAAkBV,IAAS3D,GAAcoE,MAE7CE,YAAY,0CACZC,WAAS,EACTC,QAAS,EACTjX,MAAOqW,EACPhP,QA7BU,WACtBiP,EAAgBC,EAAc5R,QAAQ3E,OAClC2H,GACAA,EAAS4O,EAAc5R,QAAQ3E,e,8BC/BrCmJ,GAAYC,aAAW,iBAAO,CAChC8N,OAAQ,CACJvO,MAAO,OACPqN,OAAQ,QAEZmB,iBAAkB,CACdnB,OAAQ,OACRrN,MAAO,OACP4B,QAAS,OACTuJ,eAAgB,SAChBjH,WAAY,UAEhBuK,YAAa,CACTzO,MAAO,MACPR,MAAO,WAEXkP,iBAAkB,CACdC,OAAQ,WAEZC,WAAY,CACRpP,MAAO,WAEXqP,SAAU,CACNrP,MAAO,UACP,YAAa,CACTA,MAAO,YAGfkC,QAAS,OAuBAoN,GAAoD,SAAC1R,GAC9D,IACIqQ,EAYArQ,EAZAqQ,KACAlV,EAWA6E,EAXA7E,KACAkU,EAUArP,EAVAqP,KACApR,EASA+B,EATA/B,MACAgQ,EAQAjO,EARAiO,SACA7L,EAOApC,EAPAoC,MACA/G,EAMA2E,EANA3E,SACAoC,EAKAuC,EALAvC,YACAkU,EAIA3R,EAJA2R,YACAtP,EAGArC,EAHAqC,QACAuP,EAEA5R,EAFA4R,aACAC,EACA7R,EADA6R,cAGJ,EAAsChY,mBAAsB,CAAEsB,KAAMA,GAAQ,GAAI8C,MAAOA,IAAS,IAAhG,mBAAO6T,EAAP,KAAoBC,EAApB,KACMC,EAAkBtR,iBAAO,IACzBuR,EAAcvR,iBAAO,IACrBwR,EAAcxR,iBAAO,IAErBmD,EAAUT,KAEhBpH,qBAAU,WACN+V,EAAe,CAAE5W,KAAMA,GAAQ,GAAI8C,MAAOA,IAAS,MACpD,CAAC9C,EAAM8C,IAyCV,OACI,cAACqQ,GAAA,EAAD,CACIpK,UAAWL,EAAQsN,OACnBpI,MAAO,CACHU,gBAAiBrH,GAASlI,EAAeC,KACzCgY,YAAa,QACbC,YAAcT,GAAe1T,GAAUgQ,EAAW,MAAQ,MAC1DoE,YAAaV,EACT1T,EAAQ,UAAY,UACpB,WARZ,SAWQoS,IAAS3D,GAAc4F,OACnB,qBAAKpO,UAAWL,EAAQuN,iBAAxB,SACI,cAAClQ,GAAA,EAAD,CACIC,SAAU6Q,EACV/X,MAAO6X,EAAY3W,KACnB6V,YAAY,gCACZ9M,UAAWL,EAAQwN,YACnBT,WAAY,CACR7H,MAAO,CACH3G,MAAO,UACP/G,SAAS,GAAD,OAAKA,GAAY,GAAjB,OAEZkX,eACI,cAACC,GAAA,EAAD,CAAgBhX,SAAS,QAAzB,SACI,cAAC8L,EAAA,EAAD,CAAMpD,UAAWL,EAAQ2N,WAAzB,SAAsCnC,MAG9CoD,aACIhV,EACI,cAACiV,GAAA,EAAD,CACIvR,SAAU+Q,EACV5N,QAASwN,EAAY7T,MACrB4F,QAAS,CAAEyL,KAAMzL,EAAQ4N,SAAUnN,QAAST,EAAQS,SACpD1C,SApDX,WACzB,IAAM+Q,EAAQ,2BACPb,GADO,IAEV7D,SAAUiE,EAAYtT,QAAQ0F,UAElCyN,EAAeY,GACXd,GACAA,EAAcK,EAAYtT,QAAQ0F,YAgDN,cAACsO,GAAA,EAAD,CACIzR,SAAU8Q,EACV3N,QAASwN,EAAY7T,MACrB4F,QAAS,CAAEyL,KAAMzL,EAAQ4N,SAAUnN,QAAST,EAAQS,SACpD1C,SAtEd,WACtB,IAAM+Q,EAAQ,2BACPb,GADO,IAEV7D,SAAUgE,EAAYrT,QAAQ0F,UAElCyN,EAAeY,GACXd,GACAA,EAAcI,EAAYrT,QAAQ0F,aAoElBhD,QAtFO,WAC3B,IAAMqR,EAAQ,2BACPb,GADO,IAEV3W,KAAM6W,EAAgBpT,QAAQ3E,QAElC8X,EAAeY,GACXf,GACAA,EAAaI,EAAgBpT,QAAQ3E,QAgFrBoI,QAAS,SAACwQ,GAASA,EAAGC,sBAI9B,cAACtE,GAAA,EAAD,CACItK,UAAWL,EAAQuN,iBACnB/O,QA5DO,WACnBA,GACAA,KAwDQ,SAII,eAACzB,EAAA,EAAD,CAAMC,WAAS,EAACqD,UAAWL,EAAQwN,YAAatQ,QAAS,EAAG+F,WAAW,SAAvE,UACI,cAAClG,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACsG,EAAA,EAAD,CAAMpD,UAAWL,EAAQ2N,WAAzB,SAAsCnC,MAE1C,cAACzO,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,uBAAO+H,MAAO,CAAC3G,MAAO,UAAW/G,SAAS,GAAD,OAAKA,GAAY,GAAjB,MAAyB0X,YAAa,QAA/E,SACKjB,EAAY3W,iBC7L3CiI,GAAYC,aAAW,iBAAO,CAChCC,gBAAiB,CACbC,QAAS,YAWJyP,GAAsD,SAAChT,GAChE,IAAOyC,EAAqCzC,EAArCyC,KAAMwQ,EAA+BjT,EAA/BiT,QAAShT,EAAsBD,EAAtBC,SAAUC,EAAYF,EAAZE,SAEhC,EAAkCrG,mBAA2BoZ,GAA7D,mBAAO1S,EAAP,KAAkBC,EAAlB,KAEM0S,EAAWxS,iBAAO,IAElBmD,EAAUT,KAEhBpH,qBAAU,WACS,MAAXiX,GACAzS,EAAayS,KAElB,CAACA,IAsBJ,OACI,eAAClQ,EAAA,EAAD,CACIN,KAAMA,EACNpB,WAAS,EACT2B,SAAS,KAHb,UAKI,cAACgB,EAAA,EAAD,qBACA,cAACC,EAAA,EAAD,CAAKC,UAAWL,EAAQP,gBAAxB,SACI,eAAC1C,EAAA,EAAD,CACIC,WAAS,EACTC,UAAU,SACVC,QAAS,EAHb,UAKI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,cAACC,GAAA,EAAD,CACIC,SAAU+R,EACV9R,MAAM,mBACNC,WAAS,EACTpH,MAAOsG,EAAU4S,KACjB7R,QAvCA,WACpBd,EAAa,2BACND,GADK,IAER4S,KAAMD,EAAStU,QAAQ3E,cAuCf,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,eAACL,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,WAAWnB,QAAS,EAA5C,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACmB,EAAA,EAAD,CAAQxG,QAAQ,YAAYyG,MAAM,UAAUC,QAtC9C,WACtB,IAAM+Q,EAAa,CACfrW,KAAMxD,EAAY8Z,IAClBF,KAAMD,EAAStU,QAAQ3E,OAG3BgG,EAASmT,IAgCe,uBAEJ,cAACxS,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACmB,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAhC1B,WACtBnC,KA+BwB,sCC1E1BkD,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrC6U,KAAM,CACFW,OAAQ,MACRlC,eAAgB,SAChBjH,WAAY,UAEhBwM,WAAY,CACRrD,OAAQ,QAEZsD,IAAK,CACDvQ,SAAU,OACVwQ,UAAW,YAqBNC,GAA0C,SAACzT,GACpD,IAAQqQ,EAAqCrQ,EAArCqQ,KAAMhS,EAA+B2B,EAA/B3B,SAAUqV,EAAqB1T,EAArB0T,iBAExB,EAAoD7Z,qBAApD,mBAAO8Z,EAAP,KAA2BC,EAA3B,KAEM/P,EAAUT,KAEhB,EAA8CvJ,mBAAuB,CAAEoW,OAAQ,OAAQrN,MAAO,IAA9F,mBAAOiR,EAAP,KAAwBC,EAAxB,KAEA9X,qBAAU,WACN,OAAQqC,EAASpC,QACb,KAAK,EACL,KAAK,EACL,KAAK,EACD6X,EAAmB,CAAE7D,OAAQ,QAASrN,MAAO,IAC7C,MACJ,KAAK,EACL,KAAK,EACDkR,EAAmB,CAAE7D,OAAQ,MAAOrN,MAAO,IAC3C,MACJ,KAAK,EACL,KAAK,EACDkR,EAAmB,CAAE7D,OAAQ,MAAOrN,MAAO,IAC3C,MACJ,KAAK,EACDkR,EAAmB,CAAE7D,OAAQ,OAAQrN,MAAO,IAC5C,MACJ,QACIkR,EAAmB,CAAE7D,OAAQ,OAAQrN,MAAO,QAGrD,CAACvE,IAsCJ,OACI,eAAC,WAAD,WAEQsV,GACI,cAAC,GAAD,CACIlR,KAAMkR,EAAmBI,WACzBd,QAASU,EAAmBK,gBAC5B/T,SAAU,SAACgU,GAAD,OAnCDhB,EAoCLgB,EApCgCC,EAoCxBP,EAAmBQ,mBAnC3CT,GACAA,EACIrV,EAASqI,KAAI,SAACnI,EAA4ByR,GAA7B,OAA6CA,IAAQkE,EAAR,eAAyB3V,GAAzB,eAAyC0U,YAG3GW,EAAsB,CAClBG,YAAY,EACZC,gBAAiB,CACbjX,KAAMxD,EAAYiF,KAClB2U,KAAM,IAEVgB,oBAAqB,IAZD,IAAClB,EAA2BiB,GAsCpChU,SAtBQ,WACxB0T,EAAsB,CAClBG,YAAY,EACZC,gBAAiB,CACbjX,KAAMxD,EAAYiF,KAClB2U,KAAM,IAEVgB,oBAAqB,OAmBrB,cAACvT,EAAA,EAAD,CAAMC,WAAS,EAACqD,UAAWL,EAAQyL,KAAnC,SAEQjR,EAASqI,KAAI,SAACnI,EAA4B2V,GAA7B,OACT,cAACtT,EAAA,EAAD,CAAMI,MAAI,EAENC,GAAI4S,EAAgBjR,MACpBmG,MAAO,CAAEkH,OAAQ4D,EAAgB5D,OAAQmE,OAAQ/D,IAAS3D,GAAc4F,OAAS,YAAc,OAHnG,SAKI,eAAC1R,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,SAAS4E,WAAW,SAAS5C,UAAWL,EAAQyP,WAAxE,UAEQ/U,EAASxB,OAASxD,EAAYiF,MAC1B,qBAAK0F,UAAWL,EAAQ0P,IAAKc,IAAK9V,EAAS4U,KAAMmB,IAAI,KAIzDjE,IAAS3D,GAAc4F,QACnB,cAACiC,GAAA,EAAD,CACIzH,KAAK,SACL1K,MAAM,UACN2G,MAAO,CAACvN,SAAU,WAAY4G,MAAO,WACrCC,QAAS,YAtEnB,SAAC4Q,EAA2BiB,GACtDN,EAAsB,CAClBG,YAAY,EACZC,gBAAiBf,EACjBkB,mBAAoBD,IAkE6BM,CAAsBjW,EAAU2V,IAJrD,SAMI,cAAC5M,EAAA,EAAD,gCAnBpB,aACe4M,EAAWvS,sB,UClHrC8S,GAAsC,SAACzU,GAChD,IAAQqQ,EAAoCrQ,EAApCqQ,KAAMqE,EAA8B1U,EAA9B0U,KAAMC,EAAwB3U,EAAxB2U,UAAWC,EAAa5U,EAAb4U,SAE/B,EAA0C/a,mBAAiB6a,GAA3D,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAAwBjb,mBAAkB8a,IAAa,GAAvD,mBAAOI,EAAP,KAAaC,EAAb,KA+BA,OA5BAhZ,qBAAU,WACN8Y,EAAiBJ,KAClB,CAACA,IAEJ1Y,qBAAU,WACNgZ,EAAQL,IAAa,KACtB,CAACA,IAEJ3Y,qBAAU,WACN,IAAIiZ,EAYJ,OAXI5E,IAAS3D,GAAcoE,MAASiE,IAChCE,EAAYC,YAAW,WACG,IAAlBL,EACID,GACAA,IAGJE,EAAiBD,EAAgB,KAEtC,MAEA,WACc,MAAbI,GACAE,aAAaF,MAGtB,CAACJ,EAAeD,IAGf,cAAChU,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,SAAS4E,WAAW,SAASiC,MAAO,CAACkH,OAAQ,QAArE,SACI,cAACrP,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,eAACiD,EAAA,EAAD,CAAKzI,SAAS,WAAWgJ,QAAQ,cAAjC,UACI,cAAC4Q,GAAA,EAAD,CACIzZ,QAAQ,cACRyG,MAAOyS,EAAgB,EAAI,UAAW,YACtC/H,KAAK,OACL7S,MAAOob,KAAKC,MAAuB,IAAhBT,GAAiC,EAAPH,MACjD,cAACzQ,EAAA,EAAD,CACIsR,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,MAAO,EACPla,SAAS,WACTgJ,QAAQ,OACRsC,WAAW,SACXiH,eAAe,SARnB,SAUI,cAACrS,EAAA,EAAD,CAAYC,QAAQ,KAAKyK,UAAU,MAAMhE,MAAM,gBAA/C,SAAgEyS,cClEzE,OAA0B,oCCA1B,OAA0B,sCCenCzR,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrC6U,KAAM,CACFW,OAAQ,OACRxG,gBAAiB,WAErBkM,eAAgB,CACZ1F,OAAQ,OAEZ2F,iBAAkB,CACd3F,OAAQ,OAEZ4F,gBAAiB,CACb5F,OAAQ,MACR6F,WAAY,QAEhBC,gBAAiB,CACb9F,OAAQ,OAEZ+F,UAAW,CACPxR,QAAS,OACTuJ,eAAgB,SAChBjH,WAAY,cAaPmP,GAAgE,SAACjW,GAC1E,IAAQqQ,EAAoErQ,EAApEqQ,KAAMzT,EAA8DoD,EAA9DpD,UAAWsZ,EAAmDlW,EAAnDkW,QAASC,EAA0CnW,EAA1CmW,kBAAmBC,EAAuBpW,EAAvBoW,UAAWrO,EAAY/H,EAAZ+H,QAEhE,EAAkClO,oBAAkB,GAApD,mBAAO8a,EAAP,KAAkB0B,EAAlB,KACA,EAA8Cxc,mBAAmB,IAAjE,mBAAOyc,EAAP,KAAwBC,EAAxB,KACA,EAAgD1c,oBAAkB,GAAlE,mBAAO2c,EAAP,KAAyBC,EAAzB,KAEA,EAAsBC,aAASC,IAAxBC,EAAP,oBACA,EAAwBF,aAASG,IAA1BC,EAAP,oBAEMjT,EAAUT,KAoBV2T,EAAqB,SAACvb,EAAkBwb,GAC1C,IAAMC,EAAiBra,EAAU6B,QAAQiI,KAAI,SAAC7H,EAAuCmR,GACjF,OAAIA,IAAQxU,EACHoB,EAAUM,OAAOO,YAMf,eAAKoB,GALD,2BACAA,GADP,IAEIZ,OAAO,IAKZ,eAAK+Y,MAGZb,GACAA,EAAkB,2BACXvZ,GADU,IAEb6B,QAASwY,MASfC,EAAqB,SAACC,GACxB,GAAI9G,IAAS3D,GAAcoE,KACvB,GAAIlU,EAAUM,OAAOO,YAAa,CAC9B,IAAM2Z,EAAWd,EAAgBe,WAAU,SAACC,GAAD,OAAyBA,IAAgBH,KAEhFZ,GADc,IAAda,EACmB,GAAD,mBAAKd,GAAL,CAAsBa,IAErBb,EAAgBvL,QAAO,SAACuM,GAAD,OAAyBA,IAAgBH,WAGnFva,EAAU6B,QAAQ0Y,GAAWlZ,MAC7BsZ,GAAW,GAEXA,GAAW,IAuBrBA,EAAa,SAACC,GAChBnB,GAAa,GACbI,GAAoB,GAEhBe,EACAZ,IAEAE,IAGJ5B,YAAW,WACHsC,EACIpB,GACAA,IAGArO,GACAA,MAGT,MAGP,OACI,eAACuG,GAAA,EAAD,CAAM3S,QAAQ,WAAWuI,UAAWL,EAAQyL,KAA5C,UACI,qBAAKpL,UAAWL,EAAQ8R,eAAxB,SACI,cAAC,GAAD,CACItF,KAAMA,EACNlS,SAAUvB,EAAUuB,SACpB9C,SAAUuB,EAAUM,OAAOE,iBAC3BwE,SA9GU,SAAC6V,GACnBtB,GACAA,EAAkB,2BACXvZ,GADU,IAEbuB,SAAUsZ,UA6Gd,qBAAKvT,UAAWL,EAAQ+R,iBAAxB,SACI,eAAChV,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,SAAS6G,MAAO,CAAEkH,OAAQ,QAAlD,UACI,cAACrP,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAG8H,MAAO,CAAEkH,OAAQ,QAAnC,SAEmB,MAAXiG,IAAoBA,EAAQzS,iBACxB,cAAC,GAAD,CACI4M,KAAMA,EACNqE,KAAM9X,EAAUM,OAAOC,UACvBwX,UAAWA,EACXC,SAlFV,WAClB2C,GAAW,QAsFC,cAAC3W,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAG8H,MAAO,CAAEkH,OAAQ,QAAnC,SACI,cAAC,GAAD,CACII,KAAMA,EACNhS,SAAUzB,EAAUyB,SACpBqV,iBA1HK,SAACgE,GACtBvB,GACAA,EAAkB,2BACXvZ,GADU,IAEbyB,SAAS,YAAKqZ,WAyHV,cAAC9W,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAG8H,MAAO,CAAEkH,OAAQ,QAAU/L,UAAWL,EAAQmS,UAAhE,SAEQpZ,EAAUM,OAAOO,aACb,eAAC8W,GAAA,EAAD,CACI5Y,QAAQ,WACRmR,KAAK,QACL1K,MAAM,UACNuV,SAAUtH,IAAS3D,GAAc4F,QAAqC,IAA3BgE,EAAgBra,OAC3DoG,QAAS,YA/EhB,WAIrB,GAA8B,IAHPiU,EAClB5P,KAAI,SAAC4Q,GAAD,OAAyB1a,EAAU6B,QAAQ6Y,MAC/CvM,QAAO,SAAClM,GAAD,OAA4CA,EAASZ,SAC9ChC,QAKkB,IAJPW,EAAU6B,QAC/BsM,QAAO,SAAClM,EAAuCsY,GAAxC,OACJtY,EAASZ,QAAiD,IAAxCqY,EAAgBsB,QAAQT,MAE5Blb,OAElB,YADAsb,GAAW,GAInBA,GAAW,GAiEkCM,IALrB,UAOI,cAACvQ,EAAA,EAAD,oBAPJ,QAOoC,OAAP4O,QAAO,IAAPA,OAAA,EAAAA,EAAS9V,YAAa1D,EAASsF,GAAK,QAAU,qBAO/F,qBAAKkC,UAAWL,EAAQgS,gBAAxB,SACI,eAACjV,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,eAAenB,QAAS,EAAGgI,MAAO,CAAEkH,OAAQ,QAApE,UACI,cAACrP,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAWL,EAAQkS,gBAArC,SACI,cAAC,GAAD,CACI1F,KAAMA,EACNlV,KAAMyB,EAAU6B,QAAQ,GAAGtD,KAC3BkU,KAAK,WACLpR,MAAOrB,EAAU6B,QAAQ,GAAGR,MAC5BgQ,SACIoC,IAAS3D,GAAcoE,MACpBwF,EAAgBsB,QAAQ,IAAM,EAErCxV,MAAM,UACN/G,SAAUuB,EAAUM,OAAO+P,eAC3BxP,YAAab,EAAUM,OAAOO,YAC9BkU,YAAa6E,EACb5E,aAAc,SAACkG,GACXf,EAAmB,EAAD,YAAC,eAAQna,EAAU6B,QAAQ,IAA3B,IAA+BtD,KAAM2c,MAE3DjG,cAAe,SAAC5T,GACZ8Y,EAAmB,EAAD,YAAC,eAAQna,EAAU6B,QAAQ,IAA3B,IAA+BR,YAErDoE,QAAS,WAAQ6U,EAAmB,QAG5C,cAACtW,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAWL,EAAQkS,gBAArC,SACI,cAAC,GAAD,CACI1F,KAAMA,EACNlV,KAAMyB,EAAU6B,QAAQ,GAAGtD,KAC3BkU,KAAK,eACLpR,MAAOrB,EAAU6B,QAAQ,GAAGR,MAC5BgQ,SACIoC,IAAS3D,GAAcoE,MACpBwF,EAAgBsB,QAAQ,IAAM,EAErCxV,MAAM,UACN/G,SAAUuB,EAAUM,OAAO+P,eAC3BxP,YAAab,EAAUM,OAAOO,YAC9BkU,YAAa6E,EACb5E,aAAc,SAACkG,GACXf,EAAmB,EAAD,YAAC,eAAQna,EAAU6B,QAAQ,IAA3B,IAA+BtD,KAAM2c,MAE3DjG,cAAe,SAAC5T,GACZ8Y,EAAmB,EAAD,YAAC,eAAQna,EAAU6B,QAAQ,IAA3B,IAA+BR,YAErDoE,QAAS,WAAQ6U,EAAmB,QAG5C,cAACtW,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAWL,EAAQkS,gBAArC,SACI,cAAC,GAAD,CACI1F,KAAMA,EACNlV,KAAMyB,EAAU6B,QAAQ,GAAGtD,KAC3BkU,KAAK,WACLpR,MAAOrB,EAAU6B,QAAQ,GAAGR,MAC5BgQ,SACIoC,IAAS3D,GAAcoE,MACpBwF,EAAgBsB,QAAQ,IAAM,EAErCxV,MAAM,UACN/G,SAAUuB,EAAUM,OAAO+P,eAC3BxP,YAAab,EAAUM,OAAOO,YAC9BkU,YAAa6E,EACb5E,aAAc,SAACkG,GACXf,EAAmB,EAAD,YAAC,eAAQna,EAAU6B,QAAQ,IAA3B,IAA+BtD,KAAM2c,MAE3DjG,cAAe,SAAC5T,GACZ8Y,EAAmB,EAAD,YAAC,eAAQna,EAAU6B,QAAQ,IAA3B,IAA+BR,YAErDoE,QAAS,WAAQ6U,EAAmB,QAG5C,cAACtW,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAWL,EAAQkS,gBAArC,SACI,cAAC,GAAD,CACI1F,KAAMA,EACNlV,KAAMyB,EAAU6B,QAAQ,GAAGtD,KAC3BkU,KAAK,QACLpR,MAAOrB,EAAU6B,QAAQ,GAAGR,MAC5BgQ,SACIoC,IAAS3D,GAAcoE,MACpBwF,EAAgBsB,QAAQ,IAAM,EAErCxV,MAAM,UACN/G,SAAUuB,EAAUM,OAAO+P,eAC3BxP,YAAab,EAAUM,OAAOO,YAC9BkU,YAAa6E,EACb5E,aAAc,SAACkG,GACXf,EAAmB,EAAD,YAAC,eAAQna,EAAU6B,QAAQ,IAA3B,IAA+BtD,KAAM2c,MAE3DjG,cAAe,SAAC5T,GACZ8Y,EAAmB,EAAD,YAAC,eAAQna,EAAU6B,QAAQ,IAA3B,IAA+BR,YAErDoE,QAAS,WAAQ6U,EAAmB,iBC3S1D9T,GAAYC,YAAW,CACzBhC,UAAW,CACPuB,MAAO,UASFmV,GAAoE,SAAC/X,GAC9E,IAAQ9C,EAA2B8C,EAA3B9C,OAAQ8a,EAAmBhY,EAAnBgY,eAEhB,EAAgCne,mBAAsCqD,GAAtE,mBAAO+a,EAAP,KAAiBC,EAAjB,KAEMC,EAAiBzX,iBAAO,IACxB0X,EAAwB1X,iBAAO,IAC/B2X,EAAoB3X,iBAAO,IAC3B4X,EAAoB5X,iBAAO,IAC3B6X,EAAsB7X,iBAAO,IAC7B8X,EAAmB9X,iBAAO,IAE1BmD,EAAUT,KAEhBpH,qBAAU,WACNkc,EAAYhb,KACb,CAACA,IAEJ,IAAMub,EAA8B,SAACC,EAAmBze,GACpD,IAAM0e,EAAS,2BACRV,GADQ,mBAEVS,EAAYze,IAEjBie,EAAYS,GACRX,GACAA,EAAeW,IAIvB,OACI,eAAC/X,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAS,EAA5C,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACtF,EAAA,EAAD,CAAYC,QAAQ,KAApB,gCAEJ,cAACiF,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAUgX,EACVpb,KAAK,SACLqE,MAAM,iCACNqP,WAAY,CAAEmI,IAAK,IACnB3e,MAAOge,EAAS9a,UAChBiF,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,YAAaI,SAASV,EAAevZ,QAAQ3E,aAGlG,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAUiX,EACVrb,KAAK,SACLqE,MAAM,mCACNqP,WAAY,CAAEmI,IAAK,GACnB3e,MAAOge,EAAS7a,iBAChBgF,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,mBAAoBI,SAAST,EAAsBxZ,QAAQ3E,aAGhH,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAUkX,EACVtb,KAAK,SACLqE,MAAM,2BACNqP,WAAY,CAAEmI,IAAK,EAAGE,IAAK,GAC3B7e,MAAOge,EAAS1a,aAChB6E,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,eAAgBI,SAASR,EAAkBzZ,QAAQ3E,aAGxG,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACmD,GAAA,EAAD,CACIC,QACI,cAACC,GAAA,EAAD,CACIlD,SAAUmX,EACVpZ,KAAK,oBACLoF,QAAS2T,EAASza,aAClB4E,MAAM,YACNR,SAAU,WAAQ6W,EAA4B,eAAgBH,EAAkB1Z,QAAQ0F,YAEhGlD,MAAM,0BAGd,cAACR,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAUoX,EACVxb,KAAK,SACLqE,MAAM,uCACNqP,WAAY,CAAEmI,IAAK,GACnB3e,MAAOge,EAAShL,eAChB7K,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,iBAAkBI,SAASN,EAAoB3Z,QAAQ3E,aAG5G,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACmD,GAAA,EAAD,CACIC,QACI,cAACC,GAAA,EAAD,CACIlD,SAAUqX,EACVtZ,KAAK,mBACLoF,QAAS2T,EAASxa,YAClB2E,MAAM,YACNR,SAAU,WAAQ6W,EAA4B,cAAeD,EAAiB5Z,QAAQ0F,YAG9FlD,MAAM,gCChHpBgC,GAAYC,YAAW,CACzBiQ,WAAY,CACRrD,OAAQ,UASH8I,GAA8E,SACvF/Y,GAEA,IAAQpD,EAAiCoD,EAAjCpD,UAAWuZ,EAAsBnW,EAAtBmW,kBAEbtS,EAAUT,KA6ChB,OACI,eAACxC,EAAA,EAAD,CAAMC,WAAS,EAACqD,UAAWL,EAAQyP,WAAYvS,QAAS,EAAxD,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIiD,UAAWL,EAAQyP,WAAtC,SACI,cAAC,GAAD,CACIjD,KAAM3D,GAAc4F,OACpB1V,UAAWA,EACXuZ,kBAtBe,SAAC6C,GAC5B7C,EAAkB6C,QAwBd,cAACpY,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAWL,EAAQyP,WAArC,SACI,cAAC,GAAD,CAA0BpW,OAAQN,EAAUM,OAAQ8a,eAtBrC,SAAC9a,GACxB,IAAMmB,EAhCe,SAACd,GACtB,IAAIc,EAAQ,YAAOzB,EAAUyB,UAC7B,GAAId,EAAec,EAASpC,OAAQ,CAChC,IAAMyb,EAAcuB,MAAMC,KAAKD,MAAM1b,EAAec,EAASpC,SACxDyK,KAAI,iBAAO,CAAE3J,KAAMxD,EAAYiF,KAAM2U,KAAM,OAChD9U,EAAQ,sBAAOA,GAAP,YAAoBqZ,SACrBna,EAAec,EAASpC,SAC/BoC,EAAWA,EAAS8a,MAAM,EAAG5b,IAEjC,OAAOc,EAuBU+a,CAAiBlc,EAAOK,cACnCkB,EArBmB,SAAChB,GAC1B,IAAI4b,GAAe,EAWnB,OAV+Czc,EAAU6B,QAAQiI,KAAI,SAAC7H,GAClE,OAAKpB,EAOE,eAAKoB,GANJA,EAASZ,QAAUob,GACnBA,GAAe,EACR,eAAKxa,IAET,2BAAKA,GAAZ,IAAsBZ,OAAO,OAarBqb,CAAqBpc,EAAOO,aACtCub,EAAuC,2BACtCpc,GADsC,IAEzCyB,SAAS,YAAKA,GACdI,QAAQ,YAAKA,GACbvB,WAEJiZ,EAAkB6C,YCpDpB5V,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrC6U,KAAM,CACFW,OAAQ,OACRxG,gBAAiB,WAErBkM,eAAgB,CACZ1F,OAAQ,OAEZ2F,iBAAkB,CACd3F,OAAQ,OAEZ4F,gBAAiB,CACb5F,OAAQ,MACR6F,WAAY,QAEhBC,gBAAiB,CACb9F,OAAQ,QAEZ+F,UAAW,CACPxR,QAAS,OACTuJ,eAAgB,SAChBjH,WAAY,cAaPyS,GAA8D,SAACvZ,GACxE,IAAQqQ,EAAoErQ,EAApEqQ,KAAMzT,EAA8DoD,EAA9DpD,UAAWsZ,EAAmDlW,EAAnDkW,QAASC,EAA0CnW,EAA1CmW,kBAAmBC,EAAuBpW,EAAvBoW,UAAWrO,EAAY/H,EAAZ+H,QAEhE,EAAkClO,oBAAkB,GAApD,mBAAO8a,EAAP,KAAkB0B,EAAlB,KACA,EAAgDxc,oBAAkB,GAAlE,mBAAO2c,EAAP,KAAyBC,EAAzB,KAEA,EAAsBC,aAASC,IAAxBC,EAAP,oBACA,EAAwBF,aAASG,IAA1BC,EAAP,oBAEMjT,EAAUT,KAoBV2T,EAAqB,SAACC,GACpBb,GACAA,EAAkB,2BACXvZ,GADU,IAEb4c,OAAQxC,MASdE,EAAqB,SAACsC,GACpBnJ,IAAS3D,GAAcoE,OACnBlU,EAAU4c,SAAWA,EACrBjC,GAAW,GAEXA,GAAW,KAKjBA,EAAa,SAACC,GAChBnB,GAAa,GACbI,GAAoB,GAEhBe,EACAZ,IAEAE,IAGJ5B,YAAW,WACHsC,EACIpB,GACAA,IAGArO,GACAA,MAGT,MAGP,OACI,eAACuG,GAAA,EAAD,CAAM3S,QAAQ,WAAWuI,UAAWL,EAAQyL,KAA5C,UACI,qBAAKpL,UAAWL,EAAQ8R,eAAxB,SACI,cAAC,GAAD,CACItF,KAAMA,EACNlS,SAAUvB,EAAUuB,SACpB9C,SAAUuB,EAAUM,OAAOE,iBAC3BwE,SAvEU,SAAC6V,GACnBtB,GACAA,EAAkB,2BACXvZ,GADU,IAEbuB,SAAUsZ,UAsEd,qBAAKvT,UAAWL,EAAQ+R,iBAAxB,SACI,eAAChV,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,SAAS6G,MAAO,CAAEkH,OAAQ,QAAlD,UACI,cAACrP,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAG8H,MAAO,CAAEkH,OAAQ,QAAnC,SAEmB,MAAXiG,IAAoBA,EAAQzS,iBACxB,cAAC,GAAD,CACI4M,KAAMA,EACNqE,KAAM9X,EAAUM,OAAOC,UACvBwX,UAAWA,EACXC,SAxDV,WAClB2C,GAAW,QA4DC,cAAC3W,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAG8H,MAAO,CAAEkH,OAAQ,QAAnC,SACI,cAAC,GAAD,CACII,KAAMA,EACNhS,SAAUzB,EAAUyB,SACpBqV,iBAnFK,SAACgE,GACtBvB,GACAA,EAAkB,2BACXvZ,GADU,IAEbyB,SAAS,YAAKqZ,WAkFV,cAAC9W,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAG8H,MAAO,CAAEkH,OAAQ,QAAU/L,UAAWL,EAAQmS,iBAGxE,qBAAK9R,UAAWL,EAAQgS,gBAAxB,SACI,eAACjV,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,eAAenB,QAAS,EAAGgI,MAAO,CAAEkH,OAAQ,QAApE,UACI,cAACrP,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAWL,EAAQkS,gBAArC,SACI,cAAC,GAAD,CACI1F,KAAMA,EACNlV,MAAa,OAAP+a,QAAO,IAAPA,OAAA,EAAAA,EAAS9V,YAAa1D,EAASsF,GAAK,OAAS,YACnDqN,KAAK,WACLpR,MAAOrB,EAAU4c,OACjBpX,MAAM,UACN/G,SAAU,GACVsW,YAAa6E,EACb3E,cAAe,SAAC5T,GACZ8Y,GAAmB,IAEvB1U,QAAS,WAAQ6U,GAAmB,QAG5C,cAACtW,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAWL,EAAQkS,gBAArC,SACI,cAAC,GAAD,CACI1F,KAAMA,EACNlV,MAAa,OAAP+a,QAAO,IAAPA,OAAA,EAAAA,EAAS9V,YAAa1D,EAASsF,GAAK,QAAU,QACpDqN,KAAK,eACLpR,OAAQrB,EAAU4c,OAClBpX,MAAM,UACN/G,SAAU,GACVsW,YAAa6E,EACb3E,cAAe,SAAC5T,GACZ8Y,GAAmB,IAEvB1U,QAAS,WAAQ6U,GAAmB,iBCvL1D9T,GAAYC,YAAW,CACzBhC,UAAW,CACPuB,MAAO,UASF6W,GAAkE,SAACzZ,GAC5E,IAAQ9C,EAA2B8C,EAA3B9C,OAAQ8a,EAAmBhY,EAAnBgY,eAEhB,EAAgCne,mBAAqCqD,GAArE,mBAAO+a,EAAP,KAAiBC,EAAjB,KAEMC,EAAiBzX,iBAAO,IACxB0X,EAAwB1X,iBAAO,IAC/B2X,EAAoB3X,iBAAO,IAC3B4X,EAAoB5X,iBAAO,IAE3BmD,EAAUT,KAEhBpH,qBAAU,WACNkc,EAAYhb,KACb,CAACA,IAEJ,IAAMub,EAA8B,SAACC,EAAmBze,GACpD,IAAM0e,EAAS,2BACRV,GADQ,mBAEVS,EAAYze,IAEjBie,EAAYS,GACRX,GACAA,EAAeW,IAIvB,OACI,eAAC/X,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAS,EAA5C,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACtF,EAAA,EAAD,CAAYC,QAAQ,KAApB,gCAEJ,cAACiF,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAUgX,EACVpb,KAAK,SACLqE,MAAM,iCACNqP,WAAY,CAAEmI,IAAK,IACnB3e,MAAOge,EAAS9a,UAChBiF,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,YAAaI,SAASV,EAAevZ,QAAQ3E,aAGlG,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAUiX,EACVrb,KAAK,SACLqE,MAAM,mCACNqP,WAAY,CAAEmI,IAAK,GACnB3e,MAAOge,EAAS7a,iBAChBgF,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,mBAAoBI,SAAST,EAAsBxZ,QAAQ3E,aAGhH,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAUkX,EACVtb,KAAK,SACLqE,MAAM,2BACNqP,WAAY,CAAEmI,IAAK,EAAGE,IAAK,GAC3B7e,MAAOge,EAAS1a,aAChB6E,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,eAAgBI,SAASR,EAAkBzZ,QAAQ3E,aAGxG,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACmD,GAAA,EAAD,CACIC,QACI,cAACC,GAAA,EAAD,CACIlD,SAAUmX,EACVpZ,KAAK,oBACLoF,QAAS2T,EAASza,aAClB4E,MAAM,YACNR,SAAU,WAAQ6W,EAA4B,eAAgBH,EAAkB1Z,QAAQ0F,YAEhGlD,MAAM,8BCpFpBgC,GAAYC,YAAW,CACzBiQ,WAAY,CACRrD,OAAQ,UASHyJ,GAA4E,SACrF1Z,GAEA,IAAQpD,EAAiCoD,EAAjCpD,UAAWuZ,EAAsBnW,EAAtBmW,kBAEbtS,EAAUT,KA4BhB,OACI,eAACxC,EAAA,EAAD,CAAMC,WAAS,EAACqD,UAAWL,EAAQyP,WAAYvS,QAAS,EAAxD,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIiD,UAAWL,EAAQyP,WAAtC,SACI,cAAC,GAAD,CACIjD,KAAM3D,GAAc4F,OACpB1V,UAAWA,EACXuZ,kBApBe,SAAC6C,GAC5B7C,EAAkB6C,QAsBd,cAACpY,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAWL,EAAQyP,WAArC,SACI,cAAC,GAAD,CAAyBpW,OAAQN,EAAUM,OAAQ8a,eApBpC,SAAC9a,GACxB,IAAMmB,EAjBe,SAACd,GACtB,IAAIc,EAAQ,YAAOzB,EAAUyB,UAC7B,GAAId,EAAec,EAASpC,OAAQ,CAChC,IAAMyb,EAAcuB,MAAMC,KAAKD,MAAM1b,EAAec,EAASpC,SACxDyK,KAAI,iBAAO,CAAE3J,KAAMxD,EAAYiF,KAAM2U,KAAM,OAChD9U,EAAQ,sBAAOA,GAAP,YAAoBqZ,SACrBna,EAAec,EAASpC,SAC/BoC,EAAWA,EAAS8a,MAAM,EAAG5b,IAEjC,OAAOc,EAQU+a,CAAiBlc,EAAOK,cACnCyb,EAAsC,2BACrCpc,GADqC,IAExCyB,SAAS,YAAKA,GACdnB,WAEJiZ,EAAkB6C,Y,uCC9CpB5V,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrCuG,KAAM,CACF2Y,aAAc,OACdlQ,gBAAiBhP,EAAME,QAAQC,QAAQT,KACvCiI,MAAO3H,EAAME,QAAQC,QAAQC,aAC7B0I,QAAS,cACTgO,OAAQ,YAUHqI,GAA4C,SAAC5Z,GACtD,IAASd,EAA4Bc,EAA5Bd,KAAM6J,EAAsB/I,EAAtB+I,MAAO8Q,EAAe7Z,EAAf6Z,WAEhBhW,EAAUT,KAEhB,EAA4B0W,cACxB,iBAAO,CACH/c,KAAM,MACNiE,KAAM,CAAE9B,QACR6a,QAAS,SAACC,GAAD,MAAc,CACnBC,QAASD,EAAQE,aAAe,GAAM,OAG9C,CAAChb,IARL,mBAAS+a,EAAT,KAASA,QAAWE,EAApB,KAWA,OACI,sBACIlS,IAAKkS,EACLjW,UAAWL,EAAQ7C,KACnB+H,MAAK,aACDkR,WACGlR,GALX,UAQK7J,EAEG2a,MCzCVzW,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrC6U,KAAM,CACFW,OAAQ,OACRrN,MAAO,QAEXvB,UAAW,CACPuB,MAAO,QAEX0Q,WAAY,CACRrD,OAAQ,QAEZ0F,eAAgB,CACZ/S,MAAO,OACPW,QAAS,MACTkG,gBAAiBhP,EAAME,QAAQC,QAAQT,KACvCiI,MAAO3H,EAAME,QAAQC,QAAQC,cAEjCuf,eAAgB,CACZ7W,QAAS,MACT0M,OAAQ,YAsBHoK,GAAsC,SAACra,GAChD,IACIqQ,EASArQ,EATAqQ,KACAnJ,EAQAlH,EARAkH,MACAoT,EAOAta,EAPAsa,WACA3I,EAMA3R,EANA2R,YACAtW,EAKA2E,EALA3E,SACAkf,EAIAva,EAJAua,cACAC,EAGAxa,EAHAwa,cACAC,EAEAza,EAFAya,aACAC,EACA1a,EADA0a,OASJ,EAAoCC,aAAQ,CACxCzS,OAAQ,MACR0S,KARe,SAAC5Z,GACb0Z,GACCA,EAAO1Z,IAOX+Y,QAAS,SAACC,GAAD,MAAiE,CACtEa,OAAQb,EAAQa,SAChBC,QAASd,EAAQc,cALzB,0BAASD,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,QAAWF,EAA5B,KASA,EAAoC/gB,mBAAqB,CACrDqN,MAAOA,GAAS,GAChBoT,WAAYA,GAAc,GAC1BG,aAAcA,GAAgB,KAHlC,mBAAOM,EAAP,KAAmBC,EAAnB,KAMMC,EAAava,iBAAO,IACpBwa,EAAYxa,iBAAO,IAEnBmD,EAAUT,KAEhBpH,qBAAU,WACc,MAAhBye,GACAO,EAAc,2BACPD,GADM,IAETN,aAAa,YAAKA,QAG3B,CAACA,IAGJ,IAiBMU,EAAe,WACjB,IAAMC,EAAY,sBAAQL,EAAWT,YAAnB,CAAgCY,EAAUtc,QAAQ3E,QAC9D0Y,EAAoB,2BACnBoI,GADmB,IAEtBT,WAAYc,IAEhBJ,EAAcrI,GACV6H,GACAA,EAAcY,GAElBF,EAAUtc,QAAQ3E,MAAQ,IAyB9B,OACI,cAACqU,GAAA,EAAD,CACIC,UAAW,EACXrK,UAAWL,EAAQyL,KACnBvG,MAAO,CACHU,gBAAkBoR,GAAUC,EAAW,UAAY,WAJ3D,SAOI,eAACla,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASoD,UAAS,UAAKL,EAAQyP,WAAb,YAA2BzP,EAAQxC,WAA/E,UACI,cAACT,EAAA,EAAD,CAAMI,MAAI,EAACkD,UAAWL,EAAQ8R,eAA9B,SAEQtF,IAAS3D,GAAcoE,KACnB,cAACpV,EAAA,EAAD,CAAYqN,MAAO,CAAE1N,YAArB,SACM6L,IAGN,cAAChG,GAAA,EAAD,CACIC,SAAU8Z,EACVhhB,MAAO8gB,EAAW7T,MAClB6B,MAAO,CACHnG,MAAO,QAEX6N,WACI,CACI1H,MAAO,CACH1N,WACAqV,UAAW,SACXtO,MAAO,YAKnBd,QApFF,WACtB,IAAMqR,EAAQ,2BACPoI,GADO,IAEV7T,MAAO+T,EAAWrc,QAAQ3E,QAE9B+gB,EAAcrI,GACV4H,GACAA,EAAcU,EAAWrc,QAAQ3E,YAkF7B,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,EAAb,SACI,eAACL,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASgG,WAAW,SAAS5C,UAAWL,EAAQuW,eAAgBrZ,QAAS,EAAnG,UAEQsP,IAAS3D,GAAc4F,QACpByI,EAAWT,WAAW5T,KAAI,SAAC2U,EAAgBC,GAAjB,OACzB,cAAC1a,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACoO,GAAA,EAAD,CACIhO,MAAOia,EACPjZ,MAAM,YACN0K,KAAK,SACL/D,MAAO,CAAE1N,WAAU+G,MAAO,WAC1B+L,SAAU,kBAtEhB,SAACmN,GAC3B,IAAMF,EAAeL,EAAWT,WAAWvP,QAAO,SAACsQ,EAAgBrL,GAAjB,OAAiCsL,IAAYtL,KACzF2C,EAAoB,2BACnBoI,GADmB,IAEtBT,WAAYc,IAEhBJ,EAAcrI,GACV6H,GACAA,EAAcY,GA8D8BG,CAAsBD,OAN9C,eAAwBA,OAY5BjL,IAAS3D,GAAc4F,QACnB,cAAC1R,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAU+Z,EACVvf,QAAQ,WACRiV,WACI,CACI7H,MAAO,CACH1N,WACA+G,MAAO,YAInBhB,MAAM,iBACNoa,WA7GJ,SAAC3Z,GACZ,UAAbA,EAAI4Z,MAAgD,KAA5BP,EAAUtc,QAAQ3E,OAC1CkhB,QA8FmC,WAmBnB9K,IAAS3D,GAAcoE,MACnB,cAAClQ,EAAA,EAAD,CAAMI,MAAI,EAAgBC,IAAE,EAACiD,UAAS,UAAKL,EAAQxC,UAAb,YAA0BwC,EAAQyP,YAAxE,SACI,qBACIrL,IAAK2S,EACL1W,UAAS,UAAKL,EAAQxC,UAAb,YAA0BwC,EAAQyP,YAF/C,SAII,cAAC1S,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASgG,WAAW,SAAS/F,QAAS,EAAGmD,UAAWL,EAAQyP,WAAtF,SAEQyH,EAAWN,aAAa/T,KAAI,SAACgV,GAAD,OACxB,cAAC9a,EAAA,EAAD,CACII,MAAI,EADR,SAII,cAAC,GAAD,CAEI9B,KAAMwc,EACN3S,OApG1B/H,EAoGsD0a,EApGrC/J,EAC3C2I,EAAW1C,QAAQ5W,IAAS,EAAI,CAC5B3F,SAAS,GAAD,OAAKA,EAAL,MACRoO,gBAAiB,WACjB,CACApO,SAAS,GAAD,OAAKA,EAAL,MACRoO,gBAAiB,WAErB,CAACpO,SAAS,GAAD,OAAKA,EAAL,SA0FgDqgB,IALb,mBAEqBA,IA/FxC,IAAC1a,UAqFa,uBC9MzCoC,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrC6U,KAAM,CACFW,OAAQ,OACRxG,gBAAiB,WAErB6J,WAAY,CACRrD,OAAQ,QAEZ0F,eAAgB,CACZ1F,OAAQ,OAEZ0L,kBAAmB,CACf1L,OAAQ,OAEZ+F,UAAW,CACPxR,QAAS,OACTuJ,eAAgB,SAChBjH,WAAY,UAEhB8U,iBAAkB,CACd3L,OAAQ,MACRmE,OAAQ,iBACR3K,gBAAiB,WAErBoS,gBAAiB,CACb5L,OAAQ,WAkBV6L,GAAe,SAAC7c,EAAkCoR,GACpD,IAAI0L,EAAiB9c,EAAOP,QAAO,SAACC,EAAeC,GAAhB,4BAAwDD,GAAxD,YAAgEC,EAAQI,UAAQ,IAInH,OAHIqR,IAAS3D,GAAcoE,OACvBiL,EAAOA,EAAKC,MAAK,kBAAM3G,KAAK4G,SAAW,OAEpCF,GAYEG,GAAwD,SAAClc,GAClE,IAAQqQ,EAAoErQ,EAApEqQ,KAAMzT,EAA8DoD,EAA9DpD,UAAWsZ,EAAmDlW,EAAnDkW,QAASC,EAA0CnW,EAA1CmW,kBAAmBC,EAAuBpW,EAAvBoW,UAAWrO,EAAY/H,EAAZ+H,QAEhE,EAAyClO,mBA7BhB,SAAC+C,GAC1B,OAAOA,EAAUqC,OAAOyH,KAAI,SAACyV,GAAD,MACxB,CACIC,UAAWD,EAAOjd,KAClBF,MAAO,OAyBgDqd,CAAqBzf,IAApF,mBAAO0f,EAAP,KAAsBC,EAAtB,KAEA,EAAkC1iB,oBAAkB,GAApD,mBAAO8a,EAAP,KAAkB0B,EAAlB,KACA,EAAgDxc,oBAAkB,GAAlE,mBAAO2c,EAAP,KAAyBC,EAAzB,KAEA,EAA4C5c,mBAAmBiiB,GAAalf,EAAUqC,OAAQoR,IAA9F,mBAAOmM,EAAP,KAAuBC,EAAvB,KAEA,EAAsB/F,aAASC,IAAxBC,EAAP,oBACA,EAAwBF,aAASG,IAA1BC,EAAP,oBAEMjT,EAAUT,KAEhBpH,qBAAU,WACNygB,EAAkBX,GAAalf,EAAUqC,OAAQoR,MAClD,CAACzT,EAAUqC,SAEd,IAoEMsY,EAAa,SAACC,GAChBnB,GAAa,GACbI,GAAoB,GAEhBe,EACAZ,IAEAE,IAGJ5B,YAAW,WACHsC,EACIpB,GACAA,IAGArO,GACAA,MAGT,MAGD2U,EAAY,SAACC,GAAD,OAAsBL,EAAc5d,QAClD,SAACC,EAAcC,GAAf,OAAsCD,GAAOC,EAAQI,MAAM4Y,QAAQ+E,IAAa,KAChF,IAuCJ,OACI,eAACrO,GAAA,EAAD,CAAM3S,QAAQ,WAAWuI,UAAWL,EAAQyL,KAA5C,UACI,qBAAKpL,UAAWL,EAAQ8R,eAAxB,SACI,cAAC,GAAD,CACItF,KAAMA,EACNlS,SAAUvB,EAAUuB,SACpB9C,SAAUuB,EAAUM,OAAOE,iBAC3BwE,SA3IU,SAAC6V,GACnBtB,GACAA,EAAkB,2BACXvZ,GADU,IAEbuB,SAAUsZ,UA0Id,qBAAKvT,UAAWL,EAAQ8X,kBAAxB,SACI,eAAC/a,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,SAASgC,UAAWL,EAAQyP,WAApD,UACI,cAAC1S,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAWL,EAAQyP,WAArC,SAEmB,MAAX4C,IAAoBA,EAAQzS,iBACxB,cAAC,GAAD,CACI4M,KAAMA,EACNqE,KAAM9X,EAAUM,OAAOC,UACvBwX,UAAWA,EACXC,SA3GV,WAClB2C,GAAW,QA+GC,cAAC3W,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAWL,EAAQyP,WAArC,SACI,cAACsJ,GAAA,EAAD,CAAaC,QAASC,KAAtB,SACI,eAAClc,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAGmD,UAAWL,EAAQyP,WAA/C,UACI,cAAC1S,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIiD,UAAWL,EAAQ+X,iBAAtC,SACI,cAAChb,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAGmB,QAAQ,eAAe4E,WAAW,SAA9D,SAEQ0V,EAAe9V,KAAI,SAAC2U,EAAgBrL,GAAjB,OAAkC0M,EAAUrB,KAC1DqB,EAAUrB,IACP,cAACza,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAAC,GAAD,CACI9B,KAAMmc,EAENtS,MAAO,CAAC1N,SAAUuB,EAAUM,OAAOmQ,gBAHvC,mBAEqB2C,KAHzB,mBAA4BA,WAYhD,cAACpP,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIiD,UAAWL,EAAQgY,gBAAtC,SACI,cAACjb,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,eAAenB,QAAS,EAAGgI,MAAO,CAAEkH,OAAQ,QAApE,SAEQrT,EAAUqC,OAAOyH,KAAI,SAACyV,EAAgCnM,GAAjC,aACjB,cAACpP,EAAA,EAAD,CACII,MAAI,EACJC,GAAI,EAFR,SAKI,cAAC,GAAD,CACIoP,KAAMA,EACNnJ,MAAOiV,EAAOjd,KACdob,WAAY6B,EAAOnd,MACnB2S,YAAa6E,EACbnb,SAAUuB,EAAUM,OAAOmQ,cAC3BkN,cAAe,SAACwC,GAAD,OAtL1C,SAACC,EAAkBC,GACxC,IAAMC,EAAgBtgB,EAAUqC,OAAOyH,KAAI,SAACyV,EAAgCnM,GACxE,OAAO,2BACAmM,GADP,IAEIjd,KAAM8Q,IAAQgN,EAAWb,EAAOjd,KAAO+d,OAI3C9G,GACAA,EAAkB,2BACXvZ,GADU,IAEbqC,OAAQie,KA2KoEC,CAAiBnN,EAAK+M,IAC1DvC,cAAe,SAAC4C,GAAD,OAvKzC,SAACJ,EAAkB5B,GACzC,IAAM8B,EAAgBtgB,EAAUqC,OAAOyH,KAAI,SAACyV,EAAgCnM,GACxE,OAAIA,IAAQgN,EACD,eAAKb,GAET,2BACAA,GADP,IAEInd,MAAM,YAAKoc,QAIfjF,GACAA,EAAkB,2BACXvZ,GADU,IAEbqC,OAAQie,KAyJuEG,CAAkBrN,EAAKoN,IAC9D3C,aAAY,UACR6B,EACK7R,MAAK,SAAC6S,GAAD,OAAyBA,EAASlB,YAAcD,EAAOjd,eAFzD,aACR,EAEMF,MAEV0b,OAAQ,SAAC6C,GAAD,OA1FzC,SAACnB,EAAmBmB,GACnC,IAAMC,EAA+BlB,EAAc5V,KAAI,SAACyV,GACpD,OAAIA,EAAOC,YAAcA,EACd,2BACAD,GADP,IAEInd,MAAOmd,EAAOnd,MAAM+L,QAAO,SAACsQ,GAAD,OAAoBA,IAAWkC,EAAYre,UAI9Did,EAAOnd,MAAMqY,WAAU,SAACgE,GAAD,OAAoBA,IAAWkC,EAAYre,SACnE,EACJ,eAAIid,GAER,2BACAA,GADP,IAEInd,MAAM,GAAD,mBACEmd,EAAOnd,OADT,CAEDue,EAAYre,YAIxBqd,EAAiBiB,GAqEiEC,CAAWtB,EAAOjd,KAAMqe,OAlBlE,gBAGkBvN,kBAyB9C,cAACpP,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAG8H,MAAO,CAAEkH,OAAQ,QAAU/L,UAAWL,EAAQmS,UAAhE,SAEQ,eAACzB,GAAA,EAAD,CACI5Y,QAAQ,WACRmR,KAAK,QACL1K,MAAM,UACNuV,SAAUtH,IAAS3D,GAAc4F,UArHrC1V,EAAUqC,OAAOP,QACjC,SAACC,EAAaC,GAAd,OAAkDD,EAAMC,EAAQI,MAAM/C,SACtE,KAEcqgB,EAAc5d,QAC5B,SAACC,EAAaC,GAAd,OAAqCD,EAAMC,EAAQI,MAAM/C,SACzD,IAgHoBoG,QAAS,YAvKZ,WACrB,IAAMsU,EAAU/Z,EAAUqC,OAAOP,QAC7B,SAACgf,EAAoBC,GACjB,IAAMC,EAAeD,EAAa3e,MAAMN,QACpC,SAACmf,EAAmBC,GAChB,IAAMC,EAAWzB,EAAc7R,MAAK,SAAC0R,GAAD,OAAuBA,EAAOC,YAAcuB,EAAaze,QAC7F,OAAgB,MAAZ6e,GACOF,GAAYE,EAAS/e,MAAM4Y,QAAQkG,IAAgB,KAIlE,GAEJ,OAAOJ,GAAaE,KAExB,GAEJrG,EAAWZ,GAsJ8BkB,IALrB,UAOI,cAACvQ,EAAA,EAAD,oBAPJ,QAOoC,OAAP4O,QAAO,IAAPA,OAAA,EAAAA,EAAS9V,YAAa1D,EAASsF,GAAK,QAAU,yBCrTjGoB,GAAYC,YAAW,CACzBhC,UAAW,CACPuB,MAAO,UASFob,GAA4D,SAAChe,GACtE,IAAQ9C,EAA2B8C,EAA3B9C,OAAQ8a,EAAmBhY,EAAnBgY,eAEhB,EAAgCne,mBAAkCqD,GAAlE,mBAAO+a,EAAP,KAAiBC,EAAjB,KAEMC,EAAiBzX,iBAAO,IACxB0X,EAAwB1X,iBAAO,IAC/Bud,EAAqBvd,iBAAO,IAC5Bwd,EAAkBxd,iBAAO,IAEzBmD,EAAUT,KAEhBpH,qBAAU,WACNkc,EAAYhb,KACb,CAACA,IAEJ,IAAMub,EAA8B,SAACC,EAAmBze,GACpD,IAAM0e,EAAS,2BACRV,GADQ,mBAEVS,EAAYze,IAEjBie,EAAYS,GACRX,GACAA,EAAeW,IAIvB,OACI,eAAC/X,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAS,EAA5C,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACtF,EAAA,EAAD,CAAYC,QAAQ,KAApB,gCAEJ,cAACiF,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAUgX,EACVpb,KAAK,SACLqE,MAAM,iCACNqP,WAAY,CAAEmI,IAAK,IACnB3e,MAAOge,EAAS9a,UAChBiF,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,YAAaI,SAASV,EAAevZ,QAAQ3E,aAGlG,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAUiX,EACVrb,KAAK,SACLqE,MAAM,mCACNqP,WAAY,CAAEmI,IAAK,GACnB3e,MAAOge,EAAS7a,iBAChBgF,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,mBAAoBI,SAAST,EAAsBxZ,QAAQ3E,aAGhH,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAU8c,EACVlhB,KAAK,SACLqE,MAAM,sCACNqP,WAAY,CAAEmI,IAAK,GACnB3e,MAAOge,EAAS5K,cAChBjL,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,gBAAiBI,SAASoF,EAAmBrf,QAAQ3E,aAG1G,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAU+c,EACVnhB,KAAK,SACLqE,MAAM,sBACNqP,WAAY,CAAEmI,IAAK,GACnB3e,MAAOge,EAAS1K,WAChBnL,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,aAAcI,SAASqF,EAAgBtf,QAAQ3E,iBCrF1GmJ,GAAYC,YAAW,CACzBiQ,WAAY,CACRrD,OAAQ,UASHkO,GAAsE,SAC/Ene,GAEA,IAAQpD,EAAiCoD,EAAjCpD,UAAWuZ,EAAsBnW,EAAtBmW,kBAEbtS,EAAUT,KA4BhB,OACI,eAACxC,EAAA,EAAD,CAAMC,WAAS,EAACqD,UAAWL,EAAQyP,WAAYvS,QAAS,EAAxD,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIiD,UAAWL,EAAQyP,WAAtC,SACI,cAAC,GAAD,CACIjD,KAAM3D,GAAc4F,OACpB1V,UAAWA,EACXuZ,kBApBe,SAAC6C,GAC5B7C,EAAkB6C,QAsBd,cAACpY,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAWL,EAAQyP,WAArC,SACI,cAAC,GAAD,CAAsBpW,OAAQN,EAAUM,OAAQ8a,eApBjC,SAAC9a,GACxB,IAAM+B,EAjBa,SAACsO,GACpB,IAAItO,EAAM,YAAOrC,EAAUqC,QAC3B,GAAIsO,EAAatO,EAAOhD,OAAQ,CAC5B,IAAMmiB,EAAYnF,MAAMC,KAAKD,MAAM1L,EAAatO,EAAOhD,SAClDyK,KAAI,iBAAO,CAAExH,KAAM,GAAIF,MAAO,OACnCC,EAAM,sBAAOA,GAAP,YAAkBmf,SACjB7Q,EAAatO,EAAOhD,SAC3BgD,EAASA,EAAOka,MAAM,EAAG5L,IAE7B,OAAOtO,EAQQof,CAAenhB,EAAOqQ,YAC/ByL,EAAmC,2BAClCpc,GADkC,IAErCqC,SACA/B,WAEJiZ,EAAkB6C,YCrCpB5V,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrC6U,KAAM,CACFW,OAAQ,OACRxG,gBAAiB,WAErB6J,WAAY,CACRrD,OAAQ,QAEZ0F,eAAgB,CACZ1F,OAAQ,OAEZ2F,iBAAkB,CACd3F,OAAQ,OAEZ+F,UAAW,CACPxR,QAAS,OACTuJ,eAAgB,SAChBjH,WAAY,UAEhB8U,iBAAkB,CACd3L,OAAQ,MACRmE,OAAQ,aAEZpT,KAAM,CACFuC,QAAS,WACTkG,gBAAiBhP,EAAME,QAAQG,UAAUX,KACzCiI,MAAO3H,EAAME,QAAQC,QAAQC,aAC7B8e,aAAc,QAElBkC,gBAAiB,CACb5L,OAAQ,WAYHqO,GAAgD,SAACte,GAC1D,IAAQqQ,EAA2DrQ,EAA3DqQ,KAAMzT,EAAqDoD,EAArDpD,UAAWuZ,EAA0CnW,EAA1CmW,kBAAmBC,EAAuBpW,EAAvBoW,UAAWrO,EAAY/H,EAAZ+H,QAEvD,EAAkClO,oBAAkB,GAApD,mBAAO8a,EAAP,KAAkB0B,EAAlB,KACA,EAAqDxc,mBAAmB,IAAjEyc,EAAP,oBACA,EAAgDzc,oBAAkB,GAAlE,mBAAyB4c,GAAzB,WAEA,EAAsBC,aAASC,IAAxBC,EAAP,oBACA,EAAwBF,aAASG,IAA1BC,EAAP,oBAEMjT,EAAUT,KAgCVmU,EAAa,SAACC,GAChBnB,GAAa,GACbI,GAAoB,GAEhBe,EACAZ,IAEAE,IAGJ5B,YAAW,WACHsC,EACIpB,GACAA,IAGArO,GACAA,MAGT,MAGP,OACI,eAACuG,GAAA,EAAD,CAAM3S,QAAQ,WAAWuI,UAAWL,EAAQyL,KAA5C,UACI,qBAAKpL,UAAWL,EAAQ8R,eAAxB,SACI,cAAC,GAAD,CACItF,KAAMA,EACNlS,SAAUvB,EAAUuB,SACpB9C,SAAUuB,EAAUM,OAAOE,iBAC3BwE,SA5DU,SAAC6V,GACnBtB,GACAA,EAAkB,2BACXvZ,GADU,IAEbuB,SAAUsZ,UA2Dd,qBAAKvT,UAAWL,EAAQ+R,iBAAxB,SACI,eAAChV,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,SAASgC,UAAWL,EAAQyP,WAApD,UACI,cAAC1S,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAWL,EAAQyP,WAArC,SACI,cAAC,GAAD,CACIjD,KAAMA,EACNqE,KAAM9X,EAAUM,OAAOC,UACvBwX,UAAWA,EACXC,SA7DF,WAClB2C,GAAW,QA+DC,cAAC3W,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAWL,EAAQyP,aAErC,cAAC1S,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAG8H,MAAO,CAAEkH,OAAQ,QAAU/L,UAAWL,EAAQmS,UAAhE,SAEQ,eAACzB,GAAA,EAAD,CACI5Y,QAAQ,WACRmR,KAAK,QACL1K,MAAM,UACNuV,SAAUtH,IAAS3D,GAAc4F,QAAqC,IAA3BgE,EAAgBra,OAC3DoG,QAAS,aALb,UAOI,cAACiF,EAAA,EAAD,oBAPJ,6BC1ItBlE,GAAYC,YAAW,CACzBhC,UAAW,CACPuB,MAAO,UASF2b,GAAoD,SAACve,GAC9D,IAAQ9C,EAA2B8C,EAA3B9C,OAAQ8a,EAAmBhY,EAAnBgY,eAEhB,EAAgCne,mBAA8BqD,GAA9D,mBAAO+a,EAAP,KAAiBC,EAAjB,KAEMC,EAAiBzX,iBAAO,IACxB0X,EAAwB1X,iBAAO,IAC/Bud,EAAqBvd,iBAAO,IAC5B8d,EAAiB9d,iBAAO,IAExBmD,EAAUT,KAEhBpH,qBAAU,WACNkc,EAAYhb,KACb,CAACA,IAEJ,IAAMub,EAA8B,SAACC,EAAmBze,GACpD,IAAM0e,EAAS,2BACRV,GADQ,mBAEVS,EAAYze,IAEjBie,EAAYS,GACRX,GACAA,EAAeW,IAIvB,OACI,eAAC/X,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAS,EAA5C,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACtF,EAAA,EAAD,CAAYC,QAAQ,KAApB,gCAEJ,cAACiF,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAUgX,EACVpb,KAAK,SACLqE,MAAM,iCACNqP,WAAY,CAAEmI,IAAK,IACnB3e,MAAOge,EAAS9a,UAChBiF,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,YAAaI,SAASV,EAAevZ,QAAQ3E,aAGlG,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAUiX,EACVrb,KAAK,SACLqE,MAAM,mCACNqP,WAAY,CAAEmI,IAAK,GACnB3e,MAAOge,EAAS7a,iBAChBgF,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,mBAAoBI,SAAST,EAAsBxZ,QAAQ3E,aAGhH,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAU8c,EACVlhB,KAAK,SACLqE,MAAM,sCACNqP,WAAY,CAAEmI,IAAK,GACnB3e,MAAOge,EAAS5K,cAChBjL,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,gBAAiBI,SAASoF,EAAmBrf,QAAQ3E,aAG1G,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAUqd,EACVzhB,KAAK,SACLqE,MAAM,yBACNqP,WAAY,CAAEmI,IAAK,GACnB3e,MAAOge,EAAS3K,UAChBlL,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,aAAcI,SAAS2F,EAAe5f,QAAQ3E,iBCrFzGmJ,GAAYC,YAAW,CACzBiQ,WAAY,CACRrD,OAAQ,UASHwO,GAA8D,SACvEze,GAEA,IAAQpD,EAAiCoD,EAAjCpD,UAAWuZ,EAAsBnW,EAAtBmW,kBAEbtS,EAAUT,KA4BhB,OACI,eAACxC,EAAA,EAAD,CAAMC,WAAS,EAACqD,UAAWL,EAAQyP,WAAYvS,QAAS,EAAxD,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIiD,UAAWL,EAAQyP,WAAtC,SACI,cAAC,GAAD,CACIjD,KAAM3D,GAAc4F,OACpB1V,UAAWA,EACXuZ,kBApBe,SAAC6C,GAC5B7C,EAAkB6C,QAsBd,cAACpY,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAWL,EAAQyP,WAArC,SACI,cAAC,GAAD,CAAkBpW,OAAQN,EAAUM,OAAQ8a,eApB7B,SAAC9a,GACxB,IAAM8B,EAjBY,SAACsO,GACnB,IAAItO,EAAK,YAAOpC,EAAUoC,OAC1B,GAAIsO,EAAYtO,EAAM/C,OAAQ,CAC1B,IAAMmhB,EAAWnE,MAAMC,KAAKD,MAAM3L,EAAYtO,EAAM/C,SAC/CyK,KAAI,iBAAO,MAChB1H,EAAK,sBAAOA,GAAP,YAAiBoe,SACf9P,EAAYtO,EAAM/C,SACzB+C,EAAQA,EAAMma,MAAM,EAAG7L,IAE3B,OAAOtO,EAQO0f,CAAcxhB,EAAOoQ,WAC7B0L,EAA+B,2BAC9Bpc,GAD8B,IAEjCoC,QACA9B,WAEJiZ,EAAkB6C,YC3CpB5V,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrC6U,KAAM,CACF1M,MAAO,OACPqN,OAAQ,OACRmE,OAAQ,kBAEZuK,MAAO,CACHlV,gBAAiBhP,EAAME,QAAQC,QAAQT,KACvCiI,MAAO,WAEXnE,MAAO,CACHwL,gBAAiB,WAErBmV,QAAS,CACLnV,gBAAiB,eAcZoV,GAAsC,SAAC7e,GAChD,IAAQqQ,EAAoErQ,EAApEqQ,KAAMyO,EAA8D9e,EAA9D8e,KAAMH,EAAwD3e,EAAxD2e,MAAOtjB,EAAiD2E,EAAjD3E,SAAUsW,EAAuC3R,EAAvC2R,YAAa6F,EAA0BxX,EAA1BwX,QAASuH,EAAiB/e,EAAjB+e,aAE3D,EAAgCllB,mBAAiCilB,GAAjE,mBAAO7G,EAAP,KAAiBC,EAAjB,KACM8G,EAAYte,iBAAO,IAEnBmD,EAAUT,KAoBhB,OACI,eAACxC,EAAA,EAAD,CAAMC,WAAS,EAACiG,WAAW,SAAS5C,UAAS,UAAKL,EAAQyL,KAAb,YAAqBqP,EAAQ9a,EAAQ8a,MAAShN,EAAe6F,EAAU3T,EAAQ5F,MAAQ4F,EAAQ+a,QAAY,IAAxJ,UAEQvO,IAAS3D,GAAc4F,SAAWqM,GAC9B,cAAC/d,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACmB,EAAA,EAAD,CAAQlI,MAAM,SAASoI,QAdZ,WAC3B,IAAMsQ,EAAQ,2BACPsF,GADO,IAEVgH,QAAShH,EAASgH,SAEtB/G,EAAYvF,GACZoM,EAAapM,IAQG,SACI,cAACrL,EAAA,EAAD,CAAMlF,MAAO6V,EAASgH,OAAS,YAAc,UAA7C,SAEQhH,EAASgH,OAAS,iBAAmB,mBAO7D,cAACre,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,EAAb,SAESoP,IAAS3D,GAAc4F,QAAU2F,EAASgH,OACvC,cAAC/d,GAAA,EAAD,CACIC,SAAU6d,EACV/kB,MAAOge,EAAS9c,KAChBiH,MAAM,YACNqO,WAAc,CACV1H,MAAO,CACH2H,UAAW,SACXrV,SAAS,GAAD,OAAiB,MAAZA,EAAmBA,EAAW,GAAnC,MACR+G,MAAOuc,GAAShN,EAAc,UAAW,YAGjDrQ,QA/CC,WACrB,IAAMqR,EAAQ,2BACPsF,GADO,IAEV9c,KAAM6jB,EAAUpgB,QAAQ3E,QAE5Bie,EAAYvF,GACZoM,EAAapM,MA4CG,qBACI5J,MAAO,CACH2H,UAAW,SACXrV,SAAS,GAAD,OAAiB,MAAZA,EAAmBA,EAAW,GAAnC,MACR+G,MAAOuc,GAAShN,EAAc,UAAW,WAJjD,SAOKsG,EAAS9c,aCpFhCiI,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrC6U,KAAM,CACFW,OAAQ,OACRxG,gBAAiB,WAErBkM,eAAgB,CACZ1F,OAAQ,OAEZ4F,gBAAiB,CACb5F,OAAQ,OAEZ8F,gBAAiB,CACb9F,OAAQ,QAEZ+F,UAAW,CACPxR,QAAS,OACTuJ,eAAgB,SAChBjH,WAAY,UAEhBgY,KAAM,CAEF7O,OAAQ,YAsBHiP,GAA0D,SAAClf,GACpE,IAAQqQ,EAAoErQ,EAApEqQ,KAAMzT,EAA8DoD,EAA9DpD,UAAWsZ,EAAmDlW,EAAnDkW,QAASC,EAA0CnW,EAA1CmW,kBAAmBC,EAAuBpW,EAAvBoW,UAAWrO,EAAY/H,EAAZ+H,QAEhE,EAA2ClO,mBArBjB,SAAC+C,GAC3B,OAAOA,EAAUoC,MAAM0H,KAAI,SAACyY,GAIxB,OAHuBA,EAAKzY,KAAI,SAAC0Y,GAC7B,OAAOA,EAAQH,OAAR,2BAAqBG,GAArB,IAA8BjkB,KAAM,KAApC,eAA8CikB,SAkBmBC,CAAsBziB,IAAtG,mBAAO0iB,EAAP,KAAuBC,EAAvB,KAEA,EAAkC1lB,oBAAkB,GAApD,mBAAO8a,EAAP,KAAkB0B,EAAlB,KACA,EAAgDxc,oBAAkB,GAAlE,mBAAO2c,EAAP,KAAyBC,EAAzB,KAEA,EAAsBC,aAASC,IAAxBC,EAAP,oBACA,EAAwBF,aAASG,IAA1BC,EAAP,oBAEMjT,EAAUT,KAeVmU,EAAa,SAACC,GAChBnB,GAAa,GACbI,GAAoB,GAEhBe,EACAZ,IAEAE,IAGJ5B,YAAW,WACHsC,EACIpB,GACAA,IAGArO,GACAA,MAGT,MA0EP,OACI,eAACuG,GAAA,EAAD,CAAM3S,QAAQ,WAAWuI,UAAWL,EAAQyL,KAA5C,UACI,qBAAKpL,UAAWL,EAAQ8R,eAAxB,SACI,cAAC,GAAD,CACItF,KAAMA,EACNlS,SAAUvB,EAAUuB,SACpB9C,SAAUuB,EAAUM,OAAOE,iBAC3BwE,SAlHU,SAAC6V,GACnBtB,GACAA,EAAkB,2BACXvZ,GADU,IAEbuB,SAAUsZ,UAiHd,qBAAKvT,UAAWL,EAAQgS,gBAAxB,SACI,eAACjV,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,SAAS6G,MAAO,CAAEkH,OAAQ,QAAlD,UACI,cAACrP,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAG8H,MAAO,CAAEkH,OAAQ,QAAnC,SAEmB,MAAXiG,IAAoBA,EAAQzS,iBACxB,cAAC,GAAD,CACI4M,KAAMA,EACNqE,KAAM9X,EAAUM,OAAOC,UACvBwX,UAAWA,EACXC,SArHV,WAClB2C,GAAW,QAyHC,cAAC3W,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAG8H,MAAO,CAAEkH,OAAQ,QAAnC,SACI,cAACrP,EAAA,EAAD,CAAMC,WAAS,EAACiG,WAAW,SAASiC,MAAO,CAAEkH,OAAQ,QAArD,SACI,cAACrP,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,EAAb,SACI,cAACL,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAA1B,UAESuP,IAAS3D,GAAc4F,OAAS1V,EAAUoC,MAAQsgB,GAC9C5Y,KAAI,SAACyY,EAAgC9f,GAAjC,OACD,cAACuB,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,EAAb,SACI,cAACL,EAAA,EAAD,CAAMC,WAAS,EAAf,SAEQse,EAAKzY,KAAI,SAAC0Y,EAAiC5f,GAAlC,OACL,cAACoB,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,EAA6BiD,UAAWL,EAAQib,KAA7D,WAKYliB,EAAUM,OAAOuC,eACd7C,EAAUM,OAAOwC,kBACN,IAAXL,GACc,IAAdG,IAEH,cAAC,GAAD,CACI6Q,KAAMA,EACNyO,KAAMM,EACNT,MAEQ/hB,EAAUM,OAAOuC,eACH,IAAXJ,GAEHzC,EAAUM,OAAOwC,kBACA,IAAdF,EAGXnE,SAAUuB,EAAUM,OAAOmQ,cAC3BsE,YAAa6E,EACbgB,UAES5a,EAAUM,OAAOuC,eACJ,IAAXJ,MAEFzC,EAAUM,OAAOwC,kBACD,IAAdF,IAEH5C,EAAUoC,MAAMK,GAAQG,GAAWrE,OAASmkB,EAAejgB,GAAQG,GAAWrE,KAGtF4jB,aAAc,SAACD,IA7IlE,SAACU,EAAiCngB,EAAgBG,GACvE,IAAM4b,GAAgB/K,IAAS3D,GAAc4F,OAAS1V,EAAUoC,MAAQsgB,GACnE5Y,KAAI,SAACyY,EAAgCM,GAClC,OAAIA,IAAcpgB,EACP,YAAI8f,GAEQA,EAAKzY,KAAI,SAAC0Y,EAAiCM,GAC9D,OAAOA,IAAiBlgB,EAAjB,eAAiCggB,GAAjC,eAAgDJ,SAI/D/O,IAAS3D,GAAcoE,KACvByO,EAAkBnE,GACXjF,GACPA,EAAkB,2BACXvZ,GADU,IAEboC,MAAOoc,KA8H6DuE,CAAiBb,EAAMzf,EAAQG,OApCnD,iBAA6BA,UAJ7C,cAA0BH,eAwDtD,cAACuB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAG8H,MAAO,CAAEkH,OAAQ,QAAU/L,UAAWL,EAAQmS,UAAhE,SAEQ,eAACzB,GAAA,EAAD,CACI5Y,QAAQ,WACRmR,KAAK,QACL1K,MAAM,UACNuV,SAAUtH,IAAS3D,GAAc4F,SA9IlDgN,EAAe5gB,QAClB,SAACS,EAAiBC,EAAsCC,GAAxD,OACIF,GACGC,EAAWV,QACV,SAACY,EAAoBC,EAAuCC,GAA5D,OACIF,IAGQ1C,EAAUM,OAAOuC,eACH,IAAXJ,GACAzC,EAAUM,OAAOwC,kBACH,IAAdF,GAEmB,KAAvBD,EAAcpE,SAGzB,MAGR,GA4HoBkH,QAAS,YAxHZ,WACrB,IAAMwG,EAASyW,EAAe5gB,QAC1B,SAACS,EAAiBC,EAAsCC,GAAxD,OACIF,GACGC,EAAWV,QACV,SAACY,EAAoBC,EAAuCC,GAA5D,OACIF,IAGQ1C,EAAUM,OAAOuC,eACH,IAAXJ,GACAzC,EAAUM,OAAOwC,kBACH,IAAdF,GAEJD,EAAcpE,OAASyB,EAAUoC,MAAMK,GAAQG,GAAWrE,SAGrE,MAGR,GAGJoc,EAAW1O,GAiG8BgP,IALrB,UAOI,cAACvQ,EAAA,EAAD,oBAPJ,QAOoC,OAAP4O,QAAO,IAAPA,OAAA,EAAAA,EAAS9V,YAAa1D,EAASsF,GAAK,QAAU,yBC7QjGoB,GAAYC,YAAW,CACzBhC,UAAW,CACPuB,MAAO,UASFgd,GAA8D,SAAC5f,GACxE,IAAQ9C,EAA2B8C,EAA3B9C,OAAQ8a,EAAmBhY,EAAnBgY,eAEhB,EAAgCne,mBAAmCqD,GAAnE,mBAAO+a,EAAP,KAAiBC,EAAjB,KAEMC,EAAiBzX,iBAAO,IACxB0X,EAAwB1X,iBAAO,IAC/Bud,EAAqBvd,iBAAO,IAC5Bmf,EAAgBnf,iBAAO,IACvBof,EAAqBpf,iBAAO,IAC5Bqf,EAAmBrf,iBAAO,IAC1Bsf,EAAwBtf,iBAAO,IAE/BmD,EAAUT,KAEhBpH,qBAAU,WACNkc,EAAYhb,KACb,CAACA,IAEJ,IAAMub,EAA8B,SAACC,EAAmBze,GACpD,IAAM0e,EAAS,2BACRV,GADQ,mBAEVS,EAAYze,IAEjBie,EAAYS,GACRX,GACAA,EAAeW,IAIvB,OACI,eAAC/X,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAS,EAA5C,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACtF,EAAA,EAAD,CAAYC,QAAQ,KAApB,gCAEJ,cAACiF,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAUgX,EACVpb,KAAK,SACLqE,MAAM,iCACNqP,WAAY,CAAEmI,IAAK,IACnB3e,MAAOge,EAAS9a,UAChBiF,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,YAAaI,SAASV,EAAevZ,QAAQ3E,aAGlG,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAUiX,EACVrb,KAAK,SACLqE,MAAM,mCACNqP,WAAY,CAAEmI,IAAK,GACnB3e,MAAOge,EAAS7a,iBAChBgF,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,mBAAoBI,SAAST,EAAsBxZ,QAAQ3E,aAGhH,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAU8c,EACVlhB,KAAK,SACLqE,MAAM,sCACNqP,WAAY,CAAEmI,IAAK,GACnB3e,MAAOge,EAAS5K,cAChBjL,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,gBAAiBI,SAASoF,EAAmBrf,QAAQ3E,aAG1G,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAU0e,EACV9iB,KAAK,SACLqE,MAAM,qBACNqP,WAAY,CAAEmI,IAAK,GACnB3e,MAAOge,EAASzK,SAChBpL,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,WAAYI,SAASgH,EAAcjhB,QAAQ3E,aAGhG,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACmD,GAAA,EAAD,CACIC,QACI,cAACC,GAAA,EAAD,CACIlD,SAAU2e,EACV5gB,KAAK,mBACLoF,QAAS2T,EAASxY,cAClB2C,MAAM,YACNR,SAAU,WAAQ6W,EAA4B,gBAAiBqH,EAAmBlhB,QAAQ0F,YAGlGlD,MAAM,wBAGd,cAACR,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAU4e,EACVhjB,KAAK,SACLqE,MAAM,wBACNqP,WAAY,CAAEmI,IAAK,GACnB3e,MAAOge,EAASxK,YAChBrL,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,cAAeI,SAASkH,EAAiBnhB,QAAQ3E,aAGtG,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACmD,GAAA,EAAD,CACIC,QACI,cAACC,GAAA,EAAD,CACIlD,SAAU6e,EACV9gB,KAAK,wBACLoF,QAAS2T,EAASvY,iBAClB0C,MAAM,YACNR,SAAU,WAAQ6W,EAA4B,mBAAoBuH,EAAsBphB,QAAQ0F,YAGxGlD,MAAM,+BChIpBgC,GAAYC,YAAW,CACzBiQ,WAAY,CACRrD,OAAQ,UASHgQ,GAAwE,SACjFjgB,GAEA,IAAQpD,EAAiCoD,EAAjCpD,UAAWuZ,EAAsBnW,EAAtBmW,kBAEbtS,EAAUT,KAsChB,OACI,eAACxC,EAAA,EAAD,CAAMC,WAAS,EAACqD,UAAWL,EAAQyP,WAAYvS,QAAS,EAAxD,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIiD,UAAWL,EAAQyP,WAAtC,SACI,cAAC,GAAD,CACIjD,KAAM3D,GAAc4F,OACpB1V,UAAWA,EACXuZ,kBApBe,SAAC6C,GAC5B7C,EAAkB6C,QAsBd,cAACpY,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAWL,EAAQyP,WAArC,SACI,cAAC,GAAD,CAAuBpW,OAAQN,EAAUM,OAAQ8a,eApBlC,SAAC9a,GACxB,IAAM8B,EA3BY,SAACwO,EAAkBC,GACrC,IAAIzO,EAAK,YAAOpC,EAAUoC,OAC1B,GAAIwO,EAAWxO,EAAM/C,OAAQ,CACzB,IAAMikB,EAAYjH,MAAMC,KAAKD,MAAMja,EAAM,GAAG/C,SAASyK,KAAI,iBAAO,CAAEvL,KAAM,GAAI8jB,QAAQ,MAC9EkB,EAAUlH,MAAMC,KAAKD,MAAMzL,EAAWxO,EAAM/C,SAC7CyK,KAAI,8BAAUwZ,MACnBlhB,EAAK,sBAAOA,GAAP,YAAiBmhB,SACf3S,EAAWxO,EAAM/C,SACxB+C,EAAQA,EAAMma,MAAM,EAAG3L,IAG3B,GAAIC,EAAczO,EAAM,GAAG/C,OAAQ,CAC/B,IAAMmkB,EAAanH,MAAMC,KAAKD,MAAMxL,EAAczO,EAAM,GAAG/C,SACtDyK,KAAI,iBAAO,CAAEvL,KAAM,GAAI8jB,QAAQ,MACpCjgB,EAAQA,EAAM0H,KAAI,SAAC2U,GAAD,4BAA0CA,GAA1C,YAAqD+E,YAChE3S,EAAczO,EAAM,GAAG/C,SAC9B+C,EAAQA,EAAM0H,KAAI,SAAC2U,GAAD,OAAsCA,EAAOlC,MAAM,EAAG1L,OAG5E,OAAOzO,EAQOqhB,CAAcnjB,EAAOsQ,SAAUtQ,EAAOuQ,aAC9CuL,EAAoC,2BACnCpc,GADmC,IAEtCoC,QACA9B,WAEJiZ,EAAkB6C,YC1DbsH,GAAgB,SAACnlB,GAC1B,OAAOA,EACF+Q,QAAQ,MAAO,MACfA,QAAQ,KAAM,MACdA,QAAQ,KAAM,MACdA,QAAQ,KAAM,MACdqU,MAAO,MAGHC,GAAe,SAACC,GACzB,OAAOA,EACFC,KAAK,KACLxU,QAAQ,OAAQ,KAChBA,QAAQ,MAAO,KACfA,QAAQ,MAAO,KACfA,QAAQ,MAAO,MCHXyU,GAAkC,SAAC3gB,GAC5C,IAAQ/F,EAAmC+F,EAAnC/F,MAAO8O,EAA4B/I,EAA5B+I,MAAO1N,EAAqB2E,EAArB3E,SAAUqf,EAAW1a,EAAX0a,OAMhC,EAAoCC,aAAQ,CACxCzS,OAAQ,MACR0S,KANe,SAAC5Z,GAChB0Z,EAAO1Z,EAAK9B,OAMZ6a,QAAS,SAACC,GACN,MAAQ,CACJa,OAAQb,EAAQa,SAChBC,QAASd,EAAQc,cAN7B,0BAA4BF,GAA5B,EAASC,OAAT,EAAiBC,QAAjB,MAWA,OACI,qBACI7S,IAAK2S,EACL7R,MAAK,aACDnG,MAAO,QACPqN,OAAQ,OACRU,WAAY,OACZD,UAAW,SACXkQ,aAAa,aAAD,OAAe1mB,EAAeC,MAC1CiI,MAAOlI,EAAeC,KACtBkB,SAAS,GAAD,OAAKA,GAAsB,GAA3B,OACL0N,GAVX,SAcK9O,KCpCPmJ,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrComB,KAAM,CACFtd,QAAS,MAET,WAAY,CACRkG,gBAAiBhP,EAAME,QAAQC,QAAQR,MACvCgI,MAAM,UACNmP,OAAQ,UACRoI,aAAc,SAGtB1L,SAAU,CACNxE,gBAAiBhP,EAAME,QAAQC,QAAQT,KACvCwf,aAAc,OACdvX,MAAM,eA2DD0e,GAAoD,SAAC9gB,GAC9D,IAAOqQ,EAA0GrQ,EAA1GqQ,KAAM0Q,EAAoG/gB,EAApG+gB,SAAU5T,EAA0FnN,EAA1FmN,WAAYwE,EAA8E3R,EAA9E2R,YAAatW,EAAiE2E,EAAjE3E,SAAU2lB,EAAuDhhB,EAAvDghB,iBAAkBC,EAAqCjhB,EAArCihB,iBAAkBC,EAAmBlhB,EAAnBkhB,gBAE9F,EAA0BrnB,mBA9CR,SAACknB,GACnB,IAAMlY,EAAyB,GAC3BsY,EAAa,EACXC,EAAQd,GAAcS,EAAS5lB,MA0BrC,OAzBA4lB,EAAShiB,kBAAkBsiB,SAAQ,SAACC,EAAoCtR,GAChEsR,EAAMC,aAAeJ,GACrBtY,EAAO7L,KAAK,CACRD,KAAM,OACNykB,WAAY,EACZvnB,MAAOumB,GAAaY,EAAMjI,MAAMgI,EAAYG,EAAMC,eAClD/H,OAAQ,KAGhB3Q,EAAO7L,KAAK,CACRD,KAAM,SACNykB,UAAWxR,EACX/V,MAAOumB,GAAaY,EAAMjI,MAAMmI,EAAMC,aAAcD,EAAMC,aAAeD,EAAMG,YAC/EjI,OAAQ,KAEZ2H,EAAaG,EAAMC,aAAeD,EAAMG,aAExCN,EAAaC,EAAMnlB,OAAS,GAC5B4M,EAAO7L,KAAK,CACRD,KAAM,OACNykB,WAAY,EACZvnB,MAAOumB,GAAaY,EAAMjI,MAAMgI,IAChC3H,OAAQ,KAGT3Q,EAiB4C6Y,CAAcX,IAAjE,mBAAOY,EAAP,KAAcC,EAAd,KAEM/d,EAAUT,KA8JVye,EAAmB,SAACC,EAAiB3mB,GACvC,IAAM4mB,EAAeJ,EAAMjb,KAAI,SAACsb,EAAqBhS,GAAtB,mBAAC,eAErBgS,GAFoB,IAGvBxI,OAAQxJ,IAAQ8R,EAAU3mB,EAAO6mB,EAAMxI,YAG/CoI,EAASG,GACTb,EAAgBa,EAAahX,QACzB,SAACiX,GAAD,MAAwC,WAAfA,EAAMjlB,QACjC2J,KACE,SAACsb,GAAD,MAA0B,CACtBR,UAAWQ,EAAMR,UACjBvnB,MAAO+nB,EAAMxI,aAKnByI,EAAe,SAACC,EAAuBjoB,GAAxB,OAA0C0X,EAC3DuQ,EAAYtK,QAAQ3d,IAAU,EAAI,CAC9BmI,MAAO,WACP,CACAA,MAAO,WAEX,IAEJ,OACI,eAACxB,EAAA,EAAD,CAAMC,WAAS,EAACiG,WAAW,SAAS/F,QAAS,EAA7C,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACsG,EAAA,EAAD,CAAMjM,SAAS,QAAQ+G,MAAM,YAA7B,6BAGAiO,IAAS3D,GAAc4F,QACpBgO,GAAcS,EAAS5lB,MAAMuL,KAAI,SAACyb,EAAenS,GAAhB,OAChC,cAACpP,EAAA,EAAD,CACII,MAAI,EAEJkD,UAAS,UAAKL,EAAQgd,KAAb,aA9CXuB,EA8CyCpS,EA7ChD+Q,EAAShiB,kBAAkBT,MAC9B,SAAC+jB,GAAD,OACID,GAAWC,EAAad,cACrBa,GAAWC,EAAad,aAAec,EAAaZ,UAAY,KA0Cb5d,EAAQoK,SAAW,KACjE5L,QAAS,YAlML,SAAC+f,GACrB,IAAIE,EAA0D,GAEpB,IAAtCvB,EAAShiB,kBAAkB9C,SAE3BsmB,QAAQC,IAAI,IACZF,EAAyBtlB,KAAK,CAC1BukB,aAAca,EACdX,UAAW,EACXgB,aAAc,MAItB1B,EAAShiB,kBAAkBT,MAAK,SAACgjB,EAAoCtR,GACjE,IAAI0S,GAAqB,EACzB,GAAY,IAAR1S,GAAaoS,EAAUd,EAAMC,aAAe,EAO5C,OAJAe,EAAwB,CACpB,CAAEf,aAAca,EAASX,UAAW,EAAGgB,aAAa,KADhC,mBAEjB1B,EAAShiB,qBAET,EACJ,GAAIqjB,IAAYd,EAAMC,aAAe,EAGxCe,EAAyBtlB,KACrB,CAAEukB,aAAca,EAASX,UAAWH,EAAMG,UAAY,EAAGgB,aAAa,YAAKnB,EAAMmB,gBAErFC,EAAoB1S,OACjB,GAAIoS,IAAYd,EAAMC,aAGD,IAApBD,EAAMG,WAMNa,EAAyBtlB,KACrB,CAAEukB,aAAca,EAAU,EAAGX,UAAWH,EAAMG,UAAY,EAAGgB,aAAa,YAAKnB,EAAMmB,gBAG7FC,EAAoB1S,OACjB,GAAIoS,EAAUd,EAAMC,cAAgBa,EAAUd,EAAMC,aAAeD,EAAMG,UAAY,EAGxFa,EAAwB,sBACjBA,GADiB,CAEpB,CACIf,aAAcD,EAAMC,aACpBE,UAAWW,EAAUd,EAAMC,aAC3BkB,aAAc,IAElB,CACIlB,aAAca,EAAU,EACxBX,UAAWH,EAAMC,aAAeD,EAAMG,UAAYW,EAAU,EAC5DK,aAAc,MAGtBC,EAAoB1S,OACjB,GAAIoS,IAAYd,EAAMC,aAAeD,EAAMG,UAAY,EAGlC,IAApBH,EAAMG,WAMNa,EAAyBtlB,KACrB,CACIukB,aAAcD,EAAMC,aACpBE,UAAWH,EAAMG,UAAY,EAC7BgB,aAAa,YAAKnB,EAAMmB,gBAIpCC,EAAoB1S,OACjB,GAAIA,EAAM+Q,EAAShiB,kBAAkB9C,OAAS,GAC9CmmB,EAAUd,EAAMC,aAAeD,EAAMG,WACrCW,EAAUrB,EAAShiB,kBAAkBiR,EAAM,GAAGuR,aAAe,EAGhEe,EAAwB,sBACjBA,GADiB,gBAEhBhB,GACJ,CAAEC,aAAca,EAASX,UAAW,EAAGgB,aAAc,MAEzDC,EAAoB1S,OACjB,GAAIA,EAAM+Q,EAAShiB,kBAAkB9C,OAAS,GAC9CmmB,IAAYd,EAAMC,aAAeD,EAAMG,WACvCW,IAAYrB,EAAShiB,kBAAkBiR,EAAM,GAAGuR,aAAe,EAGlEe,EAAyBtlB,KAAK,CAC1BukB,aAAcD,EAAMC,aACpBE,UAAWH,EAAMG,UAAYV,EAAShiB,kBAAkBiR,EAAM,GAAGyR,UAAY,EAC7EgB,aAAc,KAElBC,EAAoB1S,EAAM,OACvB,GAAIoS,IAAYd,EAAMC,aAAeD,EAAMG,UAG9Ca,EAAyBtlB,KAAK,CAC1BukB,aAAcD,EAAMC,aACpBE,UAAWH,EAAMG,UAAY,EAC7BgB,aAAa,YAAKnB,EAAMmB,gBAE5BC,EAAoB1S,OACjB,GAAIA,IAAQ+Q,EAAShiB,kBAAkB9C,OAAS,EAQnD,OALAqmB,EAAwB,sBACjBA,GADiB,gBAEhBhB,GACJ,CAAEC,aAAca,EAASX,UAAW,EAAGgB,aAAc,OAElD,EAGX,OAA2B,IAAvBC,GACI1S,EAAM+Q,EAAShiB,kBAAkB9C,OAAS,IAC1CqmB,EAAwB,sBACjBA,GADiB,YAEjBvB,EAAShiB,kBAAkBoa,MAAMuJ,EAAoB,OAGzD,IAGXJ,EAAyBtlB,KAAzB,eAAkCskB,KAC3B,MAGXN,EAAiB,2BACVD,GADS,IAEZhiB,kBAAmBujB,KAyDUK,CAAgB3S,IAJrC,SAMI,cAACtU,EAAA,EAAD,CAAYqN,MAAO,CAAC1N,SAAS,GAAD,OAAKA,GAAqB,GAA1B,OAA5B,SACK8mB,KAPT,eAEiBnS,IA7ChB,IAACoS,KAwDN/R,IAAS3D,GAAc4F,QACnB,cAAC1R,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACiG,EAAA,EAAD,CAAY6F,KAAK,QAAQzK,QAhEnB,WAClB4e,GACAA,KA8DY,SACI,cAAC3Z,EAAA,EAAD,yBAMZ+I,IAAS3D,GAAcoE,MACnB6Q,EAAMjb,KAAI,SAACsb,EAAqBhS,GAAtB,MACS,SAAfgS,EAAMjlB,KACF,cAAC6D,EAAA,EAAD,CACII,MAAI,EAEJkD,UAAWL,EAAQgd,KAHvB,SAKI,cAACnlB,EAAA,EAAD,CAAYqN,MAAO,CAAC1N,SAAS,GAAD,OAAKA,GAAqB,GAA1B,OAA5B,SACK2mB,EAAM/nB,SANf,eAEiB+V,IAQjB,cAACpP,EAAA,EAAD,CACII,MAAI,EADR,SAKQmM,IAAerN,GAAWsN,QACtB,cAAClM,GAAA,EAAD,CAEIjH,MAAO+nB,EAAMxI,OACbpX,MAAM,UACNqO,WAAY,CACR1H,MAAM,aACF1N,SAAS,GAAD,OAAKA,GAAsB,GAA3B,MACRqV,UAAW,SACXtO,MAAOlI,EAAeC,MACnB8nB,EAAa,CAERD,EAAM/nB,OAFC,mBAGJ8mB,EAAShiB,kBAAkBijB,EAAMR,WAAWiB,eAEnDT,EAAMxI,UAIlBlY,QACI,SAACO,GACGggB,EAAiB7R,EAAMnO,EAAIE,OAAe9H,SApBtD,gBACkB+V,IAwBlB,cAAC,GAAD,CAEI/V,MAAO+nB,EAAMxI,OACbzQ,MAAOkZ,EAAa,CAEZD,EAAM/nB,OAFK,mBAGR8mB,EAAShiB,kBAAkBijB,EAAMR,WAAWiB,eAEnDT,EAAMxI,QAEVne,SAAUA,EACVqf,OAAQ,SAACkI,GACLf,EAAiB7R,EAAK4S,KAZ9B,gBACkB5S,KAhC9B,eAEiBA,WCzTvC5M,GAAYC,aAAW,iBAAO,CAChCC,gBAAiB,CACbC,QAAS,YAYJsf,GAAoE,SAAC7iB,GAC9E,IAAQyC,EAA+CzC,EAA/CyC,KAAMtH,EAAyC6E,EAAzC7E,KAAM2nB,EAAmC9iB,EAAnC8iB,WAAY7iB,EAAuBD,EAAvBC,SAAUC,EAAaF,EAAbE,SAE1C,EAAkCrG,mBAAmBipB,GAArD,mBAAOviB,EAAP,KAAkBC,EAAlB,KAEMuiB,EAAiBriB,iBAAO,IAExBmD,EAAUT,KAEhBpH,qBAAU,WACY,MAAd8mB,GACAtiB,EAAasiB,KAElB,CAACA,IA8BJ,OACI,cAAC/f,EAAA,EAAD,CACIN,KAAMA,EACNpB,WAAS,EACT2B,SAAS,KAHb,SAKI,cAACiB,EAAA,EAAD,CAAKC,UAAWL,EAAQP,gBAAxB,SACI,eAAC1C,EAAA,EAAD,CACIC,WAAS,EACTC,UAAU,SACVC,QAAS,EAHb,UAKI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,cAACvF,EAAA,EAAD,CAAYC,QAAQ,KAApB,8CACmCR,EADnC,SAIJ,cAACyF,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,cAACwF,EAAA,EAAD,UAEQlG,EAAUmG,KAAI,SAACsc,EAAoBC,GAArB,OACV,eAACrc,EAAA,EAAD,WACI,cAACG,EAAA,EAAD,CAAcnM,QAASooB,IACvB,cAAChc,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAYic,KAAK,MAAM7gB,QAAS,YAtC1C,SAAC4gB,GAC3BziB,EACID,EAAUwK,QAAO,SAACiY,EAAoBhT,GAArB,OAAqCA,IAAQiT,MAoCUE,CAAsBF,IAA9D,SACI,cAAC3b,EAAA,EAAD,mCAQ5B,cAAC1G,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,cAACC,GAAA,EAAD,CACIC,SAAU4hB,EACVpnB,QAAQ,WACRoN,MAAO,CAAEnG,MAAO,QAChBxB,MAAM,kBACNoa,WA3DQ,SAAC3Z,GACZ,UAAbA,EAAI4Z,MAAqD,KAAjCsH,EAAenkB,QAAQ3E,QARnDuG,EAAa,GAAD,mBACLD,GADK,CAERwiB,EAAenkB,QAAQ3E,SAE3B8oB,EAAenkB,QAAQ3E,MAAQ,SAiEnB,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,eAACL,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,WAAWnB,QAAS,EAA5C,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACmB,EAAA,EAAD,CAAQxG,QAAQ,YAAYyG,MAAM,UAAUC,QArD9C,WACtBpC,EAASM,IAoDe,uBAEJ,cAACK,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACmB,EAAA,EAAD,CAAQC,MAAM,UAAUC,QApD1B,WACtBnC,KAmDwB,qCCzF1BkD,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrC6U,KAAM,CACFW,OAAQ,OACRxG,gBAAiB,WAErB6J,WAAY,CACRrD,OAAQ,QAEZ5O,UAAW,CACPuB,MAAO,QAEX+S,eAAgB,CACZ1F,OAAQ,OAEZ4F,gBAAiB,CACb5F,OAAQ,MACRrN,MAAO,QAEXoT,UAAW,CACPxR,QAAS,OACTuJ,eAAgB,SAChBjH,WAAY,UAEhB8U,iBAAkB,CACdxH,OAAQ,iBACR3K,gBAAiB,UACjB2Z,UAAW,QAEfC,mBAAoB,CAChBC,YAAa,YAQfxH,GAAe,SAAChd,EAAwCuR,GAC1D,IAAI0L,EAAe,GAcnB,OAbAjd,EAAUuiB,SAAQ,SAACkC,EAAsCC,GACrDD,EAAUxkB,kBAAkBsiB,SAAQ,SAACoC,EAAgDC,GACjF3H,EAAK/e,KAAK,CACN2mB,aAAcJ,EAAUpoB,KACxBqoB,cACAI,iBAAkBH,EAClBC,8BAIRrT,IAAS3D,GAAcoE,OACvBiL,EAAOA,EAAKC,MAAK,kBAAM3G,KAAK4G,SAAW,OAEpCF,GAmBE8H,GAAwD,SAAC7jB,GAClE,IAAQqQ,EAAoErQ,EAApEqQ,KAAMzT,EAA8DoD,EAA9DpD,UAAWsZ,EAAmDlW,EAAnDkW,QAASC,EAA0CnW,EAA1CmW,kBAAmBC,EAAuBpW,EAAvBoW,UAAWrO,EAAY/H,EAAZ+H,QAEhE,EAAkClO,oBAAkB,GAApD,mBAAO8a,EAAP,KAAkB0B,EAAlB,KACA,EAAgDxc,oBAAkB,GAAlE,mBAAO2c,EAAP,KAAyBC,EAAzB,KAEMqN,EAAgBpjB,iBAAO,IAE7B,EAA0C7G,mBA9CjB,SAAC+C,GAC1B,OAAOA,EAAUkC,UAAU4H,KAAI,SAAC6c,GAAD,MAA2C,MA6CKQ,CAAqBnnB,IAApG,mBAAOonB,EAAP,KAAsBC,EAAtB,KACA,EAAwDpqB,oBAAkB,GAA1E,mBAAOqqB,EAAP,KAA6BC,EAA7B,KACA,EAAoDtqB,qBAApD,mBAAOuqB,EAAP,KAA2BC,EAA3B,KACA,EAA4CxqB,mBAAiBiiB,GAAalf,EAAUkC,UAAWuR,IAA/F,mBAAOmM,EAAP,KAAuBC,EAAvB,KAEA,EAAsB/F,aAASC,IAAxBC,EAAP,oBACA,EAAwBF,aAASG,IAA1BC,EAAP,oBAEMjT,EAAUT,KAEhBpH,qBAAU,WACNygB,EAAkBX,GAAalf,EAAUkC,UAAWuR,MACrD,CAACzT,EAAUkC,YAEd,IAaMyY,EAAa,SAACC,GAChBnB,GAAa,GACbI,GAAoB,GAEhBe,EACAZ,IAEAE,IAGJ5B,YAAW,WACHsC,EACIpB,GACAA,IAGArO,GACAA,MAGT,MAsFDuc,EAAuB,SAACvD,EAAkBwD,GAC5C,OAAO/D,GACHF,GAAcS,GACT5H,MAAMoL,EAAWhD,aAAcgD,EAAWhD,aAAegD,EAAW9C,aA8DjF,OACI,eAACnT,GAAA,EAAD,CAAM3S,QAAQ,WAAWuI,UAAWL,EAAQyL,KAA5C,UACI,qBAAKpL,UAAWL,EAAQ8R,eAAxB,SACI,cAAC,GAAD,CACItF,KAAMA,EACNlS,SAAUvB,EAAUuB,SACpB9C,SAAUuB,EAAUM,OAAOE,iBAC3BwE,SA/LU,SAAC6V,GACnBtB,GACAA,EAAkB,2BACXvZ,GADU,IAEbuB,SAAUsZ,UA8Ld,qBAAKvT,UAAWL,EAAQgS,gBAAxB,SACI,eAACjV,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,SAASgC,UAAWL,EAAQyP,WAApD,UACI,cAAC1S,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAWL,EAAQyP,WAArC,SAEmB,MAAX4C,IAAoBA,EAAQzS,iBACxB,cAAC,GAAD,CACI4M,KAAMA,EACNqE,KAAM9X,EAAUM,OAAOC,UACvBwX,UAAWA,EACXC,SAlMV,WAClB2C,GAAW,QAsMC,eAAC3W,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAWL,EAAQyP,WAArC,UAEQ8Q,GACI,cAAC,GAAD,CACI3hB,KAAMyhB,EACN/oB,KACImpB,EACI1nB,EAAUkC,UAAUslB,EAAmB,IAAIjpB,KAC3CyB,EAAUkC,UAAUslB,EAAmB,IAAIrlB,kBAAkBqlB,EAAmB,KAGxFtB,WACIlmB,EAAUkC,UAAUslB,EAAmB,IAClCrlB,kBAAkBqlB,EAAmB,IAAI3B,aAElDxiB,SAnIF,SAACukB,GAC3B,GAAIrO,GAAqBiO,EAAoB,CACzC,IAAMK,EAAmB7nB,EAAUkC,UAAU4H,KAAI,SAC7C6c,EACAC,GAF6C,OAG5CA,IAAgBY,EAAmB,GAAKb,EAAxC,2BAEMA,GAFN,IAGGxkB,kBAAmBwkB,EAAUxkB,kBAAkB2H,KAAI,SAC/C+c,EACAiB,GAF+C,OAG9CA,IAAuBN,EAAmB,GAAKX,EAA/C,2BAEMA,GAFN,IAGGhB,aAAa,YAAK+B,aAKlCrO,EAAkB,2BACXvZ,GADU,IAEbkC,UAAW2lB,KAGnBN,GAAwB,IA4GIjkB,SAAU,WAAQikB,GAAwB,MAItD,cAACvH,GAAA,EAAD,CAAaC,QAASC,KAAtB,SACI,eAAClc,EAAA,EAAD,CACIC,WAAS,EACTE,QAAS,EACTD,UAAU,SACVoD,UAAWL,EAAQyP,WAJvB,WAQYjD,IAAS3D,GAAc4F,QACvB1V,EAAUM,OAAOiQ,aAAerN,GAAW6kB,WAE3C,cAAC/jB,EAAA,EAAD,CACII,MAAI,EAEJkD,UAAWL,EAAQ+X,iBAHvB,SAKI,cAAChb,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAGmB,QAAQ,eAAe4E,WAAW,SAA9D,SAEQ0V,EAAe9V,KAAI,SAAC2U,GAAD,OAtGjD,SAACra,GACf,IAAM7F,EAAOmpB,EACTtjB,EAAK2iB,aACL3iB,EAAK4iB,kBAGT,OAAOI,EAAc1lB,MAAK,SAACsmB,GAAD,OACtBA,EAAgBtmB,MAAK,SAACumB,GAAD,OACjBA,EAAgB5qB,QAAUkB,QA8FgDuhB,CAAUrB,IAC5C,cAACza,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAAC,GAAD,CACI9B,KAAMolB,EACFjJ,EAAOsI,aACPtI,EAAOuI,kBAGX7a,MAAO,CAAC1N,SAAUuB,EAAUM,OAAOgQ,cACnC2M,WACIxJ,IAAS3D,GAAc4F,OACnB,cAACrL,EAAA,EAAD,CACI6F,KAAK,QACLzK,QAAS,WA7KjD,IAACmhB,EAAqBsB,EAArBtB,EA+K+CnI,EAAOmI,YA/KjCsB,EAgL0BzJ,EAAOqI,oBA/KnFW,EAAsB,CAACb,EAAasB,IACpCX,GAAwB,IAyKwC,SASI,cAAC7c,EAAA,EAAD,gCAEJf,GApBZ,mBAKqB8U,EAAOmI,YAL5B,YAK2CnI,EAAOuI,iBAAiBrC,gBANvE,mBAA4BlG,EAAOmI,YAAnC,YAAkDnI,EAAOuI,iBAAiBrC,sBA+BlG,cAAC3gB,EAAA,EAAD,CACII,MAAI,EACJC,IAAE,EAFN,SAII,cAACL,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASoB,QAAQ,eAAegC,UAAS,UAAKL,EAAQxC,UAAb,YAA0BwC,EAAQyP,YAArG,SAEQ1W,EAAUkC,UAAU4H,KAAI,SACpB6c,EACAC,GAFoB,OAIpB,cAAC5iB,EAAA,EAAD,CACII,MAAI,EADR,SAII,cAAC,GAAD,CACIqP,KAAMA,EACN0Q,SAAUwC,EACVpW,WAAYvQ,EAAUM,OAAOiQ,WAC7BwE,YAAa6E,EACbnb,SAAUuB,EAAUM,OAAOgQ,aAC3B8T,iBAAkB,SACd+D,GADc,OAvQzC,SAACA,EAA4CvB,GACtE,GAAIrN,EAAmB,CACnB,IAAMsO,EAAmB7nB,EAAUkC,UAAU4H,KAAI,SAC7C6c,EACAvT,GAF6C,OAG5CA,IAAQwT,EAAcuB,EAAkBxB,KAC7CpN,EAAkB,2BACXvZ,GADU,IAEbkC,UAAW2lB,MAiQkCO,CAAqBD,EAAiBvB,IAC3CvC,iBAAkB,YArOzC,SAACuC,GAC1B,GAAIrN,EAAmB,CACnB,IAAMsO,EAAmB7nB,EAAUkC,UAC9BiM,QAAO,SAACwY,EAAsCvT,GAAvC,OAAuDA,IAAQwT,KAC3ErN,EAAkB,2BACXvZ,GADU,IAEbkC,UAAW2lB,KAEfR,EAAiBD,EAAcjZ,QAC3B,SAACka,EAA0CjV,GAA3C,OAA2DA,IAAQwT,OA4ND0B,CAAqB1B,IAC/CtC,gBAAiB,SAAC1H,IAjLzC,SAACgK,EAAqBhK,GAC/C+I,QAAQC,IAAIhJ,GACZ,IAAM2L,EAAenB,EAActd,KAAI,SAACue,EAA0CjV,GAA3C,OACnCA,IAAQwT,EAAR,YAA0BhK,GAA1B,YAAwCyL,MAE5ChB,EAAiBkB,GA6KmCC,CAAqB5B,EAAahK,OAf9C,mBAEqBgK,WAsBjCnT,IAAS3D,GAAc4F,QACnB,cAAC1R,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAU2iB,EACVnoB,QAAQ,WACRoN,MAAO,CAACnG,MAAO,QACfgO,WACI,CACI7H,MAAO,CACH1N,SAAUuB,EAAUM,OAAOgQ,aAC3B9K,MAAO,YAInBhB,MAAM,cACNoa,WArQb,SAAC3Z,GACX,UAAbA,EAAI4Z,MAAoD,KAAhCqI,EAAcllB,QAAQ3E,OAnBlC,WAChB,GAAIkc,EAAmB,CACnB,IAAMkP,EAAyC,CAC3ClqB,KAAM2oB,EAAcllB,QAAQ3E,MAC5B8E,kBAAmB,IAEvBoX,EAAkB,2BACXvZ,GADU,IAEbkC,UAAU,GAAD,mBAAMlC,EAAUkC,WAAhB,CAA2BumB,OAExCpB,EAAiB,GAAD,mBACTD,GADS,CAEZ,MAGRF,EAAcllB,QAAQ3E,MAAQ,GAK1BqrB,gBA2QQ,cAAC1kB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAG8H,MAAO,CAAEkH,OAAQ,QAAU/L,UAAWL,EAAQmS,UAAhE,SAEQ,eAACzB,GAAA,EAAD,CACI5Y,QAAQ,WACRmR,KAAK,QACL1K,MAAM,UACNuV,SAAUtH,IAAS3D,GAAc4F,SA/MlD1V,EAAUkC,UACZJ,QAAO,SAACC,EAAcC,EAAoC4kB,GAAnD,OACJ7kB,GACGC,EAAQG,kBAAkB9C,SAAW+nB,EAAcR,GAAavnB,QAChE+nB,EAAcR,GAAa+B,OAAM,SAACC,GAAD,OACpB,MAAZA,EAAGvrB,OAA8B,KAAburB,EAAGvrB,YAE5B,GAyMiBoI,QAAS,YAzLZ,WACrB,IAAMsU,EAAU/Z,EAAUkC,UAAUJ,QAChC,SAAC+mB,EAAuBC,EAA4ClC,GAChE,IAAMpC,EAAkBd,GAAcoF,EAAgBvqB,MAChDwqB,EAAqBD,EAAgB3mB,kBAAkBL,QACzD,SAACknB,EAAyBC,EAAgDC,GACtE,IAAMC,EAAe/B,EAAcR,GAC9B/Y,MAAK,SAAC5L,GAAD,OAAsCA,EAAS2iB,YAAcsE,KAEvE,OAAuB,MAAhBC,GAAwBH,IAC3BpF,GAAaY,EAAMjI,MACf0M,EAAkBtE,aAClBsE,EAAkBtE,aAAesE,EAAkBpE,eAFvD,OAGOsE,QAHP,IAGOA,OAHP,EAGOA,EAAc9rB,QAClB4rB,EAAkBpD,aAAa7K,QAAQmO,EAAa9rB,QAAU,MAGzE,GAEJ,OAAOwrB,GAAgBE,KAE3B,GAEJpO,EAAWZ,GAkK8BkB,IALrB,UAOI,cAACvQ,EAAA,EAAD,oBAPJ,QAOoC,OAAP4O,QAAO,IAAPA,OAAA,EAAAA,EAAS9V,YAAa1D,EAASsF,GAAK,QAAU,yB,UCpcjGoB,GAAYC,YAAW,CACzBhC,UAAW,CACPuB,MAAO,UASFojB,GAA4D,SAAChmB,GACtE,IAAQ9C,EAA2B8C,EAA3B9C,OAAQ8a,EAAmBhY,EAAnBgY,eAEhB,EAAgCne,mBAAkCqD,GAAlE,mBAAO+a,EAAP,KAAiBC,EAAjB,KAEMC,EAAiBzX,iBAAO,IACxB0X,EAAwB1X,iBAAO,IAC/BulB,EAAoBvlB,iBAAO,IAC3BwlB,EAAkBxlB,iBAAO,IAEzBmD,EAAUT,KAEhBpH,qBAAU,WACNkc,EAAYhb,KACb,CAACA,IAEJ,IAAMub,EAA8B,SAACC,EAAmBze,GACpD,IAAM0e,EAAS,2BACRV,GADQ,mBAEVS,EAAYze,IAEjBie,EAAYS,GACRX,GACAA,EAAeW,IAIvB,OACI,eAAC/X,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAS,EAA5C,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACtF,EAAA,EAAD,CAAYC,QAAQ,KAApB,gCAEJ,cAACiF,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAUgX,EACVpb,KAAK,SACLqE,MAAM,iCACNqP,WAAY,CAAEmI,IAAK,IACnB3e,MAAOge,EAAS9a,UAChBiF,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,YAAaI,SAASV,EAAevZ,QAAQ3E,aAGlG,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAUiX,EACVrb,KAAK,SACLqE,MAAM,mCACNqP,WAAY,CAAEmI,IAAK,GACnB3e,MAAOge,EAAS7a,iBAChBgF,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,mBAAoBI,SAAST,EAAsBxZ,QAAQ3E,aAGhH,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACE,GAAA,EAAD,CACIC,SAAU8kB,EACVlpB,KAAK,SACLqE,MAAM,sCACNqP,WAAY,CAAEmI,IAAK,GACnB3e,MAAOge,EAAS/K,aAChB9K,MAAM,YACN8B,UAAWL,EAAQxC,UACnBC,QAAS,WAAQmX,EAA4B,eAAgBI,SAASoN,EAAkBrnB,QAAQ3E,aAGxG,cAAC2G,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,eAACmlB,GAAA,EAAD,CAAajiB,UAAWL,EAAQxC,UAAhC,UACI,cAACE,GAAA,EAAD,gCACA,eAACE,GAAA,EAAD,CACIN,SAAU+kB,EACV9kB,MAAM,oBACNnH,MAAOge,EAAS9K,WAChB/K,MAAM,YACN8B,UAAWL,EAAQxC,UACnBO,SAAU,SAACC,GACP4W,EAA4B,aAAc5W,EAAIE,OAAO9H,QAP7D,UAUI,cAACgI,EAAA,EAAD,CAAUhI,MAAO6F,GAAWsN,QAA5B,yBACA,cAACnL,EAAA,EAAD,CAAUhI,MAAO6F,GAAW6kB,SAA5B,qCC3FlBvhB,GAAYC,YAAW,CACzBiQ,WAAY,CACRrD,OAAQ,UASHmW,GAAsE,SAC/EpmB,GAEA,IAAQpD,EAAiCoD,EAAjCpD,UAAWuZ,EAAsBnW,EAAtBmW,kBAEbtS,EAAUT,KAchB,OACI,eAACxC,EAAA,EAAD,CAAMC,WAAS,EAACqD,UAAWL,EAAQyP,WAAYvS,QAAS,EAAxD,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIiD,UAAWL,EAAQyP,WAAtC,SACI,cAAC,GAAD,CACIjD,KAAM3D,GAAc4F,OACpB1V,UAAWA,EACXuZ,kBAlBe,SAAC6C,GAC5B7C,EAAkB6C,QAoBd,cAACpY,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAWL,EAAQyP,WAArC,SACI,cAAC,GAAD,CAAsBpW,OAAQN,EAAUM,OAAQ8a,eAlBjC,SAAC9a,GACxB,IAAM8b,EAAmC,2BAClCpc,GADkC,IAErCM,WAEJiZ,EAAkB6C,YCjBpB5V,GAAYC,aAAW,iBAAO,CAChCiQ,WAAY,CACRrD,OAAQ,YASHoW,GAAsD,SAACrmB,GAChE,IAAQpD,EAAiCoD,EAAjCpD,UAAWuZ,EAAsBnW,EAAtBmW,kBAEbtS,EAAUT,KAEVkjB,EAAwB,SAACtN,GAC3B7C,EAAkB6C,IAGtB,OACI,cAACpY,EAAA,EAAD,CAAMC,WAAS,EAACqD,UAAWL,EAAQyP,WAAnC,SACI,eAAC1S,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,WAEiB,OAATrE,QAAS,IAATA,OAAA,EAAAA,EAAWG,QAASzD,EAAc+D,cAE9B,cAAC,GAAD,CACIT,UAAWA,EACXuZ,kBAAmBmQ,KAKlB,OAAT1pB,QAAS,IAATA,OAAA,EAAAA,EAAWG,QAASzD,EAAcoE,aAE9B,cAAC,GAAD,CACId,UAAWA,EACXuZ,kBAAmBmQ,KAKlB,OAAT1pB,QAAS,IAATA,OAAA,EAAAA,EAAWG,QAASzD,EAAcqE,UAE9B,cAAC,GAAD,CACIf,UAAWA,EACXuZ,kBAAmBmQ,KAKlB,OAAT1pB,QAAS,IAATA,OAAA,EAAAA,EAAWG,QAASzD,EAAcuE,MAE9B,cAAC,GAAD,CACIjB,UAAWA,EACXuZ,kBAAmBmQ,KAKlB,OAAT1pB,QAAS,IAATA,OAAA,EAAAA,EAAWG,QAASzD,EAAcwE,UAE9B,cAAC,GAAD,CACIlB,UAAWA,EACXuZ,kBAAmBmQ,KAKlB,OAAT1pB,QAAS,IAATA,OAAA,EAAAA,EAAWG,QAASzD,EAAcyE,WAE9B,cAAC,GAAD,CACInB,UAAWA,EACXuZ,kBAAmBmQ,U,oBC1EzCljB,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrC6Y,WAAY,CACRrD,OAAQ,QAEZ5O,UAAW,CACPuB,MAAO,QAEX2jB,cAAe,CACXC,aAAc,OACdvW,OAAQ,OACRrN,MAAO,OACP+K,SAAU,UAEd8Y,oBAAqB,CACjBxW,OAAQ,oBACRrN,MAAO,OACP2M,UAAW,OACXmX,UAAW,SACXC,UAAW,OACX,uBAAwB,CACpB/jB,MAAO,SAEX,6BAA8B,CAC1BgkB,UAAW,mCACXC,gBAAiB,oCAErB,6BAA8B,CAC1Bpd,gBAAiBvP,EAAeE,MAChC0sB,QAAS,wBAGjBC,kBAAmB,CACfxd,SAAU,OASLyd,GAA4C,SAAChnB,GACtD,IAAQmH,EAAsBnH,EAAtBmH,UAAWC,EAAWpH,EAAXoH,OAEnB,EAAkCvL,IAA1B/B,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,YAElB,EAAwBF,mBAAe,CACnCiD,GAAIyF,eACJrD,KAAM,qBACNiB,YAAa,GACbC,SAAU1D,EAAS2D,GACnBR,WAAY,KALhB,mBAAOD,EAAP,KAAaqnB,EAAb,KAQA,EAAsCptB,oBAAkB,GAAxD,mBAAO4V,EAAP,KAAoByX,EAApB,KACA,EAAkDrtB,qBAAlD,mBAAO8V,EAAP,KAA0BC,EAA1B,KACA,EAAgC/V,mBAA6B,MAA7D,mBAAOmM,EAAP,KAAiBmhB,EAAjB,KACA,EAAgDttB,qBAAhD,mBAAOutB,EAAP,KAAyBC,EAAzB,KACA,EAAoExtB,oBAAkB,GAAtF,mBAAOytB,EAAP,KAAmCC,EAAnC,KAEM1jB,EAAUT,KAEhBpH,qBAAU,WACN,IAAMgJ,EAAUlL,EAAS2Q,MAAK,SAACC,GAAD,OAAuBA,EAAS5N,KAAOqK,KACrE,GAAe,MAAXnC,EAAiB,CACjB,IAAMpF,EAAOoF,EAAQwB,MAAMiE,MAAK,SAAC9D,GAAD,OAAiBA,EAAM7J,KAAOsK,KAClD,MAARxH,IACAqnB,EAAQrnB,GACJA,EAAKC,WAAW5D,OAAS,GAErB2T,EADqB,MAArBD,EACqB/P,EAAKC,WAAW,GAEhB,eAAK8P,QAK3C,CAAC7V,EAAUqN,EAAWC,IAEzB,IAaMogB,EAAgC,SAACzqB,GACnC,IAAM0qB,ErCKqB,SAAC1qB,GAChC,IAAM2qB,EAA8B,CAChC5qB,GAAIyF,eACJxF,OACAoB,SAAU,GACVjB,OAAQ6P,GAA0BhQ,IAGtC,OAAQA,GACJ,KAAKzD,EAAc+D,aACf,OAAO,2BACAqqB,GADP,IAEIrpB,SAAU,CAAC,CACPtB,KAAMxD,EAAYiF,KAClB2U,KAAM,KAEV1U,QAAS,CACL,CAAEtD,KAAM,GAAI8C,OAAO,GACnB,CAAE9C,KAAM,GAAI8C,OAAO,GACnB,CAAE9C,KAAM,GAAI8C,OAAO,GACnB,CAAE9C,KAAM,GAAI8C,OAAO,MAG/B,KAAK3E,EAAcoE,YACf,OAAO,2BACAgqB,GADP,IAEIrpB,SAAU,CAAC,CACPtB,KAAMxD,EAAYiF,KAClB2U,KAAM,KAEVqG,QAAQ,IAEhB,KAAKlgB,EAAcsE,MACf,OAAO8pB,EACX,KAAKpuB,EAAcqE,SACf,OAAO,2BACA+pB,GADP,IAEI5oB,UAAW,KAEnB,KAAKxF,EAAcuE,KACf,OAAO,2BACA6pB,GADP,IAEI1oB,MAAO,CAAC,GAAI,GAAI,GAAI,GAAI,MAEhC,KAAK1F,EAAcwE,SACf,OAAO,2BACA4pB,GADP,IAEIzoB,OAAQ,CACJ,CAAEC,KAAM,GAAIF,MAAQ,IACpB,CAAEE,KAAM,GAAIF,MAAQ,IACpB,CAAEE,KAAM,GAAIF,MAAQ,OAGhC,KAAK1F,EAAcyE,UACf,OAAO,2BACA2pB,GADP,IAEI1oB,MAAO,CACH,CAAC,CAAE7D,KAAM,GAAI8jB,QAAQ,GAAQ,CAAE9jB,KAAM,GAAI8jB,QAAQ,GAAQ,CAAE9jB,KAAM,GAAI8jB,QAAQ,IAC7E,CAAC,CAAE9jB,KAAM,GAAI8jB,QAAQ,GAAQ,CAAE9jB,KAAM,GAAI8jB,QAAQ,GAAQ,CAAE9jB,KAAM,GAAI8jB,QAAQ,IAC7E,CAAC,CAAE9jB,KAAM,GAAI8jB,QAAQ,GAAQ,CAAE9jB,KAAM,GAAI8jB,QAAQ,GAAQ,CAAE9jB,KAAM,GAAI8jB,QAAQ,OAGzF,QACI,OAAOyI,GqCpEqBC,CAAoB5qB,GAC9C6N,EAAkB9Q,EAAS4M,KAAI,SAACgE,GAClC,GAAIA,EAAS5N,KAAOqK,EAChB,OAAO,eAAKuD,GAEhB,IAAMG,EAAeH,EAASlE,MAAME,KAAI,SAACC,GACrC,OAAIA,EAAM7J,KAAOsK,EACN,eAAKT,GAET,2BACAA,GADP,IAEI9G,WAAW,GAAD,mBAAM8G,EAAM9G,YAAZ,CAAwB4nB,SAG1C,OAAO,2BACA/c,GADP,IAEIlE,MAAM,YAAKqE,QAGnB9Q,EAAY6Q,GACZgF,EAAqB6X,GACrBN,EAAY,OAGVS,EAA8B,WAChCT,EAAY,OAkEhB,OACI,eAAC,WAAD,WACI,cAAC,GAAD,CACI1kB,KAAM6kB,EACNnsB,KAAK,8CACLyH,MAAM,KACNC,UAxCyB,WACjC,IAAM+H,EAAkB9Q,EAAS4M,KAAI,SAACgE,GAClC,GAAIA,EAAS5N,KAAOqK,EAChB,OAAOuD,EAEX,IAAMG,EAAeH,EAASlE,MAAME,KAAI,SAACC,GACrC,GAAIA,EAAM7J,KAAOsK,EACb,OAAOT,EAEX,IAAMkhB,EAAoBlhB,EAAM9G,WAAWkL,QAAO,SAC9CgF,GAD8C,OAE7CA,EAAWjT,MAAX,OAAkBsqB,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAkBtqB,OACzC,OAAO,2BACA6J,GADP,IAEI9G,WAAW,YAAKgoB,QAGxB,OAAO,2BACAnd,GADP,IAEIlE,MAAM,YAAKqE,QAGnB9Q,EAAY6Q,GACZ2c,GAA8B,IAkBtBzkB,SAfwB,WAChCykB,GAA8B,MAgB1B,eAAC3mB,EAAA,EAAD,CAAMC,WAAS,EAACqD,UAAWL,EAAQyP,WAAYvS,QAAS,EAAxD,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAWL,EAAQ0iB,cAArC,SACI,eAAC3lB,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASoD,UAAWL,EAAQyP,WAAtD,UACI,cAAC1S,EAAA,EAAD,CAAMI,MAAI,EAACkD,UAAWL,EAAQxC,UAA9B,SACI,eAACT,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,gBAAgB4E,WAAW,SAAnD,UACI,cAAClG,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACtF,EAAA,EAAD,CAAYC,QAAQ,KAApB,yBAEJ,cAACiF,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,eAACJ,EAAA,EAAD,CAAMC,WAAS,EAACqB,QAAQ,WAAW4E,WAAW,SAA9C,UACI,cAAClG,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,eAAC8mB,GAAA,EAAD,CAAmBhb,KAAK,QAAQ7S,MAAOwV,EAAasY,WAAS,EAACnmB,SAxBzE,SAACwG,EAAsC4f,GAChEd,EAAec,IAuBqB,UACI,cAACC,GAAA,EAAD,CAAchuB,OAAO,EAArB,SACI,cAACqN,EAAA,EAAD,yBAEJ,cAAC2gB,GAAA,EAAD,CAAchuB,OAAO,EAArB,SACI,cAACqN,EAAA,EAAD,6BAIZ,eAAC1G,EAAA,EAAD,CAAMI,MAAI,EAAV,UACI,cAACiG,EAAA,EAAD,CAAY5E,QA9HhB,SAAC+F,GACjC+e,EAAY/e,EAAMZ,gBA6HkB,SACI,cAACF,EAAA,EAAD,CAAMlF,MAAM,UAAZ,0BAEJ,eAAC2D,EAAA,EAAD,CACIjJ,GAAG,qBACHkJ,SAAUA,EACVC,aAAW,EACXxD,KAAMyD,QAAQF,GACdG,QAASyhB,EALb,UAOI,eAAC3lB,EAAA,EAAD,CAAUI,QAAS,WACfmlB,EAA8BluB,EAAc+D,eADhD,UAGI,cAAC6qB,GAAA,EAAD,UAAerb,GAAqBvT,EAAc+D,aAAc,WAChE,cAAC3B,EAAA,EAAD,CAAYC,QAAQ,SAApB,SACKgR,GAA4BrT,EAAc+D,mBAGnD,eAAC4E,EAAA,EAAD,CAAUI,QAAS,WACfmlB,EAA8BluB,EAAcoE,cADhD,UAGI,cAACwqB,GAAA,EAAD,UAAerb,GAAqBvT,EAAcoE,YAAa,WAC/D,cAAChC,EAAA,EAAD,CAAYC,QAAQ,SAApB,SACKgR,GAA4BrT,EAAcoE,kBAGnD,eAACuE,EAAA,EAAD,CAAUI,QAAS,WACfmlB,EAA8BluB,EAAcqE,WADhD,UAGI,cAACuqB,GAAA,EAAD,UAAerb,GAAqBvT,EAAcqE,SAAU,WAC5D,cAACjC,EAAA,EAAD,CAAYC,QAAQ,SAApB,SACKgR,GAA4BrT,EAAcqE,eAGnD,eAACsE,EAAA,EAAD,CAAU0V,UAAQ,EAACtV,QAASulB,EAA5B,UACI,cAACM,GAAA,EAAD,UAAerb,GAAqBvT,EAAcsE,MAAO,WACzD,cAAClC,EAAA,EAAD,CAAYC,QAAQ,SAApB,SACKgR,GAA4BrT,EAAcsE,YAGnD,eAACqE,EAAA,EAAD,CAAU0V,UAAQ,EAACtV,QAASulB,EAA5B,UACI,cAACM,GAAA,EAAD,UAAerb,GAAqBvT,EAAcuE,KAAM,WACxD,cAACnC,EAAA,EAAD,CAAYC,QAAQ,SAApB,SACKgR,GAA4BrT,EAAcuE,WAGnD,eAACoE,EAAA,EAAD,CAAUI,QAAS,WACfmlB,EAA8BluB,EAAcwE,WADhD,UAGI,cAACoqB,GAAA,EAAD,UAAerb,GAAqBvT,EAAcwE,SAAU,WAC5D,cAACpC,EAAA,EAAD,CAAYC,QAAQ,SAApB,SACKgR,GAA4BrT,EAAcwE,eAGnD,eAACmE,EAAA,EAAD,CAAUI,QAAS,WACfmlB,EAA8BluB,EAAcyE,YADhD,UAGI,cAACmqB,GAAA,EAAD,UAAerb,GAAqBvT,EAAcyE,UAAW,WAC7D,cAACrC,EAAA,EAAD,CAAYC,QAAQ,SAApB,SACKgR,GAA4BrT,EAAcyE,gBAGnD,eAACkE,EAAA,EAAD,CAAU0V,UAAQ,EAACtV,QAASulB,EAA5B,UACI,cAACM,GAAA,EAAD,UAAerb,GAAqBvT,EAAcsT,UAAW,WAC7D,cAAClR,EAAA,EAAD,CAAYC,QAAQ,SAApB,SACKgR,GAA4BrT,EAAcsT,gBAGnD,eAAC3K,EAAA,EAAD,CAAU0V,UAAQ,EAACtV,QAASulB,EAA5B,UACI,cAACM,GAAA,EAAD,UAAerb,GAAqBvT,EAAc0E,UAAW,WAC7D,cAACtC,EAAA,EAAD,CAAYC,QAAQ,SAApB,SACKgR,GAA4BrT,EAAc0E,gCAS3E,cAAC4C,EAAA,EAAD,CAAMI,MAAI,EAACkD,UAAWL,EAAQ4iB,oBAA9B,SACI,cAAC,GAAD,CACI5mB,WAAYD,EAAKC,WACjB4P,YAAaA,EACbxB,SAAU0B,EACVD,SA5NE,SAAC9S,GAC3BgT,EAAqBhT,IA4NGuR,SAzNE,SAACvR,GAC3ByqB,EAAoBzqB,GACpB2qB,GAA8B,aA4NtB,cAAC3mB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SAEQ0O,GACI,cAAC,GAAD,CACI/S,UAAW+S,EACXwG,kBA7LE,SAAC6C,GAC3B,IAAMpO,EAAkB9Q,EAAS4M,KAAI,SAACgE,GAClC,GAAIA,EAAS5N,KAAOqK,EAChB,OAAOuD,EAEX,IAAMG,EAAeH,EAASlE,MAAME,KAAI,SAACC,GACrC,GAAIA,EAAM7J,KAAOsK,EACb,OAAO,eAAKT,GAEhB,IAAMkhB,EAAoBlhB,EAAM9G,WAAW6G,KAAI,SAACqJ,GAC5C,OAAIA,EAAWjT,KAAOkc,EAAiBlc,GAC5B,eAAKiT,GAET,eAAKiJ,MAEhB,OAAO,2BACArS,GADP,IAEI9G,WAAW,YAAKgoB,QAGxB,OAAO,2BACAnd,GADP,IAEIlE,MAAM,YAAKqE,QAGnB9Q,EAAY6Q,GACZgF,EAAqB,eAAKoJ,gBC9J5B5V,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrC6Y,WAAY,CACRrD,OAAQ,YAIHkY,GAAW,WACpB,MAA8BC,cAAtBjhB,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OAEbvD,EAAUT,KAEhB,OACI,cAACxC,EAAA,EAAD,CACIC,WAAS,EACTqB,QAAQ,SACRgC,UAAWL,EAAQyP,WAHvB,SAKI,cAAC1S,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIiD,UAAWL,EAAQyP,WAAtC,SACI,cAAC,GAAD,CACInM,UAAWA,EACXC,OAAQA,SCTtBhE,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrC6Y,WAAY,CACRrD,OAAQ,YAWHoY,GAAwD,SAACroB,GAClE,IAAQpD,EAA2CoD,EAA3CpD,UAAWsZ,EAAgClW,EAAhCkW,QAASE,EAAuBpW,EAAvBoW,UAAWrO,EAAY/H,EAAZ+H,QAEjClE,EAAUT,KAEVklB,EAAyB,WACvBlS,GACAA,KAIFmS,EAAwB,WACtBxgB,GACAA,KAIR,OACI,cAACnH,EAAA,EAAD,CAAMC,WAAS,EAACqD,UAAWL,EAAQyP,WAAnC,SACI,eAAC1S,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,WAEiB,OAATrE,QAAS,IAATA,OAAA,EAAAA,EAAWG,QAASzD,EAAc+D,cAE9B,cAAC,GAAD,CACIgT,KAAM3D,GAAcoE,KACpBlU,UAAWA,EACXsZ,QAASA,EACTE,UAAWkS,EACXvgB,QAASwgB,KAKR,OAAT3rB,QAAS,IAATA,OAAA,EAAAA,EAAWG,QAASzD,EAAcoE,aAE9B,cAAC,GAAD,CACI2S,KAAM3D,GAAcoE,KACpBlU,UAAWA,EACXsZ,QAASA,EACTE,UAAWkS,EACXvgB,QAASwgB,KAKR,OAAT3rB,QAAS,IAATA,OAAA,EAAAA,EAAWG,QAASzD,EAAcqE,UAE9B,cAAC,GAAD,CACI0S,KAAM3D,GAAcoE,KACpBlU,UAAWA,EACXsZ,QAASA,EACTE,UAAWkS,EACXvgB,QAASwgB,KAKR,OAAT3rB,QAAS,IAATA,OAAA,EAAAA,EAAWG,QAASzD,EAAcwE,UAE9B,cAAC,GAAD,CACIuS,KAAM3D,GAAcoE,KACpBlU,UAAWA,EACXsZ,QAASA,EACTE,UAAWkS,EACXvgB,QAASwgB,KAKR,OAAT3rB,QAAS,IAATA,OAAA,EAAAA,EAAWG,QAASzD,EAAcyE,WAE9B,cAAC,GAAD,CACIsS,KAAM3D,GAAcoE,KACpBlU,UAAWA,EACXsZ,QAASA,EACTE,UAAWkS,EACXvgB,QAASwgB,U,UCnG/BnlB,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrC6U,KAAM,CACF1M,MAAO,OACPqN,OAAQ,OACRmE,OAAQ,YACR3K,gBAAiBhP,EAAME,QAAQC,QAAQR,WAalCouB,GAAsD,SAACxoB,GAChE,IAAQyoB,EAAgFzoB,EAAhFyoB,cAAeC,EAAiE1oB,EAAjE0oB,gBAAiBC,EAAgD3oB,EAAhD2oB,oBAAqBvoB,EAA2BJ,EAA3BI,SAAUwoB,EAAiB5oB,EAAjB4oB,MAAOC,EAAU7oB,EAAV6oB,MAExEhlB,EAAUT,KAMhB,OAJApH,qBAAU,WACNkZ,YAAW,WAAQ2T,MAAoB,IAARD,KAChC,IAGC,eAAChoB,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASoB,QAAQ,SAAS4E,WAAW,SAAS/F,QAAS,EAAGmD,UAAWL,EAAQyL,KAAvG,UACI,cAAC1O,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACtF,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAEQgR,GAA4B8b,EAAeroB,OAIvD,cAACQ,EAAA,EAAD,CAAMI,MAAI,EAAC+H,MAAO,CAACnG,MAAO,QAA1B,SACI,cAACkmB,GAAA,EAAD,CAAgB1mB,MAAM,gBAE1B,cAACxB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACtF,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAEQyE,IAAa1D,EAASsF,GAAtB,mBACgB0mB,EAAgB/mB,WADhC,eACiDgnB,EAAoBhnB,YADrE,mBAGgB+mB,EAAgB/mB,WAHhC,eAGiDgnB,EAAoBhnB,oBC9CvFyB,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrC6U,KAAM,CACFW,OAAQ,OACRmE,OAAQ,aAEZ2U,SAAU,CACNC,UAAW,kBAEfC,yBAA0B,CACtBvY,UAAW,OACXnN,QAAS,OAEb2lB,gBAAiB,CACbF,UAAW,gBACXzlB,QAAS,WAEb4lB,aAAc,CACVH,UAAW,qBAWNI,GAAwC,SAACppB,GAClD,IAAQJ,EAA4CI,EAA5CJ,KAAMypB,EAAsCrpB,EAAtCqpB,QAASC,EAA6BtpB,EAA7BspB,WAAYC,EAAiBvpB,EAAjBupB,aAE7B1lB,EAAUT,KAEhB,OACI,eAACxC,EAAA,EAAD,CAAMC,WAAS,EACXC,UAAU,SACVoD,UAAWL,EAAQyL,KACnBpN,QAAQ,SACR4E,WAAW,SACX/F,QAAS,EALb,UAOI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACtF,EAAA,EAAD,CAAYC,QAAQ,KAApB,SACKiE,EAAKV,SAGd,cAAC0B,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACtF,EAAA,EAAD,CAAYC,QAAQ,KAApB,SACKiE,EAAKO,gBAGd,cAACS,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACtF,EAAA,EAAD,CAAYC,QAAQ,KAApB,mBAEWiE,EAAKQ,WAAa1D,EAASsF,GAAK,kBAAoB,uBAF/D,aAE0FqnB,EAAQte,QAAO,SAACye,GAAD,OAAsBA,KAASvtB,OAFxI,YAEkJotB,EAAQptB,YAI9J,eAAC2E,EAAA,EAAD,CAAMI,MAAI,EAACH,WAAS,EAACqB,QAAQ,SAAS4E,WAAW,SAAS/F,QAAS,EAAnE,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,eAACmB,EAAA,EAAD,CAAQxG,QAAQ,YAAYyG,MAAM,UAAUC,QAASinB,EAArD,UACI,cAAChiB,EAAA,EAAD,8BADJ,OAGM1H,EAAKQ,WAAa1D,EAASsF,GAAK,kBAAoB,sCAG9D,cAACpB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,eAACmB,EAAA,EAAD,CAAQxG,QAAQ,YAAYyG,MAAM,UAAUC,QAASknB,EAArD,UACI,cAACjiB,EAAA,EAAD,qBADJ,OAGM1H,EAAKQ,WAAa1D,EAASsF,GAAK,cAAgB,mCC/DpEoB,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrC6Y,WAAY,CACRrD,OAAQ,QAEZ+F,UAAW,CACPxR,QAAS,OACTuJ,eAAgB,SAChBjH,WAAY,cAcP2iB,GAAsB,WAC/B,MAA8BrB,cAAtBjhB,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OACbjC,EAAUC,cAERtL,EAAa+B,IAAb/B,SACR,EAAsBD,mBbXM,SAAC6vB,GAC7B,IAAMC,EAAkB,MAAVD,EAAG,GAAaA,EAAGvQ,MAAM,GAAKuQ,EACtC7gB,EAAc,GAOpB,OANA8gB,EAAMpJ,MAAM,MAAMc,SAAQ,SAACuI,GACvB,IAAMC,EAAaD,EAAOrJ,MAAM,KAChC1X,EAAOghB,EAAW,IACI,SAAlBA,EAAW,IAAmC,UAAlBA,EAAW,GAAmC,SAAlBA,EAAW,GAAgBA,EAAW,MAG/FhhB,EaEqCihB,CAAiB3kB,EAAQ4kB,SAASC,SAAvEriB,EAAP,oBACA,EAAwB9N,qBAAxB,mBAAO+F,EAAP,KAAaqnB,EAAb,KACA,EAA0DptB,mBAAyB,CAACmW,KAAM,EAAGia,WAAW,IAAxG,mBAAOC,EAAP,KAA8BC,EAA9B,KACA,EAA8BtwB,mBAAoB,IAAlD,mBAAOwvB,EAAP,KAAgBe,EAAhB,KACA,EAAoCvwB,oBAAkB,GAAtD,mBAAO0d,EAAP,KAAmB8S,EAAnB,KAEMxmB,EAAUT,KAEhBpH,qBAAU,WACN,GAAiB,MAAbmL,GAA+B,MAAVC,EAAgB,CACrC,IAAMoD,EAAsB1Q,EAAS2Q,MAAK,SAACC,GAAD,OAAuBA,EAAS5N,KAAOqK,KACjF,GAAkB,MAAdqD,EAAoB,CACpB,IAAM8f,EAA4B9f,EAAWhE,MAAMiE,MAAK,SAAC9D,GAAD,OAAiBA,EAAM7J,KAAOsK,KACvE,MAAXkjB,IACArD,EAAQqD,GACRH,EAAyB,CAACna,IAAK,EAAGia,WAAW,SAI1D,CAAC9iB,EAAWC,IAEf,IAAMmjB,EAAO,WACG,MAAR3qB,IACIsqB,EAAsBD,UACtBE,EAAyB,2BAClBD,GADiB,IAEpBD,WAAW,KAGXC,EAAsBla,IAAMpQ,EAAKC,WAAW5D,OAAS,EACrDkuB,EAAyB,CACrBna,IAAKka,EAAsBla,IAAM,EACjCia,WAAW,KAGfE,EAAyB,CACrBna,KAAM,EACNia,WAAW,IAEfI,GAAc,MAMxBG,EAAiB,SAAChT,GACpB4S,EAAW,GAAD,mBAAKf,GAAL,CAAc7R,KACpB7P,EAAYjE,UACZ6mB,KAcR,OACI,eAAC3pB,EAAA,EAAD,CACIC,WAAS,EACTqB,QAAQ,SACRgC,UAAWL,EAAQyP,WAHvB,UAKI,cAAC1S,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACf,eAACL,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAWL,EAAQyP,WAArC,UAEgB,MAAR1T,GAAgBsqB,EAAsBD,WAAaC,EAAsBla,KAAO,GAC5E,cAAC,GAAD,CACIyY,cAAe7oB,EAAKC,WAAWqqB,EAAsBla,KAAKjT,KAC1D2rB,gBAAiBwB,EAAsBla,IAAM,EAC7C2Y,oBAAqB/oB,EAAKC,WAAW5D,OACrCmE,SAAUR,EAAKQ,SACfwoB,MAAO,EACPC,MAAO0B,IAKP,MAAR3qB,IAAiBsqB,EAAsBD,WAAaC,EAAsBla,KAAO,GAC7E,cAAC,GAAD,CACIpT,UAAWgD,EAAKC,WAAWqqB,EAAsBla,KACjDkG,QAAS,CACL9V,SAAUR,EAAKQ,SACfqD,gBAAiBkE,EAAYlE,iBAEjC2S,UAAW,WAAQoU,GAAe,IAClCziB,QAAS,WAAQyiB,GAAe,MAKhC,MAAR5qB,GAAgB2X,GACZ,cAAC,GAAD,CACI3X,KAAMA,EACNypB,QAASA,EACTC,WAhDD,WACnBnkB,EAAQnI,KAAK,MAgDOusB,aA7CC,WACrBY,EAAyB,CAACna,IAAK,EAAGia,WAAW,IAC7CG,EAAW,IACXC,GAAc,SA+CV,cAACzpB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGiD,UAAS,UAAKL,EAAQyP,WAAb,YAA2BzP,EAAQmS,WAA9D,UAESrO,EAAYjE,UACVwmB,EAAsBla,MAAQqZ,EAAQptB,OAAS,GAE9C,eAACsY,GAAA,EAAD,CACI5Y,QAAQ,WACRmR,KAAK,QACL1K,MAAM,UACNC,QAASkoB,EAJb,WAMS,OAAJ3qB,QAAI,IAAJA,OAAA,EAAAA,EAAMQ,YAAa1D,EAASsF,GAAK,OAAS,YAN/C,OAMiE,cAACsF,EAAA,EAAD,qCC7InFlE,GAAYC,aAAW,SAAC5I,GAAD,MAAY,CACrCgwB,cAAe,CACX7nB,MAAO,OACPqN,OAAQ,OACRzL,QAAS,OACTkmB,cAAe,UAEnBC,gBAAiB,CACb/nB,MAAO,OACPqN,OAAQ,QAEZ2a,QAAS,CACLC,OAAQ,OACR5a,OAAQ,0BAID,SAAS6a,KACpB,IAAMjnB,EAAUT,KAEhB,OACI,cAAC,IAAD,UACI,cAAC2nB,EAAA,EAAD,CAAetwB,MAAOA,EAAtB,SACI,cAAC,EAAD,UACI,sBAAKyJ,UAAWL,EAAQ4mB,cAAxB,UACI,qBAAKvmB,UAAWL,EAAQ8mB,gBAAxB,SACI,cAAC,EAAD,MAEJ,qBAAKzmB,UAAWL,EAAQ+mB,QAAxB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,+BAAZ,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,2BAAZ,SACI,cAAC,GAAD,oBCjDpC,IAYeC,GAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHpBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAACf,GAAD,MAEJhf,SAASggB,eAAe,SAM5BZ,O","file":"static/js/main.3c4edb88.chunk.js","sourcesContent":["export enum ChallengeType {\r\n    SelectAnswer = 'SA',\r\n    TrueOrFalse = 'TF',\r\n    FillGaps = 'FG',\r\n    Match = 'MT',\r\n    Sort = 'SO',\r\n    Classify = 'CL',\r\n    FillTable = 'FT',\r\n    TheOddOne = 'OO',\r\n    Crossword = 'CW'\r\n}","export enum PictureType {\r\n    None = 'NONE',\r\n    Url = 'URL',\r\n    Base64 = 'BASE64'\r\n}","import React, { useState } from 'react';\r\n\r\n/**\r\n * Contexto para almacenar los proyectos importados\r\n */\r\nexport const ProjectContext = React.createContext<any | React.Dispatch<any>>([]);\r\n\r\ntype Props = {\r\n    children: React.ReactNode\r\n}\r\n\r\n/** Proveedor del contexto de proyectos */\r\nexport const ProjectContextProvider = ({ children }: Props) => {\r\n    // Hook para mantener el estado del contexto\r\n    const [projects, setProjects] = useState<any | React.Dispatch<any>>([]);\r\n\r\n    return (\r\n        <ProjectContext.Provider value={{ projects, setProjects }}>\r\n            {children}\r\n        </ProjectContext.Provider>\r\n    );\r\n};\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nexport const colors = {\r\n    primary: {\r\n        main: '#2196f3',\r\n        light: '#6ec6ff',\r\n        dark: '#0069c0'\r\n    },\r\n    secondary: {\r\n        main: '#e91e63',\r\n        light: '#ff6090',\r\n        dark: '#b0003a'\r\n    },\r\n    error: '#f44336',\r\n    background: {\r\n        main: '#2196f3',\r\n        light: '#ffffff',\r\n        dark: '#0069c0'\r\n    },\r\n    font: {\r\n        main: '#000000',\r\n        mainContrast: \"#ffffff\",\r\n        light: '#000000',\r\n        dark: '#888888',\r\n        contrast: '#6ec6ff',\r\n        errorContrast: \"#ffffff\"\r\n    },\r\n    action: \"#4caf50\"\r\n};\r\n\r\nexport const fontSize = {\r\n    s: 10,\r\n    m: 12,\r\n    l: 16\r\n};\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: colors.primary.main,\r\n            contrastText: colors.font.mainContrast,\r\n            light: colors.primary.light\r\n        },\r\n        secondary: {\r\n            main: colors.secondary.main,\r\n            contrastText: colors.font.main,\r\n            light: colors.secondary.light\r\n        },\r\n        background: {\r\n            default: colors.background.main,\r\n            paper: colors.background.light\r\n        },\r\n        error: {\r\n            main: colors.error,\r\n        },\r\n        text: {\r\n            primary: colors.font.main,\r\n            secondary: colors.font.dark\r\n        }\r\n    },\r\n    typography: {\r\n        fontSize: fontSize.m,\r\n    }\r\n});","import React, { Fragment } from 'react';\r\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\r\n\r\nexport const MainHeader: React.FC = () => (\r\n    <Fragment>\r\n        <AppBar position='static'>\r\n            <Toolbar>\r\n                <Typography variant='h5'>\r\n                    !toohaK\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    </Fragment>\r\n);\r\n","import { useContext, useEffect } from 'react';\r\nimport { ProjectContext } from '../context/ProjectContext';\r\nimport { Project } from '../types/Project';\r\n\r\nconst LOCALSTORAGE_KEY = 'projects';\r\n\r\n/**\r\n * Hook para la gestión del mapa\r\n */\r\nexport const useProjects = (): any => {\r\n    // Contexto del mapa\r\n    const { projects, setProjects: saveProjects } = useContext(ProjectContext);\r\n\r\n    useEffect(() => {\r\n        if (projects == null || projects.length === 0) {\r\n            const strProjects = localStorage.getItem(LOCALSTORAGE_KEY);\r\n            if (strProjects != null && strProjects !== '') {\r\n                saveProjects(JSON.parse(strProjects));\r\n            } else {\r\n                saveProjects([]);\r\n            }\r\n        }\r\n    });\r\n\r\n    const setProjects = (newProjects: Project[]) => {\r\n        localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(newProjects));\r\n        saveProjects(newProjects);\r\n    };\r\n\r\n    return { projects, setProjects };\r\n};\r\n","import { ChallengeType } from '../enums/ChallengeType';\r\nimport { PictureType } from '../enums/PictureType';\r\nimport { Challenge, ChallengeConfig, ChallengePicture } from '../types/Challenge';\r\nimport { ClassifyChallenge, ClassifyChallengeGroup } from '../types/ClassifyChallenge';\r\nimport { FillGapsChallenge, FillGapsChallengeSentence } from '../types/FillGapsChallenge';\r\nimport { FillTableChallenge, FillTableChallengeCell } from '../types/FillTableChallenge';\r\nimport { Project } from '../types/Project';\r\nimport { SelectAnswerChallenge, SelectAnswerChallengeAnswer, SelectAnswerChallengeConfig } from '../types/SelectAnswerChallenge';\r\nimport { SortChallenge } from '../types/SortChallenge';\r\nimport { Test } from '../types/Test';\r\n\r\nexport interface Validation {\r\n    valid: boolean,\r\n    errorMessage: string[]\r\n}\r\n\r\nexport const isValidConfig = (type: ChallengeType, config: ChallengeConfig): Validation => {\r\n    const errorMessage: string[] = [];\r\n\r\n    if (config?.timeLimit == null || config?.timeLimit <= 0) { errorMessage.push('El tiempo límite debe ser mayor de 0') ;}\r\n    if (config?.questionFontSize == null || config?.questionFontSize <= 0) { errorMessage.push('El tamaño de fuente del titulo debe ser mayor de 0'); }\r\n\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer: {\r\n            const customConfig = config as SelectAnswerChallengeConfig;\r\n            if (customConfig?.pictureCount == null || customConfig?.pictureCount <= 0) { errorMessage.push('El número de imágenes debe ser mayor de 0'); }\r\n            if (customConfig?.pictureLabel == null) { errorMessage.push('Error en indicador de etiquetado de imágenes'); }\r\n            if (customConfig?.multiselect == null) { errorMessage.push('Error en indicador de seleccion múltiple'); }\r\n            break;\r\n        }\r\n        case ChallengeType.TrueOrFalse:\r\n            break;\r\n        case ChallengeType.FillGaps:\r\n            break;\r\n        case ChallengeType.Match:\r\n            break;\r\n        case ChallengeType.Sort:\r\n            break;\r\n        case ChallengeType.Classify:\r\n            break;\r\n        case ChallengeType.FillTable:\r\n            break;\r\n        case ChallengeType.Crossword:\r\n            break;\r\n    }\r\n    return {\r\n        valid: errorMessage.length === 0,\r\n        errorMessage\r\n    };\r\n};\r\n\r\nexport const isValidChallenge = (challenge: Challenge): Validation => {\r\n    let errorMessage: string[] = [];\r\n\r\n    if (challenge?.id == null || challenge?.type == null) { errorMessage.push('Datos internos incorrectos'); }\r\n    const configValidation = isValidConfig(challenge?.type, challenge?.config);\r\n    if (!configValidation.valid) { errorMessage = [...errorMessage, ...configValidation.errorMessage]; }\r\n    if (challenge?.question == null || challenge?.question === '') { errorMessage.push('Se debe rellenar el enunciado / pregunta'); }\r\n\r\n    switch (challenge.type) {\r\n        case ChallengeType.SelectAnswer: {\r\n            const customChallenge = challenge as SelectAnswerChallenge;\r\n            if (customChallenge.config.pictureCount > 1\r\n                && customChallenge.pictures.some((aPicture: ChallengePicture) => aPicture.type === PictureType.None)\r\n            ) {\r\n                errorMessage.push('Hay imágenes vacías');\r\n            }\r\n            if(!customChallenge.answers.reduce(\r\n                (acc: boolean, current: SelectAnswerChallengeAnswer) => acc && current.text != null && current.text !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay alguna respuesta vacía');\r\n            }\r\n            if(!customChallenge.answers.some((anAnswer: SelectAnswerChallengeAnswer) => anAnswer.valid)) {\r\n                errorMessage.push('Debe marcarse al menos una respuesta como válida');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.TrueOrFalse:\r\n            break;\r\n        case ChallengeType.FillGaps:{\r\n            const customChallenge = challenge as FillGapsChallenge;\r\n            if(!customChallenge.sentences.reduce(\r\n                (acc: boolean, current: FillGapsChallengeSentence) => acc && current != null && current.text !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay elementos sin texto');\r\n            }\r\n            if (customChallenge.sentences.length === 0) {\r\n                errorMessage.push('Debe haber al menos una frase');\r\n            }\r\n            if(!customChallenge.sentences.reduce(\r\n                (acc: boolean, current: FillGapsChallengeSentence) => (\r\n                    acc\r\n                    && current != null\r\n                    && current.hiddenExpressions.length > 0\r\n                ),\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay frases sin palabras ocultas');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.Match:\r\n            break;\r\n        case ChallengeType.Sort: {\r\n            const customChallenge = challenge as SortChallenge;\r\n            if(!customChallenge.items.reduce(\r\n                (acc: boolean, current: string) => acc && current != null && current !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Hay elementos sin texto');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.Classify: {\r\n            const customChallenge = challenge as ClassifyChallenge;\r\n            if(!customChallenge.groups.reduce(\r\n                (acc: boolean, current: ClassifyChallengeGroup) => acc && current.name != null && current.name !== '',\r\n                true\r\n            )) {\r\n                errorMessage.push('Todos los grupos deben tener un título');\r\n            }\r\n            break;\r\n        }\r\n        case ChallengeType.FillTable: {\r\n            const customChallenge = challenge as FillTableChallenge;\r\n            if(!customChallenge.items.reduce(\r\n                (accRow: boolean, currentRow: FillTableChallengeCell[], rowIdx: number) => (\r\n                    accRow\r\n                    && currentRow.reduce(\r\n                        (accColumn: boolean, currentColumn: FillTableChallengeCell, columnIdx: number) => (\r\n                            accColumn\r\n                            && (\r\n                                (\r\n                                    customChallenge.config.firstRowFixed\r\n                                    && rowIdx === 0\r\n                                    && customChallenge.config.firstColumnFixed\r\n                                    && columnIdx === 0\r\n                                )\r\n                                || currentColumn.text !== ''\r\n                            )\r\n                        ),\r\n                        true\r\n                    )\r\n                ),\r\n                true\r\n            )) {\r\n                errorMessage.push('Todas las celdas deben estar rellenas');\r\n            }\r\n            break;\r\n            break;\r\n        }\r\n        case ChallengeType.Crossword:\r\n            break;\r\n    }\r\n    return {\r\n        valid: errorMessage.length === 0,\r\n        errorMessage\r\n    };\r\n};\r\n\r\nexport const isValidTest = (test: Test): boolean => {\r\n    return test != null\r\n        && test.id != null\r\n        && test.name != null\r\n        && test.challenges != null\r\n        && test.challenges.reduce(\r\n            (acc: boolean, current: Challenge) => acc && isValidChallenge(current).valid,\r\n            true\r\n        );\r\n};\r\n\r\nexport const isValidProject = (project: Project): boolean => {\r\n    return project != null\r\n        && project.id != null\r\n        && project.name != null\r\n        && project.tests != null\r\n        && project.tests.reduce(\r\n            (acc: boolean, current: Test) => acc && isValidTest(current),\r\n            true\r\n        );\r\n};","export enum Language {\r\n    Es = 'ES',\r\n    En = 'EN'\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport { Button, Grid, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Language } from '../../enums/Language';\r\nimport { Test } from '../../types/Test';\r\n\r\ninterface TestState {\r\n    name: string,\r\n    description: string\r\n    language: Language\r\n}\r\n\r\nconst initialState = (test?: Test): TestState => {\r\n    if (test != null) {\r\n        return {\r\n            name: test.name,\r\n            description: test.description || '',\r\n            language: test.language || Language.Es\r\n        };\r\n    }\r\n    return {\r\n        name: '',\r\n        description: '',\r\n        language: Language.Es\r\n    };\r\n};\r\n\r\ninterface TestFormProps {\r\n    test?: Test,\r\n    onAccept: (newTest: Test) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const TestForm: React.FC<TestFormProps> = (props: TestFormProps) => {\r\n    const { test, onAccept, onCancel } = props;\r\n\r\n    const [formState, setFormState] = useState<TestState>(initialState(test));\r\n\r\n    const inputName = useRef({} as HTMLInputElement);\r\n    const inputDescription = useRef({} as HTMLInputElement);\r\n\r\n    const handleNameChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            name: inputName.current.value\r\n        });\r\n    };\r\n\r\n    const handleDescriptionChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            description: inputDescription.current.value\r\n        });\r\n    };\r\n\r\n    const handleLanguageChange = (evt: React.ChangeEvent<{ name?: string | undefined; value: unknown; }>) => {\r\n        const updatedLanguage = evt.target.value === Language.Es.toString() ? Language.Es : Language.En;\r\n        setFormState({\r\n            ...formState,\r\n            language: updatedLanguage\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        const newTest: Test = test ?\r\n            {\r\n                ...test,\r\n                name: formState.name,\r\n                description: formState.description,\r\n                language: formState.language\r\n            }\r\n            : {\r\n                id: uuidv4(),\r\n                name: formState.name,\r\n                description: formState.description,\r\n                language: formState.language,\r\n                challenges: []\r\n            };\r\n\r\n        onAccept(newTest);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            direction='column'\r\n            spacing={4}\r\n        >\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputName}\r\n                    id='newTestNameInput'\r\n                    label='Nombre'\r\n                    fullWidth\r\n                    value={formState.name}\r\n                    onInput={handleNameChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputDescription}\r\n                    id='newTestNameInput'\r\n                    label='Descripción'\r\n                    fullWidth\r\n                    value={formState.description}\r\n                    onInput={handleDescriptionChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <InputLabel shrink id=\"label-language\">\r\n                    Idioma\r\n                </InputLabel>\r\n                <Select\r\n                    labelId=\"label-language\"\r\n                    id='newTestLanguageInput'\r\n                    label='Idioma'\r\n                    fullWidth\r\n                    value={formState.language.toString()}\r\n                    onChange={handleLanguageChange}\r\n                >\r\n                    <MenuItem value={Language.Es.toString()}>Español</MenuItem>\r\n                    <MenuItem value={Language.En.toString()}>Inglés</MenuItem>\r\n                </Select>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid container justify='flex-end' spacing={1}>\r\n                    <Grid item>\r\n                        <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","export enum FillMethod {\r\n    Writing = 'W',\r\n    Dragging = 'D'\r\n}","import React from 'react';\r\nimport { Button, Dialog, DialogActions, DialogContent, Grid, Typography } from '@material-ui/core';\r\n\r\ninterface DialogConfirmProps {\r\n    open: boolean,\r\n    text: string,\r\n    acceptButtonText?: string,\r\n    cancelButtonText?: string,\r\n    width?: 'xs' | 'sm' | 'md' | 'lg' | 'xl'\r\n    onConfirm: () => void,\r\n    onRefuse: () => void\r\n}\r\n\r\nexport const DialogConfirm: React.FC<DialogConfirmProps> = (props: DialogConfirmProps) => {\r\n    const {open, text, acceptButtonText, cancelButtonText, width, onConfirm, onRefuse} = props;\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth={ width ? width : 'sm' }\r\n        >\r\n            <DialogContent>\r\n                <Grid container justify='center'>\r\n                    <Grid item>\r\n                        <Typography variant='button'>{text}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button autoFocus onClick={onConfirm} color='primary' variant='contained'>\r\n                    { acceptButtonText ? acceptButtonText : 'Aceptar' }\r\n                </Button>\r\n                <Button onClick={onRefuse} color='primary'>\r\n                    { cancelButtonText ? cancelButtonText : 'Cancelar' }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { useRef, useState } from 'react';\r\nimport { Box, Button, Dialog, DialogTitle, FormControlLabel, Grid, makeStyles, Switch } from '@material-ui/core';\r\nimport { TestOptions } from '../../types/Test';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n}));\r\n\r\ninterface DialogTestOptionsProps {\r\n    open: boolean,\r\n    onAccept: (options: TestOptions) => void\r\n    onCancel: () => void\r\n}\r\n\r\nexport const DialogTestOptions: React.FC<DialogTestOptionsProps> = (props: DialogTestOptionsProps) => {\r\n    const {open, onAccept, onCancel} = props;\r\n\r\n    const [formState, setFormState] = useState<TestOptions>({ ignoreTimeLimit: false, autoNext: true });\r\n\r\n    const checkIgnoreTimeLimit = useRef({} as HTMLInputElement);\r\n    const checkAutoNextChallenge = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleAttributeChange = (attribute: string, value: boolean) => {\r\n        setFormState({\r\n            ...formState,\r\n            [attribute]: value\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        onAccept(formState);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth='sm'\r\n        >\r\n            <DialogTitle>Opciones del cuestionario</DialogTitle>\r\n            <Box className={classes.dialogContainer}>\r\n                <Grid\r\n                    container\r\n                    direction='column'\r\n                    spacing={2}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    inputRef={checkIgnoreTimeLimit}\r\n                                    name='checkMultiselect'\r\n                                    checked={formState.ignoreTimeLimit}\r\n                                    color='secondary'\r\n                                    onChange={() => { handleAttributeChange('ignoreTimeLimit', checkIgnoreTimeLimit.current.checked); }}\r\n                                />\r\n                            }\r\n                            label='Desactivar tiempo límite de las preguntas'\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    inputRef={checkAutoNextChallenge}\r\n                                    name='checkMultiselect'\r\n                                    checked={formState.autoNext}\r\n                                    color='secondary'\r\n                                    onChange={() => { handleAttributeChange('autoNext', checkAutoNextChallenge.current.checked); }}\r\n                                />\r\n                            }\r\n                            label='Avanzar automáticamente a la siguiente pregunta'\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container justify='flex-end' spacing={1}>\r\n                            <Grid item>\r\n                                <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { Fragment, useState } from 'react';\r\nimport { Box, Button, Dialog, DialogTitle, Divider, Grid, Icon, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText, makeStyles, Menu, MenuItem, Typography } from '@material-ui/core';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Test, TestOptions } from '../../types/Test';\r\nimport { colors } from '../../theme';\r\nimport { Project } from '../../types/Project';\r\nimport { isValidTest } from '../../utils/utilValidationTypes';\r\nimport { TestForm } from './TestForm';\r\nimport { DialogConfirm } from '../common/DialogConfirm';\r\nimport { DialogTestOptions } from './DialogTestOptions';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    listItemSecondaryAction: {\r\n        visibility: 'hidden'\r\n    },\r\n    listItem: {\r\n        '&:hover $listItemSecondaryAction': {\r\n            visibility: 'inherit'\r\n        }\r\n    },\r\n    bottomContainer: {\r\n        marginTop: '10px'\r\n    },\r\n    play: {\r\n        color: colors.action\r\n    },\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    }\r\n}));\r\n\r\ninterface PlayOptionsState {\r\n    projectId?: string,\r\n    testId?: string,\r\n    openOptions: boolean\r\n}\r\ninterface TestListProps {\r\n    project: Project,\r\n    onCreateTest: (projectId: string, test: Test) => void\r\n    onDeleteTest: (projectId: string, test: Test) => void\r\n}\r\n\r\nexport const TestList: React.FC<TestListProps> = (props: TestListProps) => {\r\n    const { project, onCreateTest, onDeleteTest } = props;\r\n\r\n    const history = useHistory();\r\n\r\n    const [selectedTest, setSelectedTest] = React.useState<Test | undefined>();\r\n    const [anchorElEdit, setAnchorElEdit] = React.useState<Element | null>(null);\r\n    const [openTestForm, setOpenTestForm] = useState<boolean>(false);\r\n    const [openRemoveTestConfirm, setOpenRemoveTestConfirm] = useState<boolean>(false);\r\n    const [playOptionsState, setPlayOptionsState] = useState<PlayOptionsState>();\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleCreateTestClick = () => {\r\n        setOpenTestForm(true);\r\n    };\r\n\r\n    const handleTestFormAccept = (newTest: Test) => {\r\n        onCreateTest(project.id, newTest);\r\n        setSelectedTest(undefined);\r\n        setOpenTestForm(false);\r\n    };\r\n\r\n    const handleTestFormCancel = () => {\r\n        setSelectedTest(undefined);\r\n        setOpenTestForm(false);\r\n    };\r\n\r\n    const handleEditClick = (evt: React.MouseEvent<HTMLButtonElement>, test: Test) => {\r\n        setSelectedTest(test);\r\n        setAnchorElEdit(evt.currentTarget);\r\n    };\r\n\r\n    const handleCloseEditMenu = () => {\r\n        setAnchorElEdit(null);\r\n    };\r\n\r\n    const handleEditDataClick = () => {\r\n        setAnchorElEdit(null);\r\n        setOpenTestForm(true);\r\n    };\r\n\r\n    const handleRemoveTestClick = (test: Test) => {\r\n        setSelectedTest(test);\r\n        setOpenRemoveTestConfirm(true);\r\n    };\r\n\r\n    const handleConfirmRemoveTest = () => {\r\n        if (selectedTest != null) {\r\n            onDeleteTest(project.id, selectedTest);\r\n        }\r\n        setSelectedTest(undefined);\r\n        setOpenRemoveTestConfirm(false);\r\n    };\r\n\r\n    const handleRefuseRemoveTest = () => {\r\n        setSelectedTest(undefined);\r\n        setOpenRemoveTestConfirm(false);\r\n    };\r\n\r\n    const handlePlayClick = (projectId: string, testId: string) => {\r\n        setPlayOptionsState({\r\n            projectId,\r\n            testId,\r\n            openOptions: true\r\n        });\r\n    };\r\n\r\n    const handleAcceptPlayOptions = (testOptions: TestOptions) => {\r\n        history.push(`/play/${playOptionsState?.projectId}/${playOptionsState?.testId}?ignoreTimeLimit=${testOptions.ignoreTimeLimit}&autoNext=${testOptions.autoNext}`, playOptionsState);\r\n        setPlayOptionsState({\r\n            openOptions: false\r\n        });\r\n    };\r\n\r\n    const handleCancelPlayOptions = () => {\r\n        setPlayOptionsState({\r\n            openOptions: false\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Menu\r\n                id=\"addNewMenu\"\r\n                anchorEl={anchorElEdit}\r\n                keepMounted\r\n                open={Boolean(anchorElEdit)}\r\n                onClose={handleCloseEditMenu}\r\n            >\r\n                <MenuItem onClick={handleEditDataClick}>\r\n                    <Typography variant=\"subtitle2\">\r\n                        Editar datos generales\r\n                    </Typography>\r\n                </MenuItem>\r\n                <MenuItem component={Link} to={`/designer/${project.id}/${selectedTest?.id}`}>\r\n                    <Typography variant=\"subtitle2\">\r\n                        Editar preguntas\r\n                    </Typography>\r\n                </MenuItem>\r\n            </Menu>\r\n            <Dialog\r\n                open={openTestForm}\r\n                fullWidth\r\n                maxWidth='sm'\r\n            >\r\n                <DialogTitle>Cuestionario</DialogTitle>\r\n                <Box className={classes.dialogContainer}>\r\n                    <TestForm\r\n                        test={selectedTest}\r\n                        onAccept={handleTestFormAccept}\r\n                        onCancel={handleTestFormCancel}\r\n                    />\r\n                </Box>\r\n            </Dialog>\r\n            <DialogConfirm\r\n                open={openRemoveTestConfirm}\r\n                text='¿Seguro que deseas eliminar el proyecto?'\r\n                width='xs'\r\n                onConfirm={handleConfirmRemoveTest}\r\n                onRefuse={handleRefuseRemoveTest}\r\n            />\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    {\r\n                        project.tests.length === 0\r\n                        && <Typography>No hay cuestionarios</Typography>\r\n                    }\r\n                    {\r\n                        project.tests.length > 0\r\n                        && <List>\r\n                            {\r\n                                project.tests.map((aTest: Test) => (\r\n                                    <Fragment key={`fragment_${aTest.id}`}>\r\n                                        <ListItem\r\n                                            button\r\n                                            key={aTest.id}\r\n                                            alignItems='flex-start'\r\n                                            classes={{ container: classes.listItem }}\r\n                                        >\r\n                                            <Grid container>\r\n                                                <Grid item xs={6}>\r\n                                                    <ListItemText\r\n                                                        primary={\r\n                                                            aTest.name\r\n                                                        }\r\n                                                        secondary={\r\n                                                            <Typography\r\n                                                                component='span'\r\n                                                                variant='body2'\r\n                                                                className={classes.inline}\r\n                                                                color='textPrimary'\r\n                                                            >\r\n                                                                {aTest.description}\r\n                                                            </Typography>\r\n                                                        }\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={2}>\r\n                                                    <ListItemText\r\n                                                        secondary={`${aTest.challenges.length} pregunta${aTest.challenges.length !== 1 ? 's' : ''}`}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <ListItemSecondaryAction className={classes.listItemSecondaryAction}>\r\n                                                <Grid container>\r\n                                                    <Grid item>\r\n                                                        {\r\n                                                            isValidTest(aTest) ? (\r\n                                                                <IconButton title='Jugar!' onClick={() => { handlePlayClick(project.id, aTest.id); }}>\r\n                                                                    <Icon className={classes.play}>play_circle_filled</Icon>\r\n                                                                </IconButton>\r\n                                                            ) : (\r\n                                                                <IconButton title='Errores en el cuestionario'>\r\n                                                                    <Icon color='error'>error</Icon>\r\n                                                                </IconButton>\r\n                                                            )\r\n                                                        }\r\n                                                    </Grid>\r\n                                                    <Grid item>\r\n                                                        <IconButton title='Editar' onClick={(evt: React.MouseEvent<HTMLButtonElement>) => {\r\n                                                            evt.stopPropagation();\r\n                                                            handleEditClick(evt, aTest);\r\n                                                        }}>\r\n                                                            <Icon color='primary'>edit</Icon>\r\n                                                        </IconButton>\r\n                                                    </Grid>\r\n                                                    <Grid item>\r\n                                                        <IconButton title='Eliminar' onClick={(evt) => {\r\n                                                            evt.stopPropagation();\r\n                                                            handleRemoveTestClick(aTest);\r\n                                                        }}>\r\n                                                            <Icon>delete</Icon>\r\n                                                        </IconButton>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </ListItemSecondaryAction>\r\n                                        </ListItem>\r\n                                        <Divider variant='inset' component='li' />\r\n                                    </Fragment>\r\n                                ))\r\n                            }\r\n                        </List>\r\n                    }\r\n                    <Grid item xs={12} className={classes.bottomContainer}>\r\n                        <Grid container justify='flex-end'>\r\n                            <Button\r\n                                variant='contained'\r\n                                color='primary'\r\n                                onClick={handleCreateTestClick}\r\n                            >\r\n                                Nuevo cuestionario\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            {\r\n                playOptionsState && (\r\n                    <DialogTestOptions\r\n                        open={playOptionsState.openOptions}\r\n                        onAccept={handleAcceptPlayOptions}\r\n                        onCancel={handleCancelPlayOptions}\r\n                    />\r\n                )\r\n            }\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { Fragment, useRef } from 'react';\r\nimport { Button, makeStyles } from '@material-ui/core';\r\nimport { colors } from '../../theme';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    uploadInput: {\r\n        display: 'none'\r\n    }\r\n}));\r\n\r\ninterface HTMLInputEvent extends Event {\r\n    target: HTMLInputElement & EventTarget;\r\n}\r\n\r\ninterface JsonLoaderProps {\r\n    onDataLoaded: (data: unknown) => void\r\n    onError?: () => void\r\n}\r\n\r\nexport const JsonLoader: React.FC<JsonLoaderProps> = (props: JsonLoaderProps) => {\r\n    const { onDataLoaded, onError } = props;\r\n\r\n    const inputImport = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleInput = (event: unknown) => {\r\n        try {\r\n            const evt = event as HTMLInputEvent;\r\n            if (evt?.target?.files != null) {\r\n                const file = evt.target.files[0];\r\n                const reader = new FileReader();\r\n                reader.readAsText(file);\r\n                reader.onloadend = (e) => {\r\n                    try {\r\n                        const newProject = JSON.parse(reader.result as string);\r\n                        onDataLoaded(newProject);\r\n                    } catch (err) {\r\n                        if (onError) {\r\n                            onError();\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n        } catch (err) {\r\n            if (onError) {\r\n                onError();\r\n            }\r\n        }\r\n        inputImport.current.value = '';\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <input\r\n                ref={inputImport}\r\n                accept='text'\r\n                className={classes.uploadInput}\r\n                id='contained-button-file'\r\n                multiple\r\n                type='file'\r\n                onInput={handleInput}\r\n            />\r\n            <Button style={{ color: colors.primary.dark }}>\r\n                <label htmlFor='contained-button-file'>\r\n                    Importar proyecto\r\n                </label>\r\n            </Button>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useRef, useState } from 'react';\r\nimport { Button, Grid, TextField } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Project } from '../../types/Project';\r\n\r\ninterface FormState {\r\n    name: string,\r\n    description: string\r\n}\r\n\r\nconst initialState = (project?: Project): FormState => {\r\n    if (project != null) {\r\n        return {\r\n            name: project.name,\r\n            description: project.description || ''\r\n        };\r\n    }\r\n    return {\r\n        name: '',\r\n        description: ''\r\n    };\r\n};\r\n\r\ninterface ProjectFormProps {\r\n    project?: Project,\r\n    onAccept: (newProject: Project) => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport const ProjectForm: React.FC<ProjectFormProps> = (props: ProjectFormProps) => {\r\n    const { project, onAccept, onCancel } = props;\r\n\r\n    const [formState, setFormState] = useState<FormState>(initialState(project));\r\n\r\n    const inputName = useRef({} as HTMLInputElement);\r\n    const inputDescription = useRef({} as HTMLInputElement);\r\n\r\n    const handleNameChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            name: inputName.current.value\r\n        });\r\n    };\r\n\r\n    const handleDescriptionChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            description: inputDescription.current.value\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        const newProject: Project = project ?\r\n            {\r\n                ...project,\r\n                name: inputName.current.value,\r\n                description: inputDescription.current.value\r\n            }\r\n            : {\r\n                id: uuidv4(),\r\n                name: inputName.current.value,\r\n                description: inputDescription.current.value,\r\n                tests: []\r\n            };\r\n\r\n        onAccept(newProject);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            direction='column'\r\n            spacing={2}\r\n        >\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputName}\r\n                    label='Nombre'\r\n                    fullWidth\r\n                    value={formState.name}\r\n                    onInput={handleNameChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    inputRef={inputDescription}\r\n                    label='Descripción'\r\n                    fullWidth\r\n                    value={formState.description}\r\n                    onInput={handleDescriptionChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid container justify='flex-end' spacing={1}>\r\n                    <Grid item>\r\n                        <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { ChangeEvent, Fragment, useState } from 'react';\r\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Button, Dialog, DialogTitle, Divider, Grid, Icon, IconButton, makeStyles, Snackbar, SnackbarContent, Typography } from '@material-ui/core';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Project } from '../../types/Project';\r\nimport { colors } from '../../theme';\r\nimport { TestList } from './TestList';\r\nimport { DialogConfirm } from '../common/DialogConfirm';\r\nimport { JsonLoader } from '../common/JsonLoader';\r\nimport { isValidProject } from '../../utils/utilValidationTypes';\r\nimport { ProjectForm } from './ProjectForm';\r\nimport { Test } from '../../types/Test';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15)\r\n    },\r\n    secondaryHeading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        color: colors.secondary.main\r\n    },\r\n    gridContainer: {\r\n        padding: '0px 10px'\r\n    },\r\n    gridItems: {\r\n        flexGrow: 1,\r\n    },\r\n    messageControl: {\r\n        backgroundColor: colors.error,\r\n        color: colors.font.errorContrast\r\n    },\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    }\r\n}));\r\n\r\ninterface ProjectListProps {\r\n    projects: Project[],\r\n    setProjects: (newProjects: Project[]) => void\r\n}\r\n\r\nexport const ProjectList: React.FC<ProjectListProps> = (props: ProjectListProps) => {\r\n    const { projects, setProjects } = props;\r\n\r\n    const history = useHistory();\r\n\r\n    const [expandedProject, setExpandedProject] = React.useState<string | false>(false);\r\n    const [openProjectForm, setOpenProjectForm] = useState<boolean>(false);\r\n    const [openRemoveProjectConfirm, setOpenRemoveProjectConfirm] = useState<boolean>(false);\r\n    const [selectedProject, setSelectedProject] = useState<Project>();\r\n    const [openMessage, setOpenMessage] = useState<boolean>(false);\r\n    const [messageText, setMessageText] = useState<string>('');\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleExpandChange = (project: Project, isExpanded: boolean) => {\r\n        setExpandedProject(isExpanded ? project.id : false);\r\n    };\r\n\r\n    const handleNewProjectClick = () => {\r\n        setOpenProjectForm(true);\r\n    };\r\n\r\n    const handleEditProjectClick = (project: Project) => {\r\n        setSelectedProject(project);\r\n        setOpenProjectForm(true);\r\n    };\r\n\r\n    const handleRemoveProjectClick = (project: Project) => {\r\n        setSelectedProject(project);\r\n        setOpenRemoveProjectConfirm(true);\r\n    };\r\n\r\n    const handleExportProjectClick = (project: Project) => {\r\n        const element = document.createElement('a');\r\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(project)));\r\n        element.setAttribute('download', project.name.replace(/ /g, '_'));\r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n        element.click();\r\n        document.body.removeChild(element);\r\n    };\r\n\r\n    const handleProjectFormAccept = (newProject: Project) => {\r\n        if (selectedProject != null) {\r\n            setProjects(projects.map((aProject: Project) => aProject.id === newProject.id ? newProject : aProject));\r\n        } else {\r\n            setProjects([\r\n                ...projects,\r\n                {\r\n                    ...newProject\r\n                }\r\n            ]);\r\n        }\r\n        setSelectedProject(undefined);\r\n        setOpenProjectForm(false);\r\n    };\r\n\r\n    const handleProjectFormCancel = () => {\r\n        setSelectedProject(undefined);\r\n        setOpenProjectForm(false);\r\n    };\r\n\r\n    const handleImportProject = (project: unknown) => {\r\n        const newProject = project as Project;\r\n        if (!isValidProject(newProject)) {\r\n            setMessageText('El proyecto es inválido');\r\n            setOpenMessage(true);\r\n        }\r\n        const exist = projects.find((aProject: Project) => aProject.id === newProject.id) != null;\r\n        if (!exist) {\r\n            setProjects([\r\n                ...projects,\r\n                {\r\n                    ...newProject\r\n                }\r\n            ]);\r\n        } else {\r\n            setMessageText('El proyecto ya existe');\r\n            setOpenMessage(true);\r\n        }\r\n    };\r\n\r\n    const handleImportProjectError = () => {\r\n        setMessageText('Se produjo un error en la importación');\r\n        setOpenMessage(true);\r\n    };\r\n\r\n    const handleConfirmRemoveProject = () => {\r\n        if (selectedProject != null) {\r\n            setProjects(projects.filter((aProject: Project) => aProject.id !== selectedProject.id));\r\n        }\r\n        setOpenRemoveProjectConfirm(false);\r\n    };\r\n\r\n    const handleRefuseRemoveProject = () => {\r\n        setOpenRemoveProjectConfirm(false);\r\n    };\r\n\r\n    const handleCreateTest = (projectId: string, test: Test) => {\r\n        const theProject = projects.find((aProject: Project) => aProject.id === projectId);\r\n        const updating = theProject != null && theProject.tests.some((aTest: Test) => aTest.id === test.id);\r\n\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return {...aProject};\r\n            }\r\n            if (updating) {\r\n                const updatedTests = aProject.tests.map((aTest: Test) => aTest.id === test.id ? {...test} : {...aTest});\r\n                return {\r\n                    ...aProject,\r\n                    tests: [...updatedTests]\r\n                };\r\n            }\r\n            return {\r\n                ...aProject,\r\n                tests: [...aProject.tests, test]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        if (!updating) {\r\n            history.push(`/designer/${projectId}/${test.id}`);\r\n        }\r\n    };\r\n\r\n    const handleDeleteTest = (projectId: string, test: Test) => {\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return {...aProject};\r\n            }\r\n            const updatedTests = aProject.tests.filter((aTest: Test) => aTest.id !== test.id);\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n    };\r\n\r\n    const handleMessageClose = () => {\r\n        setOpenMessage(false);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Dialog\r\n                open={openProjectForm}\r\n                fullWidth\r\n                maxWidth='sm'\r\n            >\r\n                <DialogTitle>Proyecto</DialogTitle>\r\n                <Box className={classes.dialogContainer}>\r\n                    <ProjectForm\r\n                        project={selectedProject}\r\n                        onAccept={handleProjectFormAccept}\r\n                        onCancel={handleProjectFormCancel}\r\n                    />\r\n                </Box>\r\n            </Dialog>\r\n            <DialogConfirm\r\n                open={openRemoveProjectConfirm}\r\n                text='¿Seguro que deseas eliminar el proyecto?'\r\n                width='xs'\r\n                onConfirm={handleConfirmRemoveProject}\r\n                onRefuse={handleRefuseRemoveProject}\r\n            />\r\n            <Snackbar\r\n                open={openMessage}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                autoHideDuration={3000}\r\n                onClose={handleMessageClose}\r\n            >\r\n                <SnackbarContent\r\n                    message={\r\n                        <Grid container spacing={4}>\r\n                            <Grid item xs={1}>\r\n                                <Icon>error</Icon>\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <Typography>{messageText}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    }\r\n                    className={classes.messageControl}\r\n                />\r\n            </Snackbar>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <Grid container direction='row' justify='center' alignItems='center' spacing={2} className={classes.gridContainer}>\r\n                        <Grid item className={classes.gridItems}>\r\n                            <Typography variant='h6'>\r\n                                Proyectos\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button\r\n                                style={{ color: colors.primary.dark }}\r\n                                onClick={handleNewProjectClick}\r\n                            >\r\n                                Nuevo proyecto\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <JsonLoader\r\n                                onDataLoaded={handleImportProject}\r\n                                onError={handleImportProjectError}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    {\r\n                        projects.map((aProject: Project) => (\r\n                            <Accordion\r\n                                key={aProject.id}\r\n                                expanded={expandedProject === aProject.id}\r\n                                onChange={ (event: ChangeEvent<unknown>, isExpanded: boolean) => {\r\n                                    handleExpandChange(aProject, isExpanded);\r\n                                }}\r\n                            >\r\n                                <AccordionSummary title={aProject.description}>\r\n                                    <Grid container justify='space-between' alignItems='center'>\r\n                                        <Grid item xs={3}>\r\n                                            <Typography className={classes.heading}>{aProject.name}</Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={7}>\r\n                                            <Typography className={classes.secondaryHeading}>\r\n                                                {`${aProject.tests.length} cuestionario${aProject.tests.length !== 1 ? 's' : ''}`}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <IconButton\r\n                                                title='Descargar'\r\n                                                color='primary'\r\n                                                onClick={(evt) => {\r\n                                                    evt.stopPropagation();\r\n                                                    handleExportProjectClick(aProject);\r\n                                                }}\r\n                                            >\r\n                                                <Icon>download</Icon>\r\n                                            </IconButton>\r\n                                            {\r\n                                                <IconButton\r\n                                                    title='Editar'\r\n                                                    color='primary'\r\n                                                    onClick={(evt) => {\r\n                                                        evt.stopPropagation();\r\n                                                        handleEditProjectClick(aProject);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon>edit</Icon>\r\n                                                </IconButton>\r\n                                            }\r\n                                            {\r\n                                                <IconButton\r\n                                                    title='Eliminar'\r\n                                                    onClick={(evt) => {\r\n                                                        evt.stopPropagation();\r\n                                                        handleRemoveProjectClick(aProject);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon>delete</Icon>\r\n                                                </IconButton>\r\n                                            }\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </AccordionSummary>\r\n                                <AccordionDetails>\r\n                                    <TestList\r\n                                        project={aProject}\r\n                                        onCreateTest={handleCreateTest}\r\n                                        onDeleteTest={handleDeleteTest}\r\n                                    />\r\n                                </AccordionDetails>\r\n                            </Accordion>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { useProjects } from '../../hooks/useProjects';\r\nimport { ProjectList } from '../../components/Home/ProjectList';\r\n\r\nexport const Home: React.FC = () => {\r\n    const { projects, setProjects } = useProjects();\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n        >\r\n            <Grid item xs={7}>\r\n                <ProjectList\r\n                    projects={projects}\r\n                    setProjects={setProjects}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Icon } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { ChallengeType } from \"../enums/ChallengeType\";\r\nimport { Language } from \"../enums/Language\";\r\nimport { Challenge, ChallengeConfig } from \"../types/Challenge\";\r\nimport { CSSProperties } from '@material-ui/styles';\r\nimport { PictureType } from '../enums/PictureType';\r\nimport { SelectAnswerChallenge, SelectAnswerChallengeConfig } from '../types/SelectAnswerChallenge';\r\nimport { TrueOrFalseChallenge, TrueOrFalseChallengeConfig } from '../types/TrueOrFalseChallenge';\r\nimport { ClassifyChallenge, ClassifyChallengeConfig } from '../types/ClassifyChallenge';\r\nimport { SortChallenge, SortChallengeConfig } from '../types/SortChallenge';\r\nimport { FillTableChallenge, FillTableChallengeConfig } from '../types/FillTableChallenge';\r\nimport { FillGapsChallenge, FillGapsChallengeConfig, FillGapsChallengeSentence } from '../types/FillGapsChallenge';\r\nimport { FillMethod } from '../enums/FillMethod';\r\n\r\nexport const getChallengeTypeDescription = (type: ChallengeType, language: Language = Language.Es): string => {\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer:\r\n            return language === Language.Es ? \"Selecciona la respuesta correcta\" : \"Choose the correct answer\";\r\n        case ChallengeType.TrueOrFalse:\r\n            return language === Language.Es ? \"Verdadero o falso\" : \"True or false\";\r\n        case ChallengeType.Match:\r\n            return language === Language.Es ? \"Une las opciones\" : \"Match the options\";\r\n        case ChallengeType.FillGaps:\r\n            return language === Language.Es ? \"Rellena los huecos\" : \"Fill in the gaps\";\r\n        case ChallengeType.Sort:\r\n            return language === Language.Es ? \"Ordena los elementos\" : \"Order the elements\";\r\n        case ChallengeType.Classify:\r\n            return language === Language.Es ? \"Clasifica los elementos\" : \"Classify the elements\";\r\n        case ChallengeType.FillTable:\r\n            return language === Language.Es ? \"Completa la tabla\" : \"Complete the table\";\r\n        case ChallengeType.TheOddOne:\r\n            return language === Language.Es ? \"Busca el que sobra\" : \"Find the odd one\";\r\n        case ChallengeType.Crossword:\r\n            return language === Language.Es ? \"Crucigrama\" : \"Crossword\";\r\n        default:\r\n            return language === Language.Es ? \"Sin definir\" : \"Undefined\";\r\n    }\r\n};\r\n\r\nexport const getChallengeTypeIcon = (type: ChallengeType, size: 'large' | 'default' | 'small' = 'default', style: CSSProperties = {}): JSX.Element => {\r\n    return (\r\n        <Icon fontSize={size} style={style}>\r\n            {\r\n                type === ChallengeType.SelectAnswer ? 'widgets'\r\n                    : type === ChallengeType.TrueOrFalse ? 'check'\r\n                        : type === ChallengeType.FillGaps ? 'space_bar'\r\n                            : type === ChallengeType.Match ? 'shuffle'\r\n                                : type === ChallengeType.Sort ? 'swap_vert'\r\n                                    : type === ChallengeType.Classify ? 'category'\r\n                                        : type === ChallengeType.FillTable ? 'grid_on'\r\n                                            : type === ChallengeType.TheOddOne ? 'touch_app'\r\n                                                : type === ChallengeType.Crossword ? 'font_download' : ''\r\n            }\r\n        </Icon>\r\n    );\r\n};\r\n\r\nconst getDefaultChallengeConfig = (type: ChallengeType): ChallengeConfig => {\r\n    const defaultChallengeConfig: ChallengeConfig = {\r\n        timeLimit: 30,\r\n        questionFontSize: 28\r\n    };\r\n\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                answerFontSize: 22,\r\n                pictureCount: 1,\r\n                pictureLabel: false,\r\n                multiselect: false\r\n            } as SelectAnswerChallengeConfig;\r\n        case ChallengeType.TrueOrFalse:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                pictureCount: 1,\r\n                pictureLabel: false\r\n            } as TrueOrFalseChallengeConfig;\r\n        case ChallengeType.Match:\r\n            return defaultChallengeConfig;\r\n        case ChallengeType.FillGaps:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                textFontSize: 18,\r\n                fillMethod: FillMethod.Writing\r\n            } as FillGapsChallengeConfig;\r\n        case ChallengeType.Sort:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                itemsFontSize: 18,\r\n                itemCount: 5\r\n            } as SortChallengeConfig;\r\n        case ChallengeType.Classify:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                itemsFontSize: 18,\r\n                groupCount: 3\r\n            } as ClassifyChallengeConfig;\r\n        case ChallengeType.FillTable:\r\n            return {\r\n                ...defaultChallengeConfig,\r\n                itemsFontSize: 18,\r\n                rowCount: 3,\r\n                columnCount: 3,\r\n                firstRowFixed: false,\r\n                firstColumnFixed: false\r\n            } as FillTableChallengeConfig;\r\n        default:\r\n            return defaultChallengeConfig;\r\n    }\r\n};\r\n\r\nexport const getDefaultChallenge = (type: ChallengeType): Challenge => {\r\n    const defaultChallenge: Challenge = {\r\n        id: uuidv4(),\r\n        type,\r\n        question: '',\r\n        config: getDefaultChallengeConfig(type)\r\n    };\r\n\r\n    switch (type) {\r\n        case ChallengeType.SelectAnswer:\r\n            return {\r\n                ...defaultChallenge,\r\n                pictures: [{\r\n                    type: PictureType.None,\r\n                    data: ''\r\n                }],\r\n                answers: [\r\n                    { text: '', valid: false },\r\n                    { text: '', valid: false },\r\n                    { text: '', valid: false },\r\n                    { text: '', valid: false }\r\n                ]\r\n            } as SelectAnswerChallenge;\r\n        case ChallengeType.TrueOrFalse:\r\n            return {\r\n                ...defaultChallenge,\r\n                pictures: [{\r\n                    type: PictureType.None,\r\n                    data: ''\r\n                }],\r\n                answer: true\r\n            } as TrueOrFalseChallenge;\r\n        case ChallengeType.Match:\r\n            return defaultChallenge;\r\n        case ChallengeType.FillGaps:\r\n            return {\r\n                ...defaultChallenge,\r\n                sentences: [] as FillGapsChallengeSentence[]\r\n            } as FillGapsChallenge;\r\n        case ChallengeType.Sort:\r\n            return {\r\n                ...defaultChallenge,\r\n                items: ['', '', '', '', '']\r\n            } as SortChallenge;\r\n        case ChallengeType.Classify:\r\n            return {\r\n                ...defaultChallenge,\r\n                groups: [\r\n                    { name: '', items: ([] as string[]) },\r\n                    { name: '', items: ([] as string[]) },\r\n                    { name: '', items: ([] as string[]) }\r\n                ]\r\n            } as ClassifyChallenge;\r\n        case ChallengeType.FillTable:\r\n            return {\r\n                ...defaultChallenge,\r\n                items: [\r\n                    [{ text: '', hidden: false },{ text: '', hidden: false },{ text: '', hidden: false }],\r\n                    [{ text: '', hidden: false },{ text: '', hidden: false },{ text: '', hidden: false }],\r\n                    [{ text: '', hidden: false },{ text: '', hidden: false },{ text: '', hidden: false }]\r\n                ]\r\n            } as FillTableChallenge;\r\n        default:\r\n            return defaultChallenge;\r\n    }\r\n};\r\n","export enum ComponentMode {\r\n    Design,\r\n    Play\r\n}","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Card, CardActionArea, CardActions, CardContent, CardHeader, Chip, Grid, Icon, IconButton, makeStyles, Tooltip, Typography } from '@material-ui/core';\r\nimport { Challenge } from '../../types/Challenge';\r\nimport { getChallengeTypeDescription, getChallengeTypeIcon } from '../../utils/utilChallenges';\r\nimport { isValidChallenge, Validation } from '../../utils/utilValidationTypes';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    },\r\n    description: {\r\n        width: '100%',\r\n        whiteSpace: 'nowrap',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis'\r\n    },\r\n    tooltipRow: {\r\n        fontSize: '12px'\r\n    },\r\n    statusContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    }\r\n});\r\n\r\ninterface ChallengeThumbnailProps {\r\n    challenge: Challenge,\r\n    position: number,\r\n    selected?: boolean,\r\n    compact?: boolean,\r\n    onClick?: (selectedChallenge: Challenge) => void,\r\n    onDelete?: (deletedChallenge: Challenge) => void\r\n}\r\n\r\nexport const ChallengeThumbnail: React.FC<ChallengeThumbnailProps> = (props: ChallengeThumbnailProps) => {\r\n    const { challenge, position, selected, compact, onClick, onDelete } = props;\r\n\r\n    const [validation, setValidation] = useState<Validation>({ valid: true, errorMessage: [] });\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleClick = () => {\r\n        if (onClick) {\r\n            onClick(challenge);\r\n        }\r\n    };\r\n\r\n    const handleDeleteClick = () => {\r\n        if (onDelete) {\r\n            onDelete(challenge);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setValidation(isValidChallenge(challenge));\r\n    }, [challenge]);\r\n\r\n    return (\r\n        <Fragment>\r\n            {\r\n                <Card variant={selected ? 'elevation' : 'outlined'} elevation={10} className={classes.fullWidth}>\r\n                    <CardActionArea className={classes.fullWidth} onClick={handleClick}>\r\n                        <CardHeader\r\n                            avatar={\r\n                                compact ? getChallengeTypeIcon(challenge.type, 'small') : undefined\r\n                            }\r\n                            subheader={\r\n                                <Typography variant='subtitle2' color={selected ? 'secondary' : 'textPrimary'} className={classes.description}>\r\n                                    { compact ? challenge.question : `#${position} ${getChallengeTypeDescription(challenge.type)}` }\r\n                                </Typography>\r\n                            }\r\n                            action={\r\n                                compact ? (\r\n                                    <Grid container alignItems=\"center\">\r\n                                        {\r\n                                            validation.valid ? <Icon color=\"primary\" fontSize=\"small\">check</Icon>\r\n                                                : (\r\n                                                    <Tooltip arrow title={\r\n                                                        <>\r\n                                                            {\r\n                                                                validation.errorMessage.map((\r\n                                                                    aMessage: string,\r\n                                                                    messageIdx: number\r\n                                                                ) => (\r\n                                                                    <li\r\n                                                                        key={`li_${messageIdx}`}\r\n                                                                        className={classes.tooltipRow}\r\n                                                                    >\r\n                                                                        {aMessage}\r\n                                                                    </li>\r\n                                                                ))\r\n                                                            }\r\n                                                        </>\r\n                                                    }>\r\n                                                        <Icon color=\"secondary\" fontSize=\"small\">priority_high</Icon>\r\n                                                    </Tooltip>\r\n                                                )\r\n                                        }\r\n                                        {/* <IconButton onClick={handleDeleteClick}>\r\n                                            <Icon>delete</Icon>\r\n                                        </IconButton> */}\r\n                                    </Grid>\r\n                                ) : undefined\r\n                            }\r\n                        />\r\n                        {\r\n                            !compact && (\r\n                                <CardContent>\r\n                                    <Typography noWrap>{challenge.question}</Typography>\r\n                                </CardContent>\r\n                            )\r\n                        }\r\n                    </CardActionArea>\r\n                    {\r\n                        !compact && (\r\n                            <CardActions className={classes.statusContainer}>\r\n                                {\r\n                                    validation.valid ? <Chip label=\"completo\" color=\"primary\" size=\"small\" icon={<Icon fontSize=\"small\">check</Icon>} />\r\n                                        : (\r\n                                            <Tooltip arrow title={\r\n                                                <>\r\n                                                    {\r\n                                                        validation.errorMessage.map((aMessage: string, messageIdx) => (\r\n                                                            <li\r\n                                                                key={`li_${messageIdx}`}\r\n                                                                className={classes.tooltipRow}>\r\n                                                                {aMessage}\r\n                                                            </li>\r\n                                                        ))\r\n                                                    }\r\n                                                </>\r\n                                            }>\r\n                                                <Chip label=\"error\" color=\"secondary\" size=\"small\" style={{ color: '#ffffff' }} icon={<Icon fontSize=\"small\">priority_high</Icon>} />\r\n                                            </Tooltip>\r\n                                        )\r\n                                }\r\n                                <IconButton onClick={handleDeleteClick}>\r\n                                    <Icon>delete</Icon>\r\n                                </IconButton>\r\n                            </CardActions>\r\n                        )\r\n                    }\r\n                </Card>\r\n            }\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { Challenge } from '../../types/Challenge';\r\nimport { ChallengeThumbnail } from './ChallengeThumbnail';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        overflowY: 'auto'\r\n    },\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface ChallengeSelectorProps {\r\n    challenges: Challenge[],\r\n    compactList?: boolean,\r\n    selected?: Challenge,\r\n    onSelect?: (challenge: Challenge) => void,\r\n    onDelete?: (challenge: Challenge) => void\r\n}\r\n\r\nexport const ChallengeSelector: React.FC<ChallengeSelectorProps> = (props: ChallengeSelectorProps) => {\r\n    const { challenges, compactList, selected, onSelect, onDelete } = props;\r\n\r\n    const [selectedChallenge, setSelectedChallenge] = useState<Challenge | undefined>(selected || undefined);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleThumbnailClick = (challenge: Challenge) => {\r\n        setSelectedChallenge(challenge);\r\n        if (onSelect) {\r\n            onSelect(challenge);\r\n        }\r\n    };\r\n\r\n    const handleThumbnailDelete = (challenge: Challenge) => {\r\n        if (onDelete) {\r\n            onDelete(challenge);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' alignItems='center' spacing={2} className={classes.root}>\r\n            {\r\n                challenges.map((aChallenge: Challenge, idx: number) => (\r\n                    <Grid item key={idx} className={classes.fullWidth}>\r\n                        <ChallengeThumbnail\r\n                            challenge={aChallenge}\r\n                            position={idx + 1}\r\n                            selected={selectedChallenge?.id === aChallenge.id}\r\n                            compact={compactList}\r\n                            onClick={handleThumbnailClick}\r\n                            onDelete={handleThumbnailDelete}\r\n                        />\r\n                    </Grid>\r\n                ))\r\n            }\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, makeStyles, TextField } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    inputContainer: {\r\n        width: '90%',\r\n        height: '80%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    input: {\r\n        width: '90%'\r\n    }\r\n});\r\n\r\ninterface ChallengeQuestionProps {\r\n    mode: ComponentMode\r\n    question: string\r\n    fontSize?: number\r\n    onChange?: (newTitle: string) => void\r\n}\r\n\r\nexport const ChallengeQuestion: React.FC<ChallengeQuestionProps> = (props: ChallengeQuestionProps) => {\r\n    const { mode, question, fontSize, onChange } = props;\r\n\r\n    const [questionText, setQuestionText] = useState<string>(question);\r\n    const inputQuestion = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setQuestionText(question);\r\n    },[question]);\r\n\r\n    const handleInputChange = () => {\r\n        setQuestionText(inputQuestion.current.value);\r\n        if (onChange) {\r\n            onChange(inputQuestion.current.value);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Card className={classes.inputContainer}>\r\n                <TextField\r\n                    inputRef={inputQuestion}\r\n                    variant='standard'\r\n                    className={classes.input}\r\n                    inputProps = {{\r\n                        style: {\r\n                            textAlign: 'center',\r\n                            fontSize: `${fontSize != null ? fontSize : 28}px`,\r\n                            lineHeight: '32px'\r\n                        }\r\n                    }}\r\n                    InputProps={{\r\n                        readOnly: mode === ComponentMode.Play,\r\n                        disableUnderline: mode === ComponentMode.Play\r\n                    }}\r\n                    placeholder='Escribe aquí el enunciado o pregunta'\r\n                    multiline\r\n                    rowsMax={2}\r\n                    value={questionText}\r\n                    onInput={handleInputChange}\r\n                />\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n    CardActionArea,\r\n    Checkbox,\r\n    Grid,\r\n    Icon,\r\n    InputAdornment,\r\n    makeStyles,\r\n    Radio,\r\n    TextField\r\n} from '@material-ui/core';\r\nimport Card from '@material-ui/core/Card';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { colors } from '../../theme';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    option: {\r\n        width: '100%',\r\n        height: '100%'\r\n    },\r\n    optionActionArea: {\r\n        height: '100%',\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionInput: {\r\n        width: '90%',\r\n        color: '#ffffff'\r\n    },\r\n    optionInnerInput: {\r\n        cursor: 'pointer'\r\n    },\r\n    optionIcon: {\r\n        color: '#ffffff'\r\n    },\r\n    selector: {\r\n        color: '#ffffff',\r\n        '&$checked': {\r\n            color: '#ffffff'\r\n        }\r\n    },\r\n    checked: {}\r\n}));\r\n\r\ninterface OptionState {\r\n    text: string,\r\n    valid: boolean\r\n}\r\n\r\ninterface SelectableOptionProps {\r\n    mode: ComponentMode\r\n    text: string,\r\n    icon: string,\r\n    valid?: boolean,\r\n    selected?: boolean,\r\n    color?: string,\r\n    fontSize?: number,\r\n    multiselect?: boolean\r\n    showResults?: boolean\r\n    onClick?: () => void\r\n    onTextChange?: (newText: string) => void\r\n    onValidChange?(newValid: boolean): void\r\n}\r\n\r\nexport const SelectableOption: React.FC<SelectableOptionProps> = (props: SelectableOptionProps) => {\r\n    const {\r\n        mode,\r\n        text,\r\n        icon,\r\n        valid,\r\n        selected,\r\n        color,\r\n        fontSize,\r\n        multiselect,\r\n        showResults,\r\n        onClick,\r\n        onTextChange,\r\n        onValidChange\r\n    } = props;\r\n\r\n    const [optionState, setOptionState] = useState<OptionState>({ text: text || '', valid: valid || false });\r\n    const inputTextOption = useRef({} as HTMLInputElement);\r\n    const radioOption = useRef({} as HTMLInputElement);\r\n    const checkOption = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setOptionState({ text: text || '', valid: valid || false });\r\n    }, [text, valid]);\r\n\r\n    const handleOptionTextChange = () => {\r\n        const newState = {\r\n            ...optionState,\r\n            text: inputTextOption.current.value\r\n        };\r\n        setOptionState(newState);\r\n        if (onTextChange) {\r\n            onTextChange(inputTextOption.current.value);\r\n        }\r\n    };\r\n\r\n    const handleRadioChange = () => {\r\n        const newState = {\r\n            ...optionState,\r\n            selected: radioOption.current.checked\r\n        };\r\n        setOptionState(newState);\r\n        if (onValidChange) {\r\n            onValidChange(radioOption.current.checked);\r\n        }\r\n    };\r\n\r\n    const handleCheckboxChange = () => {\r\n        const newState = {\r\n            ...optionState,\r\n            selected: checkOption.current.checked\r\n        };\r\n        setOptionState(newState);\r\n        if (onValidChange) {\r\n            onValidChange(checkOption.current.checked);\r\n        }\r\n    };\r\n\r\n    const handlerOptionClick = () => {\r\n        if (onClick) {\r\n            onClick();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            className={classes.option}\r\n            style={{\r\n                backgroundColor: color || colors.primary.main,\r\n                borderStyle: 'solid',\r\n                borderWidth: (showResults && valid) || selected ? '3px' : '0px',\r\n                borderColor: showResults ? (\r\n                    valid ? '#00ff00' : '#ff0000'\r\n                ) : '#323232'\r\n            }}>\r\n            {\r\n                mode === ComponentMode.Design ? (\r\n                    <div className={classes.optionActionArea}>\r\n                        <TextField\r\n                            inputRef={inputTextOption}\r\n                            value={optionState.text}\r\n                            placeholder=\"Escribe aquí una respuesta\"\r\n                            className={classes.optionInput}\r\n                            InputProps={{\r\n                                style: {\r\n                                    color: '#ffffff',\r\n                                    fontSize: `${fontSize || 22}px`,\r\n                                },\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <Icon className={classes.optionIcon}>{icon}</Icon>\r\n                                    </InputAdornment>\r\n                                ),\r\n                                endAdornment: (\r\n                                    multiselect ? (\r\n                                        <Checkbox\r\n                                            inputRef={checkOption}\r\n                                            checked={optionState.valid}\r\n                                            classes={{ root: classes.selector, checked: classes.checked }}\r\n                                            onChange={handleCheckboxChange}\r\n                                        />\r\n                                    ) : (\r\n                                        <Radio\r\n                                            inputRef={radioOption}\r\n                                            checked={optionState.valid}\r\n                                            classes={{ root: classes.selector, checked: classes.checked }}\r\n                                            onChange={handleRadioChange}\r\n                                        />\r\n                                    )\r\n                                ),\r\n                            }}\r\n                            onInput={handleOptionTextChange}\r\n                            onClick={(ev) => { ev.preventDefault(); }}\r\n                        />\r\n                    </div>\r\n                ): (\r\n                    <CardActionArea\r\n                        className={classes.optionActionArea}\r\n                        onClick={handlerOptionClick}\r\n                    >\r\n                        <Grid container className={classes.optionInput} spacing={2} alignItems=\"center\">\r\n                            <Grid item>\r\n                                <Icon className={classes.optionIcon}>{icon}</Icon>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <label style={{color: '#ffffff', fontSize: `${fontSize || 22}px`, justifySelf: 'left'}}>\r\n                                    {optionState.text}\r\n                                </label>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardActionArea>\r\n                )\r\n            }\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Box, Button, Dialog, DialogTitle, Grid, makeStyles, TextField } from '@material-ui/core';\r\nimport { ChallengePicture } from '../../types/Challenge';\r\nimport { PictureType } from '../../enums/PictureType';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n}));\r\n\r\ninterface DialogPictureFormProps {\r\n    open: boolean,\r\n    picture: ChallengePicture\r\n    onAccept: (picture: ChallengePicture) => void\r\n    onCancel: () => void\r\n}\r\n\r\nexport const DialogPictureForm: React.FC<DialogPictureFormProps> = (props: DialogPictureFormProps) => {\r\n    const {open, picture, onAccept, onCancel} = props;\r\n\r\n    const [formState, setFormState] = useState<ChallengePicture>(picture);\r\n\r\n    const inputUrl = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (picture != null) {\r\n            setFormState(picture);\r\n        }\r\n    }, [picture]);\r\n\r\n    const handleUrlChange = () => {\r\n        setFormState({\r\n            ...formState,\r\n            data: inputUrl.current.value\r\n        });\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        const newPicture = {\r\n            type: PictureType.Url,\r\n            data: inputUrl.current.value\r\n        };\r\n\r\n        onAccept(newPicture);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth='sm'\r\n        >\r\n            <DialogTitle>Imagen</DialogTitle>\r\n            <Box className={classes.dialogContainer}>\r\n                <Grid\r\n                    container\r\n                    direction='column'\r\n                    spacing={2}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            inputRef={inputUrl}\r\n                            label='URL de la imagen'\r\n                            fullWidth\r\n                            value={formState.data}\r\n                            onInput={handleUrlChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container justify='flex-end' spacing={1}>\r\n                            <Grid item>\r\n                                <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Fab, Grid, GridSize, Icon, makeStyles } from '@material-ui/core';\r\nimport { ChallengePicture } from '../../types/Challenge';\r\nimport { PictureType } from '../../enums/PictureType';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { DialogPictureForm } from './DialogPictureSelector';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '99%',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    pic: {\r\n        maxWidth: '100%',\r\n        maxHeight: '100%'\r\n    }\r\n}));\r\n\r\ninterface PictureDialogState {\r\n    selectedPicture: ChallengePicture,\r\n    selectedPictureIdx: number,\r\n    openDialog: boolean\r\n}\r\n\r\ninterface ItemGridSize {\r\n    height: string,\r\n    width: GridSize\r\n}\r\n\r\ninterface PictureGridProps {\r\n    mode: ComponentMode,\r\n    pictures: ChallengePicture[],\r\n    onPicturesChange?: (newPictures: ChallengePicture[]) => void\r\n}\r\n\r\nexport const PictureGrid: React.FC<PictureGridProps> = (props: PictureGridProps) => {\r\n    const { mode, pictures, onPicturesChange } = props;\r\n\r\n    const [pictureDialogState, setPictureDialogState] = useState<PictureDialogState>();\r\n\r\n    const classes = useStyles();\r\n\r\n    const [pictureItemSize, setPictureItemSize] = useState<ItemGridSize>({ height: '100%', width: 8 });\r\n\r\n    useEffect(() => {\r\n        switch (pictures.length) {\r\n            case 9:\r\n            case 8:\r\n            case 7:\r\n                setPictureItemSize({ height: '33.3%', width: 4 });\r\n                break;\r\n            case 6:\r\n            case 5:\r\n                setPictureItemSize({ height: '50%', width: 4 });\r\n                break;\r\n            case 4:\r\n            case 3:\r\n                setPictureItemSize({ height: '50%', width: 6 });\r\n                break;\r\n            case 2:\r\n                setPictureItemSize({ height: '100%', width: 6 });\r\n                break;\r\n            default:\r\n                setPictureItemSize({ height: '100%', width: 12 });\r\n                break;\r\n        }\r\n    }, [pictures]);\r\n\r\n    const handleAddPictureClick = (picture: ChallengePicture, pictureIdx: number) => {\r\n        setPictureDialogState({\r\n            openDialog: true,\r\n            selectedPicture: picture,\r\n            selectedPictureIdx: pictureIdx\r\n        });\r\n    };\r\n\r\n    const handleAcceptPicture = (picture: ChallengePicture, pictureIdx: number) => {\r\n        if (onPicturesChange) {\r\n            onPicturesChange(\r\n                pictures.map((aPicture: ChallengePicture, idx: number) => idx !== pictureIdx ? {...aPicture} : {...picture})\r\n            );\r\n        }\r\n        setPictureDialogState({\r\n            openDialog: false,\r\n            selectedPicture: {\r\n                type: PictureType.None,\r\n                data: ''\r\n            },\r\n            selectedPictureIdx: -1\r\n        });\r\n    };\r\n\r\n    const handleCancelPicture = () => {\r\n        setPictureDialogState({\r\n            openDialog: false,\r\n            selectedPicture: {\r\n                type: PictureType.None,\r\n                data: ''\r\n            },\r\n            selectedPictureIdx: -1\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            {\r\n                pictureDialogState && (\r\n                    <DialogPictureForm\r\n                        open={pictureDialogState.openDialog}\r\n                        picture={pictureDialogState.selectedPicture}\r\n                        onAccept={(newPic: ChallengePicture) => handleAcceptPicture(\r\n                            newPic, pictureDialogState.selectedPictureIdx\r\n                        )}\r\n                        onCancel={handleCancelPicture}\r\n                    />\r\n                )\r\n            }\r\n            <Grid container className={classes.root}>\r\n                {\r\n                    pictures.map((aPicture: ChallengePicture, pictureIdx: number) => (\r\n                        <Grid item\r\n                            key={`pic${pictureIdx.toString()}`}\r\n                            xs={pictureItemSize.width}\r\n                            style={{ height: pictureItemSize.height, border: mode === ComponentMode.Design ? 'solid 1px' : '0px' }}\r\n                        >\r\n                            <Grid container justify=\"center\" alignItems=\"center\" className={classes.fullHeight}>\r\n                                {\r\n                                    aPicture.type !== PictureType.None && (\r\n                                        <img className={classes.pic} src={aPicture.data} alt=\"\"/>\r\n                                    )\r\n                                }\r\n                                {\r\n                                    mode === ComponentMode.Design && (\r\n                                        <Fab\r\n                                            size=\"medium\"\r\n                                            color=\"primary\"\r\n                                            style={{position: 'absolute', color: '#ffffff'}}\r\n                                            onClick={() => { handleAddPictureClick(aPicture, pictureIdx); }}\r\n                                        >\r\n                                            <Icon>add_a_photo</Icon>\r\n                                        </Fab>\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                        </Grid>\r\n                    ))\r\n                }\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Box, CircularProgress, Grid, Typography } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\ninterface CountdownProps {\r\n    mode: ComponentMode\r\n    time: number,\r\n    stopTimer?: boolean,\r\n    onTimeUp?: () => void\r\n}\r\n\r\n\r\nexport const Countdown: React.FC<CountdownProps> = (props: CountdownProps) => {\r\n    const { mode, time, stopTimer, onTimeUp } = props;\r\n\r\n    const [timeRemaining, setTimeRemaining] = useState<number>(time);\r\n    const [stop, setStop] = useState<boolean>(stopTimer || false);\r\n\r\n\r\n    useEffect(() => {\r\n        setTimeRemaining(time);\r\n    }, [time]);\r\n\r\n    useEffect(() => {\r\n        setStop(stopTimer || false);\r\n    }, [stopTimer]);\r\n\r\n    useEffect(() => {\r\n        let timeoutId: NodeJS.Timeout;\r\n        if (mode === ComponentMode.Play && !stop) {\r\n            timeoutId = setTimeout(() => {\r\n                if (timeRemaining === 0) {\r\n                    if (onTimeUp) {\r\n                        onTimeUp();\r\n                    }\r\n                } else {\r\n                    setTimeRemaining(timeRemaining - 1);\r\n                }\r\n            }, 1000);\r\n        }\r\n        return () => {\r\n            if (timeoutId != null) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n        };\r\n    }, [timeRemaining, onTimeUp]);\r\n\r\n    return (\r\n        <Grid container justify=\"center\" alignItems=\"center\" style={{height: '100%'}}>\r\n            <Grid item>\r\n                <Box position=\"relative\" display=\"inline-flex\">\r\n                    <CircularProgress\r\n                        variant=\"determinate\"\r\n                        color={timeRemaining > 5 ? 'primary': 'secondary'}\r\n                        size=\"75px\"\r\n                        value={Math.round((timeRemaining * 100.0) / (time * 1.0))} />\r\n                    <Box\r\n                        top={0}\r\n                        left={0}\r\n                        bottom={0}\r\n                        right={0}\r\n                        position=\"absolute\"\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                    >\r\n                        <Typography variant=\"h5\" component=\"div\" color=\"textSecondary\">{timeRemaining}</Typography>\r\n                    </Box>\r\n                </Box>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/correct.6415db46.wav\";","export default __webpack_public_path__ + \"static/media/incorrect.70fff5c7.wav\";","import React, { useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../common/ChallengeQuestion';\r\nimport { SelectableOption } from '../common/SelectableOption';\r\nimport { SelectAnswerChallenge, SelectAnswerChallengeAnswer } from '../../types/SelectAnswerChallenge';\r\nimport { PictureGrid } from '../common/PictureGrid';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../common/Countdown';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { ChallengeOptions, ChallengePicture } from '../../types/Challenge';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    pictureContainer: {\r\n        height: '50%'\r\n    },\r\n    answerContainer: {\r\n        height: '30%',\r\n        paddingTop: '10px'\r\n    },\r\n    optionContainer: {\r\n        height: '50%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\ninterface SelectAnswerChallengerProps {\r\n    mode: ComponentMode\r\n    challenge: SelectAnswerChallenge\r\n    options?: ChallengeOptions\r\n    onChallengeChange?: (updatedChallenge: SelectAnswerChallenge) => void\r\n    onSuccess?: () => void\r\n    onError?: () => void\r\n}\r\n\r\nexport const SelectAnswerChallenger: React.FC<SelectAnswerChallengerProps> = (props: SelectAnswerChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [selectedAnswers, setSelectedAnswers] = useState<number[]>([]);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlePicturesChange = (newPictures: ChallengePicture[]) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                pictures: [...newPictures]\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleAnswerChange = (position: number, updatedAnswer: SelectAnswerChallengeAnswer) => {\r\n        const updatedAnswers = challenge.answers.map((anAnswer: SelectAnswerChallengeAnswer, idx: number) => {\r\n            if (idx !== position) {\r\n                if (!challenge.config.multiselect) {\r\n                    return {\r\n                        ...anAnswer,\r\n                        valid: false\r\n                    };\r\n                }\r\n                return { ...anAnswer };\r\n            }\r\n            return { ...updatedAnswer };\r\n        });\r\n\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                answers: updatedAnswers\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handlerOptionClick = (answerIdx: number) => {\r\n        if (mode === ComponentMode.Play) {\r\n            if (challenge.config.multiselect) {\r\n                const theIndex = selectedAnswers.findIndex((anAnswerIdx: number) => anAnswerIdx === answerIdx);\r\n                if (theIndex === -1) {\r\n                    setSelectedAnswers([...selectedAnswers, answerIdx]);\r\n                } else {\r\n                    setSelectedAnswers(selectedAnswers.filter((anAnswerIdx: number) => anAnswerIdx !== answerIdx));\r\n                }\r\n            } else {\r\n                if (challenge.answers[answerIdx].valid) {\r\n                    showResult(true);\r\n                } else {\r\n                    showResult(false);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const wrongsSelected = selectedAnswers\r\n            .map((anAnswerIdx: number) => challenge.answers[anAnswerIdx])\r\n            .filter((anAnswer: SelectAnswerChallengeAnswer) => !anAnswer.valid);\r\n        if (wrongsSelected.length === 0) {\r\n            const validsNotSelected = challenge.answers\r\n                .filter((anAnswer: SelectAnswerChallengeAnswer, answerIdx: number) =>\r\n                    anAnswer.valid && selectedAnswers.indexOf(answerIdx) === -1\r\n                );\r\n            if (validsNotSelected.length === 0) {\r\n                showResult(true);\r\n                return;\r\n            }\r\n        }\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.pictureContainer}>\r\n                <Grid container justify='center' style={{ height: '100%' }}>\r\n                    <Grid item xs={2} style={{ height: '100%' }}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} style={{ height: '100%' }}>\r\n                        <PictureGrid\r\n                            mode={mode}\r\n                            pictures={challenge.pictures}\r\n                            onPicturesChange={handlePicturesChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            challenge.config.multiselect && (\r\n                                <Fab\r\n                                    variant=\"extended\"\r\n                                    size=\"large\"\r\n                                    color=\"primary\"\r\n                                    disabled={mode === ComponentMode.Design || selectedAnswers.length === 0}\r\n                                    onClick={() => { handleCheckClick(); }}\r\n                                >\r\n                                    <Icon>check</Icon>&nbsp;{options?.language === Language.En ? 'Check' : 'Corregir'}\r\n                                </Fab>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='space-evenly' spacing={2} style={{ height: '100%' }}>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={challenge.answers[0].text}\r\n                            icon=\"wb_sunny\"\r\n                            valid={challenge.answers[0].valid}\r\n                            selected={\r\n                                mode === ComponentMode.Play\r\n                                && selectedAnswers.indexOf(0) >= 0\r\n                            }\r\n                            color='#f44336'\r\n                            fontSize={challenge.config.answerFontSize}\r\n                            multiselect={challenge.config.multiselect}\r\n                            showResults={highlightResults}\r\n                            onTextChange={(newText: string) => {\r\n                                handleAnswerChange(0, { ...challenge.answers[0], text: newText });\r\n                            }}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(0, { ...challenge.answers[0], valid });\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(0); }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={challenge.answers[1].text}\r\n                            icon=\"brightness_2\"\r\n                            valid={challenge.answers[1].valid}\r\n                            selected={\r\n                                mode === ComponentMode.Play\r\n                                && selectedAnswers.indexOf(1) >= 0\r\n                            }\r\n                            color='#03a9f4'\r\n                            fontSize={challenge.config.answerFontSize}\r\n                            multiselect={challenge.config.multiselect}\r\n                            showResults={highlightResults}\r\n                            onTextChange={(newText: string) => {\r\n                                handleAnswerChange(1, { ...challenge.answers[1], text: newText });\r\n                            }}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(1, { ...challenge.answers[1], valid });\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(1); }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={challenge.answers[2].text}\r\n                            icon=\"flash_on\"\r\n                            valid={challenge.answers[2].valid}\r\n                            selected={\r\n                                mode === ComponentMode.Play\r\n                                && selectedAnswers.indexOf(2) >= 0\r\n                            }\r\n                            color='#ffc107'\r\n                            fontSize={challenge.config.answerFontSize}\r\n                            multiselect={challenge.config.multiselect}\r\n                            showResults={highlightResults}\r\n                            onTextChange={(newText: string) => {\r\n                                handleAnswerChange(2, { ...challenge.answers[2], text: newText });\r\n                            }}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(2, { ...challenge.answers[2], valid });\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(2); }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={challenge.answers[3].text}\r\n                            icon=\"cloud\"\r\n                            valid={challenge.answers[3].valid}\r\n                            selected={\r\n                                mode === ComponentMode.Play\r\n                                && selectedAnswers.indexOf(3) >= 0\r\n                            }\r\n                            color='#4caf50'\r\n                            fontSize={challenge.config.answerFontSize}\r\n                            multiselect={challenge.config.multiselect}\r\n                            showResults={highlightResults}\r\n                            onTextChange={(newText: string) => {\r\n                                handleAnswerChange(3, { ...challenge.answers[3], text: newText });\r\n                            }}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(3, { ...challenge.answers[3], valid });\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(3); }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControlLabel, Grid, makeStyles, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { SelectAnswerChallengeConfig } from '../../types/SelectAnswerChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface SelectAnswerConfiguratorProps {\r\n    config: SelectAnswerChallengeConfig,\r\n    onConfigChange?: (config: SelectAnswerChallengeConfig) => void\r\n}\r\n\r\nexport const SelectAnswerConfigurator: React.FC<SelectAnswerConfiguratorProps> = (props: SelectAnswerConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<SelectAnswerChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputPictureCount = useRef({} as HTMLInputElement);\r\n    const checkPictureLabel = useRef({} as HTMLInputElement);\r\n    const inputAnswerFontSize = useRef({} as HTMLInputElement);\r\n    const checkMultiselect = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputPictureCount}\r\n                    type='number'\r\n                    label='Número de imágenes'\r\n                    inputProps={{ min: 1, max: 9 }}\r\n                    value={formData.pictureCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('pictureCount', parseInt(inputPictureCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkPictureLabel}\r\n                            name='checkPictureLabel'\r\n                            checked={formData.pictureLabel}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('pictureLabel', checkPictureLabel.current.checked); }}\r\n                        />}\r\n                    label='Numerar imágenes'\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputAnswerFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de las respuestas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.answerFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('answerFontSize', parseInt(inputAnswerFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkMultiselect}\r\n                            name='checkMultiselect'\r\n                            checked={formData.multiselect}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('multiselect', checkMultiselect.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Respuesta múltiple'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { SelectAnswerChallenge, SelectAnswerChallengeAnswer, SelectAnswerChallengeConfig } from '../../types/SelectAnswerChallenge';\r\nimport { SelectAnswerChallenger } from './SelectAnswerChallenger';\r\nimport { SelectAnswerConfigurator } from './SelectAnswerConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { ChallengePicture } from '../../types/Challenge';\r\nimport { PictureType } from '../../enums/PictureType';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface SelectAnswerChallengeDesignerProps {\r\n    challenge: SelectAnswerChallenge,\r\n    onChallengeChange: (challenge: SelectAnswerChallenge) => void\r\n}\r\n\r\nexport const SelectAnswerChallengeDesigner: React.FC<SelectAnswerChallengeDesignerProps> = (\r\n    props: SelectAnswerChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustPictures = (pictureCount: number): ChallengePicture[] => {\r\n        let pictures = [...challenge.pictures];\r\n        if (pictureCount > pictures.length) {\r\n            const newPictures = Array.from(Array(pictureCount - pictures.length))\r\n                .map(() => ({ type: PictureType.None, data: ''}));\r\n            pictures = [...pictures, ...newPictures];\r\n        } else if (pictureCount < pictures.length) {\r\n            pictures = pictures.slice(0, pictureCount);\r\n        }\r\n        return pictures;\r\n    };\r\n\r\n    const readjustValidAnswers = (multiselect: boolean): SelectAnswerChallengeAnswer[] => {\r\n        let validPresent = false;\r\n        const answers: SelectAnswerChallengeAnswer[] = challenge.answers.map((anAnswer: SelectAnswerChallengeAnswer) => {\r\n            if (!multiselect) {\r\n                if (anAnswer.valid && !validPresent) {\r\n                    validPresent = true;\r\n                    return { ...anAnswer };\r\n                }\r\n                return { ...anAnswer, valid: false };\r\n            }\r\n            return { ...anAnswer };\r\n        });\r\n        return answers;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: SelectAnswerChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: SelectAnswerChallengeConfig) => {\r\n        const pictures = readjustPictures(config.pictureCount);\r\n        const answers = readjustValidAnswers(config.multiselect);\r\n        const updatedChallenge: SelectAnswerChallenge = {\r\n            ...challenge,\r\n            pictures: [...pictures],\r\n            answers: [...answers],\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <SelectAnswerChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <SelectAnswerConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Card, Grid, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../common/ChallengeQuestion';\r\nimport { SelectableOption } from '../common/SelectableOption';\r\nimport { TrueOrFalseChallenge } from '../../types/TrueOrFalseChallenge';\r\nimport { PictureGrid } from '../common/PictureGrid';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../common/Countdown';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { ChallengeOptions, ChallengePicture } from '../../types/Challenge';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    pictureContainer: {\r\n        height: '60%'\r\n    },\r\n    answerContainer: {\r\n        height: '20%',\r\n        paddingTop: '10px'\r\n    },\r\n    optionContainer: {\r\n        height: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\ninterface TrueOrFalseChallengerProps {\r\n    mode: ComponentMode\r\n    challenge: TrueOrFalseChallenge\r\n    options?: ChallengeOptions\r\n    onChallengeChange?: (updatedChallenge: TrueOrFalseChallenge) => void\r\n    onSuccess?: () => void\r\n    onError?: () => void\r\n}\r\n\r\nexport const TrueOrFalseChallenger: React.FC<TrueOrFalseChallengerProps> = (props: TrueOrFalseChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlePicturesChange = (newPictures: ChallengePicture[]) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                pictures: [...newPictures]\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleAnswerChange = (updatedAnswer: boolean) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                answer: updatedAnswer\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handlerOptionClick = (answer: boolean) => {\r\n        if (mode === ComponentMode.Play) {\r\n            if (challenge.answer === answer) {\r\n                showResult(true);\r\n            } else {\r\n                showResult(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.pictureContainer}>\r\n                <Grid container justify='center' style={{ height: '100%' }}>\r\n                    <Grid item xs={2} style={{ height: '100%' }}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} style={{ height: '100%' }}>\r\n                        <PictureGrid\r\n                            mode={mode}\r\n                            pictures={challenge.pictures}\r\n                            onPicturesChange={handlePicturesChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll} />\r\n                </Grid>\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='space-evenly' spacing={2} style={{ height: '100%' }}>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={options?.language === Language.En ? 'True' : 'Verdadero'}\r\n                            icon=\"wb_sunny\"\r\n                            valid={challenge.answer}\r\n                            color='#4caf50'\r\n                            fontSize={42}\r\n                            showResults={highlightResults}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(true);\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(true); }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.optionContainer}>\r\n                        <SelectableOption\r\n                            mode={mode}\r\n                            text={options?.language === Language.En ? 'False' : 'Falso'}\r\n                            icon=\"brightness_2\"\r\n                            valid={!challenge.answer}\r\n                            color='#f44336'\r\n                            fontSize={42}\r\n                            showResults={highlightResults}\r\n                            onValidChange={(valid: boolean) => {\r\n                                handleAnswerChange(false);\r\n                            }}\r\n                            onClick={() => { handlerOptionClick(false); }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControlLabel, Grid, makeStyles, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { TrueOrFalseChallengeConfig } from '../../types/TrueOrFalseChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface TrueOrFalseConfiguratorProps {\r\n    config: TrueOrFalseChallengeConfig,\r\n    onConfigChange?: (config: TrueOrFalseChallengeConfig) => void\r\n}\r\n\r\nexport const TrueOrFalseConfigurator: React.FC<TrueOrFalseConfiguratorProps> = (props: TrueOrFalseConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<TrueOrFalseChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputPictureCount = useRef({} as HTMLInputElement);\r\n    const checkPictureLabel = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputPictureCount}\r\n                    type='number'\r\n                    label='Número de imágenes'\r\n                    inputProps={{ min: 1, max: 9 }}\r\n                    value={formData.pictureCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('pictureCount', parseInt(inputPictureCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkPictureLabel}\r\n                            name='checkPictureLabel'\r\n                            checked={formData.pictureLabel}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('pictureLabel', checkPictureLabel.current.checked); }}\r\n                        />}\r\n                    label='Numerar imágenes'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { TrueOrFalseChallenge, TrueOrFalseChallengeConfig } from '../../types/TrueOrFalseChallenge';\r\nimport { TrueOrFalseChallenger } from './TrueOrFalseChallenger';\r\nimport { TrueOrFalseConfigurator } from './TrueOrFalseConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { ChallengePicture } from '../../types/Challenge';\r\nimport { PictureType } from '../../enums/PictureType';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface TrueOrFalseChallengeDesignerProps {\r\n    challenge: TrueOrFalseChallenge,\r\n    onChallengeChange: (challenge: TrueOrFalseChallenge) => void\r\n}\r\n\r\nexport const TrueOrFalseChallengeDesigner: React.FC<TrueOrFalseChallengeDesignerProps> = (\r\n    props: TrueOrFalseChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustPictures = (pictureCount: number): ChallengePicture[] => {\r\n        let pictures = [...challenge.pictures];\r\n        if (pictureCount > pictures.length) {\r\n            const newPictures = Array.from(Array(pictureCount - pictures.length))\r\n                .map(() => ({ type: PictureType.None, data: ''}));\r\n            pictures = [...pictures, ...newPictures];\r\n        } else if (pictureCount < pictures.length) {\r\n            pictures = pictures.slice(0, pictureCount);\r\n        }\r\n        return pictures;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: TrueOrFalseChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: TrueOrFalseChallengeConfig) => {\r\n        const pictures = readjustPictures(config.pictureCount);\r\n        const updatedChallenge: TrueOrFalseChallenge = {\r\n            ...challenge,\r\n            pictures: [...pictures],\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <TrueOrFalseChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <TrueOrFalseConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import { makeStyles } from '@material-ui/core';\r\nimport React, { CSSProperties } from 'react';\r\nimport { useDrag } from 'react-dnd';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    item: {\r\n        borderRadius: '10em',\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.primary.contrastText,\r\n        padding: '0.5rem 1rem',\r\n        cursor: 'move',\r\n    }\r\n}));\r\n\r\ninterface DragableItemProps {\r\n    name: string\r\n    style?: CSSProperties\r\n    iconButton?: React.ReactNode\r\n}\r\n\r\nexport const DragableItem: React.FC<DragableItemProps> = (props: DragableItemProps) => {\r\n    const  { name, style, iconButton } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [{ opacity }, drag] = useDrag(\r\n        () => ({\r\n            type: 'dnd',\r\n            item: { name },\r\n            collect: (monitor) => ({\r\n                opacity: monitor.isDragging() ? 0.4 : 1,\r\n            }),\r\n        }),\r\n        [name],\r\n    );\r\n\r\n    return (\r\n        <div\r\n            ref={drag}\r\n            className={classes.item}\r\n            style={{\r\n                opacity,\r\n                ...style\r\n            }}\r\n        >\r\n            {name}\r\n            {\r\n                iconButton\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, Chip, Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { useDrop } from 'react-dnd';\r\nimport { DragableItem } from '../common/DragableItem';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        width: '100%',\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    titleContainer: {\r\n        width: '100%',\r\n        padding: '5px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.primary.contrastText\r\n    },\r\n    itemsContainer: {\r\n        padding: '5px',\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\ninterface GroupState {\r\n    title: string,\r\n    validItems: string[],\r\n    droppedItems: string[]\r\n}\r\n\r\ninterface DropGroupProps {\r\n    mode: ComponentMode,\r\n    title: string,\r\n    validItems: string[],\r\n    showResults: boolean,\r\n    fontSize?: number,\r\n    onTitleChange?: (newTitle: string) => void,\r\n    onItemsChange?: (newTitle: string[]) => void,\r\n    droppedItems?: string[]\r\n    onDrop?: (item: unknown) => void\r\n}\r\n\r\nexport const DropGroup: React.FC<DropGroupProps> = (props: DropGroupProps) => {\r\n    const {\r\n        mode,\r\n        title,\r\n        validItems,\r\n        showResults,\r\n        fontSize,\r\n        onTitleChange,\r\n        onItemsChange,\r\n        droppedItems,\r\n        onDrop\r\n    } = props;\r\n\r\n    const handleDrop = (item: unknown) => {\r\n        if(onDrop) {\r\n            onDrop(item);\r\n        }\r\n    };\r\n\r\n    const [{ isOver, canDrop }, drop] = useDrop({\r\n        accept: 'dnd',\r\n        drop: handleDrop,\r\n        collect: (monitor: { isOver: () => boolean, canDrop: () => boolean }) => ({\r\n            isOver: monitor.isOver(),\r\n            canDrop: monitor.canDrop(),\r\n        })\r\n    });\r\n\r\n    const [groupState, setGroupState] = useState<GroupState>({\r\n        title: title || '',\r\n        validItems: validItems || [],\r\n        droppedItems: droppedItems || []\r\n    });\r\n\r\n    const inputTitle = useRef({} as HTMLInputElement);\r\n    const inputItem = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (droppedItems != null) {\r\n            setGroupState({\r\n                ...groupState,\r\n                droppedItems: [...droppedItems]\r\n            });\r\n        }\r\n    }, [droppedItems]);\r\n\r\n\r\n    const handleTitleChange = () => {\r\n        const newState = {\r\n            ...groupState,\r\n            title: inputTitle.current.value\r\n        };\r\n        setGroupState(newState);\r\n        if (onTitleChange) {\r\n            onTitleChange(inputTitle.current.value);\r\n        }\r\n    };\r\n\r\n    const handleValidItemKeyPress = (evt: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (evt.code === 'Enter' && inputItem.current.value !== '') {\r\n            addValidItem();\r\n        }\r\n    };\r\n\r\n    const addValidItem = () => {\r\n        const updatedItems = [...(groupState.validItems), inputItem.current.value];\r\n        const newState: GroupState = {\r\n            ...groupState,\r\n            validItems: updatedItems\r\n        };\r\n        setGroupState(newState);\r\n        if (onItemsChange) {\r\n            onItemsChange(updatedItems);\r\n        }\r\n        inputItem.current.value = '';\r\n    };\r\n\r\n    const handleRemoveValidItem = (itemIdx: number) => {\r\n        const updatedItems = groupState.validItems.filter((anItem: string, idx: number) => itemIdx !== idx);\r\n        const newState: GroupState = {\r\n            ...groupState,\r\n            validItems: updatedItems\r\n        };\r\n        setGroupState(newState);\r\n        if (onItemsChange) {\r\n            onItemsChange(updatedItems);\r\n        }\r\n    };\r\n\r\n    const getDragableItemStyle = (item: string) => showResults ? (\r\n        validItems.indexOf(item) >= 0 ? {\r\n            fontSize: `${fontSize}px`,\r\n            backgroundColor: '#4caf50'\r\n        } : {\r\n            fontSize: `${fontSize}px`,\r\n            backgroundColor: '#f44336'\r\n        }\r\n    ) : {fontSize: `${fontSize}px`};\r\n\r\n    return (\r\n        <Card\r\n            elevation={4}\r\n            className={classes.root}\r\n            style={{\r\n                backgroundColor: (isOver && canDrop) ? '#efefef' : '#ffffff'\r\n            }}\r\n        >\r\n            <Grid container direction=\"column\" className={`${classes.fullHeight} ${classes.fullWidth}`}>\r\n                <Grid item className={classes.titleContainer}>\r\n                    {\r\n                        mode === ComponentMode.Play ? (\r\n                            <Typography style={{ fontSize }}>\r\n                                { title}\r\n                            </Typography>\r\n                        ) : (\r\n                            <TextField\r\n                                inputRef={inputTitle}\r\n                                value={groupState.title}\r\n                                style={{\r\n                                    width: '100%'\r\n                                }}\r\n                                inputProps={\r\n                                    {\r\n                                        style: {\r\n                                            fontSize,\r\n                                            textAlign: 'center',\r\n                                            color: '#ffffff'\r\n\r\n                                        }\r\n                                    }\r\n                                }\r\n                                onInput={handleTitleChange}\r\n                            />\r\n                        )\r\n                    }\r\n                </Grid>\r\n                <Grid item xs>\r\n                    <Grid container direction=\"column\" alignItems=\"center\" className={classes.itemsContainer} spacing={2}>\r\n                        {\r\n                            mode === ComponentMode.Design\r\n                            && groupState.validItems.map((anItem: string, itemIdx: number) => (\r\n                                <Grid item key={`item_${itemIdx}`}>\r\n                                    <Chip\r\n                                        label={anItem}\r\n                                        color=\"secondary\"\r\n                                        size=\"medium\"\r\n                                        style={{ fontSize, color: '#ffffff' }}\r\n                                        onDelete={() => handleRemoveValidItem(itemIdx)}\r\n                                    />\r\n                                </Grid>\r\n                            ))\r\n                        }\r\n                        {\r\n                            mode === ComponentMode.Design && (\r\n                                <Grid item key=\"newItem\">\r\n                                    <TextField\r\n                                        inputRef={inputItem}\r\n                                        variant=\"outlined\"\r\n                                        InputProps={\r\n                                            {\r\n                                                style: {\r\n                                                    fontSize,\r\n                                                    color: '#000000'\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        label=\"Nuevo elemento\"\r\n                                        onKeyPress={handleValidItemKeyPress}\r\n                                    />\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                        {\r\n                            mode === ComponentMode.Play && (\r\n                                <Grid item key=\"dropItem\" xs className={`${classes.fullWidth} ${classes.fullHeight}`}>\r\n                                    <div\r\n                                        ref={drop}\r\n                                        className={`${classes.fullWidth} ${classes.fullHeight}`}\r\n                                    >\r\n                                        <Grid container direction=\"column\" alignItems=\"center\" spacing={1} className={classes.fullHeight}>\r\n                                            {\r\n                                                groupState.droppedItems.map((aDroppedItem: string) => (\r\n                                                    <Grid\r\n                                                        item\r\n                                                        key={`gridItem_${aDroppedItem}`}\r\n                                                    >\r\n                                                        <DragableItem\r\n                                                            key={aDroppedItem}\r\n                                                            name={aDroppedItem}\r\n                                                            style={getDragableItemStyle(aDroppedItem)}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                ))\r\n                                            }\r\n                                        </Grid>\r\n                                    </div>\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../common/ChallengeQuestion';\r\nimport { ClassifyChallenge, ClassifyChallengeGroup } from '../../types/ClassifyChallenge';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../common/Countdown';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { DropGroup } from './DropGroup';\r\nimport { DragableItem } from '../common/DragableItem';\r\nimport { ChallengeOptions } from '../../types/Challenge';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    classifyContainer: {\r\n        height: '80%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionsContainer: {\r\n        height: '20%',\r\n        border: 'solid 1px gray',\r\n        backgroundColor: '#ffffff'\r\n    },\r\n    groupsContainer: {\r\n        height: '80%'\r\n    },\r\n}));\r\n\r\ninterface dropState {\r\n    groupName: string,\r\n    items: string[]\r\n}\r\n\r\nconst initialClassifyState = (challenge: ClassifyChallenge): dropState[] => {\r\n    return challenge.groups.map((aGroup: ClassifyChallengeGroup) => (\r\n        {\r\n            groupName: aGroup.name,\r\n            items: []\r\n        }\r\n    ));\r\n};\r\n\r\nconst reorderItems = (groups: ClassifyChallengeGroup[], mode: ComponentMode): string[] => {\r\n    let list: string[] = groups.reduce((acc: string[], current: ClassifyChallengeGroup) => [...acc, ...current.items], []);\r\n    if (mode === ComponentMode.Play) {\r\n        list = list.sort(() => Math.random() - 0.5);\r\n    }\r\n    return list;\r\n};\r\n\r\ninterface ClassifyChallengerProps {\r\n    mode: ComponentMode\r\n    challenge: ClassifyChallenge\r\n    options?: ChallengeOptions\r\n    onChallengeChange?: (updatedChallenge: ClassifyChallenge) => void\r\n    onSuccess?: () => void\r\n    onError?: () => void\r\n}\r\n\r\nexport const ClassifyChallenger: React.FC<ClassifyChallengerProps> = (props: ClassifyChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [classifyState, setClassifyState] =useState<dropState[]>(initialClassifyState(challenge));\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [draggableItems, setDragabbleItems] = useState<string[]>(reorderItems(challenge.groups, mode));\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setDragabbleItems(reorderItems(challenge.groups, mode));\r\n    }, [challenge.groups]);\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleNameChange = (groupIdx: number, updatedName: string) => {\r\n        const updatedGroups = challenge.groups.map((aGroup: ClassifyChallengeGroup, idx: number) => {\r\n            return {\r\n                ...aGroup,\r\n                name: idx !== groupIdx ? aGroup.name : updatedName\r\n            };\r\n        });\r\n\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                groups: updatedGroups\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleItemsChange = (groupIdx: number, updatedItems: string[]) => {\r\n        const updatedGroups = challenge.groups.map((aGroup: ClassifyChallengeGroup, idx: number) => {\r\n            if (idx !== groupIdx) {\r\n                return { ...aGroup };\r\n            }\r\n            return {\r\n                ...aGroup,\r\n                items: [...updatedItems]\r\n            };\r\n        });\r\n\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                groups: updatedGroups\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const correct = challenge.groups.reduce(\r\n            (accGroups: boolean, currentGroup: ClassifyChallengeGroup) => {\r\n                const correctItems = currentGroup.items.reduce(\r\n                    (accItems: boolean, currentItem: string) => {\r\n                        const theGroup = classifyState.find((aGroup: dropState) => aGroup.groupName === currentGroup.name);\r\n                        if (theGroup != null) {\r\n                            return accItems && theGroup.items.indexOf(currentItem) >= 0;\r\n                        }\r\n                        return false;\r\n                    },\r\n                    true\r\n                );\r\n                return accGroups && correctItems;\r\n            },\r\n            true\r\n        );\r\n        showResult(correct);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const isDropped = (itemName: string) => classifyState.reduce(\r\n        (acc: boolean, current: dropState) => acc || current.items.indexOf(itemName) >= 0,\r\n        false\r\n    );\r\n\r\n    const completed = () => {\r\n        const optionCount = challenge.groups.reduce(\r\n            (acc: number, current: ClassifyChallengeGroup) => acc + current.items.length,\r\n            0\r\n        );\r\n        const dropCount = classifyState.reduce(\r\n            (acc: number, current: dropState) => acc + current.items.length,\r\n            0\r\n        );\r\n        return optionCount === dropCount;\r\n    };\r\n\r\n    const handleDrop = (groupName: string, droppedItem: any) => {\r\n        const newDroppedItems: dropState[] = classifyState.map((aGroup: { groupName: string, items: string[]}) => {\r\n            if (aGroup.groupName !== groupName) {\r\n                return {\r\n                    ...aGroup,\r\n                    items: aGroup.items.filter((anItem: string) => anItem !== droppedItem.name)\r\n                };\r\n            }\r\n\r\n            const idxItem = aGroup.items.findIndex((anItem: string) => anItem === droppedItem.name);\r\n            if (idxItem >= 0) {\r\n                return {...aGroup};\r\n            }\r\n            return {\r\n                ...aGroup,\r\n                items: [\r\n                    ...aGroup.items,\r\n                    droppedItem.name\r\n                ]\r\n            };\r\n        });\r\n        setClassifyState(newDroppedItems);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.classifyContainer}>\r\n                <Grid container justify='center' className={classes.fullHeight}>\r\n                    <Grid item xs={2} className={classes.fullHeight}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} className={classes.fullHeight}>\r\n                        <DndProvider backend={HTML5Backend}>\r\n                            <Grid container spacing={2} className={classes.fullHeight}>\r\n                                <Grid item xs={12} className={classes.optionsContainer}>\r\n                                    <Grid container spacing={2} justify=\"space-around\" alignItems=\"center\">\r\n                                        {\r\n                                            draggableItems.map((anItem: string, idx: number) => !isDropped(anItem) && (\r\n                                                !isDropped(anItem) && (\r\n                                                    <Grid item key={`gridItem_${idx}`}>\r\n                                                        <DragableItem\r\n                                                            name={anItem}\r\n                                                            key={`dragable_${idx}`}\r\n                                                            style={{fontSize: challenge.config.itemsFontSize}}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                )\r\n                                            ))\r\n                                        }\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} className={classes.groupsContainer}>\r\n                                    <Grid container justify=\"space-evenly\" spacing={2} style={{ height: '100%' }}>\r\n                                        {\r\n                                            challenge.groups.map((aGroup: ClassifyChallengeGroup, idx: number) => (\r\n                                                <Grid\r\n                                                    item\r\n                                                    xs={4}\r\n                                                    key={`group_${idx}`}\r\n                                                >\r\n                                                    <DropGroup\r\n                                                        mode={mode}\r\n                                                        title={aGroup.name}\r\n                                                        validItems={aGroup.items}\r\n                                                        showResults={highlightResults}\r\n                                                        fontSize={challenge.config.itemsFontSize}\r\n                                                        onTitleChange={(newName: string) => handleNameChange(idx, newName)}\r\n                                                        onItemsChange={(newItems: string[]) => handleItemsChange(idx, newItems)}\r\n                                                        droppedItems={\r\n                                                            classifyState\r\n                                                                .find((auxGroup: dropState) => auxGroup.groupName === aGroup.name)\r\n                                                                ?.items\r\n                                                        }\r\n                                                        onDrop={(droppedItem: unknown) => handleDrop(aGroup.name, droppedItem)}\r\n                                                    />\r\n                                                </Grid>\r\n                                            ))\r\n                                        }\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </DndProvider>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || !completed()}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;{options?.language === Language.En ? 'Check' : 'Corregir'}\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ClassifyChallengeConfig } from '../../types/ClassifyChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface ClassifyConfiguratorProps {\r\n    config: ClassifyChallengeConfig,\r\n    onConfigChange?: (config: ClassifyChallengeConfig) => void\r\n}\r\n\r\nexport const ClassifyConfigurator: React.FC<ClassifyConfiguratorProps> = (props: ClassifyConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<ClassifyChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputItemsFontSize = useRef({} as HTMLInputElement);\r\n    const inputGroupCount = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemsFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemsFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('itemsFontSize', parseInt(inputItemsFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputGroupCount}\r\n                    type='number'\r\n                    label='Número de grupos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.groupCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('groupCount', parseInt(inputGroupCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { ClassifyChallenge, ClassifyChallengeConfig, ClassifyChallengeGroup } from '../../types/ClassifyChallenge';\r\nimport { ClassifyChallenger } from './ClassifyChallenger';\r\nimport { ClassifyConfigurator } from './ClassifyConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface ClassifyChallengeDesignerProps {\r\n    challenge: ClassifyChallenge,\r\n    onChallengeChange: (challenge: ClassifyChallenge) => void\r\n}\r\n\r\nexport const ClassifyChallengeDesigner: React.FC<ClassifyChallengeDesignerProps> = (\r\n    props: ClassifyChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustGroups = (groupCount: number): ClassifyChallengeGroup[] => {\r\n        let groups = [...challenge.groups];\r\n        if (groupCount > groups.length) {\r\n            const newGroups = Array.from(Array(groupCount - groups.length))\r\n                .map(() => ({ name: '', items: []}));\r\n            groups = [...groups, ...newGroups];\r\n        } else if (groupCount < groups.length) {\r\n            groups = groups.slice(0, groupCount);\r\n        }\r\n        return groups;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: ClassifyChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: ClassifyChallengeConfig) => {\r\n        const groups = readjustGroups(config.groupCount);\r\n        const updatedChallenge: ClassifyChallenge = {\r\n            ...challenge,\r\n            groups,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <ClassifyChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <ClassifyConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../common/ChallengeQuestion';\r\nimport { SortChallenge } from '../../types/SortChallenge';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../common/Countdown';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    pictureContainer: {\r\n        height: '80%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionsContainer: {\r\n        height: '20%',\r\n        border: 'solid 1px'\r\n    },\r\n    item: {\r\n        padding: '5px 10px',\r\n        backgroundColor: theme.palette.secondary.main,\r\n        color: theme.palette.primary.contrastText,\r\n        borderRadius: '20px'\r\n    },\r\n    groupsContainer: {\r\n        height: '80%'\r\n    },\r\n}));\r\n\r\ninterface SortChallengerProps {\r\n    mode: ComponentMode\r\n    challenge: SortChallenge\r\n    onChallengeChange?: (updatedChallenge: SortChallenge) => void\r\n    onSuccess?: () => void\r\n    onError?: () => void\r\n}\r\n\r\nexport const SortChallenger: React.FC<SortChallengerProps> = (props: SortChallengerProps) => {\r\n    const { mode, challenge, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [selectedAnswers /* , setSelectedAnswers */] = useState<number[]>([]);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n    //     const wrongsSelected = selectedAnswers\r\n    //         .map((anAnswerIdx: number) => challenge.answers[anAnswerIdx])\r\n    //         .filter((anAnswer: SelectAnswerChallengeAnswer) => !anAnswer.valid);\r\n    //     if (wrongsSelected.length === 0) {\r\n    //         const validsNotSelected = challenge.answers\r\n    //             .filter((anAnswer: SelectAnswerChallengeAnswer, answerIdx: number) =>\r\n    //                 anAnswer.valid && selectedAnswers.indexOf(answerIdx) === -1\r\n    //             );\r\n    //         if (validsNotSelected.length === 0) {\r\n    //             showResult(true);\r\n    //             return;\r\n    //         }\r\n    //     }\r\n    //     showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.pictureContainer}>\r\n                <Grid container justify='center' className={classes.fullHeight}>\r\n                    <Grid item xs={2} className={classes.fullHeight}>\r\n                        <Countdown\r\n                            mode={mode}\r\n                            time={challenge.config.timeLimit}\r\n                            stopTimer={stopTimer}\r\n                            onTimeUp={handlerTimeUp}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={8} className={classes.fullHeight}>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || selectedAnswers.length === 0}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;Corregir\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Grid, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { SortChallengeConfig } from '../../types/SortChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface SortConfiguratorProps {\r\n    config: SortChallengeConfig,\r\n    onConfigChange?: (config: SortChallengeConfig) => void\r\n}\r\n\r\nexport const SortConfigurator: React.FC<SortConfiguratorProps> = (props: SortConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<SortChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputItemsFontSize = useRef({} as HTMLInputElement);\r\n    const inputItemCount = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemsFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemsFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('itemsFontSize', parseInt(inputItemsFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemCount}\r\n                    type='number'\r\n                    label='Número de elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('groupCount', parseInt(inputItemCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { SortChallenge, SortChallengeConfig } from '../../types/SortChallenge';\r\nimport { SortChallenger } from './SortChallenger';\r\nimport { SortConfigurator } from './SortConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface SortChallengeDesignerProps {\r\n    challenge: SortChallenge,\r\n    onChallengeChange: (challenge: SortChallenge) => void\r\n}\r\n\r\nexport const SortChallengeDesigner: React.FC<SortChallengeDesignerProps> = (\r\n    props: SortChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustItems = (itemCount: number): string[] => {\r\n        let items = [...challenge.items];\r\n        if (itemCount > items.length) {\r\n            const newItems = Array.from(Array(itemCount - items.length))\r\n                .map(() => (''));\r\n            items = [...items, ...newItems];\r\n        } else if (itemCount < items.length) {\r\n            items = items.slice(0, itemCount);\r\n        }\r\n        return items;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: SortChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: SortChallengeConfig) => {\r\n        const items = readjustItems(config.itemCount);\r\n        const updatedChallenge: SortChallenge = {\r\n            ...challenge,\r\n            items,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <SortChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <SortConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useRef, useState } from 'react';\r\nimport { Button, Grid, Icon, makeStyles, TextField } from '@material-ui/core';\r\nimport { FillTableChallengeCell } from '../../types/FillTableChallenge';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: 'solid 1px gray'\r\n    },\r\n    fixed: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: '#ffffff'\r\n    },\r\n    valid: {\r\n        backgroundColor: '#4caf50',\r\n    },\r\n    invalid: {\r\n        backgroundColor: '#f44336',\r\n    }\r\n}));\r\n\r\ninterface TableCellProps {\r\n    mode: ComponentMode,\r\n    cell: FillTableChallengeCell,\r\n    fixed?: boolean,\r\n    fontSize?: number,\r\n    showResults?: boolean,\r\n    success?: boolean\r\n    onCellChange: (newCell: FillTableChallengeCell) => void\r\n}\r\n\r\nexport const TableCell: React.FC<TableCellProps> = (props: TableCellProps) => {\r\n    const { mode, cell, fixed, fontSize, showResults, success, onCellChange } = props;\r\n\r\n    const [formData, setFormData] = useState<FillTableChallengeCell>(cell);\r\n    const inputText = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTextChange = () => {\r\n        const newState = {\r\n            ...formData,\r\n            text: inputText.current.value\r\n        };\r\n        setFormData(newState);\r\n        onCellChange(newState);\r\n    };\r\n\r\n    const handleVisibilityChange = () => {\r\n        const newState ={\r\n            ...formData,\r\n            hidden: !formData.hidden\r\n        };\r\n        setFormData(newState);\r\n        onCellChange(newState);\r\n    };\r\n\r\n    return (\r\n        <Grid container alignItems=\"center\" className={`${classes.root} ${fixed ? classes.fixed : (showResults ? (success ? classes.valid : classes.invalid ) : '')}`}>\r\n            {\r\n                mode === ComponentMode.Design && !fixed && (\r\n                    <Grid item>\r\n                        <Button value=\"hidden\" onClick={handleVisibilityChange}>\r\n                            <Icon color={formData.hidden ? 'secondary' : 'primary'}>\r\n                                {\r\n                                    formData.hidden ? 'visibility_off' : 'visibility'\r\n                                }\r\n                            </Icon>\r\n                        </Button>\r\n                    </Grid>\r\n                )\r\n            }\r\n            <Grid item xs>\r\n                {\r\n                    (mode === ComponentMode.Design || formData.hidden) ? (\r\n                        <TextField\r\n                            inputRef={inputText}\r\n                            value={formData.text}\r\n                            color='secondary'\r\n                            inputProps = {{\r\n                                style: {\r\n                                    textAlign: 'center',\r\n                                    fontSize: `${fontSize != null ? fontSize : 28}px`,\r\n                                    color: fixed || showResults ? '#ffffff': '#000000'\r\n                                }\r\n                            }}\r\n                            onInput={handleTextChange}\r\n                        />\r\n                    ) : (\r\n                        <div\r\n                            style={{\r\n                                textAlign: 'center',\r\n                                fontSize: `${fontSize != null ? fontSize : 28}px`,\r\n                                color: fixed || showResults ? '#ffffff': '#000000'\r\n                            }}\r\n                        >\r\n                            {formData.text}\r\n                        </div>\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../common/ChallengeQuestion';\r\nimport { FillTableChallenge, FillTableChallengeCell } from '../../types/FillTableChallenge';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../common/Countdown';\r\n\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { TableCell } from './TableCell';\r\nimport { ChallengeOptions } from '../../types/Challenge';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    answerContainer: {\r\n        height: '80%'\r\n    },\r\n    optionContainer: {\r\n        height: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    cell: {\r\n        // border: 'solid 1px gray',\r\n        height: '60px'\r\n    }\r\n}));\r\n\r\nconst initialFillTableState = (challenge: FillTableChallenge): FillTableChallengeCell[][] => {\r\n    return challenge.items.map((aRow: FillTableChallengeCell[]) => {\r\n        const updatedColumns = aRow.map((aColumn: FillTableChallengeCell) => {\r\n            return aColumn.hidden ? {...aColumn, text: ''} : {...aColumn};\r\n        });\r\n        return updatedColumns;\r\n    });\r\n};\r\n\r\ninterface FillTableChallengerProps {\r\n    mode: ComponentMode\r\n    challenge: FillTableChallenge\r\n    options?: ChallengeOptions\r\n    onChallengeChange?: (updatedChallenge: FillTableChallenge) => void\r\n    onSuccess?: () => void\r\n    onError?: () => void\r\n}\r\n\r\nexport const FillTableChallenger: React.FC<FillTableChallengerProps> = (props: FillTableChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [fillTableState, setFillTableState] =useState<FillTableChallengeCell[][]>(initialFillTableState(challenge));\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const handleCellChange = (newCell: FillTableChallengeCell, rowIdx: number, columnIdx: number) => {\r\n        const updatedItems = (mode === ComponentMode.Design ? challenge.items : fillTableState)\r\n            .map((aRow: FillTableChallengeCell[], auxRowIdx: number) => {\r\n                if (auxRowIdx !== rowIdx) {\r\n                    return [...aRow];\r\n                }\r\n                const updatedColumns = aRow.map((aColumn: FillTableChallengeCell, auxColumnIdx: number) => {\r\n                    return auxColumnIdx === columnIdx ? {...newCell} : {...aColumn};\r\n                });\r\n                return updatedColumns;\r\n            });\r\n        if (mode === ComponentMode.Play) {\r\n            setFillTableState(updatedItems);\r\n        } else if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                items: updatedItems\r\n            });\r\n        }\r\n    };\r\n\r\n    const completed = () => {\r\n        return fillTableState.reduce(\r\n            (accRow: boolean, currentRow: FillTableChallengeCell[], rowIdx: number) => (\r\n                accRow\r\n                && currentRow.reduce(\r\n                    (accColumn: boolean, currentColumn: FillTableChallengeCell, columnIdx: number) => (\r\n                        accColumn\r\n                        && (\r\n                            (\r\n                                challenge.config.firstRowFixed\r\n                                && rowIdx === 0\r\n                                && challenge.config.firstColumnFixed\r\n                                && columnIdx === 0\r\n                            )\r\n                            || currentColumn.text !== ''\r\n                        )\r\n                    ),\r\n                    true\r\n                )\r\n            ),\r\n            true\r\n        );\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const result = fillTableState.reduce(\r\n            (accRow: boolean, currentRow: FillTableChallengeCell[], rowIdx: number) => (\r\n                accRow\r\n                && currentRow.reduce(\r\n                    (accColumn: boolean, currentColumn: FillTableChallengeCell, columnIdx: number) => (\r\n                        accColumn\r\n                        && (\r\n                            (\r\n                                challenge.config.firstRowFixed\r\n                                && rowIdx === 0\r\n                                && challenge.config.firstColumnFixed\r\n                                && columnIdx === 0\r\n                            )\r\n                            || currentColumn.text === challenge.items[rowIdx][columnIdx].text\r\n                        )\r\n                    ),\r\n                    true\r\n                )\r\n            ),\r\n            true\r\n        );\r\n\r\n        showResult(result);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='center' style={{ height: '100%' }}>\r\n                    <Grid item xs={2} style={{ height: '100%' }}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} style={{ height: '100%' }}>\r\n                        <Grid container alignItems=\"center\" style={{ height: '100%' }}>\r\n                            <Grid item xs>\r\n                                <Grid container direction=\"column\">\r\n                                    {\r\n                                        (mode === ComponentMode.Design ? challenge.items : fillTableState)\r\n                                            .map((aRow: FillTableChallengeCell[], rowIdx: number) => (\r\n                                                <Grid item xs key={`row_${rowIdx}`}>\r\n                                                    <Grid container>\r\n                                                        {\r\n                                                            aRow.map((aColumn: FillTableChallengeCell, columnIdx: number) => (\r\n                                                                <Grid item xs key={`column_${columnIdx}`} className={classes.cell}>\r\n                                                                    {\r\n                                                                        // mode === ComponentMode.Design\r\n                                                                        // &&\r\n                                                                        !(\r\n                                                                            challenge.config.firstRowFixed\r\n                                                                            && challenge.config.firstColumnFixed\r\n                                                                            && rowIdx === 0\r\n                                                                            && columnIdx === 0\r\n                                                                        ) && (\r\n                                                                            <TableCell\r\n                                                                                mode={mode}\r\n                                                                                cell={aColumn}\r\n                                                                                fixed={\r\n                                                                                    (\r\n                                                                                        challenge.config.firstRowFixed\r\n                                                                                        && rowIdx === 0\r\n                                                                                    ) || (\r\n                                                                                        challenge.config.firstColumnFixed\r\n                                                                                        && columnIdx === 0\r\n                                                                                    )\r\n                                                                                }\r\n                                                                                fontSize={challenge.config.itemsFontSize}\r\n                                                                                showResults={highlightResults}\r\n                                                                                success={\r\n                                                                                    (\r\n                                                                                        !challenge.config.firstRowFixed\r\n                                                                                        || rowIdx !== 0\r\n                                                                                    ) && (\r\n                                                                                        !challenge.config.firstColumnFixed\r\n                                                                                        || columnIdx !== 0\r\n                                                                                    ) && (\r\n                                                                                        challenge.items[rowIdx][columnIdx].text === fillTableState[rowIdx][columnIdx].text\r\n                                                                                    )\r\n                                                                                }\r\n                                                                                onCellChange={(cell)=>{\r\n                                                                                    handleCellChange(cell, rowIdx, columnIdx);\r\n                                                                                }}\r\n                                                                            />\r\n                                                                        )\r\n                                                                    }\r\n                                                                </Grid>\r\n                                                            ))\r\n                                                        }\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            ))\r\n                                    }\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || !completed()}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;{options?.language === Language.En ? 'Check' : 'Corregir'}\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControlLabel, Grid, makeStyles, Switch, TextField, Typography } from '@material-ui/core';\r\nimport { FillTableChallengeConfig } from '../../types/FillTableChallenge';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface FillTableConfiguratorProps {\r\n    config: FillTableChallengeConfig,\r\n    onConfigChange?: (config: FillTableChallengeConfig) => void\r\n}\r\n\r\nexport const FillTableConfigurator: React.FC<FillTableConfiguratorProps> = (props: FillTableConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<FillTableChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputItemsFontSize = useRef({} as HTMLInputElement);\r\n    const inputRowCount = useRef({} as HTMLInputElement);\r\n    const checkFirstRowFixed = useRef({} as HTMLInputElement);\r\n    const inputColumnCount = useRef({} as HTMLInputElement);\r\n    const checkFirstColumnFixed = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputItemsFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.itemsFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('itemsFontSize', parseInt(inputItemsFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputRowCount}\r\n                    type='number'\r\n                    label='Número de filas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.rowCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('rowCount', parseInt(inputRowCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkFirstRowFixed}\r\n                            name='checkMultiselect'\r\n                            checked={formData.firstRowFixed}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('firstRowFixed', checkFirstRowFixed.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Primera fila fija'\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputColumnCount}\r\n                    type='number'\r\n                    label='Número de columnas'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.columnCount}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('columnCount', parseInt(inputColumnCount.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            inputRef={checkFirstColumnFixed}\r\n                            name='checkFirstColumnFixed'\r\n                            checked={formData.firstColumnFixed}\r\n                            color='secondary'\r\n                            onChange={() => { handleConfigParameterChange('firstColumnFixed', checkFirstColumnFixed.current.checked); }}\r\n                        />\r\n                    }\r\n                    label='Primera columna fija'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { FillTableChallenge, FillTableChallengeCell, FillTableChallengeConfig } from '../../types/FillTableChallenge';\r\nimport { FillTableChallenger } from './FillTableChallenger';\r\nimport { FillTableConfigurator } from './FillTableConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface FillTableChallengeDesignerProps {\r\n    challenge: FillTableChallenge,\r\n    onChallengeChange: (challenge: FillTableChallenge) => void\r\n}\r\n\r\nexport const FillTableChallengeDesigner: React.FC<FillTableChallengeDesignerProps> = (\r\n    props: FillTableChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const readjustTable = (rowCount: number, columnCount: number): FillTableChallengeCell[][] => {\r\n        let items = [...challenge.items];\r\n        if (rowCount > items.length) {\r\n            const auxColumn = Array.from(Array(items[0].length)).map(() => ({ text: '', hidden: false}));\r\n            const newRows = Array.from(Array(rowCount - items.length))\r\n                .map(() => [...auxColumn]);\r\n            items = [...items, ...newRows];\r\n        } else if (rowCount < items.length) {\r\n            items = items.slice(0, rowCount);\r\n        }\r\n\r\n        if (columnCount > items[0].length) {\r\n            const newColumns = Array.from(Array(columnCount - items[0].length))\r\n                .map(() => ({ text: '', hidden: false}));\r\n            items = items.map((anItem: FillTableChallengeCell[]) => [...anItem, ...newColumns]);\r\n        } else if (columnCount < items[0].length) {\r\n            items = items.map((anItem: FillTableChallengeCell[]) => anItem.slice(0, columnCount));\r\n        }\r\n\r\n        return items;\r\n    };\r\n\r\n    const handlerChallengeChange = (updatedChallenge: FillTableChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: FillTableChallengeConfig) => {\r\n        const items = readjustTable(config.rowCount, config.columnCount);\r\n        const updatedChallenge: FillTableChallenge = {\r\n            ...challenge,\r\n            items,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <FillTableChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <FillTableConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","export const splitSentence = (text: string): string[] => {\r\n    return text\r\n        .replace(/\\./g, ' .')\r\n        .replace(/,/g, ' ,')\r\n        .replace(/;/g, ' ;')\r\n        .replace(/:/g, ' :')\r\n        .split( ' ');\r\n};\r\n\r\nexport const joinSentence = (textParts: string[]): string => {\r\n    return textParts\r\n        .join(' ')\r\n        .replace(/ \\./g, '.')\r\n        .replace(/ ,/g, ',')\r\n        .replace(/ ;/g, ';')\r\n        .replace(/ :/g, ':');\r\n};\r\n\r\nexport const createQueryString = (params: Record<string, unknown>): string => (\r\n    Object.keys(params).reduce(\r\n        (acc: string, current: string, idx: number) => (\r\n            `${acc}${idx > 0 ? '&' : ''}${current}=${params[current]}`\r\n        ),\r\n        '?'\r\n    )\r\n);\r\n\r\nexport const parseQueryString = (qs: string): any => {\r\n    const qsAux = qs[0] === '?' ? qs.slice(1) : qs;\r\n    const result: any = {};\r\n    qsAux.split(/&/g).forEach((aParam: string) => {\r\n        const paramParts = aParam.split('=');\r\n        result[paramParts[0]] = (\r\n            paramParts[1] === 'true' || paramParts[1] === 'false' ? paramParts[1] === 'true' : paramParts[1]\r\n        );\r\n    });\r\n    return result;\r\n};\r\n","import { CSSProperties } from '@material-ui/styles';\r\nimport React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport { colors } from '../../theme';\r\n\r\ninterface DropGapProps {\r\n    value: string,\r\n    style?: CSSProperties\r\n    fontSize: number,\r\n    onDrop: (text: string) => void\r\n}\r\n\r\nexport const DropGap: React.FC<DropGapProps> = (props: DropGapProps) => {\r\n    const { value, style, fontSize, onDrop } = props;\r\n\r\n    const handleDrop = (item: any) => {\r\n        onDrop(item.name);\r\n    };\r\n\r\n    const [{ isOver, canDrop }, drop] = useDrop({\r\n        accept: 'dnd',\r\n        drop: handleDrop,\r\n        collect: (monitor: { isOver: () => boolean, canDrop: () => boolean }) => {\r\n            return ({\r\n                isOver: monitor.isOver(),\r\n                canDrop: monitor.canDrop()\r\n            });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div\r\n            ref={drop}\r\n            style={{\r\n                width: '150px',\r\n                height: '50px',\r\n                lineHeight: '50px',\r\n                textAlign: 'center',\r\n                borderBottom: `solid 1px ${colors.primary.main}`,\r\n                color: colors.primary.main,\r\n                fontSize: `${fontSize ? fontSize : 50}px`,\r\n                ...style\r\n            }}\r\n\r\n        >\r\n            {value}\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Grid, Icon, IconButton, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { FillMethod } from '../../enums/FillMethod';\r\nimport { FillGapsChallengeExpression, FillGapsChallengeSentence } from '../../types/FillGapsChallenge';\r\nimport { joinSentence, splitSentence } from '../../utils/utilStrings';\r\nimport { colors } from '../../theme';\r\nimport { DropGap } from './DropGap';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    word: {\r\n        padding: '2px',\r\n        // backgroundColor: '#f0f0f0',\r\n        '& :hover': {\r\n            backgroundColor: theme.palette.primary.light,\r\n            color:'#ffffff',\r\n            cursor: 'pointer',\r\n            borderRadius: '10px'\r\n        }\r\n    },\r\n    selected: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        borderRadius: '10px',\r\n        color:'#ffffff',\r\n    }\r\n}));\r\n\r\ninterface SentencePart {\r\n    type: 'text' | 'hidden',\r\n    hiddenIdx: number,\r\n    value: string,\r\n    answer: string\r\n}\r\n\r\nexport interface FillGapsSentenceAnswer {\r\n    hiddenIdx: number,\r\n    value: string\r\n}\r\n\r\nconst sentenceParts = (sentence: FillGapsChallengeSentence): SentencePart[] => {\r\n    const result: SentencePart[] = [];\r\n    let currentIdx = 0;\r\n    const words = splitSentence(sentence.text);\r\n    sentence.hiddenExpressions.forEach((anExp: FillGapsChallengeExpression, idx: number) => {\r\n        if (anExp.initPosition > currentIdx) {\r\n            result.push({\r\n                type: 'text',\r\n                hiddenIdx: -1,\r\n                value: joinSentence(words.slice(currentIdx, anExp.initPosition)),\r\n                answer: ''\r\n            });\r\n        }\r\n        result.push({\r\n            type: 'hidden',\r\n            hiddenIdx: idx,\r\n            value: joinSentence(words.slice(anExp.initPosition, anExp.initPosition + anExp.wordCount)),\r\n            answer: ''\r\n        });\r\n        currentIdx = anExp.initPosition + anExp.wordCount;\r\n    });\r\n    if (currentIdx < words.length - 1) {\r\n        result.push({\r\n            type: 'text',\r\n            hiddenIdx: -1,\r\n            value: joinSentence(words.slice(currentIdx)),\r\n            answer: ''\r\n        });\r\n    }\r\n    return result;\r\n};\r\n\r\ninterface FillGapsSentenceProps {\r\n    mode: ComponentMode,\r\n    sentence: FillGapsChallengeSentence,\r\n    fillMethod: FillMethod,\r\n    showResults: boolean,\r\n    fontSize: number,\r\n    onSentenceChange: (newSentence: FillGapsChallengeSentence) => void\r\n    onSentenceRemove: () => void\r\n    onAnswersChange: (answers: FillGapsSentenceAnswer[]) => void\r\n}\r\n\r\nexport const FillGapsSentence: React.FC<FillGapsSentenceProps> = (props: FillGapsSentenceProps) => {\r\n    const {mode, sentence, fillMethod, showResults, fontSize, onSentenceChange, onSentenceRemove, onAnswersChange} = props;\r\n\r\n    const [parts, setParts] = useState<SentencePart[]>(sentenceParts(sentence));\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleWordClick = (wordIdx: number) => {\r\n        let updatedHiddenExpressions: FillGapsChallengeExpression[] = [];\r\n\r\n        if (sentence.hiddenExpressions.length === 0) {\r\n            //Primera expresion\r\n            console.log('');\r\n            updatedHiddenExpressions.push({\r\n                initPosition: wordIdx,\r\n                wordCount: 1,\r\n                alternatives: []\r\n            });\r\n        }\r\n\r\n        sentence.hiddenExpressions.some((anExp: FillGapsChallengeExpression, idx: number) => {\r\n            let completeArrayFrom = -1;\r\n            if (idx === 0 && wordIdx < anExp.initPosition - 1) {\r\n                //Antes de la primera expresion y no contigua\r\n                // console.log('Antes de la primera expresion y no contigua');\r\n                updatedHiddenExpressions = [\r\n                    { initPosition: wordIdx, wordCount: 1, alternatives:[] },\r\n                    ...sentence.hiddenExpressions\r\n                ];\r\n                return true;\r\n            } else if (wordIdx === anExp.initPosition - 1) {\r\n                //Contigua a la expresion por delante\r\n                // console.log('Contigua a la expresion por delante');\r\n                updatedHiddenExpressions.push(\r\n                    { initPosition: wordIdx, wordCount: anExp.wordCount + 1, alternatives: [...anExp.alternatives] }\r\n                );\r\n                completeArrayFrom = idx;\r\n            } else if (wordIdx === anExp.initPosition) {\r\n                //Sobre la primera palabra de la expresion\r\n                // console.log('Sobre la primera palabra de la expresion');\r\n                if (anExp.wordCount === 1) {\r\n                    //Si la expresion solo tiene una palabra\r\n                    // console.log('Si la expresion solo tiene una palabra');\r\n                } else {\r\n                    //Si la expresion tiene más de una palabra\r\n                    // console.log('Si la expresion tiene más de una palabra');\r\n                    updatedHiddenExpressions.push(\r\n                        { initPosition: wordIdx + 1, wordCount: anExp.wordCount - 1, alternatives: [...anExp.alternatives] }\r\n                    );\r\n                }\r\n                completeArrayFrom = idx;\r\n            } else if (wordIdx > anExp.initPosition && wordIdx < anExp.initPosition + anExp.wordCount - 1) {\r\n                //Sobre una palabra interior de la expresion\r\n                // console.log('Sobre una palabra interior de la expresion');\r\n                updatedHiddenExpressions = [\r\n                    ...updatedHiddenExpressions,\r\n                    {\r\n                        initPosition: anExp.initPosition,\r\n                        wordCount: wordIdx - anExp.initPosition,\r\n                        alternatives: []\r\n                    },\r\n                    {\r\n                        initPosition: wordIdx + 1,\r\n                        wordCount: anExp.initPosition + anExp.wordCount - wordIdx - 1,\r\n                        alternatives: []\r\n                    }\r\n                ];\r\n                completeArrayFrom = idx;\r\n            } else if (wordIdx === anExp.initPosition + anExp.wordCount - 1) {\r\n                //Sobre la ultima palabra de la expresion\r\n                // console.log('Sobre la ultima palabra de la expresion');\r\n                if (anExp.wordCount === 1) {\r\n                    //Si la expresion solo tiene una palabra\r\n                    // console.log('Si la expresion solo tiene una palabra');\r\n                } else {\r\n                    //Si la expresion tiene más de una palabra\r\n                    // console.log('Si la expresion tiene más de una palabra');\r\n                    updatedHiddenExpressions.push(\r\n                        {\r\n                            initPosition: anExp.initPosition,\r\n                            wordCount: anExp.wordCount - 1,\r\n                            alternatives: [...anExp.alternatives]\r\n                        }\r\n                    );\r\n                }\r\n                completeArrayFrom = idx;\r\n            } else if (idx < sentence.hiddenExpressions.length - 1\r\n                && wordIdx > anExp.initPosition + anExp.wordCount\r\n                && wordIdx < sentence.hiddenExpressions[idx + 1].initPosition - 1) {\r\n                //Entre dos expresiones de manera no contigua\r\n                // console.log('Entre dos expresiones de manera no contigua');\r\n                updatedHiddenExpressions = [\r\n                    ...updatedHiddenExpressions,\r\n                    {...anExp},\r\n                    { initPosition: wordIdx, wordCount: 1, alternatives: [] }\r\n                ];\r\n                completeArrayFrom = idx;\r\n            } else if (idx < sentence.hiddenExpressions.length - 1\r\n                && wordIdx === anExp.initPosition + anExp.wordCount\r\n                && wordIdx === sentence.hiddenExpressions[idx + 1].initPosition - 1) {\r\n                //Entre dos expresiones de manera contigua a ambas\r\n                // console.log('Entre dos expresiones de manera contigua a ambas');\r\n                updatedHiddenExpressions.push({\r\n                    initPosition: anExp.initPosition,\r\n                    wordCount: anExp.wordCount + sentence.hiddenExpressions[idx + 1].wordCount + 1,\r\n                    alternatives: []\r\n                });\r\n                completeArrayFrom = idx + 1;\r\n            } else if (wordIdx === anExp.initPosition + anExp.wordCount) {\r\n                //Contigua a la expresion por detras\r\n                // console.log('Contigua a la expresion por detras');\r\n                updatedHiddenExpressions.push({\r\n                    initPosition: anExp.initPosition,\r\n                    wordCount: anExp.wordCount + 1,\r\n                    alternatives: [...anExp.alternatives]\r\n                });\r\n                completeArrayFrom = idx;\r\n            } else if (idx === sentence.hiddenExpressions.length - 1) {\r\n                //Despues de la ultima expresion y de manera no contigua\r\n                // console.log('Despues de la ultima expresion y de manera no contigua');\r\n                updatedHiddenExpressions = [\r\n                    ...updatedHiddenExpressions,\r\n                    {...anExp},\r\n                    { initPosition: wordIdx, wordCount: 1, alternatives: [] }\r\n                ];\r\n                return true;\r\n            }\r\n\r\n            if (completeArrayFrom !== -1) {\r\n                if (idx < sentence.hiddenExpressions.length - 1) {\r\n                    updatedHiddenExpressions = [\r\n                        ...updatedHiddenExpressions,\r\n                        ...sentence.hiddenExpressions.slice(completeArrayFrom + 1)\r\n                    ];\r\n                }\r\n                return true;\r\n            }\r\n\r\n            updatedHiddenExpressions.push({...anExp});\r\n            return false;\r\n        });\r\n\r\n        onSentenceChange({\r\n            ...sentence,\r\n            hiddenExpressions: updatedHiddenExpressions\r\n        });\r\n    };\r\n\r\n    const handleDeleteClick = () => {\r\n        if (onSentenceRemove) {\r\n            onSentenceRemove();\r\n        }\r\n    };\r\n\r\n    const selected = (wordIdx: number) => {\r\n        return sentence.hiddenExpressions.some(\r\n            (anExpression: FillGapsChallengeExpression) => (\r\n                wordIdx >= anExpression.initPosition\r\n                && wordIdx <= anExpression.initPosition + anExpression.wordCount - 1\r\n            )\r\n        );\r\n    };\r\n\r\n    const handlePartChange = (partIdx: number, text: string) => {\r\n        const updatedParts = parts.map((aPart: SentencePart, idx: number) => (\r\n            {\r\n                ...aPart,\r\n                answer: idx === partIdx ? text : aPart.answer\r\n            }\r\n        ));\r\n        setParts(updatedParts);\r\n        onAnswersChange(updatedParts.filter(\r\n            (aPart: SentencePart) => aPart.type === 'hidden'\r\n        ).map(\r\n            (aPart: SentencePart) => ({\r\n                hiddenIdx: aPart.hiddenIdx,\r\n                value: aPart.answer\r\n            }))\r\n        );\r\n    };\r\n\r\n    const getPartStyle = (validValues: string[], value: string) => showResults ? (\r\n        validValues.indexOf(value) >= 0 ? {\r\n            color: '#4caf50'\r\n        } : {\r\n            color: '#f44336'\r\n        }\r\n    ) : {};\r\n\r\n    return (\r\n        <Grid container alignItems=\"center\" spacing={1}>\r\n            <Grid item>\r\n                <Icon fontSize=\"small\" color=\"secondary\">navigate_next</Icon>\r\n            </Grid>\r\n            {\r\n                mode === ComponentMode.Design\r\n                && splitSentence(sentence.text).map((aWord: string, idx: number) => (\r\n                    <Grid\r\n                        item\r\n                        key={`word_${idx}`}\r\n                        className={`${classes.word} ${selected(idx) ? classes.selected : ''}`}\r\n                        onClick={() => { handleWordClick(idx); }}\r\n                    >\r\n                        <Typography style={{fontSize: `${fontSize ? fontSize: 50}px`}}>\r\n                            {aWord}\r\n                        </Typography>\r\n                    </Grid>\r\n                ))\r\n            }\r\n            {\r\n                mode === ComponentMode.Design && (\r\n                    <Grid item>\r\n                        <IconButton size=\"small\" onClick={handleDeleteClick}>\r\n                            <Icon>delete</Icon>\r\n                        </IconButton>\r\n                    </Grid>\r\n                )\r\n            }\r\n            {\r\n                mode === ComponentMode.Play && (\r\n                    parts.map((aPart: SentencePart, idx: number) => (\r\n                        aPart.type === 'text' ? (\r\n                            <Grid\r\n                                item\r\n                                key={`part_${idx}`}\r\n                                className={classes.word}\r\n                            >\r\n                                <Typography style={{fontSize: `${fontSize ? fontSize: 50}px`}}>\r\n                                    {aPart.value}\r\n                                </Typography>\r\n                            </Grid>\r\n                        ) : (\r\n                            <Grid\r\n                                item\r\n                                key={`part_${idx}`}\r\n                            >\r\n                                {\r\n                                    fillMethod === FillMethod.Writing ? (\r\n                                        <TextField\r\n                                            key={`input_${idx}`}\r\n                                            value={aPart.answer}\r\n                                            color=\"primary\"\r\n                                            inputProps={{\r\n                                                style: {\r\n                                                    fontSize: `${fontSize ? fontSize : 50}px`,\r\n                                                    textAlign: 'center',\r\n                                                    color: colors.primary.main,\r\n                                                    ...getPartStyle(\r\n                                                        [\r\n                                                            aPart.value,\r\n                                                            ...sentence.hiddenExpressions[aPart.hiddenIdx].alternatives\r\n                                                        ],\r\n                                                        aPart.answer\r\n                                                    )\r\n                                                }\r\n                                            }}\r\n                                            onInput={\r\n                                                (evt: React.FormEvent<HTMLInputElement>) => {\r\n                                                    handlePartChange(idx, (evt.target as any).value);\r\n                                                }\r\n                                            }\r\n                                        />\r\n                                    ) : (\r\n                                        <DropGap\r\n                                            key={`input_${idx}`}\r\n                                            value={aPart.answer}\r\n                                            style={getPartStyle(\r\n                                                [\r\n                                                    aPart.value,\r\n                                                    ...sentence.hiddenExpressions[aPart.hiddenIdx].alternatives\r\n                                                ],\r\n                                                aPart.answer\r\n                                            )}\r\n                                            fontSize={fontSize}\r\n                                            onDrop={(droppedText: string) => {\r\n                                                handlePartChange(idx, droppedText);\r\n                                            }}\r\n                                        />\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                        )\r\n                    ))\r\n                )\r\n            }\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Box, Button, Dialog, Grid, Icon, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText, makeStyles, TextField, Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dialogContainer: {\r\n        padding: '20px'\r\n    },\r\n}));\r\n\r\ninterface DialogFillGapsCandidatesProps {\r\n    open: boolean,\r\n    text: string,\r\n    candidates: string[],\r\n    onAccept: (alternatives: string[]) => void\r\n    onCancel: () => void\r\n}\r\n\r\nexport const DialogFillGapsCandidates: React.FC<DialogFillGapsCandidatesProps> = (props: DialogFillGapsCandidatesProps) => {\r\n    const { open, text, candidates, onAccept, onCancel } = props;\r\n\r\n    const [formState, setFormState] = useState<string[]>(candidates);\r\n\r\n    const inputCandidate = useRef({} as HTMLInputElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (candidates != null) {\r\n            setFormState(candidates);\r\n        }\r\n    }, [candidates]);\r\n\r\n    const addCandidate = () => {\r\n        setFormState([\r\n            ...formState,\r\n            inputCandidate.current.value\r\n        ]);\r\n        inputCandidate.current.value = '';\r\n    };\r\n\r\n    const handleCandidateKeyPress = (evt: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (evt.code === 'Enter' && inputCandidate.current.value !== '') {\r\n            addCandidate();\r\n        }\r\n    };\r\n\r\n    const handleDeleteCandidate = (candidateIdx: number) => {\r\n        setFormState(\r\n            formState.filter((aCandidate: string, idx: number) => idx !== candidateIdx)\r\n        );\r\n    };\r\n\r\n    const handleAcceptClick = () => {\r\n        onAccept(formState);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        onCancel();\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            fullWidth\r\n            maxWidth='sm'\r\n        >\r\n            <Box className={classes.dialogContainer}>\r\n                <Grid\r\n                    container\r\n                    direction='column'\r\n                    spacing={2}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h6\">\r\n                            {`Otros textos validos para \"${text}\"`}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <List>\r\n                            {\r\n                                formState.map((aCandidate: string, candidateIdx: number) => (\r\n                                    <ListItem>\r\n                                        <ListItemText primary={aCandidate} />\r\n                                        <ListItemSecondaryAction>\r\n                                            <IconButton edge=\"end\" onClick={() => { handleDeleteCandidate(candidateIdx); }}>\r\n                                                <Icon>delete</Icon>\r\n                                            </IconButton>\r\n                                        </ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                ))\r\n                            }\r\n                        </List>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            inputRef={inputCandidate}\r\n                            variant=\"outlined\"\r\n                            style={{ width: '100%' }}\r\n                            label=\"Nuevo candidato\"\r\n                            onKeyPress={handleCandidateKeyPress}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container justify='flex-end' spacing={1}>\r\n                            <Grid item>\r\n                                <Button variant='contained' color='primary' onClick={handleAcceptClick}>Aceptar</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button color='primary' onClick={handleCancelClick}>Cancelar</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, Fab, Grid, Icon, IconButton, makeStyles, TextField } from '@material-ui/core';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport useSound from 'use-sound';\r\nimport { ChallengeQuestion } from '../common/ChallengeQuestion';\r\nimport { FillGapsChallenge, FillGapsChallengeExpression, FillGapsChallengeSentence } from '../../types/FillGapsChallenge';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Countdown } from '../common/Countdown';\r\nimport correct from '../../assets/sounds/correct.wav';\r\nimport incorrect from '../../assets/sounds/incorrect.wav';\r\nimport { FillMethod } from '../../enums/FillMethod';\r\nimport { FillGapsSentence, FillGapsSentenceAnswer } from './FillGapsSentence';\r\nimport { DragableItem } from '../common/DragableItem';\r\nimport { joinSentence, splitSentence } from '../../utils/utilStrings';\r\nimport { DialogFillGapsCandidates } from './DialogFillGapsCandidates';\r\nimport { ChallengeOptions } from '../../types/Challenge';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        backgroundColor: '#f0f0f0'\r\n    },\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },\r\n    titleContainer: {\r\n        height: '20%'\r\n    },\r\n    answerContainer: {\r\n        height: '80%',\r\n        width: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    optionsContainer: {\r\n        border: 'solid 1px gray',\r\n        backgroundColor: '#ffffff',\r\n        minHeight: '60px'\r\n    },\r\n    sentencesContainer: {\r\n        paddingLeft: '10px'\r\n    },\r\n}));\r\n\r\nconst initialFillGapsState = (challenge: FillGapsChallenge): FillGapsSentenceAnswer[][] => {\r\n    return challenge.sentences.map((aSentence: FillGapsChallengeSentence) => ([]));\r\n};\r\n\r\nconst reorderItems = (sentences: FillGapsChallengeSentence[], mode: ComponentMode): Item[] => {\r\n    let list: Item[] = [];\r\n    sentences.forEach((aSentence: FillGapsChallengeSentence, sentenceIdx: number) => {\r\n        aSentence.hiddenExpressions.forEach((aHiddenExpression: FillGapsChallengeExpression, hiddenExpressionIdx: number) => {\r\n            list.push({\r\n                sentenceText: aSentence.text,\r\n                sentenceIdx,\r\n                hiddenExpression: aHiddenExpression,\r\n                hiddenExpressionIdx\r\n            });\r\n        });\r\n    });\r\n    if (mode === ComponentMode.Play) {\r\n        list = list.sort(() => Math.random() - 0.5);\r\n    }\r\n    return list;\r\n};\r\n\r\ninterface FillGapsChallengerProps {\r\n    mode: ComponentMode\r\n    challenge: FillGapsChallenge\r\n    options?: ChallengeOptions\r\n    onChallengeChange?: (updatedChallenge: FillGapsChallenge) => void\r\n    onSuccess?: () => void\r\n    onError?: () => void\r\n}\r\n\r\ninterface Item {\r\n    sentenceText: string,\r\n    sentenceIdx: number,\r\n    hiddenExpression: FillGapsChallengeExpression,\r\n    hiddenExpressionIdx: number\r\n}\r\n\r\nexport const FillGapsChallenger: React.FC<FillGapsChallengerProps> = (props: FillGapsChallengerProps) => {\r\n    const { mode, challenge, options, onChallengeChange, onSuccess, onError } = props;\r\n\r\n    const [stopTimer, setStopTimer] = useState<boolean>(false);\r\n    const [highlightResults, setHighlightResults] = useState<boolean>(false);\r\n\r\n    const inputSentence = useRef({} as HTMLInputElement);\r\n\r\n    const [fillGapsState, setFillGapsState] = useState<FillGapsSentenceAnswer[][]>(initialFillGapsState(challenge));\r\n    const [openCandidatesDialog, setOpenCandidatesDialog] = useState<boolean>(false);\r\n    const [selectedExpression, setSelectedExpression] = useState<number[]>();\r\n    const [draggableItems, setDragabbleItems] = useState<Item[]>(reorderItems(challenge.sentences, mode));\r\n\r\n    const [playCorrect] = useSound(correct);\r\n    const [playIncorrect] = useSound(incorrect);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setDragabbleItems(reorderItems(challenge.sentences, mode));\r\n    }, [challenge.sentences]);\r\n\r\n    const handleTitleChange = (newTitle: string) => {\r\n        if (onChallengeChange) {\r\n            onChallengeChange({\r\n                ...challenge,\r\n                question: newTitle\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlerTimeUp = () => {\r\n        showResult(false);\r\n    };\r\n\r\n    const showResult = (success: boolean) => {\r\n        setStopTimer(true);\r\n        setHighlightResults(true);\r\n\r\n        if (success) {\r\n            playCorrect();\r\n        } else {\r\n            playIncorrect();\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (success) {\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            } else {\r\n                if (onError) {\r\n                    onError();\r\n                }\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const handleSentenceChange = (updatedSentence: FillGapsChallengeSentence, sentenceIdx: number) => {\r\n        if (onChallengeChange) {\r\n            const updatedSentences = challenge.sentences.map((\r\n                aSentence: FillGapsChallengeSentence,\r\n                idx: number\r\n            ) => idx === sentenceIdx ? updatedSentence : aSentence);\r\n            onChallengeChange({\r\n                ...challenge,\r\n                sentences: updatedSentences\r\n            });\r\n        }\r\n    };\r\n\r\n    const addSentence = () => {\r\n        if (onChallengeChange) {\r\n            const newSentence: FillGapsChallengeSentence = {\r\n                text: inputSentence.current.value,\r\n                hiddenExpressions: [] as FillGapsChallengeExpression[]\r\n            };\r\n            onChallengeChange({\r\n                ...challenge,\r\n                sentences: [...challenge.sentences, newSentence]\r\n            });\r\n            setFillGapsState([\r\n                ...fillGapsState,\r\n                []\r\n            ]);\r\n        }\r\n        inputSentence.current.value = '';\r\n    };\r\n\r\n    const handleSentenceKeyPress = (evt: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (evt.code === 'Enter' && inputSentence.current.value !== '') {\r\n            addSentence();\r\n        }\r\n    };\r\n\r\n    const handleSentenceRemove = (sentenceIdx: number) => {\r\n        if (onChallengeChange) {\r\n            const updatedSentences = challenge.sentences\r\n                .filter((aSentence: FillGapsChallengeSentence, idx: number) => idx !== sentenceIdx);\r\n            onChallengeChange({\r\n                ...challenge,\r\n                sentences: updatedSentences\r\n            });\r\n            setFillGapsState(fillGapsState.filter(\r\n                (aFillGapsState: FillGapsSentenceAnswer[], idx: number) => idx !== sentenceIdx\r\n            ));\r\n        }\r\n    };\r\n\r\n    const handleAddCandidateClick = (sentenceIdx: number, hiddenExpIdx: number) => {\r\n        setSelectedExpression([sentenceIdx, hiddenExpIdx]);\r\n        setOpenCandidatesDialog(true);\r\n    };\r\n\r\n    const handleCandidateAccept = (newCandidates: string[]) => {\r\n        if (onChallengeChange && selectedExpression) {\r\n            const updatedSentences = challenge.sentences.map((\r\n                aSentence: FillGapsChallengeSentence,\r\n                sentenceIdx: number\r\n            ) => sentenceIdx !== selectedExpression[0] ? aSentence : (\r\n                {\r\n                    ...aSentence,\r\n                    hiddenExpressions: aSentence.hiddenExpressions.map((\r\n                        aHiddenExpression: FillGapsChallengeExpression,\r\n                        hiddenExpresionIdx: number\r\n                    ) => hiddenExpresionIdx !== selectedExpression[1] ? aHiddenExpression : (\r\n                        {\r\n                            ...aHiddenExpression,\r\n                            alternatives: [...newCandidates]\r\n                        }\r\n                    ))\r\n                }\r\n            ));\r\n            onChallengeChange({\r\n                ...challenge,\r\n                sentences: updatedSentences\r\n            });\r\n        }\r\n        setOpenCandidatesDialog(false);\r\n    };\r\n\r\n    const expressionInSentence = (sentence: string, expression: FillGapsChallengeExpression): string => {\r\n        return joinSentence(\r\n            splitSentence(sentence)\r\n                .slice(expression.initPosition, expression.initPosition + expression.wordCount)\r\n        );\r\n    };\r\n\r\n    const handleSentenceAnswer = (sentenceIdx: number, answer: FillGapsSentenceAnswer[]) => {\r\n        console.log(answer);\r\n        const updatedState = fillGapsState.map((aFillGapsState: FillGapsSentenceAnswer[], idx: number) => (\r\n            idx === sentenceIdx ? [...answer] : [...aFillGapsState]\r\n        ));\r\n        setFillGapsState(updatedState);\r\n    };\r\n\r\n    const completed = () => {\r\n        return challenge.sentences\r\n            .reduce((acc: boolean, current: FillGapsChallengeSentence, sentenceIdx: number) => (\r\n                acc\r\n                && current.hiddenExpressions.length === fillGapsState[sentenceIdx].length\r\n                && fillGapsState[sentenceIdx].every((el: FillGapsSentenceAnswer) => (\r\n                    el.value != null && el.value !== ''\r\n                ))\r\n            ), true);\r\n    };\r\n\r\n    const isDropped = (item: Item): boolean => {\r\n        const text = expressionInSentence(\r\n            item.sentenceText,\r\n            item.hiddenExpression\r\n        );\r\n\r\n        return fillGapsState.some((sentencesAnswer: FillGapsSentenceAnswer[]) => (\r\n            sentencesAnswer.some((aSentenceAnswer: FillGapsSentenceAnswer) => (\r\n                aSentenceAnswer.value === text\r\n            ))\r\n        ));\r\n    };\r\n\r\n    const handleCheckClick = () => {\r\n        const correct = challenge.sentences.reduce(\r\n            (accSentences: boolean, currentSentence: FillGapsChallengeSentence, sentenceIdx: number) => {\r\n                const words: string[] = splitSentence(currentSentence.text);\r\n                const correctExpressions = currentSentence.hiddenExpressions.reduce(\r\n                    (accExpressions: boolean, currentExpression: FillGapsChallengeExpression, expressionIdx: number) => {\r\n                        const hiddenAnswer = fillGapsState[sentenceIdx]\r\n                            .find((anAnswer: FillGapsSentenceAnswer) => anAnswer.hiddenIdx === expressionIdx);\r\n\r\n                        return hiddenAnswer != null && accExpressions && (\r\n                            joinSentence(words.slice(\r\n                                currentExpression.initPosition,\r\n                                currentExpression.initPosition + currentExpression.wordCount\r\n                            )) === hiddenAnswer?.value\r\n                            || currentExpression.alternatives.indexOf(hiddenAnswer.value) >= 0\r\n                        );\r\n                    },\r\n                    true\r\n                );\r\n                return accSentences && correctExpressions;\r\n            },\r\n            true\r\n        );\r\n        showResult(correct);\r\n    };\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <div className={classes.titleContainer}>\r\n                <ChallengeQuestion\r\n                    mode={mode}\r\n                    question={challenge.question}\r\n                    fontSize={challenge.config.questionFontSize}\r\n                    onChange={handleTitleChange}\r\n                />\r\n            </div>\r\n            <div className={classes.answerContainer}>\r\n                <Grid container justify='center' className={classes.fullHeight}>\r\n                    <Grid item xs={2} className={classes.fullHeight}>\r\n                        {\r\n                            options != null && !options.ignoreTimeLimit && (\r\n                                <Countdown\r\n                                    mode={mode}\r\n                                    time={challenge.config.timeLimit}\r\n                                    stopTimer={stopTimer}\r\n                                    onTimeUp={handlerTimeUp}\r\n                                />\r\n                            )\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={8} className={classes.fullHeight}>\r\n                        {\r\n                            selectedExpression && (\r\n                                <DialogFillGapsCandidates\r\n                                    open={openCandidatesDialog}\r\n                                    text={\r\n                                        expressionInSentence(\r\n                                            challenge.sentences[selectedExpression[0]].text,\r\n                                            challenge.sentences[selectedExpression[0]].hiddenExpressions[selectedExpression[1]]\r\n                                        )\r\n                                    }\r\n                                    candidates={\r\n                                        challenge.sentences[selectedExpression[0]]\r\n                                            .hiddenExpressions[selectedExpression[1]].alternatives\r\n                                    }\r\n                                    onAccept={handleCandidateAccept}\r\n                                    onCancel={() => { setOpenCandidatesDialog(false); }}\r\n                                />\r\n                            )\r\n                        }\r\n                        <DndProvider backend={HTML5Backend}>\r\n                            <Grid\r\n                                container\r\n                                spacing={2}\r\n                                direction=\"column\"\r\n                                className={classes.fullHeight}\r\n                            >\r\n                                {\r\n                                    (\r\n                                        mode === ComponentMode.Design ||\r\n                                        challenge.config.fillMethod === FillMethod.Dragging\r\n                                    ) && (\r\n                                        <Grid\r\n                                            item\r\n                                            // xs={12}\r\n                                            className={classes.optionsContainer}\r\n                                        >\r\n                                            <Grid container spacing={2} justify=\"space-around\" alignItems=\"center\">\r\n                                                {\r\n                                                    draggableItems.map((anItem: Item) => !isDropped(anItem) && (\r\n                                                        <Grid item key={`gridItem_${anItem.sentenceIdx}_${anItem.hiddenExpression.initPosition}`}>\r\n                                                            <DragableItem\r\n                                                                name={expressionInSentence(\r\n                                                                    anItem.sentenceText,\r\n                                                                    anItem.hiddenExpression\r\n                                                                )}\r\n                                                                key={`dragable_${anItem.sentenceIdx}_${anItem.hiddenExpression.initPosition}`}\r\n                                                                style={{fontSize: challenge.config.textFontSize}}\r\n                                                                iconButton={\r\n                                                                    mode === ComponentMode.Design ? (\r\n                                                                        <IconButton\r\n                                                                            size=\"small\"\r\n                                                                            onClick={() => {\r\n                                                                                handleAddCandidateClick(\r\n                                                                                    anItem.sentenceIdx,\r\n                                                                                    anItem.hiddenExpressionIdx\r\n                                                                                );\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <Icon>add_circle</Icon>\r\n                                                                        </IconButton>\r\n                                                                    ) : undefined\r\n                                                                }\r\n                                                            />\r\n                                                        </Grid>\r\n                                                    ))\r\n                                                }\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    )\r\n                                }\r\n                                <Grid\r\n                                    item\r\n                                    xs\r\n                                >\r\n                                    <Grid container direction=\"column\" justify=\"space-around\" className={`${classes.fullWidth} ${classes.fullHeight}`}>\r\n                                        {\r\n                                            challenge.sentences.map((\r\n                                                aSentence: FillGapsChallengeSentence,\r\n                                                sentenceIdx: number\r\n                                            ) => (\r\n                                                <Grid\r\n                                                    item\r\n                                                    key={`sentence_${sentenceIdx}`}\r\n                                                >\r\n                                                    <FillGapsSentence\r\n                                                        mode={mode}\r\n                                                        sentence={aSentence}\r\n                                                        fillMethod={challenge.config.fillMethod}\r\n                                                        showResults={highlightResults}\r\n                                                        fontSize={challenge.config.textFontSize}\r\n                                                        onSentenceChange={(\r\n                                                            updatedSentence: FillGapsChallengeSentence\r\n                                                        ) => handleSentenceChange(updatedSentence, sentenceIdx)}\r\n                                                        onSentenceRemove={() => { handleSentenceRemove(sentenceIdx); }}\r\n                                                        onAnswersChange={(answer: FillGapsSentenceAnswer[]) => {\r\n                                                            handleSentenceAnswer(sentenceIdx, answer);\r\n                                                        }}\r\n                                                    />\r\n                                                </Grid>\r\n                                            ))\r\n                                        }\r\n                                    </Grid>\r\n                                </Grid>\r\n                                {\r\n                                    mode === ComponentMode.Design && (\r\n                                        <Grid item>\r\n                                            <TextField\r\n                                                inputRef={inputSentence}\r\n                                                variant=\"outlined\"\r\n                                                style={{width: '100%'}}\r\n                                                InputProps={\r\n                                                    {\r\n                                                        style: {\r\n                                                            fontSize: challenge.config.textFontSize,\r\n                                                            color: '#000000'\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                label=\"Nueva frase\"\r\n                                                onKeyPress={handleSentenceKeyPress}\r\n                                            />\r\n                                        </Grid>\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                        </DndProvider>\r\n                    </Grid>\r\n                    <Grid item xs={2} style={{ height: '100%' }} className={classes.centerAll}>\r\n                        {\r\n                            <Fab\r\n                                variant=\"extended\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                disabled={mode === ComponentMode.Design || !completed()}\r\n                                onClick={() => { handleCheckClick(); }}\r\n                            >\r\n                                <Icon>check</Icon>&nbsp;{options?.language === Language.En ? 'Check' : 'Corregir'}\r\n                            </Fab>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FormControl, Grid, InputLabel, makeStyles, MenuItem, Select, TextField, Typography } from '@material-ui/core';\r\nimport { FillGapsChallengeConfig } from '../../types/FillGapsChallenge';\r\nimport { FillMethod } from '../../enums/FillMethod';\r\n\r\nconst useStyles = makeStyles({\r\n    fullWidth: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\ninterface FillGapsConfiguratorProps {\r\n    config: FillGapsChallengeConfig,\r\n    onConfigChange?: (config: FillGapsChallengeConfig) => void\r\n}\r\n\r\nexport const FillGapsConfigurator: React.FC<FillGapsConfiguratorProps> = (props: FillGapsConfiguratorProps) => {\r\n    const { config, onConfigChange } = props;\r\n\r\n    const [formData, setFormData] = useState<FillGapsChallengeConfig>(config);\r\n\r\n    const inputTimeLimit = useRef({} as HTMLInputElement);\r\n    const inputQuestionFontSize = useRef({} as HTMLInputElement);\r\n    const inputTextFontSize = useRef({} as HTMLInputElement);\r\n    const inputFillMethod = useRef({} as HTMLSelectElement);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFormData(config);\r\n    }, [config]);\r\n\r\n    const handleConfigParameterChange = (parameter: string, value: number | boolean | string) => {\r\n        const newConfig = {\r\n            ...formData,\r\n            [parameter]: value\r\n        };\r\n        setFormData(newConfig);\r\n        if (onConfigChange) {\r\n            onConfigChange(newConfig);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container direction='column' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h5'>Configuración</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTimeLimit}\r\n                    type='number'\r\n                    label='Límite de tiempo (segundos)'\r\n                    inputProps={{ min: 10 }}\r\n                    value={formData.timeLimit}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('timeLimit', parseInt(inputTimeLimit.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputQuestionFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra del título'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.questionFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('questionFontSize', parseInt(inputQuestionFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField\r\n                    inputRef={inputTextFontSize}\r\n                    type='number'\r\n                    label='Tamaño de letra de los elementos'\r\n                    inputProps={{ min: 1 }}\r\n                    value={formData.textFontSize}\r\n                    color='secondary'\r\n                    className={classes.fullWidth}\r\n                    onInput={() => { handleConfigParameterChange('textFontSize', parseInt(inputTextFontSize.current.value)); }}\r\n                />\r\n            </Grid>\r\n            <Grid item>\r\n                <FormControl className={classes.fullWidth}>\r\n                    <InputLabel>Modo de rellenado</InputLabel>\r\n                    <Select\r\n                        inputRef={inputFillMethod}\r\n                        label=\"Modo de rellenado\"\r\n                        value={formData.fillMethod}\r\n                        color='secondary'\r\n                        className={classes.fullWidth}\r\n                        onChange={(evt: React.ChangeEvent<{name?: string | undefined, value: unknown}>) => {\r\n                            handleConfigParameterChange('fillMethod', evt.target.value as string);\r\n                        }}\r\n                    >\r\n                        <MenuItem value={FillMethod.Writing}>Escribiendo</MenuItem>\r\n                        <MenuItem value={FillMethod.Dragging}>Arrastrando</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { FillGapsChallenge, FillGapsChallengeConfig } from '../../types/FillGapsChallenge';\r\nimport { FillGapsChallenger } from './FillGapsChallenger';\r\nimport { FillGapsConfigurator } from './FillGapsConfigurator';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\n\r\nconst useStyles = makeStyles({\r\n    fullHeight: {\r\n        height: '100%',\r\n    }\r\n});\r\n\r\ninterface FillGapsChallengeDesignerProps {\r\n    challenge: FillGapsChallenge,\r\n    onChallengeChange: (challenge: FillGapsChallenge) => void\r\n}\r\n\r\nexport const FillGapsChallengeDesigner: React.FC<FillGapsChallengeDesignerProps> = (\r\n    props: FillGapsChallengeDesignerProps\r\n) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handlerChallengeChange = (updatedChallenge: FillGapsChallenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    const handleConfigChange = (config: FillGapsChallengeConfig) => {\r\n        const updatedChallenge: FillGapsChallenge = {\r\n            ...challenge,\r\n            config\r\n        };\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight} spacing={2}>\r\n            <Grid item xs={10} className={classes.fullHeight}>\r\n                <FillGapsChallenger\r\n                    mode={ComponentMode.Design}\r\n                    challenge={challenge}\r\n                    onChallengeChange={handlerChallengeChange}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.fullHeight}>\r\n                <FillGapsConfigurator config={challenge.config} onConfigChange={handleConfigChange} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { Challenge } from '../../types/Challenge';\r\nimport { ChallengeType } from '../../enums/ChallengeType';\r\nimport { SelectAnswerChallengeDesigner } from '../SelectAnswerChallenge/SelectAnswerChallengeDesigner';\r\nimport { SelectAnswerChallenge } from '../../types/SelectAnswerChallenge';\r\nimport { TrueOrFalseChallengeDesigner } from '../TrueOrFalseChallenge/TrueOrFalseChallengeDesigner';\r\nimport { TrueOrFalseChallenge } from '../../types/TrueOrFalseChallenge';\r\nimport { ClassifyChallengeDesigner } from '../ClassifyChallenge/ClassifyChallengeDesigner';\r\nimport { ClassifyChallenge } from '../../types/ClassifyChallenge';\r\nimport { SortChallenge } from '../../types/SortChallenge';\r\nimport { SortChallengeDesigner } from '../SortChallenge/SortChallengeDesigner';\r\nimport { FillTableChallengeDesigner } from '../FillTableChallenge/FillTableChallengeDesigner';\r\nimport { FillTableChallenge } from '../../types/FillTableChallenge';\r\nimport { FillGapsChallengeDesigner } from '../FillGapsChallenge/FillGapsChallengeDesigner';\r\nimport { FillGapsChallenge } from '../../types/FillGapsChallenge';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\ninterface ChallengeDesignerProps {\r\n    challenge: Challenge;\r\n    onChallengeChange: (challenge: Challenge) => void\r\n}\r\n\r\nexport const ChallengeDesigner: React.FC<ChallengeDesignerProps> = (props: ChallengeDesignerProps) => {\r\n    const { challenge, onChallengeChange } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChallengeChange = (updatedChallenge: Challenge) => {\r\n        onChallengeChange(updatedChallenge);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight}>\r\n            <Grid item xs={12}>\r\n                {\r\n                    challenge?.type === ChallengeType.SelectAnswer\r\n                    && (\r\n                        <SelectAnswerChallengeDesigner\r\n                            challenge={challenge as SelectAnswerChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.TrueOrFalse\r\n                    && (\r\n                        <TrueOrFalseChallengeDesigner\r\n                            challenge={challenge as TrueOrFalseChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.FillGaps\r\n                    && (\r\n                        <FillGapsChallengeDesigner\r\n                            challenge={challenge as FillGapsChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Sort\r\n                    && (\r\n                        <SortChallengeDesigner\r\n                            challenge={challenge as SortChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Classify\r\n                    && (\r\n                        <ClassifyChallengeDesigner\r\n                            challenge={challenge as ClassifyChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.FillTable\r\n                    && (\r\n                        <FillTableChallengeDesigner\r\n                            challenge={challenge as FillTableChallenge}\r\n                            onChallengeChange={handleChallengeChange}\r\n                        />\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Grid, Icon, IconButton, ListItemIcon, makeStyles, Menu, MenuItem, Typography } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useProjects } from '../../hooks/useProjects';\r\nimport { Project } from '../../types/Project';\r\nimport { Test } from '../../types/Test';\r\nimport { ChallengeSelector } from './ChallengeSelector';\r\nimport { ChallengeDesigner } from './ChallengeDesigner';\r\nimport { Challenge } from '../../types/Challenge';\r\nimport { ChallengeType } from '../../enums/ChallengeType';\r\nimport { getChallengeTypeDescription, getChallengeTypeIcon, getDefaultChallenge } from '../../utils/utilChallenges';\r\nimport { colors } from '../../theme';\r\nimport { DialogConfirm } from '../common/DialogConfirm';\r\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    fullWidth: {\r\n        width: '100%'\r\n    },\r\n    listContainer: {\r\n        paddingRight: '10px',\r\n        height: '100%',\r\n        width: '100%',\r\n        overflow: 'hidden'\r\n    },\r\n    challengesContainer: {\r\n        height: 'calc(100% - 50px)',\r\n        width: '100%',\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        listStyle: 'none',\r\n        '&::-webkit-scrollbar': {\r\n            width: '0.2em'\r\n        },\r\n        '&::-webkit-scrollbar-track': {\r\n            boxShadow: 'inset 0 0 6px rgba(255,0,0,0.00)',\r\n            webkitBoxShadow: 'inset 0 0 6px rgba(255,0,0,0.00)'\r\n        },\r\n        '&::-webkit-scrollbar-thumb': {\r\n            backgroundColor: colors.primary.light,\r\n            outline: '1px solid slategrey'\r\n        }\r\n    },\r\n    challengeSelector: {\r\n        flexGrow: 1\r\n    }\r\n}));\r\n\r\ninterface TestDesignerProps {\r\n    projectId: string,\r\n    testId: string\r\n}\r\n\r\nexport const TestDesigner: React.FC<TestDesignerProps> = (props: TestDesignerProps) => {\r\n    const { projectId, testId } = props;\r\n\r\n    const { projects, setProjects } = useProjects();\r\n\r\n    const [test, setTest] = useState<Test>({\r\n        id: uuidv4(),\r\n        name: 'Nuevo cuestionario',\r\n        description: '',\r\n        language: Language.Es,\r\n        challenges: []\r\n    });\r\n\r\n    const [compactList, setCompactList] = useState<boolean>(false);\r\n    const [selectedChallenge, setSelectedChallenge] = useState<Challenge>();\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n    const [deletedChallenge, setDeletedChallenge] = useState<Challenge>();\r\n    const [openRemoveChallengeConfirm, setOpenRemoveChallengeConfirm] = useState<boolean>(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        const project = projects.find((aProject: Project) => aProject.id === projectId);\r\n        if (project != null) {\r\n            const test = project.tests.find((aTest: Test) => aTest.id === testId);\r\n            if (test != null) {\r\n                setTest(test);\r\n                if (test.challenges.length > 0) {\r\n                    if (selectedChallenge == null) {\r\n                        setSelectedChallenge(test.challenges[0]);\r\n                    } else {\r\n                        setSelectedChallenge({ ...selectedChallenge });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, [projects, projectId, testId]);\r\n\r\n    const handleSelectChallenge = (challenge: Challenge) => {\r\n        setSelectedChallenge(challenge);\r\n    };\r\n\r\n    const handleDeleteChallenge = (challenge: Challenge) => {\r\n        setDeletedChallenge(challenge);\r\n        setOpenRemoveChallengeConfirm(true);\r\n    };\r\n\r\n    const handleClickNewChallengeMenu = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleNewChallengeOptionClick = (type: ChallengeType) => {\r\n        const newChallenge: Challenge = getDefaultChallenge(type);\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return { ...aProject };\r\n            }\r\n            const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                if (aTest.id !== testId) {\r\n                    return { ...aTest };\r\n                }\r\n                return {\r\n                    ...aTest,\r\n                    challenges: [...aTest.challenges, newChallenge]\r\n                };\r\n            });\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        setSelectedChallenge(newChallenge);\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleCloseNewChallengeMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleChallengeChange = (updatedChallenge: Challenge) => {\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return aProject;\r\n            }\r\n            const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                if (aTest.id !== testId) {\r\n                    return { ...aTest };\r\n                }\r\n                const updatedChallenges = aTest.challenges.map((aChallenge: Challenge) => {\r\n                    if (aChallenge.id !== updatedChallenge.id) {\r\n                        return { ...aChallenge };\r\n                    }\r\n                    return { ...updatedChallenge };\r\n                });\r\n                return {\r\n                    ...aTest,\r\n                    challenges: [...updatedChallenges]\r\n                };\r\n            });\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        setSelectedChallenge({ ...updatedChallenge });\r\n    };\r\n\r\n    const handleConfirmRemoveChallenge = () => {\r\n        const updatedProjects = projects.map((aProject: Project) => {\r\n            if (aProject.id !== projectId) {\r\n                return aProject;\r\n            }\r\n            const updatedTests = aProject.tests.map((aTest: Test) => {\r\n                if (aTest.id !== testId) {\r\n                    return aTest;\r\n                }\r\n                const updatedChallenges = aTest.challenges.filter((\r\n                    aChallenge: Challenge\r\n                ) => aChallenge.id !== deletedChallenge?.id);\r\n                return {\r\n                    ...aTest,\r\n                    challenges: [...updatedChallenges]\r\n                };\r\n            });\r\n            return {\r\n                ...aProject,\r\n                tests: [...updatedTests]\r\n            };\r\n        });\r\n        setProjects(updatedProjects);\r\n        setOpenRemoveChallengeConfirm(false);\r\n    };\r\n\r\n    const handleRefuseRemoveChallenge = () => {\r\n        setOpenRemoveChallengeConfirm(false);\r\n    };\r\n\r\n    const handleListModeChange = (event: React.MouseEvent<HTMLElement>, newListMode: boolean) => {\r\n        setCompactList(newListMode);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <DialogConfirm\r\n                open={openRemoveChallengeConfirm}\r\n                text='¿Seguro que deseas eliminar la pregunta?'\r\n                width='xs'\r\n                onConfirm={handleConfirmRemoveChallenge}\r\n                onRefuse={handleRefuseRemoveChallenge}\r\n            />\r\n            <Grid container className={classes.fullHeight} spacing={2}>\r\n                <Grid item xs={2} className={classes.listContainer}>\r\n                    <Grid container direction='column' className={classes.fullHeight}>\r\n                        <Grid item className={classes.fullWidth}>\r\n                            <Grid container justify='space-between' alignItems='center'>\r\n                                <Grid item>\r\n                                    <Typography variant='h5'>Preguntas</Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Grid container justify='flex-end' alignItems='center'>\r\n                                        <Grid item>\r\n                                            <ToggleButtonGroup size=\"small\" value={compactList} exclusive onChange={handleListModeChange}>\r\n                                                <ToggleButton value={false}>\r\n                                                    <Icon>crop_din</Icon>\r\n                                                </ToggleButton>\r\n                                                <ToggleButton value={true}>\r\n                                                    <Icon>reorder</Icon>\r\n                                                </ToggleButton>\r\n                                            </ToggleButtonGroup>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <IconButton onClick={handleClickNewChallengeMenu}>\r\n                                                <Icon color='primary'>add_circle</Icon>\r\n                                            </IconButton>\r\n                                            <Menu\r\n                                                id='new-challenge-menu'\r\n                                                anchorEl={anchorEl}\r\n                                                keepMounted\r\n                                                open={Boolean(anchorEl)}\r\n                                                onClose={handleCloseNewChallengeMenu}\r\n                                            >\r\n                                                <MenuItem onClick={() => {\r\n                                                    handleNewChallengeOptionClick(ChallengeType.SelectAnswer);\r\n                                                }}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.SelectAnswer, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.SelectAnswer)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => {\r\n                                                    handleNewChallengeOptionClick(ChallengeType.TrueOrFalse);\r\n                                                }}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.TrueOrFalse, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.TrueOrFalse)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => {\r\n                                                    handleNewChallengeOptionClick(ChallengeType.FillGaps);\r\n                                                }}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.FillGaps, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.FillGaps)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem disabled onClick={handleCloseNewChallengeMenu}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.Match, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.Match)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem disabled onClick={handleCloseNewChallengeMenu}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.Sort, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.Sort)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => {\r\n                                                    handleNewChallengeOptionClick(ChallengeType.Classify);\r\n                                                }}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.Classify, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.Classify)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => {\r\n                                                    handleNewChallengeOptionClick(ChallengeType.FillTable);\r\n                                                }}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.FillTable, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.FillTable)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem disabled onClick={handleCloseNewChallengeMenu}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.TheOddOne, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.TheOddOne)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                                <MenuItem disabled onClick={handleCloseNewChallengeMenu}>\r\n                                                    <ListItemIcon>{getChallengeTypeIcon(ChallengeType.Crossword, 'large')}</ListItemIcon>\r\n                                                    <Typography variant='button'>\r\n                                                        {getChallengeTypeDescription(ChallengeType.Crossword)}\r\n                                                    </Typography>\r\n                                                </MenuItem>\r\n                                            </Menu>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item className={classes.challengesContainer}>\r\n                            <ChallengeSelector\r\n                                challenges={test.challenges}\r\n                                compactList={compactList}\r\n                                selected={selectedChallenge}\r\n                                onSelect={handleSelectChallenge}\r\n                                onDelete={handleDeleteChallenge}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={10}>\r\n                    {\r\n                        selectedChallenge && (\r\n                            <ChallengeDesigner\r\n                                challenge={selectedChallenge}\r\n                                onChallengeChange={handleChallengeChange}\r\n                            />\r\n                        )\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { useParams } from \"react-router\";\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { TestDesigner } from '../../components/Designer/TestDesigner';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\nexport const Designer = () => {\r\n    const { projectId, testId } = useParams() as any;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n            className={classes.fullHeight}\r\n        >\r\n            <Grid item xs={12} className={classes.fullHeight}>\r\n                <TestDesigner\r\n                    projectId={projectId}\r\n                    testId={testId}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\nimport { ComponentMode } from '../../enums/ComponentMode';\r\nimport { Challenge, ChallengeOptions } from '../../types/Challenge';\r\nimport { ChallengeType } from '../../enums/ChallengeType';\r\nimport { SelectAnswerChallenger } from '../SelectAnswerChallenge/SelectAnswerChallenger';\r\nimport { SelectAnswerChallenge } from '../../types/SelectAnswerChallenge';\r\nimport { TrueOrFalseChallenge } from '../../types/TrueOrFalseChallenge';\r\nimport { TrueOrFalseChallenger } from '../TrueOrFalseChallenge/TrueOrFalseChallenger';\r\nimport { ClassifyChallenger } from '../ClassifyChallenge/ClassifyChallenger';\r\nimport { ClassifyChallenge } from '../../types/ClassifyChallenge';\r\nimport { FillTableChallenger } from '../FillTableChallenge/FillTableChallenger';\r\nimport { FillTableChallenge } from '../../types/FillTableChallenge';\r\nimport { FillGapsChallenger } from '../FillGapsChallenge/FillGapsChallenger';\r\nimport { FillGapsChallenge } from '../../types/FillGapsChallenge';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\ninterface ChallengeEvaluatorProps {\r\n    challenge: Challenge\r\n    options: ChallengeOptions\r\n    onSuccess?: () => void\r\n    onError?: () => void\r\n}\r\n\r\nexport const ChallengeEvaluator: React.FC<ChallengeEvaluatorProps> = (props: ChallengeEvaluatorProps) => {\r\n    const { challenge, options, onSuccess, onError } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const handlerSucessChallenge = () => {\r\n        if (onSuccess) {\r\n            onSuccess();\r\n        }\r\n    };\r\n\r\n    const handlerErrorChallenge = () => {\r\n        if (onError) {\r\n            onError();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.fullHeight}>\r\n            <Grid item xs={12}>\r\n                {\r\n                    challenge?.type === ChallengeType.SelectAnswer\r\n                    && (\r\n                        <SelectAnswerChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as SelectAnswerChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.TrueOrFalse\r\n                    && (\r\n                        <TrueOrFalseChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as TrueOrFalseChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.FillGaps\r\n                    && (\r\n                        <FillGapsChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as FillGapsChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.Classify\r\n                    && (\r\n                        <ClassifyChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as ClassifyChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    challenge?.type === ChallengeType.FillTable\r\n                    && (\r\n                        <FillTableChallenger\r\n                            mode={ComponentMode.Play}\r\n                            challenge={challenge as FillTableChallenge}\r\n                            options={options}\r\n                            onSuccess={handlerSucessChallenge}\r\n                            onError={handlerErrorChallenge}\r\n                        />\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import { Divider, Grid, LinearProgress, makeStyles, Typography } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { ChallengeType } from '../../enums/ChallengeType';\r\nimport { Language } from '../../enums/Language';\r\nimport { getChallengeTypeDescription } from '../../utils/utilChallenges';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: 'solid 1px',\r\n        backgroundColor: theme.palette.primary.light,\r\n    }\r\n}));\r\n\r\ninterface ChallengeLauncherProps {\r\n    challengeType: ChallengeType,\r\n    challengeNumber: number,\r\n    challengeTotalCount: number,\r\n    language: Language,\r\n    delay: number,\r\n    onEnd: () => void\r\n}\r\n\r\nexport const ChallengeLauncher: React.FC<ChallengeLauncherProps> = (props: ChallengeLauncherProps) => {\r\n    const { challengeType, challengeNumber, challengeTotalCount, language, delay, onEnd } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => { onEnd(); }, delay * 1000);\r\n    }, []);\r\n\r\n    return (\r\n        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={2} className={classes.root}>\r\n            <Grid item>\r\n                <Typography variant=\"h2\">\r\n                    {\r\n                        getChallengeTypeDescription(challengeType, language)\r\n                    }\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item style={{width: '100%'}}>\r\n                <LinearProgress color=\"secondary\" />\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant=\"h4\">\r\n                    {\r\n                        language === Language.En ? (\r\n                            `Question ${challengeNumber.toString()} of ${challengeTotalCount.toString()}`\r\n                        ) : (\r\n                            `Pregunta ${challengeNumber.toString()} de ${challengeTotalCount.toString()}`\r\n                        )\r\n                    }\r\n                </Typography>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Button, Grid, Icon, makeStyles, Typography } from '@material-ui/core';\r\nimport { Test } from '../../types/Test';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100%',\r\n        border: 'solid 1px'\r\n    },\r\n    timeline: {\r\n        transform: 'rotate(-90deg)'\r\n    },\r\n    timelineContentContainer: {\r\n        textAlign: 'left',\r\n        padding: '0px'\r\n    },\r\n    timelineContent: {\r\n        transform: 'rotate(90deg)',\r\n        padding: '0px 5px'\r\n    },\r\n    timelineIcon: {\r\n        transform: 'rotate(90deg)'\r\n    }\r\n}));\r\n\r\ninterface TestResultProps {\r\n    test: Test,\r\n    results: boolean[],\r\n    onBackHome: () => void,\r\n    onRepeatTest: () => void\r\n}\r\n\r\nexport const TestResult: React.FC<TestResultProps> = (props: TestResultProps) => {\r\n    const { test, results, onBackHome, onRepeatTest } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container\r\n            direction=\"column\"\r\n            className={classes.root}\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={4}\r\n        >\r\n            <Grid item>\r\n                <Typography variant=\"h2\">\r\n                    {test.name}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant=\"h3\">\r\n                    {test.description}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant=\"h4\">\r\n                    {\r\n                        `${test.language === Language.En ? 'Correct answers' : 'Respuestas correctas'}: ${results.filter((aResult: boolean) => aResult).length}/${results.length}`\r\n                    }\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item container justify=\"center\" alignItems=\"center\" spacing={4}>\r\n                <Grid item>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onBackHome}>\r\n                        <Icon>navigate_before</Icon>\r\n                        &nbsp;\r\n                        { test.language === Language.En ? 'Go back to home' : 'Volver a la pantalla principal' }\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onRepeatTest}>\r\n                        <Icon>replay</Icon>\r\n                        &nbsp;\r\n                        { test.language === Language.En ? 'repeat test' : 'Repetir cuestionario' }\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Fab, Grid, Icon, makeStyles } from '@material-ui/core';\r\nimport { Test, TestOptions } from '../../types/Test';\r\nimport { useProjects } from '../../hooks/useProjects';\r\nimport { Project } from '../../types/Project';\r\nimport { ChallengeEvaluator } from '../../components/Evaluator/ChallengeEvaluator';\r\nimport { ChallengeLauncher } from '../../components/Evaluator/ChallengeLauncher';\r\nimport { TestResult } from '../../components/Evaluator/TestResult';\r\nimport { parseQueryString } from '../../utils/utilStrings';\r\nimport { Language } from '../../enums/Language';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fullHeight: {\r\n        height: '100%'\r\n    },\r\n    centerAll: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\ninterface IParams {\r\n    projectId: string,\r\n    testId: string\r\n}\r\n\r\ninterface ChallengeState {\r\n    idx: number,\r\n    launching: boolean\r\n}\r\n\r\nexport const Evaluator: React.FC = () => {\r\n    const { projectId, testId } = useParams() as IParams;\r\n    const history = useHistory();\r\n\r\n    const { projects } = useProjects();\r\n    const [testOptions] = useState<TestOptions>(parseQueryString(history.location.search));\r\n    const [test, setTest] = useState<Test>();\r\n    const [currentChallengeState, setCurrentChallengeState] = useState<ChallengeState>({idx: -1, launching: false});\r\n    const [results, setResults] = useState<boolean[]>([]);\r\n    const [showResult, setShowResult] = useState<boolean>(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (projectId != null && testId != null) {\r\n            const theProject: Project = projects.find((aProject: Project) => aProject.id === projectId);\r\n            if (theProject != null) {\r\n                const theTest: Test | undefined = theProject.tests.find((aTest: Test) => aTest.id === testId);\r\n                if (theTest != null) {\r\n                    setTest(theTest);\r\n                    setCurrentChallengeState({idx: 0, launching: true});\r\n                }\r\n            }\r\n        }\r\n    }, [projectId, testId]);\r\n\r\n    const next = () => {\r\n        if (test != null) {\r\n            if (currentChallengeState.launching) {\r\n                setCurrentChallengeState({\r\n                    ...currentChallengeState,\r\n                    launching: false\r\n                });\r\n            } else {\r\n                if (currentChallengeState.idx < test.challenges.length - 1) {\r\n                    setCurrentChallengeState({\r\n                        idx: currentChallengeState.idx + 1,\r\n                        launching: true\r\n                    });\r\n                } else {\r\n                    setCurrentChallengeState({\r\n                        idx: -1,\r\n                        launching: false\r\n                    });\r\n                    setShowResult(true);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleResponse = (success: boolean) => {\r\n        setResults([...results, success]);\r\n        if (testOptions.autoNext) {\r\n            next();\r\n        }\r\n    };\r\n\r\n    const handleBackHome = () => {\r\n        history.push('/');\r\n    };\r\n\r\n    const handleRepeatTest = () => {\r\n        setCurrentChallengeState({idx: 0, launching: true});\r\n        setResults([]);\r\n        setShowResult(false);\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n            className={classes.fullHeight}\r\n        >\r\n            <Grid item xs={2}></Grid>\r\n            <Grid item xs={8} className={classes.fullHeight}>\r\n                {\r\n                    test != null && currentChallengeState.launching && currentChallengeState.idx >= 0 && (\r\n                        <ChallengeLauncher\r\n                            challengeType={test.challenges[currentChallengeState.idx].type}\r\n                            challengeNumber={currentChallengeState.idx + 1}\r\n                            challengeTotalCount={test.challenges.length}\r\n                            language={test.language}\r\n                            delay={3}\r\n                            onEnd={next}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    test != null && !currentChallengeState.launching && currentChallengeState.idx >= 0 && (\r\n                        <ChallengeEvaluator\r\n                            challenge={test.challenges[currentChallengeState.idx]}\r\n                            options={{\r\n                                language: test.language,\r\n                                ignoreTimeLimit: testOptions.ignoreTimeLimit\r\n                            }}\r\n                            onSuccess={() => { handleResponse(true); }}\r\n                            onError={() => { handleResponse(false); }}\r\n                        />\r\n                    )\r\n                }\r\n                {\r\n                    test != null && showResult && (\r\n                        <TestResult\r\n                            test={test}\r\n                            results={results}\r\n                            onBackHome={handleBackHome}\r\n                            onRepeatTest={handleRepeatTest}\r\n                        />\r\n                    )\r\n                }\r\n            </Grid>\r\n            <Grid item xs={2} className={`${classes.fullHeight} ${classes.centerAll}`}>\r\n                {\r\n                    !testOptions.autoNext\r\n                    && currentChallengeState.idx === results.length - 1\r\n                    && (\r\n                        <Fab\r\n                            variant=\"extended\"\r\n                            size=\"large\"\r\n                            color=\"primary\"\r\n                            onClick={next}\r\n                        >\r\n                            {test?.language === Language.En ? 'Next' : 'Siguiente'}&nbsp;<Icon>navigate_next</Icon>\r\n                        </Fab>\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\r\nimport { ProjectContextProvider } from './context/ProjectContext';\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route\r\n} from \"react-router-dom\";\r\nimport { theme } from \"./theme\";\r\nimport { MainHeader } from \"./components/common/MainHeader\";\r\nimport { Home } from \"./views/Home\";\r\nimport { Designer } from \"./views/Designer\";\r\nimport { Evaluator } from \"./views/Evaluator\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    mainContainer: {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    headerContainer: {\r\n        width: '100%',\r\n        height: '75px'\r\n    },\r\n    content: {\r\n        margin: '30px',\r\n        height: 'calc(100% - 135px)'\r\n    }\r\n}));\r\n\r\nexport default function App() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Router>\r\n            <ThemeProvider theme={theme}>\r\n                <ProjectContextProvider>\r\n                    <div className={classes.mainContainer}>\r\n                        <div className={classes.headerContainer}>\r\n                            <MainHeader></MainHeader>\r\n                        </div>\r\n                        <div className={classes.content}>\r\n                            <Switch>\r\n                                <Route exact path=\"/\">\r\n                                    <Home />\r\n                                </Route>\r\n                                <Route path=\"/designer/:projectId/:testId\">\r\n                                    <Designer />\r\n                                </Route>\r\n                                <Route path=\"/play/:projectId/:testId\">\r\n                                    <Evaluator />\r\n                                </Route>\r\n                            </Switch>\r\n                        </div>\r\n                    </div>\r\n                </ProjectContextProvider>\r\n            </ThemeProvider>\r\n        </Router >\r\n    );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}